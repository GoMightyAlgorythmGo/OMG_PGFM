{"version":3,"file":"611.fd6b022a98be1c615e7d.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/NodeGraphSettings.tsx","webpack://grafana/./public/app/core/components/TraceToLogs/KeyValueInput.tsx","webpack://grafana/./public/app/core/components/TraceToLogs/TraceToLogsSettings.tsx","webpack://grafana/./public/app/core/components/TraceToMetrics/TraceToMetricsSettings.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React from 'react';\n\nimport {\n  DataSourceJsonData,\n  DataSourcePluginOptionsEditorProps,\n  GrafanaTheme,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport { InlineField, InlineFieldRow, InlineSwitch, useStyles } from '@grafana/ui';\n\nexport interface NodeGraphOptions {\n  enabled?: boolean;\n}\n\nexport interface NodeGraphData extends DataSourceJsonData {\n  nodeGraph?: NodeGraphOptions;\n}\n\ninterface Props extends DataSourcePluginOptionsEditorProps<NodeGraphData> {}\n\nexport function NodeGraphSettings({ options, onOptionsChange }: Props) {\n  const styles = useStyles(getStyles);\n\n  return (\n    <div className={styles.container}>\n      <h3 className=\"page-heading\">Node Graph</h3>\n      <InlineFieldRow className={styles.row}>\n        <InlineField\n          tooltip=\"Enables the Node Graph visualization in the trace viewer.\"\n          label=\"Enable Node Graph\"\n          labelWidth={26}\n        >\n          <InlineSwitch\n            id=\"enableNodeGraph\"\n            value={options.jsonData.nodeGraph?.enabled}\n            onChange={(event: React.SyntheticEvent<HTMLInputElement>) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'nodeGraph', {\n                ...options.jsonData.nodeGraph,\n                enabled: event.currentTarget.checked,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  container: css`\n    label: container;\n    width: 100%;\n  `,\n  row: css`\n    label: row;\n    align-items: baseline;\n  `,\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme, KeyValue } from '@grafana/data';\nimport { SegmentInput, useStyles, InlineLabel, Icon } from '@grafana/ui';\n\nconst EQ_WIDTH = 3; // = 24px in inline label\n\ninterface Props {\n  values: Array<KeyValue<string>>;\n  onChange: (values: Array<KeyValue<string>>) => void;\n  id?: string;\n  keyPlaceholder?: string;\n  valuePlaceholder?: string;\n}\n\nconst KeyValueInput = ({\n  values,\n  onChange,\n  id,\n  keyPlaceholder = 'Key',\n  valuePlaceholder = 'Value (optional)',\n}: Props) => {\n  const styles = useStyles(getStyles);\n\n  return (\n    <div className={styles.wrapper}>\n      {values.length ? (\n        values.map((value, idx) => (\n          <div className={styles.pair} key={idx}>\n            <SegmentInput\n              id={`${id}-key-${idx}`}\n              placeholder={keyPlaceholder}\n              value={value.key}\n              onChange={(e) => {\n                onChange(\n                  values.map((v, i) => {\n                    if (i === idx) {\n                      v.key = String(e);\n                    }\n                    return v;\n                  })\n                );\n              }}\n            />\n            <InlineLabel aria-label=\"equals\" className={styles.operator} width={EQ_WIDTH}>\n              =\n            </InlineLabel>\n            <SegmentInput\n              id={`${id}-value-${idx}`}\n              placeholder={valuePlaceholder}\n              value={value.value}\n              onChange={(e) => {\n                onChange(\n                  values.map((v, i) => {\n                    if (i === idx) {\n                      v.value = String(e);\n                    }\n                    return v;\n                  })\n                );\n              }}\n            />\n            <button\n              onClick={() => onChange([...values.slice(0, idx), ...values.slice(idx + 1)])}\n              className=\"gf-form-label query-part\"\n              aria-label=\"Remove tag\"\n              type=\"button\"\n            >\n              <Icon name=\"times\" />\n            </button>\n            {idx === values.length - 1 ? (\n              <button\n                onClick={() => onChange([...values, { key: '', value: '' }])}\n                className=\"gf-form-label query-part\"\n                aria-label=\"Add tag\"\n                type=\"button\"\n              >\n                <Icon name=\"plus\" />\n              </button>\n            ) : null}\n          </div>\n        ))\n      ) : (\n        <button\n          onClick={() => onChange([...values, { key: '', value: '' }])}\n          className=\"gf-form-label query-part\"\n          aria-label=\"Add tag\"\n          type=\"button\"\n        >\n          <Icon name=\"plus\" />\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default KeyValueInput;\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  wrapper: css`\n    display: flex;\n    flex-direction: column;\n    gap: ${theme.spacing.xs} 0;\n  `,\n  pair: css`\n    display: flex;\n    justify-content: start;\n    align-items: center;\n  `,\n  operator: css`\n    color: ${theme.palette.orange};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport {\n  DataSourceJsonData,\n  DataSourceInstanceSettings,\n  DataSourcePluginOptionsEditorProps,\n  GrafanaTheme,\n  KeyValue,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { InlineField, InlineFieldRow, Input, TagsInput, useStyles, InlineSwitch } from '@grafana/ui';\n\nimport KeyValueInput from './KeyValueInput';\n\nexport interface TraceToLogsOptions {\n  datasourceUid?: string;\n  tags?: string[];\n  mappedTags?: Array<KeyValue<string>>;\n  mapTagNamesEnabled?: boolean;\n  spanStartTimeShift?: string;\n  spanEndTimeShift?: string;\n  filterByTraceID?: boolean;\n  filterBySpanID?: boolean;\n  lokiSearch?: boolean; // legacy\n}\n\nexport interface TraceToLogsData extends DataSourceJsonData {\n  tracesToLogs?: TraceToLogsOptions;\n}\n\ninterface Props extends DataSourcePluginOptionsEditorProps<TraceToLogsData> {}\n\nexport function TraceToLogsSettings({ options, onOptionsChange }: Props) {\n  const styles = useStyles(getStyles);\n\n  return (\n    <div className={css({ width: '100%' })}>\n      <h3 className=\"page-heading\">Trace to logs</h3>\n\n      <div className={styles.infoText}>\n        Trace to logs lets you navigate from a trace span to the selected data source&apos;s logs.\n      </div>\n\n      <InlineFieldRow>\n        <InlineField tooltip=\"The data source the trace is going to navigate to\" label=\"Data source\" labelWidth={26}>\n          <DataSourcePicker\n            inputId=\"trace-to-logs-data-source-picker\"\n            filter={(ds) => {\n              // Trace to logs only supports loki and splunk at the moment\n              return ds.type === 'loki' || ds.type === 'grafana-splunk-datasource';\n            }}\n            current={options.jsonData.tracesToLogs?.datasourceUid}\n            noDefault={true}\n            width={40}\n            onChange={(ds: DataSourceInstanceSettings) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                ...options.jsonData.tracesToLogs,\n                datasourceUid: ds.uid,\n                tags: options.jsonData.tracesToLogs?.tags,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      {options.jsonData.tracesToLogs?.mapTagNamesEnabled ? (\n        <InlineFieldRow>\n          <InlineField\n            tooltip=\"Tags that will be used in the Loki query. Default tags: 'cluster', 'hostname', 'namespace', 'pod'\"\n            label=\"Tags\"\n            labelWidth={26}\n          >\n            <KeyValueInput\n              keyPlaceholder=\"Tag\"\n              values={\n                options.jsonData.tracesToLogs?.mappedTags ??\n                options.jsonData.tracesToLogs?.tags?.map((tag) => ({ key: tag })) ??\n                []\n              }\n              onChange={(v) =>\n                updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                  ...options.jsonData.tracesToLogs,\n                  mappedTags: v,\n                })\n              }\n            />\n          </InlineField>\n        </InlineFieldRow>\n      ) : (\n        <InlineFieldRow>\n          <InlineField\n            tooltip=\"Tags that will be used in the Loki query. Default tags: 'cluster', 'hostname', 'namespace', 'pod'\"\n            label=\"Tags\"\n            labelWidth={26}\n          >\n            <TagsInput\n              tags={options.jsonData.tracesToLogs?.tags}\n              width={40}\n              onChange={(tags) =>\n                updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                  ...options.jsonData.tracesToLogs,\n                  tags: tags,\n                })\n              }\n            />\n          </InlineField>\n        </InlineFieldRow>\n      )}\n\n      <InlineFieldRow>\n        <InlineField\n          label=\"Map tag names\"\n          labelWidth={26}\n          grow\n          tooltip=\"Map trace tag names to log label names. Ex: k8s.pod.name -> pod\"\n        >\n          <InlineSwitch\n            id=\"mapTagNames\"\n            value={options.jsonData.tracesToLogs?.mapTagNamesEnabled ?? false}\n            onChange={(event: React.SyntheticEvent<HTMLInputElement>) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                ...options.jsonData.tracesToLogs,\n                mapTagNamesEnabled: event.currentTarget.checked,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <InlineField\n          label=\"Span start time shift\"\n          labelWidth={26}\n          grow\n          tooltip=\"Shifts the start time of the span. Default 0 (Time units can be used here, for example: 5s, 1m, 3h)\"\n        >\n          <Input\n            type=\"text\"\n            placeholder=\"1h\"\n            width={40}\n            onChange={(v) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                ...options.jsonData.tracesToLogs,\n                spanStartTimeShift: v.currentTarget.value,\n              })\n            }\n            value={options.jsonData.tracesToLogs?.spanStartTimeShift || ''}\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <InlineField\n          label=\"Span end time shift\"\n          labelWidth={26}\n          grow\n          tooltip=\"Shifts the end time of the span. Default 0 Time units can be used here, for example: 5s, 1m, 3h\"\n        >\n          <Input\n            type=\"text\"\n            placeholder=\"1h\"\n            width={40}\n            onChange={(v) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                ...options.jsonData.tracesToLogs,\n                spanEndTimeShift: v.currentTarget.value,\n              })\n            }\n            value={options.jsonData.tracesToLogs?.spanEndTimeShift || ''}\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <InlineField\n          label=\"Filter by Trace ID\"\n          labelWidth={26}\n          grow\n          tooltip=\"Filters logs by Trace ID. Appends '|=<trace id>' to the query.\"\n        >\n          <InlineSwitch\n            id=\"filterByTraceID\"\n            value={options.jsonData.tracesToLogs?.filterByTraceID}\n            onChange={(event: React.SyntheticEvent<HTMLInputElement>) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                ...options.jsonData.tracesToLogs,\n                filterByTraceID: event.currentTarget.checked,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <InlineField\n          label=\"Filter by Span ID\"\n          labelWidth={26}\n          grow\n          tooltip=\"Filters logs by Span ID. Appends '|=<span id>' to the query.\"\n        >\n          <InlineSwitch\n            id=\"filterBySpanID\"\n            value={options.jsonData.tracesToLogs?.filterBySpanID}\n            onChange={(event: React.SyntheticEvent<HTMLInputElement>) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                ...options.jsonData.tracesToLogs,\n                filterBySpanID: event.currentTarget.checked,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  infoText: css`\n    padding-bottom: ${theme.spacing.md};\n    color: ${theme.colors.textSemiWeak};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport {\n  DataSourceJsonData,\n  DataSourcePluginOptionsEditorProps,\n  GrafanaTheme,\n  KeyValue,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { Button, InlineField, InlineFieldRow, Input, useStyles } from '@grafana/ui';\n\nimport KeyValueInput from '../TraceToLogs/KeyValueInput';\n\nexport interface TraceToMetricsOptions {\n  datasourceUid?: string;\n  tags?: Array<KeyValue<string>>;\n  queries: TraceToMetricQuery[];\n}\n\nexport interface TraceToMetricQuery {\n  name?: string;\n  query?: string;\n}\n\nexport interface TraceToMetricsData extends DataSourceJsonData {\n  tracesToMetrics?: TraceToMetricsOptions;\n}\n\ninterface Props extends DataSourcePluginOptionsEditorProps<TraceToMetricsData> {}\n\nexport function TraceToMetricsSettings({ options, onOptionsChange }: Props) {\n  const styles = useStyles(getStyles);\n\n  return (\n    <div className={css({ width: '100%' })}>\n      <h3 className=\"page-heading\">Trace to metrics</h3>\n\n      <div className={styles.infoText}>\n        Trace to metrics lets you navigate from a trace span to the selected data source.\n      </div>\n\n      <InlineFieldRow className={styles.row}>\n        <InlineField tooltip=\"The data source the trace is going to navigate to\" label=\"Data source\" labelWidth={26}>\n          <DataSourcePicker\n            inputId=\"trace-to-metrics-data-source-picker\"\n            pluginId=\"prometheus\"\n            current={options.jsonData.tracesToMetrics?.datasourceUid}\n            noDefault={true}\n            width={40}\n            onChange={(ds) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n                ...options.jsonData.tracesToMetrics,\n                datasourceUid: ds.uid,\n              })\n            }\n          />\n        </InlineField>\n        {options.jsonData.tracesToMetrics?.datasourceUid ? (\n          <Button\n            type=\"button\"\n            variant=\"secondary\"\n            size=\"sm\"\n            fill=\"text\"\n            onClick={() => {\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n                ...options.jsonData.tracesToMetrics,\n                datasourceUid: undefined,\n              });\n            }}\n          >\n            Clear\n          </Button>\n        ) : null}\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <InlineField tooltip=\"Tags that will be used in the metrics query.\" label=\"Tags\" labelWidth={26}>\n          <KeyValueInput\n            keyPlaceholder=\"Tag\"\n            values={options.jsonData.tracesToMetrics?.tags ?? []}\n            onChange={(v) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n                ...options.jsonData.tracesToMetrics,\n                tags: v,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      {options.jsonData.tracesToMetrics?.queries?.map((query, i) => (\n        <div key={i} className={styles.queryRow}>\n          <InlineField label=\"Link Label\" labelWidth={10}>\n            <Input\n              label=\"Link Label\"\n              type=\"text\"\n              allowFullScreen\n              value={query.name}\n              onChange={(e) => {\n                let newQueries = options.jsonData.tracesToMetrics?.queries.slice() ?? [];\n                newQueries[i].name = e.currentTarget.value;\n                updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n                  ...options.jsonData.tracesToMetrics,\n                  queries: newQueries,\n                });\n              }}\n            />\n          </InlineField>\n          <InlineField\n            label=\"Query\"\n            labelWidth={10}\n            tooltip=\"The Prometheus query that will run when navigating from a trace to metrics. Interpolate tags using the `$__tags` keyword.\"\n            grow\n          >\n            <Input\n              label=\"Query\"\n              type=\"text\"\n              allowFullScreen\n              value={query.query}\n              onChange={(e) => {\n                let newQueries = options.jsonData.tracesToMetrics?.queries.slice() ?? [];\n                newQueries[i].query = e.currentTarget.value;\n                updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n                  ...options.jsonData.tracesToMetrics,\n                  queries: newQueries,\n                });\n              }}\n            />\n          </InlineField>\n\n          <Button\n            variant=\"destructive\"\n            title=\"Remove query\"\n            icon=\"times\"\n            type=\"button\"\n            onClick={() => {\n              let newQueries = options.jsonData.tracesToMetrics?.queries.slice();\n              newQueries?.splice(i, 1);\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n                ...options.jsonData.tracesToMetrics,\n                queries: newQueries,\n              });\n            }}\n          />\n        </div>\n      ))}\n\n      <Button\n        variant=\"secondary\"\n        title=\"Add query\"\n        icon=\"plus\"\n        type=\"button\"\n        onClick={() => {\n          updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n            ...options.jsonData.tracesToMetrics,\n            queries: [...(options.jsonData.tracesToMetrics?.queries ?? []), { query: '' }],\n          });\n        }}\n      >\n        Add query\n      </Button>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  infoText: css`\n    padding-bottom: ${theme.spacing.md};\n    color: ${theme.colors.textSemiWeak};\n  `,\n  row: css`\n    label: row;\n    align-items: baseline;\n  `,\n  queryRow: css`\n    display: flex;\n  `,\n});\n"],"names":["NodeGraphSettings","options","onOptionsChange","styles","useStyles","getStyles","className","container","row","tooltip","label","labelWidth","id","value","jsonData","nodeGraph","enabled","onChange","event","updateDatasourcePluginJsonDataOption","currentTarget","checked","theme","css","values","keyPlaceholder","valuePlaceholder","wrapper","length","map","idx","pair","placeholder","key","e","v","i","String","operator","width","onClick","slice","type","name","spacing","xs","palette","orange","TraceToLogsSettings","infoText","inputId","filter","ds","current","tracesToLogs","datasourceUid","noDefault","uid","tags","mapTagNamesEnabled","mappedTags","tag","grow","I","spanStartTimeShift","spanEndTimeShift","filterByTraceID","filterBySpanID","md","colors","textSemiWeak","TraceToMetricsSettings","pluginId","tracesToMetrics","variant","size","fill","undefined","queries","query","queryRow","allowFullScreen","newQueries","title","icon","splice"],"sourceRoot":""}