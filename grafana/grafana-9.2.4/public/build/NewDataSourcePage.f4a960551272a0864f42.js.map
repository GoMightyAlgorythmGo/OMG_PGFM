{"version":3,"file":"NewDataSourcePage.f4a960551272a0864f42.js","mappings":"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","sources":["webpack://grafana/./public/app/features/plugins/components/PluginsErrorsInfo.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceTypeCard.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceTypeCardList.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceCategories.tsx","webpack://grafana/./public/app/features/datasources/components/NewDataSource.tsx","webpack://grafana/./public/app/features/datasources/pages/NewDataSourcePage.tsx","webpack://grafana/./public/app/features/datasources/state/contexts.ts","webpack://grafana/./public/app/features/datasources/state/hooks.ts","webpack://grafana/./public/app/features/plugins/admin/state/selectors.ts","webpack://grafana/./public/app/features/plugins/admin/state/hooks.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { PluginErrorCode, PluginSignatureStatus } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { HorizontalGroup, InfoBox, List, PluginSignatureBadge, useTheme } from '@grafana/ui';\n\nimport { useGetErrors, useFetchStatus } from '../admin/state/hooks';\n\nexport function PluginsErrorsInfo(): React.ReactElement | null {\n  const errors = useGetErrors();\n  const { isLoading } = useFetchStatus();\n  const theme = useTheme();\n\n  if (isLoading || errors.length === 0) {\n    return null;\n  }\n\n  return (\n    <InfoBox\n      aria-label={selectors.pages.PluginsList.signatureErrorNotice}\n      severity=\"warning\"\n      urlTitle=\"Read more about plugin signing\"\n      url=\"https://grafana.com/docs/grafana/latest/plugins/plugin-signatures/\"\n    >\n      <div>\n        <p>\n          Unsigned plugins were found during plugin initialization. Grafana Labs cannot guarantee the integrity of these\n          plugins. We recommend only using signed plugins.\n        </p>\n        The following plugins are disabled and not shown in the list below:\n        <List\n          items={errors}\n          className={css`\n            list-style-type: circle;\n          `}\n          renderItem={(error) => (\n            <div\n              className={css`\n                margin-top: ${theme.spacing.sm};\n              `}\n            >\n              <HorizontalGroup spacing=\"sm\" justify=\"flex-start\" align=\"center\">\n                <strong>{error.pluginId}</strong>\n                <PluginSignatureBadge\n                  status={mapPluginErrorCodeToSignatureStatus(error.errorCode)}\n                  className={css`\n                    margin-top: 0;\n                  `}\n                />\n              </HorizontalGroup>\n            </div>\n          )}\n        />\n      </div>\n    </InfoBox>\n  );\n}\n\nfunction mapPluginErrorCodeToSignatureStatus(code: PluginErrorCode) {\n  switch (code) {\n    case PluginErrorCode.invalidSignature:\n      return PluginSignatureStatus.invalid;\n    case PluginErrorCode.missingSignature:\n      return PluginSignatureStatus.missing;\n    case PluginErrorCode.modifiedSignature:\n      return PluginSignatureStatus.modified;\n    default:\n      return PluginSignatureStatus.missing;\n  }\n}\n","import { css, cx } from '@emotion/css';\nimport React from 'react';\n\nimport { DataSourcePluginMeta, GrafanaTheme2 } from '@grafana/data';\nimport { selectors as e2eSelectors } from '@grafana/e2e-selectors';\nimport { Card, LinkButton, PluginSignatureBadge, useStyles2 } from '@grafana/ui';\n\nexport type Props = {\n  dataSourcePlugin: DataSourcePluginMeta;\n  onClick: () => void;\n};\n\nexport function DataSourceTypeCard({ onClick, dataSourcePlugin }: Props) {\n  const isPhantom = dataSourcePlugin.module === 'phantom';\n  const isClickable = !isPhantom && !dataSourcePlugin.unlicensed;\n  const learnMoreLink = dataSourcePlugin.info?.links?.length > 0 ? dataSourcePlugin.info.links[0] : null;\n\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Card className={cx(styles.card, 'card-parent')} onClick={isClickable ? onClick : () => {}}>\n      {/* Name */}\n      <Card.Heading\n        className={styles.heading}\n        aria-label={e2eSelectors.pages.AddDataSource.dataSourcePluginsV2(dataSourcePlugin.name)}\n      >\n        {dataSourcePlugin.name}\n      </Card.Heading>\n\n      {/* Logo */}\n      <Card.Figure align=\"center\" className={styles.figure}>\n        <img className={styles.logo} src={dataSourcePlugin.info.logos.small} alt=\"\" />\n      </Card.Figure>\n\n      <Card.Description className={styles.description}>{dataSourcePlugin.info.description}</Card.Description>\n\n      {/* Signature */}\n      {!isPhantom && (\n        <Card.Meta className={styles.meta}>\n          <PluginSignatureBadge status={dataSourcePlugin.signature} />\n        </Card.Meta>\n      )}\n\n      {/* Learn more */}\n      <Card.Actions className={styles.actions}>\n        {learnMoreLink && (\n          <LinkButton\n            aria-label={`${dataSourcePlugin.name}, learn more.`}\n            href={`${learnMoreLink.url}?utm_source=grafana_add_ds`}\n            icon=\"external-link-alt\"\n            onClick={(e) => e.stopPropagation()}\n            rel=\"noopener\"\n            target=\"_blank\"\n            variant=\"secondary\"\n          >\n            {learnMoreLink.name}\n          </LinkButton>\n        )}\n      </Card.Actions>\n    </Card>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    heading: css({\n      fontSize: theme.v1.typography.heading.h5,\n      fontWeight: 'inherit',\n    }),\n    figure: css({\n      width: 'inherit',\n      marginRight: '0px',\n      '> img': {\n        width: theme.spacing(7),\n      },\n    }),\n    meta: css({\n      marginTop: '6px',\n      position: 'relative',\n    }),\n    description: css({\n      margin: '0px',\n      fontSize: theme.typography.size.sm,\n    }),\n    actions: css({\n      position: 'relative',\n      alignSelf: 'center',\n      marginTop: '0px',\n      opacity: 0,\n\n      '.card-parent:hover &, .card-parent:focus-within &': {\n        opacity: 1,\n      },\n    }),\n    card: css({\n      gridTemplateAreas: `\n        \"Figure   Heading   Actions\"\n        \"Figure Description Actions\"\n        \"Figure    Meta     Actions\"\n        \"Figure     -       Actions\"`,\n    }),\n    logo: css({\n      marginRight: theme.v1.spacing.lg,\n      marginLeft: theme.v1.spacing.sm,\n      width: theme.spacing(7),\n      maxHeight: theme.spacing(7),\n    }),\n  };\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { DataSourcePluginMeta } from '@grafana/data';\nimport { List } from '@grafana/ui';\n\nimport { DataSourceTypeCard } from './DataSourceTypeCard';\n\nexport type Props = {\n  // The list of data-source plugins to display\n  dataSourcePlugins: DataSourcePluginMeta[];\n  // Called when a data-source plugin is clicked on in the list\n  onClickDataSourceType: (dataSource: DataSourcePluginMeta) => void;\n};\n\nexport function DataSourceTypeCardList({ dataSourcePlugins, onClickDataSourceType }: Props) {\n  if (!dataSourcePlugins || !dataSourcePlugins.length) {\n    return null;\n  }\n\n  return (\n    <List\n      items={dataSourcePlugins}\n      getItemKey={(item) => item.id.toString()}\n      renderItem={(item) => <DataSourceTypeCard dataSourcePlugin={item} onClick={() => onClickDataSourceType(item)} />}\n      className={css`\n        > li {\n          margin-bottom: 2px;\n        }\n      `}\n    />\n  );\n}\n","import React from 'react';\n\nimport { DataSourcePluginMeta } from '@grafana/data';\nimport { LinkButton } from '@grafana/ui';\nimport { DataSourcePluginCategory } from 'app/types';\n\nimport { DataSourceTypeCardList } from './DataSourceTypeCardList';\n\nexport type Props = {\n  // The list of data-source plugin categories to display\n  categories: DataSourcePluginCategory[];\n\n  // Called when a data-source plugin is clicked on in the list\n  onClickDataSourceType: (dataSource: DataSourcePluginMeta) => void;\n};\n\nexport function DataSourceCategories({ categories, onClickDataSourceType }: Props) {\n  return (\n    <>\n      {/* Categories */}\n      {categories.map(({ id, title, plugins }) => (\n        <div className=\"add-data-source-category\" key={id}>\n          <div className=\"add-data-source-category__header\" id={id}>\n            {title}\n          </div>\n          <DataSourceTypeCardList dataSourcePlugins={plugins} onClickDataSourceType={onClickDataSourceType} />\n        </div>\n      ))}\n\n      {/* Find more */}\n      <div className=\"add-data-source-more\">\n        <LinkButton\n          variant=\"secondary\"\n          href=\"https://grafana.com/plugins?type=datasource&utm_source=grafana_add_ds\"\n          target=\"_blank\"\n          rel=\"noopener\"\n        >\n          Find more data source plugins on grafana.com\n        </LinkButton>\n      </div>\n    </>\n  );\n}\n","import React from 'react';\nimport { AnyAction } from 'redux';\n\nimport { DataSourcePluginMeta } from '@grafana/data';\nimport { LinkButton, FilterInput } from '@grafana/ui';\nimport PageLoader from 'app/core/components/PageLoader/PageLoader';\nimport { PluginsErrorsInfo } from 'app/features/plugins/components/PluginsErrorsInfo';\nimport { DataSourcePluginCategory, StoreState, useDispatch, useSelector } from 'app/types';\n\nimport { DataSourceCategories } from '../components/DataSourceCategories';\nimport { DataSourceTypeCardList } from '../components/DataSourceTypeCardList';\nimport {\n  useAddDatasource,\n  useLoadDataSourcePlugins,\n  getFilteredDataSourcePlugins,\n  setDataSourceTypeSearchQuery,\n  useDataSourcesRoutes,\n} from '../state';\n\nexport function NewDataSource() {\n  useLoadDataSourcePlugins();\n\n  const dispatch = useDispatch();\n  const filteredDataSources = useSelector((s: StoreState) => getFilteredDataSourcePlugins(s.dataSources));\n  const searchQuery = useSelector((s: StoreState) => s.dataSources.dataSourceTypeSearchQuery);\n  const isLoading = useSelector((s: StoreState) => s.dataSources.isLoadingDataSources);\n  const dataSourceCategories = useSelector((s: StoreState) => s.dataSources.categories);\n  const onAddDataSource = useAddDatasource();\n  const onSetSearchQuery = (q: string) => dispatch(setDataSourceTypeSearchQuery(q));\n\n  return (\n    <NewDataSourceView\n      dataSources={filteredDataSources}\n      dataSourceCategories={dataSourceCategories}\n      searchQuery={searchQuery}\n      isLoading={isLoading}\n      onAddDataSource={onAddDataSource}\n      onSetSearchQuery={onSetSearchQuery}\n    />\n  );\n}\n\nexport type ViewProps = {\n  dataSources: DataSourcePluginMeta[];\n  dataSourceCategories: DataSourcePluginCategory[];\n  searchQuery: string;\n  isLoading: boolean;\n  onAddDataSource: (dataSource: DataSourcePluginMeta) => void;\n  onSetSearchQuery: (q: string) => AnyAction;\n};\n\nexport function NewDataSourceView({\n  dataSources,\n  dataSourceCategories,\n  searchQuery,\n  isLoading,\n  onAddDataSource,\n  onSetSearchQuery,\n}: ViewProps) {\n  const dataSourcesRoutes = useDataSourcesRoutes();\n\n  if (isLoading) {\n    return <PageLoader />;\n  }\n\n  return (\n    <>\n      {/* Search */}\n      <div className=\"page-action-bar\">\n        <FilterInput value={searchQuery} onChange={onSetSearchQuery} placeholder=\"Filter by name or type\" />\n        <div className=\"page-action-bar__spacer\" />\n        <LinkButton href={dataSourcesRoutes.List} fill=\"outline\" variant=\"secondary\" icon=\"arrow-left\">\n          Cancel\n        </LinkButton>\n      </div>\n\n      {/* Show any plugin errors while not searching for anything specific */}\n      {!searchQuery && <PluginsErrorsInfo />}\n\n      {/* Search results */}\n      <div>\n        {searchQuery && (\n          <DataSourceTypeCardList dataSourcePlugins={dataSources} onClickDataSourceType={onAddDataSource} />\n        )}\n        {!searchQuery && (\n          <DataSourceCategories categories={dataSourceCategories} onClickDataSourceType={onAddDataSource} />\n        )}\n      </div>\n    </>\n  );\n}\n","import React from 'react';\n\nimport { NavModelItem } from '@grafana/data';\nimport { Page } from 'app/core/components/Page/Page';\n\nimport { NewDataSource } from '../components/NewDataSource';\nimport { DATASOURCES_ROUTES } from '../constants';\n\nexport function NewDataSourcePage() {\n  const pageNav: NavModelItem = {\n    icon: 'database',\n    id: 'datasource-new',\n    text: 'Add data source',\n    url: DATASOURCES_ROUTES.New,\n    subTitle: 'Choose a data source type',\n  };\n\n  return (\n    <Page navId=\"datasources\" pageNav={pageNav}>\n      <Page.Contents>\n        <NewDataSource />\n      </Page.Contents>\n    </Page>\n  );\n}\n\nexport default NewDataSourcePage;\n","import { createContext } from 'react';\n\nimport { DATASOURCES_ROUTES } from '../constants';\nimport { DataSourcesRoutes } from '../types';\n\n// The purpose of this context is to be able to override the data-sources routes (used for links for example) used under\n// the app/features/datasources modules, so we can reuse them more easily in different parts of the application (e.g. under Data Connections)\nexport const DataSourcesRoutesContext = createContext<DataSourcesRoutes>(DATASOURCES_ROUTES);\n","import { useContext, useEffect } from 'react';\n\nimport { DataSourcePluginMeta, DataSourceSettings, NavModelItem, urlUtil } from '@grafana/data';\nimport { cleanUpAction } from 'app/core/actions/cleanUp';\nimport appEvents from 'app/core/app_events';\nimport { contextSrv } from 'app/core/core';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { AccessControlAction, useDispatch, useSelector } from 'app/types';\nimport { ShowConfirmModalEvent } from 'app/types/events';\n\nimport { DataSourceRights } from '../types';\n\nimport {\n  initDataSourceSettings,\n  testDataSource,\n  loadDataSource,\n  loadDataSources,\n  loadDataSourcePlugins,\n  addDataSource,\n  updateDataSource,\n  deleteLoadedDataSource,\n} from './actions';\nimport { DataSourcesRoutesContext } from './contexts';\nimport { getDataSourceLoadingNav, buildNavModel, getDataSourceNav } from './navModel';\nimport { getDataSource, getDataSourceMeta } from './selectors';\n\nexport const useInitDataSourceSettings = (uid: string) => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(initDataSourceSettings(uid));\n\n    return function cleanUp() {\n      dispatch(\n        cleanUpAction({\n          cleanupAction: (state) => state.dataSourceSettings,\n        })\n      );\n    };\n  }, [uid, dispatch]);\n};\n\nexport const useTestDataSource = (uid: string) => {\n  const dispatch = useDispatch();\n\n  return () => dispatch(testDataSource(uid));\n};\n\nexport const useLoadDataSources = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(loadDataSources());\n  }, [dispatch]);\n};\n\nexport const useLoadDataSource = (uid: string) => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(loadDataSource(uid));\n  }, [dispatch, uid]);\n};\n\nexport const useLoadDataSourcePlugins = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(loadDataSourcePlugins());\n  }, [dispatch]);\n};\n\nexport const useAddDatasource = () => {\n  const dispatch = useDispatch();\n  const dataSourcesRoutes = useDataSourcesRoutes();\n\n  return (plugin: DataSourcePluginMeta) => {\n    dispatch(addDataSource(plugin, dataSourcesRoutes.Edit));\n  };\n};\n\nexport const useUpdateDatasource = () => {\n  const dispatch = useDispatch();\n\n  return async (dataSource: DataSourceSettings) => dispatch(updateDataSource(dataSource));\n};\n\nexport const useDeleteLoadedDataSource = () => {\n  const dispatch = useDispatch();\n  const { name } = useSelector((state) => state.dataSources.dataSource);\n\n  return () => {\n    appEvents.publish(\n      new ShowConfirmModalEvent({\n        title: 'Delete',\n        text: `Are you sure you want to delete the \"${name}\" data source?`,\n        yesText: 'Delete',\n        icon: 'trash-alt',\n        onConfirm: () => dispatch(deleteLoadedDataSource()),\n      })\n    );\n  };\n};\n\nexport const useDataSource = (uid: string) => {\n  return useSelector((state) => getDataSource(state.dataSources, uid));\n};\n\nexport const useDataSourceExploreUrl = (uid: string) => {\n  const dataSource = useDataSource(uid);\n  const exploreState = JSON.stringify({ datasource: dataSource.name, context: 'explore' });\n  const exploreUrl = urlUtil.renderUrl('/explore', { left: exploreState });\n\n  return exploreUrl;\n};\n\nexport const useDataSourceMeta = (pluginType: string): DataSourcePluginMeta => {\n  return useSelector((state) => getDataSourceMeta(state.dataSources, pluginType));\n};\n\nexport const useDataSourceSettings = () => {\n  return useSelector((state) => state.dataSourceSettings);\n};\n\nexport const useDataSourceSettingsNav = (dataSourceId: string, pageId: string | null) => {\n  const dataSource = useDataSource(dataSourceId);\n  const { plugin, loadError, loading } = useDataSourceSettings();\n  const navIndex = useSelector((state) => state.navIndex);\n  const navIndexId = pageId ? `datasource-${pageId}-${dataSourceId}` : `datasource-settings-${dataSourceId}`;\n\n  if (loadError) {\n    const node: NavModelItem = {\n      text: loadError,\n      subTitle: 'Data Source Error',\n      icon: 'exclamation-triangle',\n    };\n\n    return {\n      node: node,\n      main: node,\n    };\n  }\n\n  if (loading || !plugin) {\n    return getNavModel(navIndex, navIndexId, getDataSourceLoadingNav('settings'));\n  }\n\n  return getNavModel(navIndex, navIndexId, getDataSourceNav(buildNavModel(dataSource, plugin), pageId || 'settings'));\n};\n\nexport const useDataSourceRights = (uid: string): DataSourceRights => {\n  const dataSource = useDataSource(uid);\n  const readOnly = dataSource.readOnly === true;\n  const hasWriteRights = contextSrv.hasPermissionInMetadata(AccessControlAction.DataSourcesWrite, dataSource);\n  const hasDeleteRights = contextSrv.hasPermissionInMetadata(AccessControlAction.DataSourcesDelete, dataSource);\n\n  return {\n    readOnly,\n    hasWriteRights,\n    hasDeleteRights,\n  };\n};\n\nexport const useDataSourcesRoutes = () => {\n  return useContext(DataSourcesRoutesContext);\n};\n","import { createSelector } from '@reduxjs/toolkit';\n\nimport { PluginError, PluginErrorCode, unEscapeStringFromRegex } from '@grafana/data';\n\nimport { RequestStatus, PluginCatalogStoreState } from '../types';\n\nimport { pluginsAdapter } from './reducer';\n\nexport const selectRoot = (state: PluginCatalogStoreState) => state.plugins;\n\nexport const selectItems = createSelector(selectRoot, ({ items }) => items);\n\nexport const selectDisplayMode = createSelector(selectRoot, ({ settings }) => settings.displayMode);\n\nexport const { selectAll, selectById } = pluginsAdapter.getSelectors(selectItems);\n\nconst selectInstalled = (filterBy: string) =>\n  createSelector(selectAll, (plugins) =>\n    plugins.filter((plugin) => (filterBy === 'installed' ? plugin.isInstalled : !plugin.isCore))\n  );\n\nconst findByInstallAndType = (filterBy: string, filterByType: string) =>\n  createSelector(selectInstalled(filterBy), (plugins) =>\n    plugins.filter((plugin) => filterByType === 'all' || plugin.type === filterByType)\n  );\n\nconst findByKeyword = (searchBy: string) =>\n  createSelector(selectAll, (plugins) => {\n    if (searchBy === '') {\n      return [];\n    }\n\n    return plugins.filter((plugin) => {\n      const fields: String[] = [];\n      if (plugin.name) {\n        fields.push(plugin.name.toLowerCase());\n      }\n\n      if (plugin.orgName) {\n        fields.push(plugin.orgName.toLowerCase());\n      }\n\n      return fields.some((f) => f.includes(unEscapeStringFromRegex(searchBy).toLowerCase()));\n    });\n  });\n\nexport const find = (searchBy: string, filterBy: string, filterByType: string) =>\n  createSelector(\n    findByInstallAndType(filterBy, filterByType),\n    findByKeyword(searchBy),\n    (filteredPlugins, searchedPlugins) => {\n      return searchBy === '' ? filteredPlugins : searchedPlugins;\n    }\n  );\n\nexport const selectPluginErrors = createSelector(selectAll, (plugins) =>\n  plugins\n    ? plugins\n        .filter((p) => Boolean(p.error))\n        .map(\n          (p): PluginError => ({\n            pluginId: p.id,\n            errorCode: p!.error as PluginErrorCode,\n          })\n        )\n    : []\n);\n\n// The following selectors are used to get information about the outstanding or completed plugins-related network requests.\nexport const selectRequest = (actionType: string) =>\n  createSelector(selectRoot, ({ requests = {} }) => requests[actionType]);\n\nexport const selectIsRequestPending = (actionType: string) =>\n  createSelector(selectRequest(actionType), (request) => request?.status === RequestStatus.Pending);\n\nexport const selectRequestError = (actionType: string) =>\n  createSelector(selectRequest(actionType), (request) =>\n    request?.status === RequestStatus.Rejected ? request?.error : null\n  );\n\nexport const selectIsRequestNotFetched = (actionType: string) =>\n  createSelector(selectRequest(actionType), (request) => request === undefined);\n","import { useEffect } from 'react';\n\nimport { PluginError } from '@grafana/data';\nimport { useDispatch, useSelector } from 'app/types';\n\nimport { sortPlugins, Sorters } from '../helpers';\nimport { CatalogPlugin, PluginListDisplayMode } from '../types';\n\nimport { fetchAll, fetchDetails, fetchRemotePlugins, install, uninstall } from './actions';\nimport { setDisplayMode } from './reducer';\nimport {\n  find,\n  selectAll,\n  selectById,\n  selectIsRequestPending,\n  selectRequestError,\n  selectIsRequestNotFetched,\n  selectDisplayMode,\n  selectPluginErrors,\n} from './selectors';\n\ntype Filters = {\n  query?: string; // Note: this will be an escaped regex string as it comes from `FilterInput`\n  filterBy?: string;\n  filterByType?: string;\n  sortBy?: Sorters;\n};\n\nexport const useGetAllWithFilters = ({\n  query = '',\n  filterBy = 'installed',\n  filterByType = 'all',\n  sortBy = Sorters.nameAsc,\n}: Filters) => {\n  useFetchAll();\n\n  const filtered = useSelector(find(query, filterBy, filterByType));\n  const { isLoading, error } = useFetchStatus();\n  const sortedAndFiltered = sortPlugins(filtered, sortBy);\n\n  return {\n    isLoading,\n    error,\n    plugins: sortedAndFiltered,\n  };\n};\n\nexport const useGetAll = (): CatalogPlugin[] => {\n  useFetchAll();\n\n  return useSelector(selectAll);\n};\n\nexport const useGetSingle = (id: string): CatalogPlugin | undefined => {\n  useFetchAll();\n  useFetchDetails(id);\n\n  return useSelector((state) => selectById(state, id));\n};\n\nexport const useGetErrors = (): PluginError[] => {\n  useFetchAll();\n\n  return useSelector(selectPluginErrors);\n};\n\nexport const useInstall = () => {\n  const dispatch = useDispatch();\n  return (id: string, version?: string, isUpdating?: boolean) => dispatch(install({ id, version, isUpdating }));\n};\n\nexport const useUninstall = () => {\n  const dispatch = useDispatch();\n\n  return (id: string) => dispatch(uninstall(id));\n};\n\nexport const useIsRemotePluginsAvailable = () => {\n  const error = useSelector(selectRequestError(fetchRemotePlugins.typePrefix));\n  return error === null;\n};\n\nexport const useFetchStatus = () => {\n  const isLoading = useSelector(selectIsRequestPending(fetchAll.typePrefix));\n  const error = useSelector(selectRequestError(fetchAll.typePrefix));\n\n  return { isLoading, error };\n};\n\nexport const useFetchDetailsStatus = () => {\n  const isLoading = useSelector(selectIsRequestPending(fetchDetails.typePrefix));\n  const error = useSelector(selectRequestError(fetchDetails.typePrefix));\n\n  return { isLoading, error };\n};\n\nexport const useInstallStatus = () => {\n  const isInstalling = useSelector(selectIsRequestPending(install.typePrefix));\n  const error = useSelector(selectRequestError(install.typePrefix));\n\n  return { isInstalling, error };\n};\n\nexport const useUninstallStatus = () => {\n  const isUninstalling = useSelector(selectIsRequestPending(uninstall.typePrefix));\n  const error = useSelector(selectRequestError(uninstall.typePrefix));\n\n  return { isUninstalling, error };\n};\n\n// Only fetches in case they were not fetched yet\nexport const useFetchAll = () => {\n  const dispatch = useDispatch();\n  const isNotFetched = useSelector(selectIsRequestNotFetched(fetchAll.typePrefix));\n\n  useEffect(() => {\n    isNotFetched && dispatch(fetchAll());\n  }, []); // eslint-disable-line\n};\n\nexport const useFetchDetails = (id: string) => {\n  const dispatch = useDispatch();\n  const plugin = useSelector((state) => selectById(state, id));\n  const isNotFetching = !useSelector(selectIsRequestPending(fetchDetails.typePrefix));\n  const shouldFetch = isNotFetching && plugin && !plugin.details;\n\n  useEffect(() => {\n    shouldFetch && dispatch(fetchDetails(id));\n  }, [plugin]); // eslint-disable-line\n};\n\nexport const useDisplayMode = () => {\n  const dispatch = useDispatch();\n  const displayMode = useSelector(selectDisplayMode);\n\n  return {\n    displayMode,\n    setDisplayMode: (v: PluginListDisplayMode) => dispatch(setDisplayMode(v)),\n  };\n};\n"],"names":["PluginsErrorsInfo","errors","useGetErrors","isLoading","useFetchStatus","theme","useTheme","length","InfoBox","selectors","severity","urlTitle","url","List","items","className","css","renderItem","error","spacing","sm","justify","align","pluginId","PluginSignatureBadge","status","mapPluginErrorCodeToSignatureStatus","errorCode","code","PluginErrorCode","PluginSignatureStatus","DataSourceTypeCard","onClick","dataSourcePlugin","isPhantom","module","isClickable","unlicensed","learnMoreLink","info","links","styles","useStyles2","getStyles","Card","cx","card","heading","e2eSelectors","name","figure","logo","src","logos","small","alt","description","meta","signature","actions","href","icon","e","stopPropagation","rel","target","variant","fontSize","v1","typography","h5","fontWeight","width","marginRight","marginTop","position","margin","size","alignSelf","opacity","gridTemplateAreas","lg","marginLeft","maxHeight","DataSourceTypeCardList","dataSourcePlugins","onClickDataSourceType","getItemKey","item","id","toString","DataSourceCategories","categories","map","title","plugins","NewDataSource","useLoadDataSourcePlugins","dispatch","useDispatch","filteredDataSources","useSelector","s","getFilteredDataSourcePlugins","dataSources","searchQuery","dataSourceTypeSearchQuery","isLoadingDataSources","dataSourceCategories","onAddDataSource","useAddDatasource","NewDataSourceView","onSetSearchQuery","q","setDataSourceTypeSearchQuery","dataSourcesRoutes","useDataSourcesRoutes","PageLoader","FilterInput","value","onChange","placeholder","fill","NewDataSourcePage","pageNav","text","DATASOURCES_ROUTES","subTitle","navId","DataSourcesRoutesContext","createContext","useInitDataSourceSettings","uid","useEffect","initDataSourceSettings","cleanUpAction","cleanupAction","state","dataSourceSettings","useTestDataSource","testDataSource","useLoadDataSources","loadDataSources","useLoadDataSource","loadDataSource","loadDataSourcePlugins","plugin","addDataSource","Edit","useUpdateDatasource","async","updateDataSource","dataSource","useDeleteLoadedDataSource","appEvents","ShowConfirmModalEvent","yesText","onConfirm","deleteLoadedDataSource","useDataSource","getDataSource","useDataSourceExploreUrl","exploreState","JSON","stringify","datasource","context","urlUtil","left","useDataSourceMeta","pluginType","getDataSourceMeta","useDataSourceSettings","useDataSourceSettingsNav","dataSourceId","pageId","loadError","loading","navIndex","navIndexId","node","main","getNavModel","getDataSourceLoadingNav","getDataSourceNav","buildNavModel","useDataSourceRights","readOnly","hasWriteRights","contextSrv","AccessControlAction","hasDeleteRights","useContext","selectRoot","selectItems","createSelector","selectDisplayMode","settings","displayMode","selectAll","selectById","pluginsAdapter","findByInstallAndType","filterBy","filterByType","filter","isInstalled","isCore","selectInstalled","type","find","searchBy","fields","push","toLowerCase","orgName","some","f","includes","unEscapeStringFromRegex","findByKeyword","filteredPlugins","searchedPlugins","selectPluginErrors","p","Boolean","selectRequest","actionType","requests","selectIsRequestPending","request","RequestStatus","selectRequestError","useGetAllWithFilters","query","sortBy","Sorters","useFetchAll","filtered","sortPlugins","useGetSingle","useFetchDetails","useInstall","version","isUpdating","install","useUninstall","uninstall","useIsRemotePluginsAvailable","fetchRemotePlugins","fetchAll","useFetchDetailsStatus","fetchDetails","useInstallStatus","isInstalling","useUninstallStatus","isUninstalling","isNotFetched","undefined","shouldFetch","details","useDisplayMode","setDisplayMode","v"],"sourceRoot":""}