{"version":3,"file":"8999.1343115264599b7056e3.js","mappings":"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","sources":["webpack://grafana/./public/app/features/dashboard/dashgrid/LazyLoader.tsx","webpack://grafana/./public/app/plugins/panel/timeseries/overrides/colorSeriesConfigFactory.ts","webpack://grafana/./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderLoadingIndicator.tsx","webpack://grafana/./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderMenuTrigger.tsx","webpack://grafana/./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderMenu.tsx","webpack://grafana/./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderMenuProvider.tsx","webpack://grafana/./public/app/features/dashboard/utils/getPanelMenu.ts","webpack://grafana/./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderMenuWrapper.tsx","webpack://grafana/./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderNotice.tsx","webpack://grafana/./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderNotices.tsx","webpack://grafana/./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeader.tsx","webpack://grafana/./public/app/features/dashboard/dashgrid/PanelChrome.tsx","webpack://grafana/./public/app/features/dashboard/dashgrid/PanelChromeAngular.tsx","webpack://grafana/./public/app/features/dashboard/dashgrid/DashboardPanel.tsx","webpack://grafana/./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderCorner.tsx","webpack://grafana/./public/app/features/dashboard/state/initDashboard.ts","webpack://grafana/./public/app/features/dashboard/state/analyticsProcessor.ts","webpack://grafana/./public/app/features/dashboard/utils/loadSnapshotData.ts","webpack://grafana/./public/app/features/panel/panellinks/linkSuppliers.ts","webpack://grafana/./public/app/features/panel/state/selectors.ts"],"sourcesContent":["import React, { useRef, useState } from 'react';\nimport { useEffectOnce } from 'react-use';\n\nimport { useUniqueId } from 'app/plugins/datasource/influxdb/components/useUniqueId';\n\nexport interface Props {\n  children: React.ReactNode | (({ isInView }: { isInView: boolean }) => React.ReactNode);\n  width?: number;\n  height?: number;\n  onLoad?: () => void;\n  onChange?: (isInView: boolean) => void;\n}\n\nexport function LazyLoader({ children, width, height, onLoad, onChange }: Props) {\n  const id = useUniqueId();\n  const [loaded, setLoaded] = useState(false);\n  const [isInView, setIsInView] = useState(false);\n  const wrapperRef = useRef<HTMLDivElement>(null);\n\n  useEffectOnce(() => {\n    LazyLoader.addCallback(id, (entry) => {\n      if (!loaded && entry.isIntersecting) {\n        setLoaded(true);\n        onLoad?.();\n      }\n\n      setIsInView(entry.isIntersecting);\n      onChange?.(entry.isIntersecting);\n    });\n\n    const wrapperEl = wrapperRef.current;\n\n    if (wrapperEl) {\n      LazyLoader.observer.observe(wrapperEl);\n    }\n\n    return () => {\n      delete LazyLoader.callbacks[id];\n      wrapperEl && LazyLoader.observer.unobserve(wrapperEl);\n      if (Object.keys(LazyLoader.callbacks).length === 0) {\n        LazyLoader.observer.disconnect();\n      }\n    };\n  });\n\n  return (\n    <div id={id} ref={wrapperRef} style={{ width, height }}>\n      {loaded && (typeof children === 'function' ? children({ isInView }) : children)}\n    </div>\n  );\n}\n\nLazyLoader.callbacks = {} as Record<string, (e: IntersectionObserverEntry) => void>;\nLazyLoader.addCallback = (id: string, c: (e: IntersectionObserverEntry) => void) => (LazyLoader.callbacks[id] = c);\nLazyLoader.observer = new IntersectionObserver(\n  (entries) => {\n    for (const entry of entries) {\n      LazyLoader.callbacks[entry.target.id](entry);\n    }\n  },\n  { rootMargin: '100px' }\n);\n","import {\n  ConfigOverrideRule,\n  DynamicConfigValue,\n  FieldColorModeId,\n  FieldConfigSource,\n  FieldMatcherID,\n} from '@grafana/data';\n\nexport const changeSeriesColorConfigFactory = (\n  label: string,\n  color: string,\n  fieldConfig: FieldConfigSource\n): FieldConfigSource => {\n  const { overrides } = fieldConfig;\n  const currentIndex = fieldConfig.overrides.findIndex((override) => {\n    return override.matcher.id === FieldMatcherID.byName && override.matcher.options === label;\n  });\n\n  if (currentIndex < 0) {\n    return {\n      ...fieldConfig,\n      overrides: [...fieldConfig.overrides, createOverride(label, color)],\n    };\n  }\n\n  const overridesCopy = Array.from(overrides);\n  const existing = overridesCopy[currentIndex];\n  const propertyIndex = existing.properties.findIndex((p) => p.id === 'color');\n\n  if (propertyIndex < 0) {\n    overridesCopy[currentIndex] = {\n      ...existing,\n      properties: [...existing.properties, createProperty(color)],\n    };\n\n    return {\n      ...fieldConfig,\n      overrides: overridesCopy,\n    };\n  }\n\n  const propertiesCopy = Array.from(existing.properties);\n  propertiesCopy[propertyIndex] = createProperty(color);\n\n  overridesCopy[currentIndex] = {\n    ...existing,\n    properties: propertiesCopy,\n  };\n\n  return {\n    ...fieldConfig,\n    overrides: overridesCopy,\n  };\n};\n\nconst createOverride = (label: string, color: string): ConfigOverrideRule => {\n  return {\n    matcher: {\n      id: FieldMatcherID.byName,\n      options: label,\n    },\n    properties: [createProperty(color)],\n  };\n};\n\nconst createProperty = (color: string): DynamicConfigValue => {\n  return {\n    id: 'color',\n    value: {\n      mode: FieldColorModeId.Fixed,\n      fixedColor: color,\n    },\n  };\n};\n","import { css } from '@emotion/css';\nimport React, { FC } from 'react';\n\nimport { GrafanaTheme, LoadingState } from '@grafana/data';\nimport { Icon, Tooltip, useStyles } from '@grafana/ui';\n\ninterface Props {\n  state: LoadingState;\n  onClick: () => void;\n}\n\nexport const PanelHeaderLoadingIndicator: FC<Props> = ({ state, onClick }) => {\n  const styles = useStyles(getStyles);\n\n  if (state === LoadingState.Loading) {\n    return (\n      <div className=\"panel-loading\" onClick={onClick}>\n        <Tooltip content=\"Cancel query\">\n          <Icon className=\"panel-loading__spinner spin-clockwise\" name=\"sync\" />\n        </Tooltip>\n      </div>\n    );\n  }\n\n  if (state === LoadingState.Streaming) {\n    return (\n      <div className=\"panel-loading\" onClick={onClick}>\n        <div title=\"Streaming (click to stop)\" className={styles.streamIndicator} />\n      </div>\n    );\n  }\n\n  return null;\n};\n\nfunction getStyles(theme: GrafanaTheme) {\n  return {\n    streamIndicator: css`\n      width: 10px;\n      height: 10px;\n      background: ${theme.colors.textFaint};\n      box-shadow: 0 0 2px ${theme.colors.textFaint};\n      border-radius: 50%;\n      position: relative;\n      top: 6px;\n      right: 1px;\n    `,\n  };\n}\n","import React, { FC, HTMLAttributes, MouseEvent, ReactElement, useCallback, useState } from 'react';\n\nimport { CartesianCoords2D } from '@grafana/data';\n\ninterface PanelHeaderMenuTriggerApi {\n  panelMenuOpen: boolean;\n  closeMenu: () => void;\n}\n\ninterface Props extends HTMLAttributes<HTMLDivElement> {\n  children: (props: PanelHeaderMenuTriggerApi) => ReactElement;\n}\n\nexport const PanelHeaderMenuTrigger: FC<Props> = ({ children, ...divProps }) => {\n  const [clickCoordinates, setClickCoordinates] = useState<CartesianCoords2D>({ x: 0, y: 0 });\n  const [panelMenuOpen, setPanelMenuOpen] = useState<boolean>(false);\n\n  const onMenuToggle = useCallback(\n    (event: MouseEvent<HTMLDivElement>) => {\n      if (!isClick(clickCoordinates, eventToClickCoordinates(event))) {\n        return;\n      }\n\n      setPanelMenuOpen(!panelMenuOpen);\n    },\n    [clickCoordinates, panelMenuOpen, setPanelMenuOpen]\n  );\n\n  const onMouseDown = useCallback(\n    (event: MouseEvent<HTMLDivElement>) => {\n      setClickCoordinates(eventToClickCoordinates(event));\n    },\n    [setClickCoordinates]\n  );\n\n  return (\n    <header {...divProps} className=\"panel-title-container\" onClick={onMenuToggle} onMouseDown={onMouseDown}>\n      {children({ panelMenuOpen, closeMenu: () => setPanelMenuOpen(false) })}\n    </header>\n  );\n};\n\nfunction isClick(current: CartesianCoords2D, clicked: CartesianCoords2D, deadZone = 3.5): boolean {\n  // A \"deadzone\" radius is added so that if the cursor is moved within this radius\n  // between mousedown and mouseup, it's still considered a click and not a drag.\n  const clickDistance = Math.sqrt((current.x - clicked.x) ** 2 + (current.y - clicked.y) ** 2);\n  return clickDistance <= deadZone;\n}\n\nfunction eventToClickCoordinates(event: MouseEvent<HTMLDivElement>): CartesianCoords2D {\n  return {\n    x: event.clientX,\n    y: event.clientY,\n  };\n}\n","import React, { PureComponent } from 'react';\n\nimport { PanelMenuItem } from '@grafana/data';\n\nimport { PanelHeaderMenuItem } from './PanelHeaderMenuItem';\n\nexport interface Props {\n  items: PanelMenuItem[];\n}\n\nexport class PanelHeaderMenu extends PureComponent<Props> {\n  renderItems = (menu: PanelMenuItem[], isSubMenu = false) => {\n    return (\n      <ul className=\"dropdown-menu dropdown-menu--menu panel-menu\" role={isSubMenu ? '' : 'menu'}>\n        {menu.map((menuItem, idx: number) => {\n          return (\n            <PanelHeaderMenuItem\n              key={`${menuItem.text}${idx}`}\n              type={menuItem.type}\n              text={menuItem.text}\n              iconClassName={menuItem.iconClassName}\n              onClick={menuItem.onClick}\n              shortcut={menuItem.shortcut}\n            >\n              {menuItem.subMenu && this.renderItems(menuItem.subMenu, true)}\n            </PanelHeaderMenuItem>\n          );\n        })}\n      </ul>\n    );\n  };\n\n  render() {\n    return <div className=\"panel-menu-container dropdown open\">{this.renderItems(this.props.items)}</div>;\n  }\n}\n","import { FC, ReactElement, useEffect, useState } from 'react';\n\nimport { PanelMenuItem } from '@grafana/data';\nimport { getPanelStateForModel } from 'app/features/panel/state/selectors';\nimport { useSelector } from 'app/types';\n\nimport { DashboardModel, PanelModel } from '../../state';\nimport { getPanelMenu } from '../../utils/getPanelMenu';\n\ninterface PanelHeaderMenuProviderApi {\n  items: PanelMenuItem[];\n}\n\ninterface Props {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  children: (props: PanelHeaderMenuProviderApi) => ReactElement;\n}\n\nexport const PanelHeaderMenuProvider: FC<Props> = ({ panel, dashboard, children }) => {\n  const [items, setItems] = useState<PanelMenuItem[]>([]);\n  const angularComponent = useSelector((state) => getPanelStateForModel(state, panel)?.angularComponent);\n\n  useEffect(() => {\n    setItems(getPanelMenu(dashboard, panel, angularComponent));\n  }, [dashboard, panel, angularComponent, setItems]);\n\n  return children({ items });\n};\n","import { t } from '@lingui/macro';\n\nimport { PanelMenuItem } from '@grafana/data';\nimport { AngularComponent, getDataSourceSrv, locationService, reportInteraction } from '@grafana/runtime';\nimport { PanelCtrl } from 'app/angular/panel/panel_ctrl';\nimport config from 'app/core/config';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { getExploreUrl } from 'app/core/utils/explore';\nimport { DashboardModel } from 'app/features/dashboard/state/DashboardModel';\nimport { PanelModel } from 'app/features/dashboard/state/PanelModel';\nimport {\n  addLibraryPanel,\n  copyPanel,\n  duplicatePanel,\n  removePanel,\n  sharePanel,\n  toggleLegend,\n  unlinkLibraryPanel,\n} from 'app/features/dashboard/utils/panel';\nimport { InspectTab } from 'app/features/inspector/types';\nimport { isPanelModelLibraryPanel } from 'app/features/library-panels/guard';\nimport { store } from 'app/store/store';\n\nimport { navigateToExplore } from '../../explore/state/main';\nimport { getTimeSrv } from '../services/TimeSrv';\n\nexport function getPanelMenu(\n  dashboard: DashboardModel,\n  panel: PanelModel,\n  angularComponent?: AngularComponent | null\n): PanelMenuItem[] {\n  const onViewPanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    locationService.partial({\n      viewPanel: panel.id,\n    });\n  };\n\n  const onEditPanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    locationService.partial({\n      editPanel: panel.id,\n    });\n  };\n\n  const onSharePanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    sharePanel(dashboard, panel);\n  };\n\n  const onAddLibraryPanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    addLibraryPanel(dashboard, panel);\n  };\n\n  const onUnlinkLibraryPanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    unlinkLibraryPanel(panel);\n  };\n\n  const onInspectPanel = (tab?: InspectTab) => {\n    locationService.partial({\n      inspect: panel.id,\n      inspectTab: tab,\n    });\n\n    reportInteraction('grafana_panel_menu_inspect', {\n      tab: tab ?? InspectTab.Data,\n    });\n  };\n\n  const onMore = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n  };\n\n  const onDuplicatePanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    duplicatePanel(dashboard, panel);\n  };\n\n  const onCopyPanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    copyPanel(panel);\n  };\n\n  const onRemovePanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    removePanel(dashboard, panel, true);\n  };\n\n  const onNavigateToExplore = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    const openInNewWindow =\n      event.ctrlKey || event.metaKey ? (url: string) => window.open(`${config.appSubUrl}${url}`) : undefined;\n    store.dispatch(navigateToExplore(panel, { getDataSourceSrv, getTimeSrv, getExploreUrl, openInNewWindow }) as any);\n  };\n\n  const onToggleLegend = (event: React.MouseEvent) => {\n    event.preventDefault();\n    toggleLegend(panel);\n  };\n  const menu: PanelMenuItem[] = [];\n\n  if (!panel.isEditing) {\n    const viewTextTranslation = t({\n      id: 'panel.header-menu.view',\n      message: `View`,\n    });\n    menu.push({\n      text: viewTextTranslation,\n      iconClassName: 'eye',\n      onClick: onViewPanel,\n      shortcut: 'v',\n    });\n  }\n\n  if (dashboard.canEditPanel(panel) && !panel.isEditing) {\n    menu.push({\n      text: 'Edit',\n      iconClassName: 'edit',\n      onClick: onEditPanel,\n      shortcut: 'e',\n    });\n  }\n\n  const shareTextTranslation = t({\n    id: 'panel.header-menu.share',\n    message: `Share`,\n  });\n\n  menu.push({\n    text: shareTextTranslation,\n    iconClassName: 'share-alt',\n    onClick: onSharePanel,\n    shortcut: 'p s',\n  });\n\n  if (contextSrv.hasAccessToExplore() && !(panel.plugin && panel.plugin.meta.skipDataQuery)) {\n    menu.push({\n      text: 'Explore',\n      iconClassName: 'compass',\n      onClick: onNavigateToExplore,\n      shortcut: 'x',\n    });\n  }\n\n  const inspectMenu: PanelMenuItem[] = [];\n\n  // Only show these inspect actions for data plugins\n  if (panel.plugin && !panel.plugin.meta.skipDataQuery) {\n    const dataTextTranslation = t({\n      id: 'panel.header-menu.inspect-data',\n      message: `Data`,\n    });\n\n    inspectMenu.push({\n      text: dataTextTranslation,\n      onClick: (e: React.MouseEvent<any>) => onInspectPanel(InspectTab.Data),\n    });\n\n    if (dashboard.meta.canEdit) {\n      inspectMenu.push({\n        text: 'Query',\n        onClick: (e: React.MouseEvent<any>) => onInspectPanel(InspectTab.Query),\n      });\n    }\n  }\n\n  const jsonTextTranslation = t({\n    id: 'panel.header-menu.inspect-json',\n    message: `Panel JSON`,\n  });\n\n  inspectMenu.push({\n    text: jsonTextTranslation,\n    onClick: (e: React.MouseEvent<any>) => onInspectPanel(InspectTab.JSON),\n  });\n\n  const inspectTextTranslation = t({\n    id: 'panel.header-menu.inspect',\n    message: `Inspect`,\n  });\n\n  menu.push({\n    type: 'submenu',\n    text: inspectTextTranslation,\n    iconClassName: 'info-circle',\n    onClick: (e: React.MouseEvent<any>) => onInspectPanel(),\n    shortcut: 'i',\n    subMenu: inspectMenu,\n  });\n\n  const subMenu: PanelMenuItem[] = [];\n  const canEdit = dashboard.canEditPanel(panel);\n\n  if (canEdit && !(panel.isViewing || panel.isEditing)) {\n    subMenu.push({\n      text: 'Duplicate',\n      onClick: onDuplicatePanel,\n      shortcut: 'p d',\n    });\n\n    subMenu.push({\n      text: 'Copy',\n      onClick: onCopyPanel,\n    });\n\n    if (isPanelModelLibraryPanel(panel)) {\n      subMenu.push({\n        text: 'Unlink library panel',\n        onClick: onUnlinkLibraryPanel,\n      });\n    } else {\n      subMenu.push({\n        text: 'Create library panel',\n        onClick: onAddLibraryPanel,\n      });\n    }\n  }\n\n  // add old angular panel options\n  if (angularComponent) {\n    const scope = angularComponent.getScope();\n    const panelCtrl: PanelCtrl = scope.$$childHead.ctrl;\n    const angularMenuItems = panelCtrl.getExtendedMenu();\n\n    for (const item of angularMenuItems) {\n      const reactItem: PanelMenuItem = {\n        text: item.text,\n        href: item.href,\n        shortcut: item.shortcut,\n      };\n\n      if (item.click) {\n        reactItem.onClick = () => {\n          scope.$eval(item.click, { ctrl: panelCtrl });\n        };\n      }\n\n      subMenu.push(reactItem);\n    }\n  }\n\n  if (panel.options.legend) {\n    subMenu.push({\n      text: panel.options.legend.showLegend ? 'Hide legend' : 'Show legend',\n      onClick: onToggleLegend,\n      shortcut: 'p l',\n    });\n  }\n\n  // When editing hide most actions\n  if (panel.isEditing) {\n    subMenu.length = 0;\n  }\n\n  if (canEdit && panel.plugin && !panel.plugin.meta.skipDataQuery) {\n    subMenu.push({\n      text: 'Get help',\n      onClick: (e: React.MouseEvent) => onInspectPanel(InspectTab.Help),\n    });\n  }\n\n  if (subMenu.length) {\n    const moreTextTranslation = t({\n      id: 'panel.header-menu.more',\n      message: `More...`,\n    });\n    menu.push({\n      type: 'submenu',\n      text: moreTextTranslation,\n      iconClassName: 'cube',\n      subMenu,\n      onClick: onMore,\n    });\n  }\n\n  if (dashboard.canEditPanel(panel) && !panel.isEditing && !panel.isViewing) {\n    menu.push({ type: 'divider', text: '' });\n\n    menu.push({\n      text: 'Remove',\n      iconClassName: 'trash-alt',\n      onClick: onRemovePanel,\n      shortcut: 'p r',\n    });\n  }\n\n  return menu;\n}\n","import React, { FC } from 'react';\n\nimport { DashboardModel, PanelModel } from '../../state';\n\nimport { PanelHeaderMenu } from './PanelHeaderMenu';\nimport { PanelHeaderMenuProvider } from './PanelHeaderMenuProvider';\n\ninterface Props {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  onClose: () => void;\n}\n\nexport const PanelHeaderMenuWrapper: FC<Props> = ({ panel, dashboard }) => {\n  return (\n    <PanelHeaderMenuProvider panel={panel} dashboard={dashboard}>\n      {({ items }) => {\n        return <PanelHeaderMenu items={items} />;\n      }}\n    </PanelHeaderMenuProvider>\n  );\n};\n","import React, { FC } from 'react';\n\nimport { QueryResultMetaNotice } from '@grafana/data';\nimport { Icon, Tooltip } from '@grafana/ui';\n\ninterface Props {\n  notice: QueryResultMetaNotice;\n  onClick: (e: React.SyntheticEvent, tab: string) => void;\n}\n\nexport const PanelHeaderNotice: FC<Props> = ({ notice, onClick }) => {\n  const iconName =\n    notice.severity === 'error' || notice.severity === 'warning' ? 'exclamation-triangle' : 'info-circle';\n\n  return (\n    <Tooltip content={notice.text} key={notice.severity}>\n      {notice.inspect ? (\n        <div className=\"panel-info-notice pointer\" onClick={(e) => onClick(e, notice.inspect!)}>\n          <Icon name={iconName} style={{ marginRight: '8px' }} />\n        </div>\n      ) : (\n        <a className=\"panel-info-notice\" href={notice.link} target=\"_blank\" rel=\"noreferrer\">\n          <Icon name={iconName} style={{ marginRight: '8px' }} />\n        </a>\n      )}\n    </Tooltip>\n  );\n};\n","import React, { FC, useCallback } from 'react';\n\nimport { DataFrame, QueryResultMetaNotice } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\n\nimport { PanelHeaderNotice } from './PanelHeaderNotice';\n\ninterface Props {\n  panelId: number;\n  frames: DataFrame[];\n}\n\nexport const PanelHeaderNotices: FC<Props> = ({ frames, panelId }) => {\n  const openInspect = useCallback(\n    (e: React.SyntheticEvent, tab: string) => {\n      e.stopPropagation();\n      locationService.partial({ inspect: panelId, inspectTab: tab });\n    },\n    [panelId]\n  );\n\n  // dedupe on severity\n  const notices: Record<string, QueryResultMetaNotice> = {};\n  for (const frame of frames) {\n    if (!frame.meta || !frame.meta.notices) {\n      continue;\n    }\n\n    for (const notice of frame.meta.notices) {\n      notices[notice.severity] = notice;\n    }\n  }\n\n  return (\n    <>\n      {Object.values(notices).map((notice) => (\n        <PanelHeaderNotice notice={notice} onClick={openInspect} key={notice.severity} />\n      ))}\n    </>\n  );\n};\n","import { css, cx } from '@emotion/css';\nimport React, { FC } from 'react';\n\nimport { DataLink, GrafanaTheme2, PanelData } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Icon, useStyles2, ClickOutsideWrapper } from '@grafana/ui';\nimport { DashboardModel } from 'app/features/dashboard/state/DashboardModel';\nimport { PanelModel } from 'app/features/dashboard/state/PanelModel';\nimport { getPanelLinksSupplier } from 'app/features/panel/panellinks/linkSuppliers';\n\nimport PanelHeaderCorner from './PanelHeaderCorner';\nimport { PanelHeaderLoadingIndicator } from './PanelHeaderLoadingIndicator';\nimport { PanelHeaderMenuTrigger } from './PanelHeaderMenuTrigger';\nimport { PanelHeaderMenuWrapper } from './PanelHeaderMenuWrapper';\nimport { PanelHeaderNotices } from './PanelHeaderNotices';\n\nexport interface Props {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  title?: string;\n  description?: string;\n  links?: DataLink[];\n  error?: string;\n  alertState?: string;\n  isViewing: boolean;\n  isEditing: boolean;\n  data: PanelData;\n}\n\nexport const PanelHeader: FC<Props> = ({ panel, error, isViewing, isEditing, data, alertState, dashboard }) => {\n  const onCancelQuery = () => panel.getQueryRunner().cancelQuery();\n  const title = panel.getDisplayTitle();\n  const className = cx('panel-header', !(isViewing || isEditing) ? 'grid-drag-handle' : '');\n  const styles = useStyles2(panelStyles);\n\n  return (\n    <>\n      <PanelHeaderLoadingIndicator state={data.state} onClick={onCancelQuery} />\n      <PanelHeaderCorner\n        panel={panel}\n        title={panel.title}\n        description={panel.description}\n        scopedVars={panel.scopedVars}\n        links={getPanelLinksSupplier(panel)}\n        error={error}\n      />\n      <div className={className}>\n        <PanelHeaderMenuTrigger data-testid={selectors.components.Panels.Panel.title(title)}>\n          {({ closeMenu, panelMenuOpen }) => {\n            return (\n              <ClickOutsideWrapper onClick={closeMenu} parent={document}>\n                <div className=\"panel-title\">\n                  <PanelHeaderNotices frames={data.series} panelId={panel.id} />\n                  {alertState ? (\n                    <Icon\n                      name={alertState === 'alerting' ? 'heart-break' : 'heart'}\n                      className=\"icon-gf panel-alert-icon\"\n                      style={{ marginRight: '4px' }}\n                      size=\"sm\"\n                    />\n                  ) : null}\n                  <h2 className={styles.titleText}>{title}</h2>\n                  {!dashboard.meta.publicDashboardAccessToken && (\n                    <div data-testid=\"panel-dropdown\">\n                      <Icon name=\"angle-down\" className=\"panel-menu-toggle\" />\n                      {panelMenuOpen ? (\n                        <PanelHeaderMenuWrapper panel={panel} dashboard={dashboard} onClose={closeMenu} />\n                      ) : null}\n                    </div>\n                  )}\n                  {data.request && data.request.timeInfo && (\n                    <span className=\"panel-time-info\">\n                      <Icon name=\"clock-nine\" size=\"sm\" /> {data.request.timeInfo}\n                    </span>\n                  )}\n                </div>\n              </ClickOutsideWrapper>\n            );\n          }}\n        </PanelHeaderMenuTrigger>\n      </div>\n    </>\n  );\n};\n\nconst panelStyles = (theme: GrafanaTheme2) => {\n  return {\n    titleText: css`\n      text-overflow: ellipsis;\n      overflow: hidden;\n      white-space: nowrap;\n      max-width: calc(100% - 38px);\n      cursor: pointer;\n      font-weight: ${theme.typography.fontWeightMedium};\n      font-size: ${theme.typography.body.fontSize};\n      margin: 0;\n\n      &:hover {\n        color: ${theme.colors.text.primary};\n      }\n      .panel-has-alert & {\n        max-width: calc(100% - 54px);\n      }\n    `,\n  };\n};\n","import classNames from 'classnames';\nimport React, { PureComponent } from 'react';\nimport { Subscription } from 'rxjs';\n\nimport {\n  AbsoluteTimeRange,\n  AnnotationChangeEvent,\n  AnnotationEventUIModel,\n  CoreApp,\n  DashboardCursorSync,\n  EventFilterOptions,\n  FieldConfigSource,\n  getDefaultTimeRange,\n  LoadingState,\n  PanelData,\n  PanelPlugin,\n  PanelPluginMeta,\n  TimeRange,\n  toDataFrameDTO,\n  toUtc,\n} from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { config, locationService, RefreshEvent } from '@grafana/runtime';\nimport { VizLegendOptions } from '@grafana/schema';\nimport { ErrorBoundary, PanelContext, PanelContextProvider, SeriesVisibilityChangeMode } from '@grafana/ui';\nimport { PANEL_BORDER } from 'app/core/constants';\nimport { profiler } from 'app/core/profiler';\nimport { applyPanelTimeOverrides } from 'app/features/dashboard/utils/panel';\nimport { changeSeriesColorConfigFactory } from 'app/plugins/panel/timeseries/overrides/colorSeriesConfigFactory';\nimport { RenderEvent } from 'app/types/events';\n\nimport { isSoloRoute } from '../../../routes/utils';\nimport { deleteAnnotation, saveAnnotation, updateAnnotation } from '../../annotations/api';\nimport { getDashboardQueryRunner } from '../../query/state/DashboardQueryRunner/DashboardQueryRunner';\nimport { getTimeSrv, TimeSrv } from '../services/TimeSrv';\nimport { DashboardModel, PanelModel } from '../state';\nimport { loadSnapshotData } from '../utils/loadSnapshotData';\n\nimport { PanelHeader } from './PanelHeader/PanelHeader';\nimport { seriesVisibilityConfigFactory } from './SeriesVisibilityConfigFactory';\nimport { liveTimer } from './liveTimer';\n\nconst DEFAULT_PLUGIN_ERROR = 'Error in plugin';\n\nexport interface Props {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  plugin: PanelPlugin;\n  isViewing: boolean;\n  isEditing: boolean;\n  isInView: boolean;\n  width: number;\n  height: number;\n  onInstanceStateChange: (value: any) => void;\n}\n\nexport interface State {\n  isFirstLoad: boolean;\n  renderCounter: number;\n  errorMessage?: string;\n  refreshWhenInView: boolean;\n  context: PanelContext;\n  data: PanelData;\n  liveTime?: TimeRange;\n}\n\nexport class PanelChrome extends PureComponent<Props, State> {\n  private readonly timeSrv: TimeSrv = getTimeSrv();\n  private subs = new Subscription();\n  private eventFilter: EventFilterOptions = { onlyLocal: true };\n\n  constructor(props: Props) {\n    super(props);\n\n    // Can this eventBus be on PanelModel?  when we have more complex event filtering, that may be a better option\n    const eventBus = props.dashboard.events.newScopedBus(`panel:${props.panel.id}`, this.eventFilter);\n\n    this.state = {\n      isFirstLoad: true,\n      renderCounter: 0,\n      refreshWhenInView: false,\n      context: {\n        eventBus,\n        app: this.getPanelContextApp(),\n        sync: this.getSync,\n        onSeriesColorChange: this.onSeriesColorChange,\n        onToggleSeriesVisibility: this.onSeriesVisibilityChange,\n        onAnnotationCreate: this.onAnnotationCreate,\n        onAnnotationUpdate: this.onAnnotationUpdate,\n        onAnnotationDelete: this.onAnnotationDelete,\n        onInstanceStateChange: this.onInstanceStateChange,\n        onToggleLegendSort: this.onToggleLegendSort,\n        canAddAnnotations: props.dashboard.canAddAnnotations.bind(props.dashboard),\n        canEditAnnotations: props.dashboard.canEditAnnotations.bind(props.dashboard),\n        canDeleteAnnotations: props.dashboard.canDeleteAnnotations.bind(props.dashboard),\n      },\n      data: this.getInitialPanelDataState(),\n    };\n  }\n\n  // Due to a mutable panel model we get the sync settings via function that proactively reads from the model\n  getSync = () => (this.props.isEditing ? DashboardCursorSync.Off : this.props.dashboard.graphTooltip);\n\n  onInstanceStateChange = (value: any) => {\n    this.props.onInstanceStateChange(value);\n\n    this.setState({\n      context: {\n        ...this.state.context,\n        instanceState: value,\n      },\n    });\n  };\n\n  getPanelContextApp() {\n    if (this.props.isEditing) {\n      return CoreApp.PanelEditor;\n    }\n    if (this.props.isViewing) {\n      return CoreApp.PanelViewer;\n    }\n\n    return CoreApp.Dashboard;\n  }\n\n  onSeriesColorChange = (label: string, color: string) => {\n    this.onFieldConfigChange(changeSeriesColorConfigFactory(label, color, this.props.panel.fieldConfig));\n  };\n\n  onSeriesVisibilityChange = (label: string, mode: SeriesVisibilityChangeMode) => {\n    this.onFieldConfigChange(\n      seriesVisibilityConfigFactory(label, mode, this.props.panel.fieldConfig, this.state.data.series)\n    );\n  };\n\n  onToggleLegendSort = (sortKey: string) => {\n    const legendOptions: VizLegendOptions = this.props.panel.options.legend;\n\n    // We don't want to do anything when legend options are not available\n    if (!legendOptions) {\n      return;\n    }\n\n    let sortDesc = legendOptions.sortDesc;\n    let sortBy = legendOptions.sortBy;\n    if (sortKey !== sortBy) {\n      sortDesc = undefined;\n    }\n\n    // if already sort ascending, disable sorting\n    if (sortDesc === false) {\n      sortBy = undefined;\n      sortDesc = undefined;\n    } else {\n      sortDesc = !sortDesc;\n      sortBy = sortKey;\n    }\n\n    this.onOptionsChange({\n      ...this.props.panel.options,\n      legend: { ...legendOptions, sortBy, sortDesc },\n    });\n  };\n\n  getInitialPanelDataState(): PanelData {\n    return {\n      state: LoadingState.NotStarted,\n      series: [],\n      timeRange: getDefaultTimeRange(),\n    };\n  }\n\n  componentDidMount() {\n    const { panel, dashboard } = this.props;\n\n    // Subscribe to panel events\n    this.subs.add(panel.events.subscribe(RefreshEvent, this.onRefresh));\n    this.subs.add(panel.events.subscribe(RenderEvent, this.onRender));\n\n    dashboard.panelInitialized(this.props.panel);\n\n    // Move snapshot data into the query response\n    if (this.hasPanelSnapshot) {\n      this.setState({\n        data: loadSnapshotData(panel, dashboard),\n        isFirstLoad: false,\n      });\n      return;\n    }\n\n    if (!this.wantsQueryExecution) {\n      this.setState({ isFirstLoad: false });\n    }\n\n    this.subs.add(\n      panel\n        .getQueryRunner()\n        .getData({ withTransforms: true, withFieldConfig: true })\n        .subscribe({\n          next: (data) => this.onDataUpdate(data),\n        })\n    );\n\n    // Listen for live timer events\n    liveTimer.listen(this);\n  }\n\n  componentWillUnmount() {\n    this.subs.unsubscribe();\n    liveTimer.remove(this);\n  }\n\n  liveTimeChanged(liveTime: TimeRange) {\n    const { data } = this.state;\n    if (data.timeRange) {\n      const delta = liveTime.to.valueOf() - data.timeRange.to.valueOf();\n      if (delta < 100) {\n        // 10hz\n        console.log('Skip tick render', this.props.panel.title, delta);\n        return;\n      }\n    }\n    this.setState({ liveTime });\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { isInView, width } = this.props;\n    const { context } = this.state;\n\n    const app = this.getPanelContextApp();\n\n    if (context.app !== app) {\n      this.setState({\n        context: {\n          ...context,\n          app,\n        },\n      });\n    }\n\n    // View state has changed\n    if (isInView !== prevProps.isInView) {\n      if (isInView) {\n        // Check if we need a delayed refresh\n        if (this.state.refreshWhenInView) {\n          this.onRefresh();\n        }\n      }\n    }\n\n    // The timer depends on panel width\n    if (width !== prevProps.width) {\n      liveTimer.updateInterval(this);\n    }\n  }\n\n  // Updates the response with information from the stream\n  // The next is outside a react synthetic event so setState is not batched\n  // So in this context we can only do a single call to setState\n  onDataUpdate(data: PanelData) {\n    const { dashboard, panel, plugin } = this.props;\n\n    // Ignore this data update if we are now a non data panel\n    if (plugin.meta.skipDataQuery) {\n      this.setState({ data: this.getInitialPanelDataState() });\n      return;\n    }\n\n    let { isFirstLoad } = this.state;\n    let errorMessage: string | undefined;\n\n    switch (data.state) {\n      case LoadingState.Loading:\n        // Skip updating state data if it is already in loading state\n        // This is to avoid rendering partial loading responses\n        if (this.state.data.state === LoadingState.Loading) {\n          return;\n        }\n        break;\n      case LoadingState.Error:\n        const { error } = data;\n        if (error) {\n          if (errorMessage !== error.message) {\n            errorMessage = error.message;\n          }\n        }\n        break;\n      case LoadingState.Done:\n        // If we are doing a snapshot save data in panel model\n        if (dashboard.snapshot) {\n          panel.snapshotData = data.series.map((frame) => toDataFrameDTO(frame));\n        }\n        if (isFirstLoad) {\n          isFirstLoad = false;\n        }\n        break;\n    }\n\n    this.setState({ isFirstLoad, errorMessage, data, liveTime: undefined });\n  }\n\n  onRefresh = () => {\n    const { dashboard, panel, isInView, width } = this.props;\n\n    if (!isInView) {\n      this.setState({ refreshWhenInView: true });\n      return;\n    }\n\n    const timeData = applyPanelTimeOverrides(panel, this.timeSrv.timeRange());\n\n    // Issue Query\n    if (this.wantsQueryExecution) {\n      if (width < 0) {\n        return;\n      }\n\n      if (this.state.refreshWhenInView) {\n        this.setState({ refreshWhenInView: false });\n      }\n      panel.runAllPanelQueries({\n        dashboardId: dashboard.id,\n        dashboardUID: dashboard.uid,\n        dashboardTimezone: dashboard.getTimezone(),\n        publicDashboardAccessToken: dashboard.meta.publicDashboardAccessToken,\n        timeData,\n        width,\n      });\n    } else {\n      // The panel should render on refresh as well if it doesn't have a query, like clock panel\n      this.setState({\n        data: { ...this.state.data, timeRange: this.timeSrv.timeRange() },\n        renderCounter: this.state.renderCounter + 1,\n        liveTime: undefined,\n      });\n    }\n  };\n\n  onRender = () => {\n    const stateUpdate = { renderCounter: this.state.renderCounter + 1 };\n    this.setState(stateUpdate);\n  };\n\n  onOptionsChange = (options: any) => {\n    this.props.panel.updateOptions(options);\n  };\n\n  onFieldConfigChange = (config: FieldConfigSource) => {\n    this.props.panel.updateFieldConfig(config);\n  };\n\n  onPanelError = (error: Error) => {\n    const errorMessage = error.message || DEFAULT_PLUGIN_ERROR;\n    if (this.state.errorMessage !== errorMessage) {\n      this.setState({ errorMessage });\n    }\n  };\n\n  onPanelErrorRecover = () => {\n    this.setState({ errorMessage: undefined });\n  };\n\n  onAnnotationCreate = async (event: AnnotationEventUIModel) => {\n    const isRegion = event.from !== event.to;\n    const anno = {\n      dashboardUID: this.props.dashboard.uid,\n      panelId: this.props.panel.id,\n      isRegion,\n      time: event.from,\n      timeEnd: isRegion ? event.to : 0,\n      tags: event.tags,\n      text: event.description,\n    };\n    await saveAnnotation(anno);\n    getDashboardQueryRunner().run({ dashboard: this.props.dashboard, range: this.timeSrv.timeRange() });\n    this.state.context.eventBus.publish(new AnnotationChangeEvent(anno));\n  };\n\n  onAnnotationDelete = async (id: string) => {\n    await deleteAnnotation({ id });\n    getDashboardQueryRunner().run({ dashboard: this.props.dashboard, range: this.timeSrv.timeRange() });\n    this.state.context.eventBus.publish(new AnnotationChangeEvent({ id }));\n  };\n\n  onAnnotationUpdate = async (event: AnnotationEventUIModel) => {\n    const isRegion = event.from !== event.to;\n    const anno = {\n      id: event.id,\n      dashboardUID: this.props.dashboard.uid,\n      panelId: this.props.panel.id,\n      isRegion,\n      time: event.from,\n      timeEnd: isRegion ? event.to : 0,\n      tags: event.tags,\n      text: event.description,\n    };\n    await updateAnnotation(anno);\n\n    getDashboardQueryRunner().run({ dashboard: this.props.dashboard, range: this.timeSrv.timeRange() });\n    this.state.context.eventBus.publish(new AnnotationChangeEvent(anno));\n  };\n\n  get hasPanelSnapshot() {\n    const { panel } = this.props;\n    return panel.snapshotData && panel.snapshotData.length;\n  }\n\n  get wantsQueryExecution() {\n    return !(this.props.plugin.meta.skipDataQuery || this.hasPanelSnapshot);\n  }\n\n  onChangeTimeRange = (timeRange: AbsoluteTimeRange) => {\n    this.timeSrv.setTime({\n      from: toUtc(timeRange.from),\n      to: toUtc(timeRange.to),\n    });\n  };\n\n  shouldSignalRenderingCompleted(loadingState: LoadingState, pluginMeta: PanelPluginMeta) {\n    return loadingState === LoadingState.Done || pluginMeta.skipDataQuery;\n  }\n\n  skipFirstRender(loadingState: LoadingState) {\n    const { isFirstLoad } = this.state;\n    return (\n      this.wantsQueryExecution &&\n      isFirstLoad &&\n      (loadingState === LoadingState.Loading || loadingState === LoadingState.NotStarted)\n    );\n  }\n\n  renderPanel(width: number, height: number) {\n    const { panel, plugin, dashboard } = this.props;\n    const { renderCounter, data } = this.state;\n    const { theme } = config;\n    const { state: loadingState } = data;\n\n    // do not render component until we have first data\n    if (this.skipFirstRender(loadingState)) {\n      return null;\n    }\n\n    // This is only done to increase a counter that is used by backend\n    // image rendering to know when to capture image\n    if (this.shouldSignalRenderingCompleted(loadingState, plugin.meta)) {\n      profiler.renderingCompleted();\n    }\n\n    const PanelComponent = plugin.panel!;\n    const timeRange = this.state.liveTime ?? data.timeRange ?? this.timeSrv.timeRange();\n    const headerHeight = this.hasOverlayHeader() ? 0 : theme.panelHeaderHeight;\n    const chromePadding = plugin.noPadding ? 0 : theme.panelPadding;\n    const panelWidth = width - chromePadding * 2 - PANEL_BORDER;\n    const innerPanelHeight = height - headerHeight - chromePadding * 2 - PANEL_BORDER;\n    const panelContentClassNames = classNames({\n      'panel-content': true,\n      'panel-content--no-padding': plugin.noPadding,\n    });\n    const panelOptions = panel.getOptions();\n\n    // Update the event filter (dashboard settings may have changed)\n    // Yes this is called ever render for a function that is triggered on every mouse move\n    this.eventFilter.onlyLocal = dashboard.graphTooltip === 0;\n\n    return (\n      <>\n        <div className={panelContentClassNames}>\n          <PanelContextProvider value={this.state.context}>\n            <PanelComponent\n              id={panel.id}\n              data={data}\n              title={panel.title}\n              timeRange={timeRange}\n              timeZone={this.props.dashboard.getTimezone()}\n              options={panelOptions}\n              fieldConfig={panel.fieldConfig}\n              transparent={panel.transparent}\n              width={panelWidth}\n              height={innerPanelHeight}\n              renderCounter={renderCounter}\n              replaceVariables={panel.replaceVariables}\n              onOptionsChange={this.onOptionsChange}\n              onFieldConfigChange={this.onFieldConfigChange}\n              onChangeTimeRange={this.onChangeTimeRange}\n              eventBus={dashboard.events}\n            />\n          </PanelContextProvider>\n        </div>\n      </>\n    );\n  }\n\n  hasOverlayHeader() {\n    const { panel } = this.props;\n    const { data } = this.state;\n\n    // always show normal header if we have time override\n    if (data.request && data.request.timeInfo) {\n      return false;\n    }\n\n    return !panel.hasTitle();\n  }\n\n  render() {\n    const { dashboard, panel, isViewing, isEditing, width, height, plugin } = this.props;\n    const { errorMessage, data } = this.state;\n    const { transparent } = panel;\n\n    const alertState = data.alertState?.state;\n\n    const containerClassNames = classNames({\n      'panel-container': true,\n      'panel-container--absolute': isSoloRoute(locationService.getLocation().pathname),\n      'panel-container--transparent': transparent,\n      'panel-container--no-title': this.hasOverlayHeader(),\n      [`panel-alert-state--${alertState}`]: alertState !== undefined,\n    });\n\n    return (\n      <section\n        className={containerClassNames}\n        aria-label={selectors.components.Panels.Panel.containerByTitle(panel.title)}\n      >\n        <PanelHeader\n          panel={panel}\n          dashboard={dashboard}\n          title={panel.title}\n          description={panel.description}\n          links={panel.links}\n          error={errorMessage}\n          isEditing={isEditing}\n          isViewing={isViewing}\n          alertState={alertState}\n          data={data}\n        />\n        <ErrorBoundary\n          dependencies={[data, plugin, panel.getOptions()]}\n          onError={this.onPanelError}\n          onRecover={this.onPanelErrorRecover}\n        >\n          {({ error }) => {\n            if (error) {\n              return null;\n            }\n            return this.renderPanel(width, height);\n          }}\n        </ErrorBoundary>\n      </section>\n    );\n  }\n}\n","import classNames from 'classnames';\nimport React, { PureComponent } from 'react';\nimport { connect, MapDispatchToProps, MapStateToProps } from 'react-redux';\nimport { Subscription } from 'rxjs';\n\nimport { getDefaultTimeRange, LoadingState, PanelData, PanelPlugin } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { AngularComponent, getAngularLoader, locationService } from '@grafana/runtime';\nimport config from 'app/core/config';\nimport { PANEL_BORDER } from 'app/core/constants';\nimport { setPanelAngularComponent } from 'app/features/panel/state/reducers';\nimport { getPanelStateForModel } from 'app/features/panel/state/selectors';\nimport { StoreState } from 'app/types';\n\nimport { isSoloRoute } from '../../../routes/utils';\nimport { getTimeSrv, TimeSrv } from '../services/TimeSrv';\nimport { DashboardModel, PanelModel } from '../state';\n\nimport { PanelHeader } from './PanelHeader/PanelHeader';\n\ninterface OwnProps {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  plugin: PanelPlugin;\n  isViewing: boolean;\n  isEditing: boolean;\n  isInView: boolean;\n  width: number;\n  height: number;\n}\n\ninterface ConnectedProps {\n  angularComponent?: AngularComponent;\n}\n\ninterface DispatchProps {\n  setPanelAngularComponent: typeof setPanelAngularComponent;\n}\n\nexport type Props = OwnProps & ConnectedProps & DispatchProps;\n\nexport interface State {\n  data: PanelData;\n  errorMessage?: string;\n}\n\ninterface AngularScopeProps {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  size: {\n    height: number;\n    width: number;\n  };\n}\n\nexport class PanelChromeAngularUnconnected extends PureComponent<Props, State> {\n  element: HTMLElement | null = null;\n  timeSrv: TimeSrv = getTimeSrv();\n  scopeProps?: AngularScopeProps;\n  subs = new Subscription();\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      data: {\n        state: LoadingState.NotStarted,\n        series: [],\n        timeRange: getDefaultTimeRange(),\n      },\n    };\n  }\n\n  componentDidMount() {\n    const { panel } = this.props;\n    this.loadAngularPanel();\n\n    // subscribe to data events\n    const queryRunner = panel.getQueryRunner();\n\n    // we are not displaying any of this data so no need for transforms or field config\n    this.subs.add(\n      queryRunner.getData({ withTransforms: false, withFieldConfig: false }).subscribe({\n        next: (data: PanelData) => this.onPanelDataUpdate(data),\n      })\n    );\n  }\n\n  onPanelDataUpdate(data: PanelData) {\n    let errorMessage: string | undefined;\n\n    if (data.state === LoadingState.Error) {\n      const { error } = data;\n      if (error) {\n        if (errorMessage !== error.message) {\n          errorMessage = error.message;\n        }\n      }\n    }\n\n    this.setState({ data, errorMessage });\n  }\n\n  componentWillUnmount() {\n    this.subs.unsubscribe();\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    const { plugin, height, width, panel } = this.props;\n\n    if (prevProps.plugin !== plugin) {\n      this.loadAngularPanel();\n    }\n\n    if (prevProps.width !== width || prevProps.height !== height) {\n      if (this.scopeProps) {\n        this.scopeProps.size.height = this.getInnerPanelHeight();\n        this.scopeProps.size.width = this.getInnerPanelWidth();\n        panel.render();\n      }\n    }\n  }\n\n  getInnerPanelHeight() {\n    const { plugin, height } = this.props;\n    const { theme } = config;\n\n    const headerHeight = this.hasOverlayHeader() ? 0 : theme.panelHeaderHeight;\n    const chromePadding = plugin.noPadding ? 0 : theme.panelPadding;\n    return height - headerHeight - chromePadding * 2 - PANEL_BORDER;\n  }\n\n  getInnerPanelWidth() {\n    const { plugin, width } = this.props;\n    const { theme } = config;\n\n    const chromePadding = plugin.noPadding ? 0 : theme.panelPadding;\n    return width - chromePadding * 2 - PANEL_BORDER;\n  }\n\n  loadAngularPanel() {\n    const { panel, dashboard, setPanelAngularComponent } = this.props;\n\n    // if we have no element or already have loaded the panel return\n    if (!this.element) {\n      return;\n    }\n\n    const loader = getAngularLoader();\n    const template = '<plugin-component type=\"panel\" class=\"panel-height-helper\"></plugin-component>';\n\n    this.scopeProps = {\n      panel: panel,\n      dashboard: dashboard,\n      size: { width: this.getInnerPanelWidth(), height: this.getInnerPanelHeight() },\n    };\n\n    setPanelAngularComponent({\n      key: panel.key,\n      angularComponent: loader.load(this.element, this.scopeProps, template),\n    });\n  }\n\n  hasOverlayHeader() {\n    const { panel } = this.props;\n    const { data } = this.state;\n\n    // always show normal header if we have time override\n    if (data.request && data.request.timeInfo) {\n      return false;\n    }\n\n    return !panel.hasTitle();\n  }\n\n  render() {\n    const { dashboard, panel, isViewing, isEditing, plugin } = this.props;\n    const { errorMessage, data } = this.state;\n    const { transparent } = panel;\n\n    const alertState = data.alertState?.state;\n\n    const containerClassNames = classNames({\n      'panel-container': true,\n      'panel-container--absolute': isSoloRoute(locationService.getLocation().pathname),\n      'panel-container--transparent': transparent,\n      'panel-container--no-title': this.hasOverlayHeader(),\n      'panel-has-alert': panel.alert !== undefined,\n      [`panel-alert-state--${alertState}`]: alertState !== undefined,\n    });\n\n    const panelContentClassNames = classNames({\n      'panel-content': true,\n      'panel-content--no-padding': plugin.noPadding,\n    });\n\n    return (\n      <div className={containerClassNames} aria-label={selectors.components.Panels.Panel.containerByTitle(panel.title)}>\n        <PanelHeader\n          panel={panel}\n          dashboard={dashboard}\n          title={panel.title}\n          description={panel.description}\n          links={panel.links}\n          error={errorMessage}\n          isViewing={isViewing}\n          isEditing={isEditing}\n          data={data}\n          alertState={alertState}\n        />\n        <div className={panelContentClassNames}>\n          <div ref={(element) => (this.element = element)} className=\"panel-height-helper\" />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, OwnProps, StoreState> = (state, props) => {\n  return {\n    angularComponent: getPanelStateForModel(state, props.panel)?.angularComponent,\n  };\n};\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, OwnProps> = { setPanelAngularComponent };\n\nexport const PanelChromeAngular = connect(mapStateToProps, mapDispatchToProps)(PanelChromeAngularUnconnected);\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { StoreState } from 'app/types';\n\nimport { initPanelState } from '../../panel/state/actions';\nimport { setPanelInstanceState } from '../../panel/state/reducers';\nimport { DashboardModel, PanelModel } from '../state';\n\nimport { LazyLoader } from './LazyLoader';\nimport { PanelChrome } from './PanelChrome';\nimport { PanelChromeAngular } from './PanelChromeAngular';\n\nexport interface OwnProps {\n  panel: PanelModel;\n  stateKey: string;\n  dashboard: DashboardModel;\n  isEditing: boolean;\n  isViewing: boolean;\n  width: number;\n  height: number;\n  lazy?: boolean;\n}\n\nconst mapStateToProps = (state: StoreState, props: OwnProps) => {\n  const panelState = state.panels[props.stateKey];\n  if (!panelState) {\n    return { plugin: null };\n  }\n\n  return {\n    plugin: panelState.plugin,\n    instanceState: panelState.instanceState,\n  };\n};\n\nconst mapDispatchToProps = {\n  initPanelState,\n  setPanelInstanceState,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport class DashboardPanelUnconnected extends PureComponent<Props> {\n  static defaultProps: Partial<Props> = {\n    lazy: true,\n  };\n\n  componentDidMount() {\n    this.props.panel.isInView = !this.props.lazy;\n    if (!this.props.lazy) {\n      this.onPanelLoad();\n    }\n  }\n\n  onInstanceStateChange = (value: any) => {\n    this.props.setPanelInstanceState({ key: this.props.stateKey, value });\n  };\n\n  onVisibilityChange = (v: boolean) => {\n    this.props.panel.isInView = v;\n  };\n\n  onPanelLoad = () => {\n    if (!this.props.plugin) {\n      this.props.initPanelState(this.props.panel);\n    }\n  };\n\n  render() {\n    const { dashboard, panel, isViewing, isEditing, width, height, lazy, plugin } = this.props;\n\n    const renderPanelChrome = (isInView: boolean) =>\n      plugin &&\n      (plugin.angularPanelCtrl ? (\n        <PanelChromeAngular\n          plugin={plugin}\n          panel={panel}\n          dashboard={dashboard}\n          isViewing={isViewing}\n          isEditing={isEditing}\n          isInView={isInView}\n          width={width}\n          height={height}\n        />\n      ) : (\n        <PanelChrome\n          plugin={plugin}\n          panel={panel}\n          dashboard={dashboard}\n          isViewing={isViewing}\n          isEditing={isEditing}\n          isInView={isInView}\n          width={width}\n          height={height}\n          onInstanceStateChange={this.onInstanceStateChange}\n        />\n      ));\n\n    return lazy ? (\n      <LazyLoader width={width} height={height} onChange={this.onVisibilityChange} onLoad={this.onPanelLoad}>\n        {({ isInView }) => renderPanelChrome(isInView)}\n      </LazyLoader>\n    ) : (\n      renderPanelChrome(true)\n    );\n  }\n}\n\nexport const DashboardPanel = connector(DashboardPanelUnconnected);\n","import React, { Component } from 'react';\n\nimport { renderMarkdown, LinkModelSupplier, ScopedVars } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { locationService, getTemplateSrv } from '@grafana/runtime';\nimport { Tooltip, PopoverContent } from '@grafana/ui';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { PanelModel } from 'app/features/dashboard/state/PanelModel';\nimport { InspectTab } from 'app/features/inspector/types';\n\nenum InfoMode {\n  Error = 'Error',\n  Info = 'Info',\n  Links = 'Links',\n}\n\nexport interface Props {\n  panel: PanelModel;\n  title?: string;\n  description?: string;\n  scopedVars?: ScopedVars;\n  links?: LinkModelSupplier<PanelModel>;\n  error?: string;\n}\n\nexport class PanelHeaderCorner extends Component<Props> {\n  timeSrv: TimeSrv = getTimeSrv();\n\n  getInfoMode = () => {\n    const { panel, error } = this.props;\n    if (error) {\n      return InfoMode.Error;\n    }\n    if (!!panel.description) {\n      return InfoMode.Info;\n    }\n    if (panel.links && panel.links.length) {\n      return InfoMode.Links;\n    }\n\n    return undefined;\n  };\n\n  getInfoContent = (): JSX.Element => {\n    const { panel } = this.props;\n    const markdown = panel.description || '';\n    const interpolatedMarkdown = getTemplateSrv().replace(markdown, panel.scopedVars);\n    const markedInterpolatedMarkdown = renderMarkdown(interpolatedMarkdown);\n    const links = this.props.links && this.props.links.getLinks(panel.replaceVariables);\n\n    return (\n      <div className=\"panel-info-content markdown-html\">\n        <div dangerouslySetInnerHTML={{ __html: markedInterpolatedMarkdown }} />\n\n        {links && links.length > 0 && (\n          <ul className=\"panel-info-corner-links\">\n            {links.map((link, idx) => {\n              return (\n                <li key={idx}>\n                  <a className=\"panel-info-corner-links__item\" href={link.href} target={link.target}>\n                    {link.title}\n                  </a>\n                </li>\n              );\n            })}\n          </ul>\n        )}\n      </div>\n    );\n  };\n\n  /**\n   * Open the Panel Inspector when we click on an error\n   */\n  onClickError = () => {\n    locationService.partial({\n      inspect: this.props.panel.id,\n      inspectTab: InspectTab.Error,\n    });\n  };\n\n  renderCornerType(infoMode: InfoMode, content: PopoverContent, onClick?: () => void) {\n    const theme = infoMode === InfoMode.Error ? 'error' : 'info';\n    const className = `panel-info-corner panel-info-corner--${infoMode.toLowerCase()}`;\n    const ariaLabel = selectors.components.Panels.Panel.headerCornerInfo(infoMode.toLowerCase());\n\n    return (\n      <Tooltip content={content} placement=\"top-start\" theme={theme} interactive>\n        <section className={className} onClick={onClick} aria-label={ariaLabel}>\n          <i aria-hidden className=\"fa\" />\n          <span className=\"panel-info-corner-inner\" />\n        </section>\n      </Tooltip>\n    );\n  }\n\n  render() {\n    const { error } = this.props;\n    const infoMode: InfoMode | undefined = this.getInfoMode();\n\n    if (!infoMode) {\n      return null;\n    }\n\n    if (infoMode === InfoMode.Error && error) {\n      return this.renderCornerType(infoMode, error, this.onClickError);\n    }\n\n    if (infoMode === InfoMode.Info || infoMode === InfoMode.Links) {\n      return this.renderCornerType(infoMode, this.getInfoContent);\n    }\n\n    return null;\n  }\n}\n\nexport default PanelHeaderCorner;\n","import { DataQuery, locationUtil, setWeekStart, DashboardLoadedEvent } from '@grafana/data';\nimport { config, isFetchError, locationService } from '@grafana/runtime';\nimport { notifyApp } from 'app/core/actions';\nimport appEvents from 'app/core/app_events';\nimport { createErrorNotification } from 'app/core/copy/appNotification';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport { KeybindingSrv } from 'app/core/services/keybindingSrv';\nimport store from 'app/core/store';\nimport { dashboardLoaderSrv } from 'app/features/dashboard/services/DashboardLoaderSrv';\nimport { DashboardSrv, getDashboardSrv } from 'app/features/dashboard/services/DashboardSrv';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { dashboardWatcher } from 'app/features/live/dashboard/dashboardWatcher';\nimport { playlistSrv } from 'app/features/playlist/PlaylistSrv';\nimport { toStateKey } from 'app/features/variables/utils';\nimport { DashboardDTO, DashboardInitPhase, DashboardRoutes, StoreState, ThunkDispatch, ThunkResult } from 'app/types';\n\nimport { createDashboardQueryRunner } from '../../query/state/DashboardQueryRunner/DashboardQueryRunner';\nimport { initVariablesTransaction } from '../../variables/state/actions';\nimport { getIfExistsLastKey } from '../../variables/state/selectors';\n\nimport { DashboardModel } from './DashboardModel';\nimport { PanelModel } from './PanelModel';\nimport { emitDashboardViewEvent } from './analyticsProcessor';\nimport { dashboardInitCompleted, dashboardInitFailed, dashboardInitFetching, dashboardInitServices } from './reducers';\n\nexport interface InitDashboardArgs {\n  urlUid?: string;\n  urlSlug?: string;\n  urlType?: string;\n  urlFolderId?: string;\n  panelType?: string;\n  accessToken?: string;\n  routeName?: string;\n  fixUrl: boolean;\n  keybindingSrv: KeybindingSrv;\n}\n\nasync function fetchDashboard(\n  args: InitDashboardArgs,\n  dispatch: ThunkDispatch,\n  getState: () => StoreState\n): Promise<DashboardDTO | null> {\n  // When creating new or adding panels to a dashboard from explore we load it from local storage\n  const model = store.getObject<DashboardDTO>(DASHBOARD_FROM_LS_KEY);\n  if (model) {\n    removeDashboardToFetchFromLocalStorage();\n    return model;\n  }\n\n  try {\n    switch (args.routeName) {\n      case DashboardRoutes.Home: {\n        // load home dash\n        const dashDTO: DashboardDTO = await backendSrv.get('/api/dashboards/home');\n\n        // if user specified a custom home dashboard redirect to that\n        if (dashDTO.redirectUri) {\n          const newUrl = locationUtil.stripBaseFromUrl(dashDTO.redirectUri);\n          locationService.replace(newUrl);\n          return null;\n        }\n\n        // disable some actions on the default home dashboard\n        dashDTO.meta.canSave = false;\n        dashDTO.meta.canShare = false;\n        dashDTO.meta.canStar = false;\n        return dashDTO;\n      }\n      case DashboardRoutes.Public: {\n        return await dashboardLoaderSrv.loadDashboard('public', args.urlSlug, args.accessToken);\n      }\n      case DashboardRoutes.Normal: {\n        const dashDTO: DashboardDTO = await dashboardLoaderSrv.loadDashboard(args.urlType, args.urlSlug, args.urlUid);\n\n        if (args.fixUrl && dashDTO.meta.url && !playlistSrv.isPlaying) {\n          // check if the current url is correct (might be old slug)\n          const dashboardUrl = locationUtil.stripBaseFromUrl(dashDTO.meta.url);\n          const currentPath = locationService.getLocation().pathname;\n\n          if (dashboardUrl !== currentPath) {\n            // Spread current location to persist search params used for navigation\n            locationService.replace({\n              ...locationService.getLocation(),\n              pathname: dashboardUrl,\n            });\n            console.log('not correct url correcting', dashboardUrl, currentPath);\n          }\n        }\n        return dashDTO;\n      }\n      case DashboardRoutes.New: {\n        return getNewDashboardModelData(args.urlFolderId, args.panelType);\n      }\n      case DashboardRoutes.Path: {\n        const path = args.urlSlug ?? '';\n        return await dashboardLoaderSrv.loadDashboard(DashboardRoutes.Path, path, path);\n      }\n      default:\n        throw { message: 'Unknown route ' + args.routeName };\n    }\n  } catch (err) {\n    // Ignore cancelled errors\n    if (isFetchError(err) && err.cancelled) {\n      return null;\n    }\n\n    dispatch(dashboardInitFailed({ message: 'Failed to fetch dashboard', error: err }));\n    console.error(err);\n    return null;\n  }\n}\n\nconst getQueriesByDatasource = (\n  panels: PanelModel[],\n  queries: { [datasourceId: string]: DataQuery[] } = {}\n): { [datasourceId: string]: DataQuery[] } => {\n  panels.forEach((panel) => {\n    if (panel.panels) {\n      getQueriesByDatasource(panel.panels, queries);\n    } else if (panel.targets) {\n      panel.targets.forEach((target) => {\n        if (target.datasource?.type) {\n          if (queries[target.datasource.type]) {\n            queries[target.datasource.type].push(target);\n          } else {\n            queries[target.datasource.type] = [target];\n          }\n        }\n      });\n    }\n  });\n  return queries;\n};\n\n/**\n * This action (or saga) does everything needed to bootstrap a dashboard & dashboard model.\n * First it handles the process of fetching the dashboard, correcting the url if required (causing redirects/url updates)\n *\n * This is used both for single dashboard & solo panel routes, home & new dashboard routes.\n *\n * Then it handles the initializing of the old angular services that the dashboard components & panels still depend on\n *\n */\nexport function initDashboard(args: InitDashboardArgs): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    // set fetching state\n    dispatch(dashboardInitFetching());\n\n    // fetch dashboard data\n    const dashDTO = await fetchDashboard(args, dispatch, getState);\n\n    // returns null if there was a redirect or error\n    if (!dashDTO) {\n      return;\n    }\n\n    // set initializing state\n    dispatch(dashboardInitServices());\n\n    // create model\n    let dashboard: DashboardModel;\n    try {\n      dashboard = new DashboardModel(dashDTO.dashboard, dashDTO.meta);\n    } catch (err) {\n      dispatch(dashboardInitFailed({ message: 'Failed create dashboard model', error: err }));\n      console.error(err);\n      return;\n    }\n\n    // add missing orgId query param\n    const storeState = getState();\n    const queryParams = locationService.getSearchObject();\n\n    if (!queryParams.orgId) {\n      // TODO this is currently not possible with the LocationService API\n      locationService.partial({ orgId: storeState.user.orgId }, true);\n    }\n\n    // init services\n    const timeSrv: TimeSrv = getTimeSrv();\n    const dashboardSrv: DashboardSrv = getDashboardSrv();\n\n    // legacy srv state, we need this value updated for built-in annotations\n    dashboardSrv.setCurrent(dashboard);\n\n    timeSrv.init(dashboard);\n\n    const dashboardUid = toStateKey(args.urlUid ?? dashboard.uid);\n    // template values service needs to initialize completely before the rest of the dashboard can load\n    await dispatch(initVariablesTransaction(dashboardUid, dashboard));\n\n    // DashboardQueryRunner needs to run after all variables have been resolved so that any annotation query including a variable\n    // will be correctly resolved\n    const runner = createDashboardQueryRunner({ dashboard, timeSrv });\n    runner.run({ dashboard, range: timeSrv.timeRange() });\n\n    if (getIfExistsLastKey(getState()) !== dashboardUid) {\n      // if a previous dashboard has slow running variable queries the batch uid will be the new one\n      // but the args.urlUid will be the same as before initVariablesTransaction was called so then we can't continue initializing\n      // the previous dashboard.\n      return;\n    }\n\n    // If dashboard is in a different init phase it means it cancelled during service init\n    if (getState().dashboard.initPhase !== DashboardInitPhase.Services) {\n      return;\n    }\n\n    try {\n      dashboard.processRepeats();\n\n      // handle auto fix experimental feature\n      if (queryParams.autofitpanels) {\n        dashboard.autoFitPanels(window.innerHeight, queryParams.kiosk);\n      }\n\n      args.keybindingSrv.setupDashboardBindings(dashboard);\n    } catch (err) {\n      if (err instanceof Error) {\n        dispatch(notifyApp(createErrorNotification('Dashboard init failed', err)));\n      }\n      console.error(err);\n    }\n\n    // send open dashboard event\n    if (args.routeName !== DashboardRoutes.New) {\n      emitDashboardViewEvent(dashboard);\n\n      // Listen for changes on the current dashboard\n      dashboardWatcher.watch(dashboard.uid);\n    } else {\n      dashboardWatcher.leave();\n    }\n\n    // set week start\n    if (dashboard.weekStart !== '') {\n      setWeekStart(dashboard.weekStart);\n    } else {\n      setWeekStart(config.bootData.user.weekStart);\n    }\n\n    // Propagate an app-wide event about the dashboard being loaded\n    appEvents.publish(\n      new DashboardLoadedEvent({\n        dashboardId: dashboard.uid,\n        orgId: storeState.user.orgId,\n        userId: storeState.user.user?.id,\n        grafanaVersion: config.buildInfo.version,\n        queries: getQueriesByDatasource(dashboard.panels),\n      })\n    );\n\n    // yay we are done\n    dispatch(dashboardInitCompleted(dashboard));\n  };\n}\n\nexport function getNewDashboardModelData(urlFolderId?: string, panelType?: string): any {\n  const data = {\n    meta: {\n      canStar: false,\n      canShare: false,\n      canDelete: false,\n      isNew: true,\n      folderId: 0,\n    },\n    dashboard: {\n      title: 'New dashboard',\n      panels: [\n        {\n          type: panelType ?? 'add-panel',\n          gridPos: { x: 0, y: 0, w: 12, h: 9 },\n          title: 'Panel Title',\n        },\n      ],\n    },\n  };\n\n  if (urlFolderId) {\n    data.meta.folderId = parseInt(urlFolderId, 10);\n  }\n\n  return data;\n}\n\nconst DASHBOARD_FROM_LS_KEY = 'DASHBOARD_FROM_LS_KEY';\n\nexport function setDashboardToFetchFromLocalStorage(model: DashboardDTO) {\n  store.setObject(DASHBOARD_FROM_LS_KEY, model);\n}\n\nexport function removeDashboardToFetchFromLocalStorage() {\n  store.delete(DASHBOARD_FROM_LS_KEY);\n}\n","import { reportMetaAnalytics, MetaAnalyticsEventName, DashboardViewEventPayload } from '@grafana/runtime';\n\nimport { DashboardModel } from './DashboardModel';\n\nexport function emitDashboardViewEvent(dashboard: DashboardModel) {\n  const eventData: DashboardViewEventPayload = {\n    dashboardId: dashboard.id,\n    dashboardName: dashboard.title,\n    dashboardUid: dashboard.uid,\n    folderName: dashboard.meta.folderTitle,\n    eventName: MetaAnalyticsEventName.DashboardView,\n    publicDashboardUid: dashboard.meta.publicDashboardUid,\n  };\n\n  reportMetaAnalytics(eventData);\n}\n","import { applyFieldOverrides, ArrayDataFrame, getDefaultTimeRange, LoadingState, PanelData } from '@grafana/data';\nimport { config } from 'app/core/config';\n\nimport { SnapshotWorker } from '../../query/state/DashboardQueryRunner/SnapshotWorker';\nimport { getProcessedDataFrames } from '../../query/state/runRequest';\nimport { getTimeSrv } from '../services/TimeSrv';\nimport { DashboardModel, PanelModel } from '../state';\n\nimport { applyPanelTimeOverrides } from './panel';\n\nexport function loadSnapshotData(panel: PanelModel, dashboard: DashboardModel): PanelData {\n  const data = getProcessedDataFrames(panel.snapshotData);\n  const worker = new SnapshotWorker();\n  const options = { dashboard, range: getDefaultTimeRange() };\n  const annotationEvents = worker.canWork(options) ? worker.getAnnotationsInSnapshot(dashboard, panel.id) : [];\n  const annotations = [new ArrayDataFrame(annotationEvents)];\n  const timeData = applyPanelTimeOverrides(panel, getTimeSrv().timeRange());\n\n  return {\n    timeRange: timeData.timeRange,\n    state: LoadingState.Done,\n    series: applyFieldOverrides({\n      data,\n      fieldConfig: {\n        defaults: {},\n        overrides: [],\n      },\n      replaceVariables: panel.replaceVariables,\n      fieldConfigRegistry: panel.plugin!.fieldConfigRegistry,\n      theme: config.theme2,\n      timeZone: dashboard.getTimezone(),\n    }),\n    annotations,\n  };\n}\n","import {\n  DataLink,\n  DisplayValue,\n  FieldDisplay,\n  formattedValueToString,\n  getFieldDisplayValuesProxy,\n  getTimeField,\n  InterpolateFunction,\n  Labels,\n  LinkModelSupplier,\n  ScopedVar,\n  ScopedVars,\n} from '@grafana/data';\nimport { PanelModel } from 'app/features/dashboard/state/PanelModel';\n\nimport { getLinkSrv } from './link_srv';\n\ninterface SeriesVars {\n  name?: string;\n  refId?: string;\n}\n\ninterface FieldVars {\n  name: string;\n  labels?: Labels;\n}\n\ninterface ValueVars {\n  raw: any;\n  numeric: number;\n  text: string;\n  time?: number;\n  calc?: string;\n}\n\ninterface DataViewVars {\n  name?: string;\n  refId?: string;\n  fields?: Record<string, DisplayValue>;\n}\n\ninterface DataLinkScopedVars extends ScopedVars {\n  __series: ScopedVar<SeriesVars>;\n  __field: ScopedVar<FieldVars>;\n  __value: ScopedVar<ValueVars>;\n  __data: ScopedVar<DataViewVars>;\n}\n\n/**\n * Link suppliers creates link models based on a link origin\n */\nexport const getFieldLinksSupplier = (value: FieldDisplay): LinkModelSupplier<FieldDisplay> | undefined => {\n  const links = value.field.links;\n  if (!links || links.length === 0) {\n    return undefined;\n  }\n\n  return {\n    getLinks: (replaceVariables: InterpolateFunction) => {\n      const scopedVars: Partial<DataLinkScopedVars> = {};\n\n      if (value.view) {\n        const { dataFrame } = value.view;\n\n        scopedVars['__series'] = {\n          value: {\n            name: dataFrame.name,\n            refId: dataFrame.refId,\n          },\n          text: 'Series',\n        };\n\n        const field = value.colIndex !== undefined ? dataFrame.fields[value.colIndex] : undefined;\n\n        if (field) {\n          scopedVars['__field'] = {\n            value: {\n              name: field.name,\n              labels: field.labels,\n            },\n            text: 'Field',\n          };\n\n          if (value.rowIndex !== undefined && value.rowIndex >= 0) {\n            const { timeField } = getTimeField(dataFrame);\n            scopedVars['__value'] = {\n              value: {\n                raw: field.values.get(value.rowIndex),\n                numeric: value.display.numeric,\n                text: formattedValueToString(value.display),\n                time: timeField ? timeField.values.get(value.rowIndex) : undefined,\n              },\n              text: 'Value',\n            };\n          }\n\n          // Expose other values on the row\n          if (value.view) {\n            scopedVars['__data'] = {\n              value: {\n                name: dataFrame.name,\n                refId: dataFrame.refId,\n                fields: getFieldDisplayValuesProxy({\n                  frame: dataFrame,\n                  rowIndex: value.rowIndex!,\n                }),\n              },\n              text: 'Data',\n            };\n          }\n        } else {\n          // calculation\n          scopedVars['__value'] = {\n            value: {\n              raw: value.display.numeric,\n              numeric: value.display.numeric,\n              text: formattedValueToString(value.display),\n              calc: value.name,\n            },\n            text: 'Value',\n          };\n        }\n      } else {\n        console.log('VALUE', value);\n      }\n\n      const replace: InterpolateFunction = (value: string, vars: ScopedVars | undefined, fmt?: string | Function) => {\n        const finalVars: ScopedVars = {\n          ...(scopedVars as ScopedVars),\n          ...vars,\n        };\n        return replaceVariables(value, finalVars, fmt);\n      };\n\n      return links.map((link: DataLink) => {\n        return getLinkSrv().getDataLinkUIModel(link, replace, value);\n      });\n    },\n  };\n};\n\nexport const getPanelLinksSupplier = (panel: PanelModel): LinkModelSupplier<PanelModel> | undefined => {\n  const links = panel.links;\n\n  if (!links || links.length === 0) {\n    return undefined;\n  }\n\n  return {\n    getLinks: () => {\n      return links.map((link) => {\n        return getLinkSrv().getDataLinkUIModel(link, panel.replaceVariables, panel);\n      });\n    },\n  };\n};\n","import { PanelModel } from 'app/features/dashboard/state';\nimport { StoreState } from 'app/types';\n\nimport { PanelState } from './reducers';\n\nexport function getPanelStateForModel(state: StoreState, model: PanelModel): PanelState | undefined {\n  return state.panels[model.key];\n}\n"],"names":["LazyLoader","children","width","height","onLoad","onChange","id","useUniqueId","loaded","setLoaded","useState","isInView","setIsInView","wrapperRef","useRef","useEffectOnce","addCallback","entry","isIntersecting","wrapperEl","current","observer","observe","callbacks","unobserve","Object","keys","length","disconnect","ref","style","c","IntersectionObserver","entries","target","rootMargin","createOverride","label","color","matcher","FieldMatcherID","options","properties","createProperty","value","mode","FieldColorModeId","fixedColor","PanelHeaderLoadingIndicator","state","onClick","styles","useStyles","getStyles","LoadingState","className","Tooltip","content","Icon","name","title","streamIndicator","theme","css","colors","textFaint","PanelHeaderMenuTrigger","divProps","clickCoordinates","setClickCoordinates","x","y","panelMenuOpen","setPanelMenuOpen","onMenuToggle","useCallback","event","clicked","deadZone","Math","sqrt","isClick","eventToClickCoordinates","onMouseDown","closeMenu","clientX","clientY","PanelHeaderMenu","PureComponent","menu","isSubMenu","role","map","menuItem","idx","PanelHeaderMenuItem","type","text","iconClassName","shortcut","subMenu","renderItems","render","this","props","items","PanelHeaderMenuProvider","panel","dashboard","setItems","angularComponent","useSelector","getPanelStateForModel","useEffect","onViewPanel","preventDefault","locationService","viewPanel","onEditPanel","editPanel","onAddLibraryPanel","addLibraryPanel","onUnlinkLibraryPanel","unlinkLibraryPanel","onInspectPanel","tab","inspect","inspectTab","reportInteraction","InspectTab","onMore","onDuplicatePanel","duplicatePanel","onCopyPanel","copyPanel","onRemovePanel","removePanel","onNavigateToExplore","openInNewWindow","ctrlKey","metaKey","url","window","open","config","undefined","store","navigateToExplore","getDataSourceSrv","getTimeSrv","getExploreUrl","onToggleLegend","toggleLegend","isEditing","viewTextTranslation","push","canEditPanel","shareTextTranslation","sharePanel","contextSrv","plugin","meta","skipDataQuery","inspectMenu","dataTextTranslation","e","canEdit","jsonTextTranslation","inspectTextTranslation","isViewing","isPanelModelLibraryPanel","scope","getScope","panelCtrl","$$childHead","ctrl","angularMenuItems","getExtendedMenu","item","reactItem","href","click","$eval","legend","showLegend","moreTextTranslation","getPanelMenu","PanelHeaderMenuWrapper","PanelHeaderNotice","notice","iconName","severity","marginRight","link","rel","PanelHeaderNotices","frames","panelId","openInspect","stopPropagation","notices","frame","values","PanelHeader","error","data","alertState","getDisplayTitle","cx","useStyles2","panelStyles","getQueryRunner","cancelQuery","PanelHeaderCorner","description","scopedVars","links","getPanelLinksSupplier","selectors","ClickOutsideWrapper","parent","document","series","size","titleText","publicDashboardAccessToken","onClose","request","timeInfo","typography","fontWeightMedium","body","fontSize","primary","PanelChrome","constructor","super","Subscription","onlyLocal","DashboardCursorSync","graphTooltip","onInstanceStateChange","setState","context","instanceState","onFieldConfigChange","fieldConfig","overrides","currentIndex","findIndex","override","overridesCopy","Array","from","existing","propertyIndex","p","propertiesCopy","changeSeriesColorConfigFactory","seriesVisibilityConfigFactory","sortKey","legendOptions","sortDesc","sortBy","onOptionsChange","refreshWhenInView","timeData","applyPanelTimeOverrides","timeSrv","timeRange","wantsQueryExecution","runAllPanelQueries","dashboardId","dashboardUID","uid","dashboardTimezone","getTimezone","renderCounter","liveTime","stateUpdate","updateOptions","updateFieldConfig","errorMessage","message","async","isRegion","to","anno","time","timeEnd","tags","saveAnnotation","getDashboardQueryRunner","run","range","eventBus","publish","AnnotationChangeEvent","deleteAnnotation","updateAnnotation","setTime","toUtc","events","newScopedBus","eventFilter","isFirstLoad","app","getPanelContextApp","sync","getSync","onSeriesColorChange","onToggleSeriesVisibility","onSeriesVisibilityChange","onAnnotationCreate","onAnnotationUpdate","onAnnotationDelete","onToggleLegendSort","canAddAnnotations","bind","canEditAnnotations","canDeleteAnnotations","getInitialPanelDataState","CoreApp","getDefaultTimeRange","componentDidMount","subs","add","subscribe","RefreshEvent","onRefresh","RenderEvent","onRender","panelInitialized","hasPanelSnapshot","loadSnapshotData","getData","withTransforms","withFieldConfig","next","onDataUpdate","liveTimer","componentWillUnmount","unsubscribe","liveTimeChanged","delta","valueOf","console","log","componentDidUpdate","prevProps","snapshot","snapshotData","toDataFrameDTO","shouldSignalRenderingCompleted","loadingState","pluginMeta","skipFirstRender","renderPanel","profiler","PanelComponent","headerHeight","hasOverlayHeader","panelHeaderHeight","chromePadding","noPadding","panelPadding","panelWidth","PANEL_BORDER","innerPanelHeight","panelContentClassNames","classNames","panelOptions","getOptions","PanelContext","timeZone","transparent","replaceVariables","onChangeTimeRange","hasTitle","containerClassNames","isSoloRoute","pathname","ErrorBoundary","dependencies","onError","onPanelError","onRecover","onPanelErrorRecover","PanelChromeAngularUnconnected","loadAngularPanel","queryRunner","onPanelDataUpdate","prevState","scopeProps","getInnerPanelHeight","getInnerPanelWidth","setPanelAngularComponent","element","loader","getAngularLoader","key","load","alert","mapDispatchToProps","PanelChromeAngular","connect","initPanelState","setPanelInstanceState","connector","panelState","panels","stateKey","DashboardPanelUnconnected","v","lazy","onPanelLoad","renderPanelChrome","angularPanelCtrl","onVisibilityChange","DashboardPanel","InfoMode","Component","Error","Info","Links","markdown","interpolatedMarkdown","getTemplateSrv","replace","markedInterpolatedMarkdown","renderMarkdown","getLinks","dangerouslySetInnerHTML","__html","renderCornerType","infoMode","toLowerCase","ariaLabel","placement","interactive","getInfoMode","onClickError","getInfoContent","getQueriesByDatasource","queries","forEach","targets","datasource","initDashboard","args","dispatch","getState","dashboardInitFetching","dashDTO","model","DASHBOARD_FROM_LS_KEY","removeDashboardToFetchFromLocalStorage","routeName","DashboardRoutes","backendSrv","redirectUri","newUrl","locationUtil","canSave","canShare","canStar","dashboardLoaderSrv","urlSlug","accessToken","urlType","urlUid","fixUrl","playlistSrv","dashboardUrl","currentPath","getNewDashboardModelData","urlFolderId","panelType","path","err","isFetchError","cancelled","dashboardInitFailed","fetchDashboard","dashboardInitServices","DashboardModel","storeState","queryParams","orgId","user","getDashboardSrv","setCurrent","init","dashboardUid","toStateKey","initVariablesTransaction","createDashboardQueryRunner","getIfExistsLastKey","initPhase","DashboardInitPhase","processRepeats","autofitpanels","autoFitPanels","innerHeight","kiosk","keybindingSrv","setupDashboardBindings","notifyApp","createErrorNotification","eventData","dashboardName","folderName","folderTitle","eventName","MetaAnalyticsEventName","publicDashboardUid","reportMetaAnalytics","emitDashboardViewEvent","dashboardWatcher","weekStart","setWeekStart","appEvents","DashboardLoadedEvent","userId","grafanaVersion","dashboardInitCompleted","canDelete","isNew","folderId","gridPos","w","h","parseInt","setDashboardToFetchFromLocalStorage","getProcessedDataFrames","worker","SnapshotWorker","annotationEvents","canWork","getAnnotationsInSnapshot","annotations","ArrayDataFrame","applyFieldOverrides","defaults","fieldConfigRegistry","getFieldLinksSupplier","field","view","dataFrame","refId","colIndex","fields","labels","rowIndex","timeField","getTimeField","raw","get","numeric","display","formattedValueToString","getFieldDisplayValuesProxy","calc","vars","fmt","finalVars","getLinkSrv","getDataLinkUIModel"],"sourceRoot":""}