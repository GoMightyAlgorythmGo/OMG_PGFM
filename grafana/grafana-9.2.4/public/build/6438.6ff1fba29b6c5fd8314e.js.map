{"version":3,"file":"6438.6ff1fba29b6c5fd8314e.js","mappings":"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","sources":["webpack://grafana/./public/app/core/hooks/useCleanup.ts","webpack://grafana/./public/app/features/alerting/unified/components/InvalidIntervalWarning.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/GrafanaAlertStatePicker.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/GrafanaEvaluationBehavior.tsx","webpack://grafana/./public/app/features/alerting/unified/api/preview.ts","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/PreviewRuleResult.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/PreviewRule.tsx","webpack://grafana/./public/app/features/alerting/unified/types/preview.ts","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/RuleEditorSection.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertQueriesStatus.ts","webpack://grafana/./public/app/features/alerting/unified/utils/accessControlHooks.ts"],"sourcesContent":["import { useEffect, useRef } from 'react';\n\nimport { useDispatch } from 'app/types';\n\nimport { cleanUpAction, CleanUpAction } from '../actions/cleanUp';\n\nexport function useCleanup(cleanupAction: CleanUpAction) {\n  const dispatch = useDispatch();\n  //bit of a hack to unburden user from having to wrap stateSelcetor in a useCallback. Otherwise cleanup would happen on every render\n  const selectorRef = useRef(cleanupAction);\n  selectorRef.current = cleanupAction;\n  useEffect(() => {\n    return () => {\n      dispatch(cleanUpAction({ cleanupAction: selectorRef.current }));\n    };\n  }, [dispatch]);\n}\n","import React, { FC } from 'react';\n\nimport { config } from '@grafana/runtime';\nimport { Alert } from '@grafana/ui';\n\nconst EvaluationIntervalLimitExceeded: FC = () => (\n  <Alert severity=\"warning\" title=\"Global evalutation interval limit exceeded\">\n    A minimum evaluation interval of <strong>{config.unifiedAlerting.minInterval}</strong> has been configured in\n    Grafana.\n    <br />\n    Please contact the administrator to configure a lower interval.\n  </Alert>\n);\n\nexport { EvaluationIntervalLimitExceeded };\n","import React, { FC, useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\nimport { SelectBaseProps } from '@grafana/ui/src/components/Select/types';\nimport { GrafanaAlertStateDecision } from 'app/types/unified-alerting-dto';\n\ntype Props = Omit<SelectBaseProps<GrafanaAlertStateDecision>, 'options'> & {\n  includeNoData: boolean;\n  includeError: boolean;\n};\n\nconst options: SelectableValue[] = [\n  { value: GrafanaAlertStateDecision.Alerting, label: 'Alerting' },\n  { value: GrafanaAlertStateDecision.NoData, label: 'No Data' },\n  { value: GrafanaAlertStateDecision.OK, label: 'OK' },\n  { value: GrafanaAlertStateDecision.Error, label: 'Error' },\n];\n\nexport const GrafanaAlertStatePicker: FC<Props> = ({ includeNoData, includeError, ...props }) => {\n  const opts = useMemo(() => {\n    if (!includeNoData) {\n      return options.filter((opt) => opt.value !== GrafanaAlertStateDecision.NoData);\n    }\n    if (!includeError) {\n      return options.filter((opt) => opt.value !== GrafanaAlertStateDecision.Error);\n    }\n    return options;\n  }, [includeNoData, includeError]);\n  return <Select options={opts} {...props} />;\n};\n","import { css } from '@emotion/css';\nimport React, { FC, useState } from 'react';\nimport { RegisterOptions, useFormContext } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Field, InlineLabel, Input, InputControl, useStyles2 } from '@grafana/ui';\n\nimport { RuleFormValues } from '../../types/rule-form';\nimport { checkEvaluationIntervalGlobalLimit } from '../../utils/config';\nimport { parsePrometheusDuration } from '../../utils/time';\nimport { CollapseToggle } from '../CollapseToggle';\nimport { EvaluationIntervalLimitExceeded } from '../InvalidIntervalWarning';\n\nimport { GrafanaAlertStatePicker } from './GrafanaAlertStatePicker';\nimport { PreviewRule } from './PreviewRule';\nimport { RuleEditorSection } from './RuleEditorSection';\n\nconst MIN_TIME_RANGE_STEP_S = 10; // 10 seconds\n\nexport const forValidationOptions = (evaluateEvery: string): RegisterOptions => ({\n  required: {\n    value: true,\n    message: 'Required.',\n  },\n  validate: (value: string) => {\n    // parsePrometheusDuration does not allow 0 but does allow 0s\n    if (value === '0') {\n      return true;\n    }\n\n    try {\n      const millisFor = parsePrometheusDuration(value);\n\n      // 0 is a special value meaning for equals evaluation interval\n      if (millisFor === 0) {\n        return true;\n      }\n\n      try {\n        const millisEvery = parsePrometheusDuration(evaluateEvery);\n        return millisFor >= millisEvery\n          ? true\n          : 'For duration must be greater than or equal to the evaluation interval.';\n      } catch (err) {\n        // if we fail to parse \"every\", assume validation is successful, or the error messages\n        // will overlap in the UI\n        return true;\n      }\n    } catch (error) {\n      return error instanceof Error ? error.message : 'Failed to parse duration';\n    }\n  },\n});\n\nexport const evaluateEveryValidationOptions: RegisterOptions = {\n  required: {\n    value: true,\n    message: 'Required.',\n  },\n  validate: (value: string) => {\n    try {\n      const duration = parsePrometheusDuration(value);\n\n      if (duration < MIN_TIME_RANGE_STEP_S * 1000) {\n        return `Cannot be less than ${MIN_TIME_RANGE_STEP_S} seconds.`;\n      }\n\n      if (duration % (MIN_TIME_RANGE_STEP_S * 1000) !== 0) {\n        return `Must be a multiple of ${MIN_TIME_RANGE_STEP_S} seconds.`;\n      }\n\n      return true;\n    } catch (error) {\n      return error instanceof Error ? error.message : 'Failed to parse duration';\n    }\n  },\n};\n\nexport const GrafanaEvaluationBehavior: FC = () => {\n  const styles = useStyles2(getStyles);\n  const [showErrorHandling, setShowErrorHandling] = useState(false);\n  const {\n    register,\n    formState: { errors },\n    watch,\n  } = useFormContext<RuleFormValues>();\n\n  const { exceedsLimit: exceedsGlobalEvaluationLimit } = checkEvaluationIntervalGlobalLimit(watch('evaluateEvery'));\n\n  const evaluateEveryId = 'eval-every-input';\n  const evaluateForId = 'eval-for-input';\n\n  return (\n    // TODO remove \"and alert condition\" for recording rules\n    <RuleEditorSection stepNo={2} title=\"Alert evaluation behavior\">\n      <Field\n        label=\"Evaluate\"\n        description=\"Evaluation interval applies to every rule within a group. It can overwrite the interval of an existing alert rule.\"\n      >\n        <div className={styles.flexRow}>\n          <InlineLabel\n            htmlFor={evaluateEveryId}\n            width={16}\n            tooltip=\"How often the alert will be evaluated to see if it fires\"\n          >\n            Evaluate every\n          </InlineLabel>\n          <Field\n            className={styles.inlineField}\n            error={errors.evaluateEvery?.message}\n            invalid={!!errors.evaluateEvery}\n            validationMessageHorizontalOverflow={true}\n          >\n            <Input id={evaluateEveryId} width={8} {...register('evaluateEvery', evaluateEveryValidationOptions)} />\n          </Field>\n\n          <InlineLabel\n            htmlFor={evaluateForId}\n            width={7}\n            tooltip='Once condition is breached, alert will go into pending state. If it is pending for longer than the \"for\" value, it will become a firing alert.'\n          >\n            for\n          </InlineLabel>\n          <Field\n            className={styles.inlineField}\n            error={errors.evaluateFor?.message}\n            invalid={!!errors.evaluateFor?.message}\n            validationMessageHorizontalOverflow={true}\n          >\n            <Input\n              id={evaluateForId}\n              width={8}\n              {...register('evaluateFor', forValidationOptions(watch('evaluateEvery')))}\n            />\n          </Field>\n        </div>\n      </Field>\n      {exceedsGlobalEvaluationLimit && <EvaluationIntervalLimitExceeded />}\n      <CollapseToggle\n        isCollapsed={!showErrorHandling}\n        onToggle={(collapsed) => setShowErrorHandling(!collapsed)}\n        text=\"Configure no data and error handling\"\n        className={styles.collapseToggle}\n      />\n      {showErrorHandling && (\n        <>\n          <Field htmlFor=\"no-data-state-input\" label=\"Alert state if no data or all values are null\">\n            <InputControl\n              render={({ field: { onChange, ref, ...field } }) => (\n                <GrafanaAlertStatePicker\n                  {...field}\n                  inputId=\"no-data-state-input\"\n                  width={42}\n                  includeNoData={true}\n                  includeError={false}\n                  onChange={(value) => onChange(value?.value)}\n                />\n              )}\n              name=\"noDataState\"\n            />\n          </Field>\n          <Field htmlFor=\"exec-err-state-input\" label=\"Alert state if execution error or timeout\">\n            <InputControl\n              render={({ field: { onChange, ref, ...field } }) => (\n                <GrafanaAlertStatePicker\n                  {...field}\n                  inputId=\"exec-err-state-input\"\n                  width={42}\n                  includeNoData={false}\n                  includeError={true}\n                  onChange={(value) => onChange(value?.value)}\n                />\n              )}\n              name=\"execErrState\"\n            />\n          </Field>\n        </>\n      )}\n      <PreviewRule />\n    </RuleEditorSection>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  inlineField: css`\n    margin-bottom: 0;\n  `,\n  flexRow: css`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n    align-items: flex-start;\n  `,\n  collapseToggle: css`\n    margin: ${theme.spacing(2, 0, 2, -1)};\n  `,\n  globalLimitValue: css`\n    font-weight: ${theme.typography.fontWeightBold};\n  `,\n});\n","import { Observable, of } from 'rxjs';\nimport { catchError, map, share } from 'rxjs/operators';\n\nimport {\n  dataFrameFromJSON,\n  DataFrameJSON,\n  getDefaultTimeRange,\n  LoadingState,\n  PanelData,\n  withLoadingIndicator,\n} from '@grafana/data';\nimport { getBackendSrv, toDataQueryError } from '@grafana/runtime';\n\nimport {\n  isCloudPreviewRequest,\n  isGrafanaPreviewRequest,\n  PreviewRuleRequest,\n  PreviewRuleResponse,\n} from '../types/preview';\nimport { RuleFormType } from '../types/rule-form';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\nexport function previewAlertRule(request: PreviewRuleRequest): Observable<PreviewRuleResponse> {\n  if (isCloudPreviewRequest(request)) {\n    return fetchAlertRulePreview(request, request.dataSourceUid, RuleFormType.cloudAlerting);\n  }\n\n  if (isGrafanaPreviewRequest(request)) {\n    return fetchAlertRulePreview(request, GRAFANA_RULES_SOURCE_NAME, RuleFormType.grafana);\n  }\n\n  throw new Error('unsupported preview rule request');\n}\n\ntype AlertRulePreviewResponse = {\n  instances: DataFrameJSON[];\n};\n\nfunction fetchAlertRulePreview(\n  request: PreviewRuleRequest,\n  dataSourceUid: string,\n  ruleType: RuleFormType\n): Observable<PreviewRuleResponse> {\n  return withLoadingIndicator({\n    whileLoading: createResponse(ruleType),\n    source: getBackendSrv()\n      .fetch<AlertRulePreviewResponse>({\n        method: 'POST',\n        url: `/api/v1/rule/test/${dataSourceUid}`,\n        data: request,\n      })\n      .pipe(\n        map(({ data }) => {\n          return createResponse(ruleType, {\n            state: LoadingState.Done,\n            series: data.instances.map(dataFrameFromJSON),\n          });\n        }),\n        catchError((error: Error) => {\n          return of(\n            createResponse(ruleType, {\n              state: LoadingState.Error,\n              error: toDataQueryError(error),\n            })\n          );\n        }),\n        share()\n      ),\n  });\n}\n\nfunction createResponse(ruleType: RuleFormType, data: Partial<PanelData> = {}): PreviewRuleResponse {\n  return {\n    ruleType,\n    data: {\n      state: LoadingState.Loading,\n      series: [],\n      timeRange: getDefaultTimeRange(),\n      ...data,\n    },\n  };\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { FieldConfigSource, FieldMatcherID, GrafanaTheme2, LoadingState } from '@grafana/data';\nimport { PanelRenderer } from '@grafana/runtime';\nimport { TableCellDisplayMode, useStyles2 } from '@grafana/ui';\n\nimport { PreviewRuleResponse } from '../../types/preview';\nimport { RuleFormType } from '../../types/rule-form';\nimport { messageFromError } from '../../utils/redux';\n\ntype Props = {\n  preview: PreviewRuleResponse | undefined;\n};\n\nexport function PreviewRuleResult(props: Props): React.ReactElement | null {\n  const { preview } = props;\n  const styles = useStyles2(getStyles);\n  const fieldConfig: FieldConfigSource = {\n    defaults: {},\n    overrides: [\n      {\n        matcher: { id: FieldMatcherID.byName, options: 'Info' },\n        properties: [{ id: 'custom.displayMode', value: TableCellDisplayMode.JSONView }],\n      },\n    ],\n  };\n\n  if (!preview) {\n    return null;\n  }\n\n  const { data, ruleType } = preview;\n\n  if (data.state === LoadingState.Loading) {\n    return (\n      <div className={styles.container}>\n        <span>Loading preview...</span>\n      </div>\n    );\n  }\n\n  if (data.state === LoadingState.Error) {\n    return (\n      <div className={styles.container}>\n        {data.error ? messageFromError(data.error) : 'Failed to preview alert rule'}\n      </div>\n    );\n  }\n  return (\n    <div className={styles.container}>\n      <span>\n        Preview based on the result of running the query, for this moment.{' '}\n        {ruleType === RuleFormType.grafana ? 'Configuration for `no data` and `error handling` is not applied.' : null}\n      </span>\n      <div className={styles.table}>\n        <AutoSizer>\n          {({ width, height }) => (\n            <div style={{ width: `${width}px`, height: `${height}px` }}>\n              <PanelRenderer\n                title=\"\"\n                width={width}\n                height={height}\n                pluginId=\"table\"\n                data={data}\n                fieldConfig={fieldConfig}\n              />\n            </div>\n          )}\n        </AutoSizer>\n      </div>\n    </div>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css`\n      margin: ${theme.spacing(2)} 0;\n    `,\n    table: css`\n      flex: 1 1 auto;\n      height: 135px;\n      margin-top: ${theme.spacing(2)};\n      border: 1px solid ${theme.colors.border.medium};\n      border-radius: ${theme.shape.borderRadius(1)};\n    `,\n  };\n}\n","import { css } from '@emotion/css';\nimport React, { useCallback, useState } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { useMountedState } from 'react-use';\nimport { takeWhile } from 'rxjs/operators';\n\nimport { dateTimeFormatISO, GrafanaTheme2, LoadingState } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { Alert, Button, HorizontalGroup, useStyles2 } from '@grafana/ui';\n\nimport { previewAlertRule } from '../../api/preview';\nimport { useAlertQueriesStatus } from '../../hooks/useAlertQueriesStatus';\nimport { PreviewRuleRequest, PreviewRuleResponse } from '../../types/preview';\nimport { RuleFormType, RuleFormValues } from '../../types/rule-form';\n\nimport { PreviewRuleResult } from './PreviewRuleResult';\n\nconst fields: Array<keyof RuleFormValues> = ['type', 'dataSourceName', 'condition', 'queries', 'expression'];\n\nexport function PreviewRule(): React.ReactElement | null {\n  const styles = useStyles2(getStyles);\n  const [preview, onPreview] = usePreview();\n  const { watch } = useFormContext<RuleFormValues>();\n  const [type, condition, queries] = watch(['type', 'condition', 'queries']);\n  const { allDataSourcesAvailable } = useAlertQueriesStatus(queries);\n\n  if (type === RuleFormType.cloudRecording || type === RuleFormType.cloudAlerting) {\n    return null;\n  }\n\n  const isPreviewAvailable = Boolean(condition) && allDataSourcesAvailable;\n\n  return (\n    <div className={styles.container}>\n      <HorizontalGroup>\n        {allDataSourcesAvailable && (\n          <Button disabled={!isPreviewAvailable} type=\"button\" variant=\"primary\" onClick={onPreview}>\n            Preview alerts\n          </Button>\n        )}\n        {!allDataSourcesAvailable && (\n          <Alert title=\"Preview is not available\" severity=\"warning\">\n            Cannot display the query preview. Some of the data sources used in the queries are not available.\n          </Alert>\n        )}\n      </HorizontalGroup>\n      <PreviewRuleResult preview={preview} />\n    </div>\n  );\n}\n\nexport function usePreview(): [PreviewRuleResponse | undefined, () => void] {\n  const [preview, setPreview] = useState<PreviewRuleResponse | undefined>();\n  const { getValues } = useFormContext<RuleFormValues>();\n  const isMounted = useMountedState();\n\n  const onPreview = useCallback(() => {\n    const values = getValues(fields);\n    const request = createPreviewRequest(values);\n\n    previewAlertRule(request)\n      .pipe(takeWhile((response) => !isCompleted(response), true))\n      .subscribe((response) => {\n        if (!isMounted()) {\n          return;\n        }\n        setPreview(response);\n      });\n  }, [getValues, isMounted]);\n\n  return [preview, onPreview];\n}\n\nfunction createPreviewRequest(values: any[]): PreviewRuleRequest {\n  const [type, dataSourceName, condition, queries, expression] = values;\n  const dsSettings = getDataSourceSrv().getInstanceSettings(dataSourceName);\n  if (!dsSettings) {\n    throw new Error(`Cannot find data source settings for ${dataSourceName}`);\n  }\n\n  switch (type) {\n    case RuleFormType.cloudAlerting:\n      return {\n        dataSourceUid: dsSettings.uid,\n        dataSourceName,\n        expr: expression,\n      };\n\n    case RuleFormType.grafana:\n      return {\n        grafana_condition: {\n          condition,\n          data: queries,\n          now: dateTimeFormatISO(Date.now()),\n        },\n      };\n\n    default:\n      throw new Error(`Alert type ${type} not supported by preview.`);\n  }\n}\n\nfunction isCompleted(response: PreviewRuleResponse): boolean {\n  switch (response.data.state) {\n    case LoadingState.Done:\n    case LoadingState.Error:\n      return true;\n    default:\n      return false;\n  }\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css`\n      margin-top: ${theme.spacing(2)};\n      max-width: ${theme.breakpoints.values.xxl}px;\n    `,\n  };\n}\n","import { PanelData } from '@grafana/data';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { RuleFormType } from './rule-form';\n\nexport type PreviewRuleRequest = GrafanaPreviewRuleRequest | CloudPreviewRuleRequest;\n\nexport type GrafanaPreviewRuleRequest = {\n  grafana_condition: {\n    condition: string;\n    data: AlertQuery[];\n    now: string;\n  };\n};\n\nexport type CloudPreviewRuleRequest = {\n  dataSourceUid: string;\n  dataSourceName: string;\n  expr: string;\n};\n\nexport type PreviewRuleResponse = {\n  ruleType: RuleFormType;\n  data: PanelData;\n};\n\nexport function isCloudPreviewRequest(request: PreviewRuleRequest): request is CloudPreviewRuleRequest {\n  return 'expr' in request;\n}\n\nexport function isGrafanaPreviewRequest(request: PreviewRuleRequest): request is GrafanaPreviewRuleRequest {\n  return 'grafana_condition' in request;\n}\n","import { css } from '@emotion/css';\nimport React, { FC } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { FieldSet, useStyles2 } from '@grafana/ui';\n\nexport interface RuleEditorSectionProps {\n  title: string;\n  stepNo: number;\n  description?: string;\n}\n\nexport const RuleEditorSection: FC<RuleEditorSectionProps> = ({ title, stepNo, children, description }) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.parent}>\n      <div>\n        <span className={styles.stepNo}>{stepNo}</span>\n      </div>\n      <div className={styles.content}>\n        <FieldSet label={title} className={styles.fieldset}>\n          {description && <p className={styles.description}>{description}</p>}\n          {children}\n        </FieldSet>\n      </div>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  fieldset: css`\n    legend {\n      font-size: 16px;\n      padding-top: ${theme.spacing(0.5)};\n    }\n  `,\n  parent: css`\n    display: flex;\n    flex-direction: row;\n    max-width: ${theme.breakpoints.values.xl};\n    & + & {\n      margin-top: ${theme.spacing(4)};\n    }\n  `,\n  description: css`\n    margin-top: -${theme.spacing(2)};\n    color: ${theme.colors.text.secondary};\n  `,\n  stepNo: css`\n    display: inline-block;\n    width: ${theme.spacing(4)};\n    height: ${theme.spacing(4)};\n    line-height: ${theme.spacing(4)};\n    border-radius: ${theme.spacing(4)};\n    text-align: center;\n    color: ${theme.colors.text.maxContrast};\n    background-color: ${theme.colors.background.canvas};\n    font-size: ${theme.typography.size.lg};\n    margin-right: ${theme.spacing(2)};\n  `,\n  content: css`\n    flex: 1;\n  `,\n});\n","import { useMemo } from 'react';\n\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\nexport function useAlertQueriesStatus(queries: AlertQuery[]) {\n  const allDataSourcesAvailable = useMemo(\n    () => queries.every((query) => Boolean(getDataSourceSrv().getInstanceSettings(query.datasourceUid))),\n    [queries]\n  );\n\n  return { allDataSourcesAvailable };\n}\n","import { useMemo } from 'react';\n\nimport { getRulesAccess } from './access-control';\n\nexport function useRulesAccess() {\n  return useMemo(() => getRulesAccess(), []);\n}\n"],"names":["useCleanup","cleanupAction","dispatch","useDispatch","selectorRef","useRef","current","useEffect","cleanUpAction","EvaluationIntervalLimitExceeded","severity","title","config","options","value","GrafanaAlertStateDecision","label","GrafanaAlertStatePicker","includeNoData","includeError","props","opts","useMemo","filter","opt","Select","evaluateEveryValidationOptions","required","message","validate","duration","parsePrometheusDuration","MIN_TIME_RANGE_STEP_S","error","Error","GrafanaEvaluationBehavior","styles","useStyles2","getStyles","showErrorHandling","setShowErrorHandling","useState","register","formState","errors","watch","useFormContext","exceedsLimit","exceedsGlobalEvaluationLimit","checkEvaluationIntervalGlobalLimit","evaluateEveryId","evaluateForId","RuleEditorSection","stepNo","Field","description","className","flexRow","InlineLabel","htmlFor","width","tooltip","inlineField","evaluateEvery","invalid","validationMessageHorizontalOverflow","Input","I","id","evaluateFor","millisFor","err","CollapseToggle","isCollapsed","onToggle","collapsed","text","collapseToggle","InputControl","render","field","onChange","inputId","name","PreviewRule","theme","css","spacing","globalLimitValue","typography","fontWeightBold","fetchAlertRulePreview","request","dataSourceUid","ruleType","withLoadingIndicator","whileLoading","createResponse","source","getBackendSrv","fetch","method","url","data","pipe","map","state","LoadingState","series","instances","dataFrameFromJSON","catchError","of","toDataQueryError","share","timeRange","getDefaultTimeRange","PreviewRuleResult","preview","fieldConfig","defaults","overrides","matcher","FieldMatcherID","properties","TableCellDisplayMode","container","messageFromError","RuleFormType","table","height","style","PanelRenderer","pluginId","colors","border","medium","shape","borderRadius","fields","onPreview","usePreview","type","condition","queries","allDataSourcesAvailable","useAlertQueriesStatus","isPreviewAvailable","Boolean","Button","disabled","variant","onClick","Alert","setPreview","getValues","isMounted","useMountedState","useCallback","values","dataSourceName","expression","dsSettings","getDataSourceSrv","getInstanceSettings","uid","expr","grafana_condition","now","dateTimeFormatISO","Date","createPreviewRequest","isCloudPreviewRequest","isGrafanaPreviewRequest","GRAFANA_RULES_SOURCE_NAME","previewAlertRule","takeWhile","response","isCompleted","subscribe","breakpoints","xxl","children","parent","content","fieldset","xl","secondary","maxContrast","background","canvas","size","lg","every","query","datasourceUid","useRulesAccess","getRulesAccess"],"sourceRoot":""}