{"version":3,"file":"mysqlPlugin.70c17a8ea69be486bb00.js","mappings":"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","sources":["webpack://grafana/./public/app/features/plugins/sql/components/configuration/TLSSecretsConfig.tsx","webpack://grafana/./public/app/plugins/datasource/mysql/MySqlQueryModel.ts","webpack://grafana/./public/app/plugins/datasource/mysql/MySqlResponseParser.ts","webpack://grafana/./public/app/plugins/datasource/mysql/fields.ts","webpack://grafana/./public/app/plugins/datasource/mysql/mySqlMetaQuery.ts","webpack://grafana/./public/app/plugins/datasource/mysql/functions.ts","webpack://grafana/./public/app/plugins/datasource/mysql/sqlCompletionProvider.ts","webpack://grafana/./public/app/plugins/datasource/mysql/MySqlDatasource.ts","webpack://grafana/./public/app/plugins/datasource/mysql/configuration/ConfigurationEditor.tsx","webpack://grafana/./public/app/plugins/datasource/mysql/module.ts"],"sourcesContent":["import React from 'react';\n\nimport {\n  DataSourceJsonData,\n  DataSourcePluginOptionsEditorProps,\n  KeyValue,\n  onUpdateDatasourceSecureJsonDataOption,\n  updateDatasourcePluginResetOption,\n} from '@grafana/data';\nimport { InlineField, SecretTextArea } from '@grafana/ui';\n\nexport interface Props<T extends DataSourceJsonData, S> {\n  editorProps: DataSourcePluginOptionsEditorProps<T, S>;\n  showCACert?: boolean;\n  showKeyPair?: boolean;\n  secureJsonFields?: KeyValue<Boolean>;\n  labelWidth?: number;\n}\n\nexport const TLSSecretsConfig = <T extends DataSourceJsonData, S extends {} = {}>(props: Props<T, S>) => {\n  const { labelWidth, editorProps, showCACert, showKeyPair = true } = props;\n  const { secureJsonFields } = editorProps.options;\n  return (\n    <>\n      {showKeyPair ? (\n        <InlineField\n          tooltip={\n            <span>To authenticate with an TLS/SSL client certificate, provide the client certificate here.</span>\n          }\n          labelWidth={labelWidth}\n          label=\"TLS/SSL Client Certificate\"\n        >\n          <SecretTextArea\n            placeholder=\"Begins with -----BEGIN CERTIFICATE-----\"\n            cols={45}\n            rows={7}\n            isConfigured={secureJsonFields && secureJsonFields.tlsClientCert}\n            onChange={onUpdateDatasourceSecureJsonDataOption(editorProps, 'tlsClientCert')}\n            onReset={() => {\n              updateDatasourcePluginResetOption(editorProps, 'tlsClientCert');\n            }}\n          ></SecretTextArea>\n        </InlineField>\n      ) : null}\n      {showCACert ? (\n        <InlineField\n          tooltip={<span>If the selected TLS/SSL mode requires a server root certificate, provide it here.</span>}\n          labelWidth={labelWidth}\n          label=\"TLS/SSL Root Certificate\"\n        >\n          <SecretTextArea\n            placeholder=\"Begins with -----BEGIN CERTIFICATE-----\"\n            cols={45}\n            rows={7}\n            isConfigured={secureJsonFields && secureJsonFields.tlsCACert}\n            onChange={onUpdateDatasourceSecureJsonDataOption(editorProps, 'tlsCACert')}\n            onReset={() => {\n              updateDatasourcePluginResetOption(editorProps, 'tlsCACert');\n            }}\n          ></SecretTextArea>\n        </InlineField>\n      ) : null}\n      {showKeyPair ? (\n        <InlineField\n          tooltip={<span>To authenticate with a client TLS/SSL certificate, provide the key here.</span>}\n          labelWidth={labelWidth}\n          label=\"TLS/SSL Client Key\"\n        >\n          <SecretTextArea\n            placeholder=\"Begins with -----BEGIN RSA PRIVATE KEY-----\"\n            cols={45}\n            rows={7}\n            isConfigured={secureJsonFields && secureJsonFields.tlsClientKey}\n            onChange={onUpdateDatasourceSecureJsonDataOption(editorProps, 'tlsClientKey')}\n            onReset={() => {\n              updateDatasourcePluginResetOption(editorProps, 'tlsClientKey');\n            }}\n          ></SecretTextArea>\n        </InlineField>\n      ) : null}\n    </>\n  );\n};\n","import { ScopedVars } from '@grafana/data';\nimport { TemplateSrv } from '@grafana/runtime';\n\nimport { MySQLQuery } from './types';\n\nexport default class MySQLQueryModel {\n  target: Partial<MySQLQuery>;\n  templateSrv?: TemplateSrv;\n  scopedVars?: ScopedVars;\n\n  constructor(target: Partial<MySQLQuery>, templateSrv?: TemplateSrv, scopedVars?: ScopedVars) {\n    this.target = target;\n    this.templateSrv = templateSrv;\n    this.scopedVars = scopedVars;\n  }\n\n  // remove identifier quoting from identifier to use in metadata queries\n  unquoteIdentifier(value: string) {\n    if (value[0] === '\"' && value[value.length - 1] === '\"') {\n      return value.substring(1, value.length - 1).replace(/\"\"/g, '\"');\n    } else {\n      return value;\n    }\n  }\n\n  quoteIdentifier(value: string) {\n    return '\"' + value.replace(/\"/g, '\"\"') + '\"';\n  }\n\n  quoteLiteral(value: string) {\n    return \"'\" + value.replace(/'/g, \"''\") + \"'\";\n  }\n\n  getDatabase() {\n    return this.target.dataset;\n  }\n}\n","import { uniqBy } from 'lodash';\n\nimport { DataFrame, MetricFindValue } from '@grafana/data';\n\nexport default class ResponseParser {\n  transformMetricFindResponse(frame: DataFrame): MetricFindValue[] {\n    const values: MetricFindValue[] = [];\n    const textField = frame.fields.find((f) => f.name === '__text');\n    const valueField = frame.fields.find((f) => f.name === '__value');\n\n    if (textField && valueField) {\n      for (let i = 0; i < textField.values.length; i++) {\n        values.push({ text: '' + textField.values.get(i), value: '' + valueField.values.get(i) });\n      }\n    } else {\n      values.push(\n        ...frame.fields\n          .flatMap((f) => f.values.toArray())\n          .map((v) => ({\n            text: v,\n          }))\n      );\n    }\n\n    return uniqBy(values, 'text');\n  }\n}\n","import { RAQBFieldTypes, SQLSelectableValue } from 'app/features/plugins/sql/types';\n\nexport function mapFieldsToTypes(columns: SQLSelectableValue[]) {\n  const fields: SQLSelectableValue[] = [];\n  for (const col of columns) {\n    let type: RAQBFieldTypes = 'text';\n    switch (col.type?.toUpperCase()) {\n      case 'BOOLEAN':\n      case 'BOOL': {\n        type = 'boolean';\n        break;\n      }\n      case 'BYTES':\n      case 'VARCHAR': {\n        type = 'text';\n        break;\n      }\n      case 'FLOAT':\n      case 'FLOAT64':\n      case 'INT':\n      case 'INTEGER':\n      case 'INT64':\n      case 'NUMERIC':\n      case 'BIGNUMERIC': {\n        type = 'number';\n        break;\n      }\n      case 'DATE': {\n        type = 'date';\n        break;\n      }\n      case 'DATETIME': {\n        type = 'datetime';\n        break;\n      }\n      case 'TIME': {\n        type = 'time';\n        break;\n      }\n      case 'TIMESTAMP': {\n        type = 'datetime';\n        break;\n      }\n      case 'GEOGRAPHY': {\n        type = 'text';\n        break;\n      }\n      default:\n        break;\n    }\n\n    fields.push({ ...col, raqbFieldType: type, icon: mapColumnTypeToIcon(col.type!.toUpperCase()) });\n  }\n  return fields;\n}\n\nexport function mapColumnTypeToIcon(type: string) {\n  switch (type) {\n    case 'TIME':\n    case 'DATETIME':\n    case 'TIMESTAMP':\n      return 'clock-nine';\n    case 'BOOLEAN':\n      return 'toggle-off';\n    case 'INTEGER':\n    case 'FLOAT':\n    case 'FLOAT64':\n    case 'INT':\n    case 'SMALLINT':\n    case 'BIGINT':\n    case 'TINYINT':\n    case 'BYTEINT':\n    case 'INT64':\n    case 'NUMERIC':\n    case 'DECIMAL':\n      return 'calculator-alt';\n    case 'CHAR':\n    case 'VARCHAR':\n    case 'STRING':\n    case 'BYTES':\n    case 'TEXT':\n    case 'TINYTEXT':\n    case 'MEDIUMTEXT':\n    case 'LONGTEXT':\n      return 'text';\n    case 'GEOGRAPHY':\n      return 'map';\n    default:\n      return undefined;\n  }\n}\n","import MySQLQueryModel from './MySqlQueryModel';\n\nexport function buildTableQuery(dataset?: string) {\n  const database = dataset !== undefined ? `'${dataset}'` : 'database()';\n  return `SELECT table_name FROM information_schema.tables WHERE table_schema = ${database} ORDER BY table_name`;\n}\n\nexport function showDatabases() {\n  return `SELECT DISTINCT TABLE_SCHEMA from information_schema.TABLES where TABLE_TYPE != 'SYSTEM VIEW' ORDER BY TABLE_SCHEMA`;\n}\n\nexport function buildColumnQuery(queryModel: MySQLQueryModel, table: string, type?: string, timeColumn?: string) {\n  let query = 'SELECT column_name, data_type FROM information_schema.columns WHERE ';\n  query += buildTableConstraint(queryModel, table);\n\n  switch (type) {\n    case 'time': {\n      query += \" AND data_type IN ('timestamp','datetime','bigint','int','double','float')\";\n      break;\n    }\n    case 'metric': {\n      query += \" AND data_type IN ('text','tinytext','mediumtext','longtext','varchar','char')\";\n      break;\n    }\n    case 'value': {\n      query += \" AND data_type IN ('bigint','int','smallint','mediumint','tinyint','double','decimal','float')\";\n      query += ' AND column_name <> ' + quoteIdentAsLiteral(queryModel, timeColumn!);\n      break;\n    }\n    case 'group': {\n      query += \" AND data_type IN ('text','tinytext','mediumtext','longtext','varchar','char')\";\n      break;\n    }\n  }\n\n  query += ' ORDER BY column_name';\n\n  return query;\n}\n\nexport function buildTableConstraint(queryModel: MySQLQueryModel, table: string) {\n  let query = '';\n\n  // check for schema qualified table\n  if (table.includes('.')) {\n    const parts = table.split('.');\n    query = 'table_schema = ' + quoteIdentAsLiteral(queryModel, parts[0]);\n    query += ' AND table_name = ' + quoteIdentAsLiteral(queryModel, parts[1]);\n    return query;\n  } else {\n    const database = queryModel.getDatabase() !== undefined ? `'${queryModel.getDatabase()}'` : 'database()';\n    query = `table_schema = ${database} AND table_name = ` + quoteIdentAsLiteral(queryModel, table);\n\n    return query;\n  }\n}\n\nexport function quoteIdentAsLiteral(queryModel: MySQLQueryModel, value: string) {\n  return queryModel.quoteLiteral(queryModel.unquoteIdentifier(value));\n}\n","export const FUNCTIONS = [\n  {\n    id: 'STDDEV',\n    name: 'STDDEV',\n    description: `STDDEV(\n    expression\n  )\n\n  Returns the standard deviation of non-NULL input values, or NaN if the input contains a NaN.`,\n  },\n  {\n    id: 'VARIANCE',\n    name: 'VARIANCE',\n    description: `VARIANCE(\n    expression\n  )\n\n  Returns the variance of non-NULL input values, or NaN if the input contains a NaN.`,\n  },\n];\n","import { AGGREGATE_FNS, OPERATORS } from 'app/features/plugins/sql/constants';\nimport {\n  Aggregate,\n  ColumnDefinition,\n  CompletionItemKind,\n  CompletionItemPriority,\n  DB,\n  LanguageCompletionProvider,\n  LinkedToken,\n  MetaDefinition,\n  PositionContext,\n  SQLQuery,\n  StatementPlacementProvider,\n  StatementPosition,\n  SuggestionKindProvider,\n  TableDefinition,\n  TokenType,\n} from 'app/features/plugins/sql/types';\n\nimport { FUNCTIONS } from './functions';\n\ninterface CompletionProviderGetterArgs {\n  getColumns: React.MutableRefObject<(t: SQLQuery) => Promise<ColumnDefinition[]>>;\n  getTables: React.MutableRefObject<(d?: string) => Promise<TableDefinition[]>>;\n  fetchMeta: React.MutableRefObject<(d?: string) => Promise<MetaDefinition[]>>;\n  getFunctions: React.MutableRefObject<(d?: string) => Aggregate[]>;\n}\n\nexport const getSqlCompletionProvider: (args: CompletionProviderGetterArgs) => LanguageCompletionProvider =\n  ({ getColumns, getTables, fetchMeta, getFunctions }) =>\n  () => ({\n    triggerCharacters: ['.', ' ', '$', ',', '(', \"'\"],\n    supportedFunctions: () => getFunctions.current(),\n    supportedOperators: () => OPERATORS,\n    customSuggestionKinds: customSuggestionKinds(getTables, getColumns, fetchMeta),\n    customStatementPlacement,\n  });\n\nexport enum CustomStatementPlacement {\n  AfterDataset = 'afterDataset',\n  AfterFrom = 'afterFrom',\n  AfterSelect = 'afterSelect',\n}\n\nexport enum CustomSuggestionKind {\n  TablesWithinDataset = 'tablesWithinDataset',\n}\n\nexport enum Direction {\n  Next = 'next',\n  Previous = 'previous',\n}\n\nconst TRIGGER_SUGGEST = 'editor.action.triggerSuggest';\n\nenum Keyword {\n  Select = 'SELECT',\n  Where = 'WHERE',\n  From = 'FROM',\n}\n\nexport const customStatementPlacement: StatementPlacementProvider = () => [\n  {\n    id: CustomStatementPlacement.AfterDataset,\n    resolve: (currentToken, previousKeyword) => {\n      return Boolean(\n        currentToken?.is(TokenType.Delimiter, '.') ||\n          (currentToken?.is(TokenType.Whitespace) && currentToken?.previous?.is(TokenType.Delimiter, '.'))\n      );\n    },\n  },\n  {\n    id: CustomStatementPlacement.AfterFrom,\n    resolve: (currentToken, previousKeyword) => {\n      return Boolean(isAfterFrom(currentToken));\n    },\n  },\n  {\n    id: CustomStatementPlacement.AfterSelect,\n    resolve: (token, previousKeyword) => {\n      const is =\n        isDirectlyAfter(token, Keyword.Select) ||\n        (isAfterSelect(token) && token?.previous?.is(TokenType.Delimiter, ','));\n      return Boolean(is);\n    },\n  },\n];\n\nexport const customSuggestionKinds: (\n  getTables: CompletionProviderGetterArgs['getTables'],\n  getFields: CompletionProviderGetterArgs['getColumns'],\n  fetchMeta: CompletionProviderGetterArgs['fetchMeta']\n) => SuggestionKindProvider = (getTables, _, fetchMeta) => () =>\n  [\n    {\n      id: CustomSuggestionKind.TablesWithinDataset,\n      applyTo: [CustomStatementPlacement.AfterDataset],\n      suggestionsResolver: async (ctx) => {\n        const tablePath = ctx.currentToken ? getTablePath(ctx.currentToken) : '';\n        const t = await getTables.current(tablePath);\n        return t.map((table) => suggestion(table.name, table.completion ?? table.name, CompletionItemKind.Field, ctx));\n      },\n    },\n    {\n      id: 'metaAfterSelect',\n      applyTo: [CustomStatementPlacement.AfterSelect],\n      suggestionsResolver: async (ctx) => {\n        const path = getPath(ctx.currentToken, Direction.Next);\n        const t = await fetchMeta.current(path);\n        return t.map((meta) => {\n          const completion = meta.kind === CompletionItemKind.Class ? `${meta.completion}.` : meta.completion;\n          return suggestion(meta.name, completion!, meta.kind, ctx);\n        });\n      },\n    },\n    {\n      id: 'metaAfterSelectFuncArg',\n      applyTo: [StatementPosition.AfterSelectFuncFirstArgument],\n      suggestionsResolver: async (ctx) => {\n        const path = getPath(ctx.currentToken, Direction.Next);\n        const t = await fetchMeta.current(path);\n        return t.map((meta) => {\n          const completion = meta.kind === CompletionItemKind.Class ? `${meta.completion}.` : meta.completion;\n          return suggestion(meta.name, completion!, meta.kind, ctx);\n        });\n      },\n    },\n    {\n      id: 'metaAfterFrom',\n      applyTo: [CustomStatementPlacement.AfterFrom],\n      suggestionsResolver: async (ctx) => {\n        // TODO: why is this triggering when isAfterFrom is false\n        if (!isAfterFrom(ctx.currentToken)) {\n          return [];\n        }\n        const path = ctx.currentToken?.value || '';\n        const t = await fetchMeta.current(path);\n        return t.map((meta) => suggestion(meta.name, meta.completion!, meta.kind, ctx));\n      },\n    },\n    {\n      id: `MYSQL${StatementPosition.WhereKeyword}`,\n      applyTo: [StatementPosition.WhereKeyword],\n      suggestionsResolver: async (ctx) => {\n        const path = getPath(ctx.currentToken, Direction.Previous);\n        const t = await fetchMeta.current(path);\n        return t.map((meta) => {\n          const completion = meta.kind === CompletionItemKind.Class ? `${meta.completion}.` : meta.completion;\n          return suggestion(meta.name, completion!, meta.kind, ctx);\n        });\n      },\n    },\n    {\n      id: StatementPosition.WhereComparisonOperator,\n      applyTo: [StatementPosition.WhereComparisonOperator],\n      suggestionsResolver: async (ctx) => {\n        if (!isAfterWhere(ctx.currentToken)) {\n          return [];\n        }\n        const path = getPath(ctx.currentToken, Direction.Previous);\n        const t = await fetchMeta.current(path);\n        const sugg = t.map((meta) => {\n          const completion = meta.kind === CompletionItemKind.Class ? `${meta.completion}.` : meta.completion;\n          return suggestion(meta.name, completion!, meta.kind, ctx);\n        });\n        return sugg;\n      },\n    },\n  ];\n\nfunction getPath(token: LinkedToken | null, direction: Direction) {\n  let path = token?.value || '';\n  const fromValue = keywordValue(token, Keyword.From, direction);\n  if (fromValue) {\n    path = fromValue;\n  }\n  return path;\n}\n\nexport function getTablePath(token: LinkedToken) {\n  let processedToken = token;\n  let tablePath = '';\n  while (processedToken?.previous && !processedToken.previous.isWhiteSpace()) {\n    processedToken = processedToken.previous;\n    tablePath = processedToken.value + tablePath;\n  }\n\n  tablePath = tablePath.trim();\n  return tablePath;\n}\n\nfunction suggestion(label: string, completion: string, kind: CompletionItemKind, ctx: PositionContext) {\n  return {\n    label,\n    insertText: completion,\n    command: { id: TRIGGER_SUGGEST, title: '' },\n    kind,\n    sortText: CompletionItemPriority.High,\n    range: {\n      ...ctx.range,\n      startColumn: ctx.range.endColumn,\n      endColumn: ctx.range.endColumn,\n    },\n  };\n}\n\nfunction isAfterSelect(token: LinkedToken | null) {\n  return isAfterKeyword(token, Keyword.Select);\n}\n\nfunction isAfterFrom(token: LinkedToken | null) {\n  return isDirectlyAfter(token, Keyword.From);\n}\n\nfunction isAfterWhere(token: LinkedToken | null) {\n  return isAfterKeyword(token, Keyword.Where);\n}\n\nfunction isAfterKeyword(token: LinkedToken | null, keyword: string) {\n  if (!token?.is(TokenType.Keyword)) {\n    let curToken = token;\n    while (true) {\n      if (!curToken) {\n        return false;\n      }\n      if (curToken.is(TokenType.Keyword, keyword)) {\n        return true;\n      }\n      if (curToken.isKeyword()) {\n        return false;\n      }\n      curToken = curToken?.previous || null;\n    }\n  }\n  return false;\n}\n\nfunction isDirectlyAfter(token: LinkedToken | null, keyword: string) {\n  return token?.is(TokenType.Whitespace) && token?.previous?.is(TokenType.Keyword, keyword);\n}\n\nfunction keywordValue(token: LinkedToken | null, keyword: Keyword, direction: Direction) {\n  let next = token;\n  while (next) {\n    if (next.is(TokenType.Keyword, keyword)) {\n      return tokenValue(next);\n    }\n    next = next[direction];\n  }\n  return false;\n}\n\nfunction tokenValue(token: LinkedToken | null): string | undefined {\n  const ws = token?.next;\n  if (ws?.isWhiteSpace()) {\n    const v = ws.next;\n    const delim = v?.next;\n    if (!delim?.is(TokenType.Delimiter)) {\n      return v?.value;\n    }\n    return `${v?.value}${delim?.value}${delim.next?.value}`;\n  }\n  return undefined;\n}\n\nexport async function fetchColumns(db: DB, q: SQLQuery) {\n  const cols = await db.fields(q);\n  if (cols.length > 0) {\n    return cols.map((c) => {\n      return { name: c.value, type: c.value, description: c.value };\n    });\n  } else {\n    return [];\n  }\n}\n\nexport async function fetchTables(db: DB, q: Partial<SQLQuery>) {\n  const tables = await db.lookup(q.dataset);\n  return tables;\n}\n\nexport function getFunctions(): Aggregate[] {\n  return [...AGGREGATE_FNS, ...FUNCTIONS];\n}\n","import { DataSourceInstanceSettings, ScopedVars, TimeRange } from '@grafana/data';\nimport { TemplateSrv } from '@grafana/runtime';\nimport { SqlDatasource } from 'app/features/plugins/sql/datasource/SqlDatasource';\nimport {\n  CompletionItemKind,\n  DB,\n  LanguageCompletionProvider,\n  ResponseParser,\n  SQLQuery,\n} from 'app/features/plugins/sql/types';\n\nimport MySQLQueryModel from './MySqlQueryModel';\nimport MySqlResponseParser from './MySqlResponseParser';\nimport { mapFieldsToTypes } from './fields';\nimport { buildColumnQuery, buildTableQuery, showDatabases } from './mySqlMetaQuery';\nimport { fetchColumns, fetchTables, getFunctions, getSqlCompletionProvider } from './sqlCompletionProvider';\nimport { MySQLOptions } from './types';\n\nexport class MySqlDatasource extends SqlDatasource {\n  responseParser: MySqlResponseParser;\n  completionProvider: LanguageCompletionProvider | undefined;\n\n  constructor(private instanceSettings: DataSourceInstanceSettings<MySQLOptions>) {\n    super(instanceSettings);\n    this.responseParser = new MySqlResponseParser();\n    this.completionProvider = undefined;\n  }\n\n  getQueryModel(target?: Partial<SQLQuery>, templateSrv?: TemplateSrv, scopedVars?: ScopedVars): MySQLQueryModel {\n    return new MySQLQueryModel(target!, templateSrv, scopedVars);\n  }\n\n  getResponseParser(): ResponseParser {\n    return this.responseParser;\n  }\n\n  getSqlCompletionProvider(db: DB): LanguageCompletionProvider {\n    if (this.completionProvider !== undefined) {\n      return this.completionProvider;\n    }\n\n    const args = {\n      getColumns: { current: (query: SQLQuery) => fetchColumns(db, query) },\n      getTables: { current: (dataset?: string) => fetchTables(db, { dataset }) },\n      fetchMeta: { current: (path?: string) => this.fetchMeta(path) },\n      getFunctions: { current: () => getFunctions() },\n    };\n    this.completionProvider = getSqlCompletionProvider(args);\n    return this.completionProvider;\n  }\n\n  async fetchDatasets(): Promise<string[]> {\n    const datasets = await this.runSql<string[]>(showDatabases(), { refId: 'datasets' });\n    return datasets.map((t) => t[0]);\n  }\n\n  async fetchTables(dataset?: string): Promise<string[]> {\n    const tables = await this.runSql<string[]>(buildTableQuery(dataset), { refId: 'tables' });\n    return tables.map((t) => t[0]);\n  }\n\n  async fetchFields(query: Partial<SQLQuery>) {\n    if (!query.dataset || !query.table) {\n      return [];\n    }\n    const queryString = buildColumnQuery(this.getQueryModel(query), query.table!);\n    const frame = await this.runSql<string[]>(queryString, { refId: 'fields' });\n    const fields = frame.map((f) => ({ name: f[0], text: f[0], value: f[0], type: f[1], label: f[0] }));\n    return mapFieldsToTypes(fields);\n  }\n\n  async fetchMeta(path?: string) {\n    const defaultDB = this.instanceSettings.jsonData.database;\n    path = path?.trim();\n    if (!path && defaultDB) {\n      const tables = await this.fetchTables(defaultDB);\n      return tables.map((t) => ({ name: t, completion: t, kind: CompletionItemKind.Class }));\n    } else if (!path) {\n      const datasets = await this.fetchDatasets();\n      return datasets.map((d) => ({ name: d, completion: `${d}.`, kind: CompletionItemKind.Module }));\n    } else {\n      const parts = path.split('.').filter((s: string) => s);\n      if (parts.length > 2) {\n        return [];\n      }\n      if (parts.length === 1 && !defaultDB) {\n        const tables = await this.fetchTables(parts[0]);\n        return tables.map((t) => ({ name: t, completion: t, kind: CompletionItemKind.Class }));\n      } else if (parts.length === 1 && defaultDB) {\n        const fields = await this.fetchFields({ dataset: defaultDB, table: parts[0] });\n        return fields.map((t) => ({ name: t.value, completion: t.value, kind: CompletionItemKind.Field }));\n      } else if (parts.length === 2 && !defaultDB) {\n        const fields = await this.fetchFields({ dataset: parts[0], table: parts[1] });\n        return fields.map((t) => ({ name: t.value, completion: t.value, kind: CompletionItemKind.Field }));\n      } else {\n        return [];\n      }\n    }\n  }\n\n  getDB(): DB {\n    if (this.db !== undefined) {\n      return this.db;\n    }\n    return {\n      datasets: () => this.fetchDatasets(),\n      tables: (dataset?: string) => this.fetchTables(dataset),\n      fields: (query: SQLQuery) => this.fetchFields(query),\n      validateQuery: (query: SQLQuery, range?: TimeRange) =>\n        Promise.resolve({ query, error: '', isError: false, isValid: true }),\n      dsID: () => this.id,\n      lookup: (path?: string) => this.fetchMeta(path),\n      getSqlCompletionProvider: () => this.getSqlCompletionProvider(this.db),\n      functions: async () => getFunctions(),\n    };\n  }\n}\n","import React, { SyntheticEvent } from 'react';\n\nimport {\n  DataSourcePluginOptionsEditorProps,\n  onUpdateDatasourceJsonDataOption,\n  onUpdateDatasourceSecureJsonDataOption,\n  updateDatasourcePluginJsonDataOption,\n  updateDatasourcePluginResetOption,\n} from '@grafana/data';\nimport { Alert, FieldSet, InlineField, InlineFieldRow, InlineSwitch, Input, Link, SecretInput } from '@grafana/ui';\nimport { ConnectionLimits } from 'app/features/plugins/sql/components/configuration/ConnectionLimits';\nimport { TLSSecretsConfig } from 'app/features/plugins/sql/components/configuration/TLSSecretsConfig';\n\nimport { MySQLOptions } from '../types';\n\nexport const ConfigurationEditor = (props: DataSourcePluginOptionsEditorProps<MySQLOptions>) => {\n  const { options, onOptionsChange } = props;\n  const jsonData = options.jsonData;\n\n  const onResetPassword = () => {\n    updateDatasourcePluginResetOption(props, 'password');\n  };\n\n  const onDSOptionChanged = (property: keyof MySQLOptions) => {\n    return (event: SyntheticEvent<HTMLInputElement>) => {\n      onOptionsChange({ ...options, ...{ [property]: event.currentTarget.value } });\n    };\n  };\n\n  const onSwitchChanged = (property: keyof MySQLOptions) => {\n    return (event: SyntheticEvent<HTMLInputElement>) => {\n      updateDatasourcePluginJsonDataOption(props, property, event.currentTarget.checked);\n    };\n  };\n\n  const mediumWidth = 20;\n  const shortWidth = 15;\n  const longWidth = 40;\n\n  return (\n    <>\n      <FieldSet label=\"MySQL Connection\" width={400}>\n        <InlineField labelWidth={shortWidth} label=\"Host\">\n          <Input\n            width={longWidth}\n            name=\"host\"\n            type=\"text\"\n            value={options.url || ''}\n            placeholder=\"localhost:3306\"\n            onChange={onDSOptionChanged('url')}\n          ></Input>\n        </InlineField>\n        <InlineField labelWidth={shortWidth} label=\"Database\">\n          <Input\n            width={longWidth}\n            name=\"database\"\n            value={options.database || ''}\n            placeholder=\"database name\"\n            onChange={onDSOptionChanged('database')}\n          ></Input>\n        </InlineField>\n        <InlineFieldRow>\n          <InlineField labelWidth={shortWidth} label=\"User\">\n            <Input\n              width={shortWidth}\n              value={options.user || ''}\n              placeholder=\"user\"\n              onChange={onDSOptionChanged('user')}\n            ></Input>\n          </InlineField>\n          <InlineField labelWidth={shortWidth - 5} label=\"Password\">\n            <SecretInput\n              width={shortWidth}\n              placeholder=\"Password\"\n              isConfigured={options.secureJsonFields && options.secureJsonFields.password}\n              onReset={onResetPassword}\n              onBlur={onUpdateDatasourceSecureJsonDataOption(props, 'password')}\n            ></SecretInput>\n          </InlineField>\n        </InlineFieldRow>\n        <InlineField\n          tooltip={\n            <span>\n              Specify the time zone used in the database session, e.g. <code>Europe/Berlin</code> or\n              <code>+02:00</code>. This is necessary, if the timezone of the database (or the host of the database) is\n              set to something other than UTC. The value is set in the session with\n              <code>SET time_zone=&apos;...&apos;</code>. If you leave this field empty, the timezone is not updated.\n              You can find more information in the MySQL documentation.\n            </span>\n          }\n          label=\"Session timezone\"\n          labelWidth={mediumWidth}\n        >\n          <Input\n            width={longWidth - 5}\n            value={jsonData.timezone || ''}\n            onChange={onUpdateDatasourceJsonDataOption(props, 'timezone')}\n            placeholder=\"(default)\"\n          ></Input>\n        </InlineField>\n        <InlineFieldRow>\n          <InlineField labelWidth={mediumWidth} htmlFor=\"tlsAuth\" label=\"TLS Client Auth\">\n            <InlineSwitch\n              id=\"tlsAuth\"\n              onChange={onSwitchChanged('tlsAuth')}\n              value={jsonData.tlsAuth || false}\n            ></InlineSwitch>\n          </InlineField>\n          <InlineField\n            labelWidth={mediumWidth}\n            tooltip=\"Needed for verifing self-signed TLS Certs\"\n            htmlFor=\"tlsCaCert\"\n            label=\"With CA Cert\"\n          >\n            <InlineSwitch\n              id=\"tlsCaCert\"\n              onChange={onSwitchChanged('tlsAuthWithCACert')}\n              value={jsonData.tlsAuthWithCACert || false}\n            ></InlineSwitch>\n          </InlineField>\n        </InlineFieldRow>\n        <InlineField labelWidth={mediumWidth} htmlFor=\"skipTLSVerify\" label=\"Skip TLS Verify\">\n          <InlineSwitch\n            id=\"skipTLSVerify\"\n            onChange={onSwitchChanged('tlsSkipVerify')}\n            value={jsonData.tlsSkipVerify || false}\n          ></InlineSwitch>\n        </InlineField>\n      </FieldSet>\n\n      {jsonData.tlsAuth || jsonData.tlsAuthWithCACert ? (\n        <FieldSet label=\"TLS/SSL Auth Details\">\n          <TLSSecretsConfig\n            showCACert={jsonData.tlsAuthWithCACert}\n            showKeyPair={jsonData.tlsAuth}\n            editorProps={props}\n            labelWidth={25}\n          ></TLSSecretsConfig>\n        </FieldSet>\n      ) : null}\n\n      <ConnectionLimits\n        labelWidth={shortWidth}\n        jsonData={jsonData}\n        onPropertyChanged={(property, value) => {\n          updateDatasourcePluginJsonDataOption(props, property, value);\n        }}\n      ></ConnectionLimits>\n\n      <FieldSet label=\"MySQL details\">\n        <InlineField\n          tooltip={\n            <span>\n              A lower limit for the auto group by time interval. Recommended to be set to write frequency, for example\n              <code>1m</code> if your data is written every minute.\n            </span>\n          }\n          labelWidth={mediumWidth}\n          label=\"Min time interval\"\n        >\n          <Input\n            placeholder=\"1m\"\n            value={jsonData.timeInterval || ''}\n            onChange={onUpdateDatasourceJsonDataOption(props, 'timeInterval')}\n          ></Input>\n        </InlineField>\n      </FieldSet>\n\n      <Alert title=\"User Permission\" severity=\"info\">\n        The database user should only be granted SELECT permissions on the specified database &amp; tables you want to\n        query. Grafana does not validate that queries are safe so queries can contain any SQL statement. For example,\n        statements like <code>USE otherdb;</code> and <code>DROP TABLE user;</code> would be executed. To protect\n        against this we <strong>Highly</strong> recommend you create a specific MySQL user with restricted permissions.\n        Checkout the{' '}\n        <Link rel=\"noreferrer\" target=\"_blank\" href=\"http://docs.grafana.org/features/datasources/mysql/\">\n          MySQL Data Source Docs\n        </Link>\n        for more information.\n      </Alert>\n    </>\n  );\n};\n","import { DataSourcePlugin } from '@grafana/data';\nimport { SqlQueryEditor } from 'app/features/plugins/sql/components/QueryEditor';\nimport { SQLQuery } from 'app/features/plugins/sql/types';\n\nimport { MySqlDatasource } from './MySqlDatasource';\nimport { ConfigurationEditor } from './configuration/ConfigurationEditor';\nimport { MySQLOptions } from './types';\n\nexport const plugin = new DataSourcePlugin<MySqlDatasource, SQLQuery, MySQLOptions>(MySqlDatasource)\n  .setQueryEditor(SqlQueryEditor)\n  .setConfigEditor(ConfigurationEditor);\n"],"names":["TLSSecretsConfig","props","labelWidth","editorProps","showCACert","showKeyPair","secureJsonFields","options","tooltip","label","placeholder","cols","rows","isConfigured","tlsClientCert","onChange","onUpdateDatasourceSecureJsonDataOption","onReset","updateDatasourcePluginResetOption","tlsCACert","tlsClientKey","MySQLQueryModel","constructor","target","templateSrv","scopedVars","this","unquoteIdentifier","value","length","substring","replace","quoteIdentifier","quoteLiteral","getDatabase","dataset","ResponseParser","transformMetricFindResponse","frame","values","textField","fields","find","f","name","valueField","i","push","text","get","flatMap","toArray","map","v","uniqBy","mapColumnTypeToIcon","type","buildColumnQuery","queryModel","table","timeColumn","query","includes","parts","split","quoteIdentAsLiteral","undefined","buildTableConstraint","FUNCTIONS","id","description","CustomStatementPlacement","CustomSuggestionKind","Direction","Keyword","customStatementPlacement","AfterDataset","resolve","currentToken","previousKeyword","Boolean","is","TokenType","previous","AfterFrom","isAfterFrom","AfterSelect","token","isDirectlyAfter","Select","isAfterKeyword","isAfterSelect","customSuggestionKinds","getTables","_","fetchMeta","TablesWithinDataset","applyTo","suggestionsResolver","async","tablePath","ctx","processedToken","isWhiteSpace","trim","getTablePath","current","suggestion","completion","CompletionItemKind","path","getPath","Next","meta","kind","StatementPosition","Previous","Where","direction","fromValue","keyword","next","tokenValue","keywordValue","From","insertText","command","title","sortText","CompletionItemPriority","range","startColumn","endColumn","curToken","isKeyword","ws","delim","getFunctions","AGGREGATE_FNS","MySqlDatasource","SqlDatasource","instanceSettings","super","responseParser","MySqlResponseParser","completionProvider","getQueryModel","getResponseParser","getSqlCompletionProvider","db","args","getColumns","q","c","fetchColumns","lookup","fetchTables","triggerCharacters","supportedFunctions","supportedOperators","OPERATORS","runSql","refId","t","tables","buildTableQuery","queryString","columns","col","toUpperCase","raqbFieldType","icon","mapFieldsToTypes","defaultDB","jsonData","database","filter","s","fetchFields","fetchDatasets","d","getDB","datasets","validateQuery","Promise","error","isError","isValid","dsID","functions","plugin","DataSourcePlugin","setQueryEditor","SqlQueryEditor","setConfigEditor","onOptionsChange","onDSOptionChanged","property","event","currentTarget","onSwitchChanged","updateDatasourcePluginJsonDataOption","checked","shortWidth","FieldSet","width","InlineField","Input","I","url","InlineFieldRow","user","SecretInput","password","onBlur","longWidth","timezone","onUpdateDatasourceJsonDataOption","htmlFor","tlsAuth","tlsAuthWithCACert","tlsSkipVerify","ConnectionLimits","onPropertyChanged","timeInterval","Alert","severity","Link","rel","href"],"sourceRoot":""}