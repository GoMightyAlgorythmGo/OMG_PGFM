{"version":3,"file":"TeamPages.b8d27c483855ea8f624b.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/RolePicker/TeamRolePicker.tsx","webpack://grafana/./public/app/core/components/RolePicker/hooks.ts","webpack://grafana/./public/app/core/components/SharedPreferences/SharedPreferences.tsx","webpack://grafana/./public/app/features/admin/utils.ts","webpack://grafana/./public/app/core/components/Upgrade/UpgradeBox.tsx","webpack://grafana/./public/app/features/teams/TeamGroupSync.tsx","webpack://grafana/./public/app/core/components/WithFeatureToggle.tsx","webpack://grafana/./public/app/features/teams/TeamMemberRow.tsx","webpack://grafana/./public/app/features/teams/TeamMembers.tsx","webpack://grafana/./public/app/features/teams/TeamPermissions.tsx","webpack://grafana/./public/app/features/teams/TeamSettings.tsx","webpack://grafana/./public/app/features/teams/TeamPages.tsx","webpack://grafana/./public/app/features/teams/state/actions.ts","webpack://grafana/./public/app/features/teams/state/navModel.ts","webpack://grafana/./public/app/features/teams/state/selectors.ts"],"sourcesContent":["import React, { FC, useEffect } from 'react';\nimport { useAsyncFn } from 'react-use';\n\nimport { contextSrv } from 'app/core/core';\nimport { Role, AccessControlAction } from 'app/types';\n\nimport { RolePicker } from './RolePicker';\nimport { fetchTeamRoles, updateTeamRoles } from './api';\n\nexport interface Props {\n  teamId: number;\n  orgId?: number;\n  roleOptions: Role[];\n  disabled?: boolean;\n  onApplyRoles?: (newRoles: Role[]) => void;\n  pendingRoles?: Role[];\n  /**\n   * Set whether the component should send a request with the new roles to the\n   * backend in TeamRolePicker.onRolesChange (apply=false), or call {@link onApplyRoles}\n   * with the updated list of roles (apply=true).\n   *\n   * Besides it sets the RolePickerMenu's Button title to\n   *   * `Update` in case apply equals false\n   *   * `Apply` in case apply equals true\n   *\n   * @default false\n   */\n  apply?: boolean;\n  maxWidth?: string | number;\n}\n\nexport const TeamRolePicker: FC<Props> = ({\n  teamId,\n  roleOptions,\n  disabled,\n  onApplyRoles,\n  pendingRoles,\n  apply = false,\n  maxWidth,\n}) => {\n  const [{ loading, value: appliedRoles = [] }, getTeamRoles] = useAsyncFn(async () => {\n    try {\n      if (apply && Boolean(pendingRoles?.length)) {\n        return pendingRoles;\n      }\n\n      if (contextSrv.hasPermission(AccessControlAction.ActionTeamsRolesList)) {\n        return await fetchTeamRoles(teamId);\n      }\n    } catch (e) {\n      console.error('Error loading options', e);\n    }\n    return [];\n  }, [teamId, pendingRoles]);\n\n  useEffect(() => {\n    getTeamRoles();\n  }, [teamId, getTeamRoles, pendingRoles]);\n\n  const onRolesChange = async (roles: Role[]) => {\n    if (!apply) {\n      await updateTeamRoles(roles, teamId);\n      await getTeamRoles();\n    } else if (onApplyRoles) {\n      onApplyRoles(roles);\n    }\n  };\n\n  const canUpdateRoles =\n    contextSrv.hasPermission(AccessControlAction.ActionTeamsRolesAdd) &&\n    contextSrv.hasPermission(AccessControlAction.ActionTeamsRolesRemove);\n\n  return (\n    <RolePicker\n      apply={apply}\n      onRolesChange={onRolesChange}\n      roleOptions={roleOptions}\n      appliedRoles={appliedRoles}\n      isLoading={loading}\n      disabled={disabled}\n      basicRoleDisabled={true}\n      canUpdateRoles={canUpdateRoles}\n      maxWidth={maxWidth}\n    />\n  );\n};\n","import { useState } from 'react';\nimport useAsync from 'react-use/lib/useAsync';\n\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction } from 'app/types';\n\nimport { fetchRoleOptions } from './api';\n\nexport const useRoleOptions = (organizationId: number) => {\n  const [orgId, setOrgId] = useState(organizationId);\n\n  const { value = [] } = useAsync(async () => {\n    if (contextSrv.licensedAccessControlEnabled() && contextSrv.hasPermission(AccessControlAction.ActionRolesList)) {\n      return fetchRoleOptions(orgId);\n    }\n    return Promise.resolve([]);\n  }, [orgId]);\n\n  return [{ roleOptions: value }, setOrgId] as const;\n};\n","import { css } from '@emotion/css';\nimport { t, Trans } from '@lingui/macro';\nimport React, { PureComponent } from 'react';\n\nimport { FeatureState, SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { config } from '@grafana/runtime';\nimport {\n  Button,\n  Field,\n  FieldSet,\n  Form,\n  Label,\n  RadioButtonGroup,\n  Select,\n  stylesFactory,\n  TimeZonePicker,\n  WeekStartPicker,\n  FeatureBadge,\n} from '@grafana/ui';\nimport { DashboardPicker } from 'app/core/components/Select/DashboardPicker';\nimport { ENGLISH_US, FRENCH_FRANCE, SPANISH_SPAIN } from 'app/core/internationalization/constants';\nimport { PreferencesService } from 'app/core/services/PreferencesService';\nimport { UserPreferencesDTO } from 'app/types';\n\nexport interface Props {\n  resourceUri: string;\n  disabled?: boolean;\n}\n\nexport type State = UserPreferencesDTO;\n\nconst themes: SelectableValue[] = [\n  { value: '', label: t({ id: 'shared-preferences.theme.default-label', message: 'Default' }) },\n  { value: 'dark', label: t({ id: 'shared-preferences.theme.dark-label', message: 'Dark' }) },\n  { value: 'light', label: t({ id: 'shared-preferences.theme.light-label', message: 'Light' }) },\n];\n\nconst languages: Array<SelectableValue<string>> = [\n  {\n    value: '',\n    label: t({\n      id: 'common.locale.default',\n      message: 'Default',\n    }),\n  },\n  {\n    value: ENGLISH_US,\n    label: t({\n      id: 'common.locale.en',\n      message: 'English',\n    }),\n  },\n  {\n    value: SPANISH_SPAIN,\n    label: t({\n      id: 'common.locale.es',\n      message: 'Spanish',\n    }),\n  },\n  {\n    value: FRENCH_FRANCE,\n    label: t({\n      id: 'common.locale.fr',\n      message: 'French',\n    }),\n  },\n];\n\nconst i18nFlag = Boolean(config.featureToggles.internationalization);\n\nexport class SharedPreferences extends PureComponent<Props, State> {\n  service: PreferencesService;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.service = new PreferencesService(props.resourceUri);\n    this.state = {\n      theme: '',\n      timezone: '',\n      weekStart: '',\n      locale: '',\n      queryHistory: { homeTab: '' },\n    };\n  }\n\n  async componentDidMount() {\n    const prefs = await this.service.load();\n\n    this.setState({\n      homeDashboardUID: prefs.homeDashboardUID,\n      theme: prefs.theme,\n      timezone: prefs.timezone,\n      weekStart: prefs.weekStart,\n      locale: prefs.locale,\n      queryHistory: prefs.queryHistory,\n    });\n  }\n\n  onSubmitForm = async () => {\n    const { homeDashboardUID, theme, timezone, weekStart, locale, queryHistory } = this.state;\n    await this.service.update({ homeDashboardUID, theme, timezone, weekStart, locale, queryHistory });\n    window.location.reload();\n  };\n\n  onThemeChanged = (value: string) => {\n    this.setState({ theme: value });\n  };\n\n  onTimeZoneChanged = (timezone?: string) => {\n    if (!timezone) {\n      return;\n    }\n    this.setState({ timezone: timezone });\n  };\n\n  onWeekStartChanged = (weekStart: string) => {\n    this.setState({ weekStart: weekStart });\n  };\n\n  onHomeDashboardChanged = (dashboardUID: string) => {\n    this.setState({ homeDashboardUID: dashboardUID });\n  };\n\n  onLocaleChanged = (locale: string) => {\n    this.setState({ locale });\n  };\n\n  render() {\n    const { theme, timezone, weekStart, homeDashboardUID, locale } = this.state;\n    const { disabled } = this.props;\n    const styles = getStyles();\n\n    return (\n      <Form onSubmit={this.onSubmitForm}>\n        {() => {\n          return (\n            <FieldSet label={<Trans id=\"shared-preferences.title\">Preferences</Trans>} disabled={disabled}>\n              <Field label={t({ id: 'shared-preferences.fields.theme-label', message: 'UI Theme' })}>\n                <RadioButtonGroup\n                  options={themes}\n                  value={themes.find((item) => item.value === theme)?.value}\n                  onChange={this.onThemeChanged}\n                />\n              </Field>\n\n              <Field\n                label={\n                  <Label htmlFor=\"home-dashboard-select\">\n                    <span className={styles.labelText}>\n                      <Trans id=\"shared-preferences.fields.home-dashboard-label\">Home Dashboard</Trans>\n                    </span>\n                  </Label>\n                }\n                data-testid=\"User preferences home dashboard drop down\"\n              >\n                <DashboardPicker\n                  value={homeDashboardUID}\n                  onChange={(v) => this.onHomeDashboardChanged(v?.uid ?? '')}\n                  defaultOptions={true}\n                  isClearable={true}\n                  placeholder={t({\n                    id: 'shared-preferences.fields.home-dashboard-placeholder',\n                    message: 'Default dashboard',\n                  })}\n                  inputId=\"home-dashboard-select\"\n                />\n              </Field>\n\n              <Field\n                label={t({ id: 'shared-dashboard.fields.timezone-label', message: 'Timezone' })}\n                data-testid={selectors.components.TimeZonePicker.containerV2}\n              >\n                <TimeZonePicker\n                  includeInternal={true}\n                  value={timezone}\n                  onChange={this.onTimeZoneChanged}\n                  inputId=\"shared-preferences-timezone-picker\"\n                />\n              </Field>\n\n              <Field\n                label={t({ id: 'shared-preferences.fields.week-start-label', message: 'Week start' })}\n                data-testid={selectors.components.WeekStartPicker.containerV2}\n              >\n                <WeekStartPicker\n                  value={weekStart}\n                  onChange={this.onWeekStartChanged}\n                  inputId={'shared-preferences-week-start-picker'}\n                />\n              </Field>\n\n              {i18nFlag ? (\n                <Field\n                  label={\n                    <Label htmlFor=\"locale-select\">\n                      <span className={styles.labelText}>\n                        <Trans id=\"shared-preferences.fields.locale-label\">Language</Trans>\n                      </span>\n                      <FeatureBadge featureState={FeatureState.alpha} />\n                    </Label>\n                  }\n                  data-testid=\"User preferences language drop down\"\n                >\n                  <Select\n                    value={languages.find((lang) => lang.value === locale)}\n                    onChange={(locale: SelectableValue<string>) => this.onLocaleChanged(locale.value ?? '')}\n                    options={languages}\n                    placeholder={t({\n                      id: 'shared-preferences.fields.locale-placeholder',\n                      message: 'Choose language',\n                    })}\n                    inputId=\"locale-select\"\n                  />\n                </Field>\n              ) : null}\n\n              <div className=\"gf-form-button-row\">\n                <Button\n                  type=\"submit\"\n                  variant=\"primary\"\n                  data-testid={selectors.components.UserProfile.preferencesSaveButton}\n                >\n                  <Trans id=\"common.save\">Save</Trans>\n                </Button>\n              </div>\n            </FieldSet>\n          );\n        }}\n      </Form>\n    );\n  }\n}\n\nexport default SharedPreferences;\n\nconst getStyles = stylesFactory(() => {\n  return {\n    labelText: css`\n      margin-right: 6px;\n    `,\n  };\n});\n","import { config } from '@grafana/runtime/src';\n\n// https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address\nexport const w3cStandardEmailValidator =\n  /^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n\nexport function isTrial() {\n  const expiry = config.licenseInfo?.trialExpiry;\n  return !!(expiry && expiry > 0);\n}\n\nexport const highlightTrial = () => isTrial() && config.featureToggles.featureHighlights;\n","import { css, cx } from '@emotion/css';\nimport React, { HTMLAttributes, useEffect } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { reportExperimentView } from '@grafana/runtime/src';\nimport { Button, Icon, LinkButton, useStyles2 } from '@grafana/ui';\n\ntype ComponentSize = 'sm' | 'md';\n\nexport interface Props extends HTMLAttributes<HTMLOrSVGElement> {\n  featureName: string;\n  size?: ComponentSize;\n  text?: string;\n  eventVariant?: string;\n  featureId: string;\n}\n\nexport const UpgradeBox = ({\n  featureName,\n  className,\n  children,\n  text,\n  featureId,\n  eventVariant = '',\n  size = 'md',\n  ...htmlProps\n}: Props) => {\n  const styles = useStyles2((theme) => getUpgradeBoxStyles(theme, size));\n\n  useEffect(() => {\n    reportExperimentView(`feature-highlights-${featureId}`, 'test', eventVariant);\n  }, [eventVariant, featureId]);\n\n  return (\n    <div className={cx(styles.box, className)} {...htmlProps}>\n      <Icon name={'rocket'} className={styles.icon} />\n      <div className={styles.inner}>\n        <p className={styles.text}>\n          You’ve discovered a Pro feature! {text || `Get the Grafana Pro plan to access ${featureName}.`}\n        </p>\n        <LinkButton\n          variant=\"secondary\"\n          size={size}\n          className={styles.button}\n          href=\"https://grafana.com/profile/org/subscription\"\n          target=\"__blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Upgrade\n        </LinkButton>\n      </div>\n    </div>\n  );\n};\n\nconst getUpgradeBoxStyles = (theme: GrafanaTheme2, size: ComponentSize) => {\n  const borderRadius = theme.shape.borderRadius(2);\n  const fontBase = size === 'md' ? 'body' : 'bodySmall';\n\n  return {\n    box: css`\n      display: flex;\n      align-items: center;\n      position: relative;\n      border-radius: ${borderRadius};\n      background: ${theme.colors.success.transparent};\n      padding: ${theme.spacing(2)};\n      color: ${theme.colors.success.text};\n      font-size: ${theme.typography[fontBase].fontSize};\n      text-align: left;\n      line-height: 16px;\n      margin: ${theme.spacing(0, 'auto', 3, 'auto')};\n      max-width: ${theme.breakpoints.values.xxl}px;\n      width: 100%;\n    `,\n    inner: css`\n      display: flex;\n      align-items: center;\n      width: 100%;\n      justify-content: space-between;\n    `,\n    text: css`\n      margin: 0;\n    `,\n    button: css`\n      background-color: ${theme.colors.success.main};\n      font-weight: ${theme.typography.fontWeightLight};\n      color: white;\n\n      &:hover {\n        background-color: ${theme.colors.success.main};\n      }\n\n      &:focus-visible {\n        box-shadow: none;\n        color: ${theme.colors.text.primary};\n        outline: 2px solid ${theme.colors.primary.main};\n      }\n    `,\n    icon: css`\n      margin: ${theme.spacing(0.5, 1, 0.5, 0.5)};\n    `,\n  };\n};\n\nexport interface UpgradeContentProps {\n  image: string;\n  featureUrl?: string;\n  featureName: string;\n  description?: string;\n  listItems: string[];\n  caption?: string;\n  action?: {\n    text: string;\n    link?: string;\n    onClick?: () => void;\n  };\n}\n\nexport const UpgradeContent = ({\n  listItems,\n  image,\n  featureUrl,\n  featureName,\n  description,\n  caption,\n  action,\n}: UpgradeContentProps) => {\n  const styles = useStyles2(getUpgradeContentStyles);\n  return (\n    <div className={styles.container}>\n      <div className={styles.content}>\n        <h3 className={styles.title}>Get started with {featureName}</h3>\n        {description && <h6 className={styles.description}>{description}</h6>}\n        <ul className={styles.list}>\n          {listItems.map((item, index) => (\n            <li key={index}>\n              <Icon name={'check'} size={'xl'} className={styles.icon} /> {item}\n            </li>\n          ))}\n        </ul>\n        {action?.link && (\n          <LinkButton variant={'primary'} href={action.link}>\n            {action.text}\n          </LinkButton>\n        )}\n        {action?.onClick && (\n          <Button variant={'primary'} onClick={action.onClick}>\n            {action.text}\n          </Button>\n        )}\n        {featureUrl && (\n          <LinkButton fill={'text'} href={featureUrl} className={styles.link} target=\"_blank\" rel=\"noreferrer noopener\">\n            Learn more\n          </LinkButton>\n        )}\n      </div>\n      <div className={styles.media}>\n        <img src={getImgUrl(image)} alt={'Feature screenshot'} />\n        {caption && <p className={styles.caption}>{caption}</p>}\n      </div>\n    </div>\n  );\n};\n\nconst getUpgradeContentStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      display: flex;\n      justify-content: space-between;\n    `,\n    content: css`\n      width: 45%;\n      margin-right: ${theme.spacing(4)};\n    `,\n    media: css`\n      width: 55%;\n\n      img {\n        width: 100%;\n      }\n    `,\n    title: css`\n      color: ${theme.colors.text.maxContrast};\n    `,\n    description: css`\n      color: ${theme.colors.text.primary};\n      font-weight: ${theme.typography.fontWeightLight};\n    `,\n    list: css`\n      list-style: none;\n      margin: ${theme.spacing(4, 0, 2, 0)};\n\n      li {\n        display: flex;\n        align-items: flex-start;\n        color: ${theme.colors.text.primary};\n        padding: ${theme.spacing(1, 0)};\n      }\n    `,\n    icon: css`\n      color: ${theme.colors.success.main};\n      margin-right: ${theme.spacing(1)};\n    `,\n    link: css`\n      margin-left: ${theme.spacing(2)};\n    `,\n    caption: css`\n      font-weight: ${theme.typography.fontWeightLight};\n      margin: ${theme.spacing(1, 0, 0)};\n    `,\n  };\n};\n\nexport const UpgradeContentVertical = ({\n  featureName,\n  description,\n  featureUrl,\n  image,\n}: Omit<UpgradeContentProps, 'listItems' | 'caption'>) => {\n  const styles = useStyles2(getContentVerticalStyles);\n  return (\n    <div className={styles.container}>\n      <h3 className={styles.title}>Get started with {featureName}</h3>\n      {description && <h6 className={styles.description}>{description}</h6>}\n      <LinkButton fill={'text'} href={featureUrl} target=\"_blank\" rel=\"noreferrer noopener\">\n        Learn more\n      </LinkButton>\n      <div className={styles.media}>\n        <img src={getImgUrl(image)} alt={'Feature screenshot'} />\n      </div>\n    </div>\n  );\n};\n\nconst getContentVerticalStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      overflow: auto;\n      height: 100%;\n    `,\n    title: css`\n      color: ${theme.colors.text.maxContrast};\n    `,\n    description: css`\n      color: ${theme.colors.text.primary};\n      font-weight: ${theme.typography.fontWeightLight};\n    `,\n    media: css`\n      width: 100%;\n      margin-top: ${theme.spacing(2)};\n\n      img {\n        width: 100%;\n      }\n    `,\n  };\n};\n\nconst getImgUrl = (urlOrId: string) => {\n  if (urlOrId.startsWith('http')) {\n    return urlOrId;\n  }\n\n  return '/public/img/enterprise/highlights/' + urlOrId;\n};\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { Input, Tooltip, Icon, Button, useTheme2, InlineField, InlineFieldRow } from '@grafana/ui';\nimport { SlideDown } from 'app/core/components/Animations/SlideDown';\nimport { CloseButton } from 'app/core/components/CloseButton/CloseButton';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { UpgradeBox, UpgradeContent, UpgradeContentProps } from 'app/core/components/Upgrade/UpgradeBox';\nimport { highlightTrial } from 'app/features/admin/utils';\n\nimport { StoreState, TeamGroup } from '../../types';\n\nimport { addTeamGroup, loadTeamGroups, removeTeamGroup } from './state/actions';\nimport { getTeamGroups } from './state/selectors';\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    groups: getTeamGroups(state.team),\n  };\n}\n\nconst mapDispatchToProps = {\n  loadTeamGroups,\n  addTeamGroup,\n  removeTeamGroup,\n};\n\ninterface OwnProps {\n  isReadOnly: boolean;\n}\n\ninterface State {\n  isAdding: boolean;\n  newGroupId: string;\n}\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nconst headerTooltip = `Sync LDAP, OAuth or SAML groups with your Grafana teams.`;\n\nexport class TeamGroupSync extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { isAdding: false, newGroupId: '' };\n  }\n\n  componentDidMount() {\n    this.fetchTeamGroups();\n  }\n\n  async fetchTeamGroups() {\n    await this.props.loadTeamGroups();\n  }\n\n  onToggleAdding = () => {\n    this.setState({ isAdding: !this.state.isAdding });\n  };\n\n  onNewGroupIdChanged = (event: any) => {\n    this.setState({ newGroupId: event.target.value });\n  };\n\n  onAddGroup = (event: any) => {\n    event.preventDefault();\n    this.props.addTeamGroup(this.state.newGroupId);\n    this.setState({ isAdding: false, newGroupId: '' });\n  };\n\n  onRemoveGroup = (group: TeamGroup) => {\n    this.props.removeTeamGroup(group.groupId);\n  };\n\n  isNewGroupValid() {\n    return this.state.newGroupId.length > 1;\n  }\n\n  renderGroup(group: TeamGroup) {\n    const { isReadOnly } = this.props;\n    return (\n      <tr key={group.groupId}>\n        <td>{group.groupId}</td>\n        <td style={{ width: '1%' }}>\n          <Button\n            size=\"sm\"\n            variant=\"destructive\"\n            onClick={() => this.onRemoveGroup(group)}\n            disabled={isReadOnly}\n            aria-label={`Remove group ${group.groupId}`}\n          >\n            <Icon name=\"times\" />\n          </Button>\n        </td>\n      </tr>\n    );\n  }\n\n  render() {\n    const { isAdding, newGroupId } = this.state;\n    const { groups, isReadOnly } = this.props;\n    return (\n      <div>\n        {highlightTrial() && (\n          <UpgradeBox\n            featureId={'team-sync'}\n            eventVariant={'trial'}\n            featureName={'team sync'}\n            text={'Add a group to enable team sync for free during your trial of Grafana Pro.'}\n          />\n        )}\n        <div className=\"page-action-bar\">\n          {(!highlightTrial() || groups.length > 0) && (\n            <>\n              <h3 className=\"page-sub-heading\">External group sync</h3>\n              <Tooltip placement=\"auto\" content={headerTooltip}>\n                <Icon className=\"icon--has-hover page-sub-heading-icon\" name=\"question-circle\" />\n              </Tooltip>\n            </>\n          )}\n          <div className=\"page-action-bar__spacer\" />\n          {groups.length > 0 && (\n            <Button className=\"pull-right\" onClick={this.onToggleAdding} disabled={isReadOnly}>\n              <Icon name=\"plus\" /> Add group\n            </Button>\n          )}\n        </div>\n\n        <SlideDown in={isAdding}>\n          <div className=\"cta-form\">\n            <CloseButton onClick={this.onToggleAdding} />\n            <form onSubmit={this.onAddGroup}>\n              <InlineFieldRow>\n                <InlineField\n                  label={'Add External Group'}\n                  tooltip=\"LDAP Group Example: cn=users,ou=groups,dc=grafana,dc=org.\"\n                >\n                  <Input\n                    type=\"text\"\n                    id={'add-external-group'}\n                    placeholder=\"\"\n                    value={newGroupId}\n                    onChange={this.onNewGroupIdChanged}\n                    disabled={isReadOnly}\n                  />\n                </InlineField>\n                <Button type=\"submit\" disabled={isReadOnly || !this.isNewGroupValid()} style={{ marginLeft: 4 }}>\n                  Add group\n                </Button>\n              </InlineFieldRow>\n            </form>\n          </div>\n        </SlideDown>\n\n        {groups.length === 0 &&\n          !isAdding &&\n          (highlightTrial() ? (\n            <TeamSyncUpgradeContent action={{ onClick: this.onToggleAdding, text: 'Add group' }} />\n          ) : (\n            <EmptyListCTA\n              onClick={this.onToggleAdding}\n              buttonIcon=\"users-alt\"\n              title=\"There are no external groups to sync with\"\n              buttonTitle=\"Add group\"\n              proTip={headerTooltip}\n              proTipLinkTitle=\"Learn more\"\n              proTipLink=\"https://docs.grafana.org/auth/enhanced_ldap/\"\n              proTipTarget=\"_blank\"\n              buttonDisabled={isReadOnly}\n            />\n          ))}\n\n        {groups.length > 0 && (\n          <div className=\"admin-list-table\">\n            <table className=\"filter-table filter-table--hover form-inline\">\n              <thead>\n                <tr>\n                  <th>External Group ID</th>\n                  <th style={{ width: '1%' }} />\n                </tr>\n              </thead>\n              <tbody>{groups.map((group) => this.renderGroup(group))}</tbody>\n            </table>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport const TeamSyncUpgradeContent = ({ action }: { action?: UpgradeContentProps['action'] }) => {\n  const theme = useTheme2();\n  return (\n    <UpgradeContent\n      action={action}\n      listItems={[\n        'Stop managing user access in two places - assign users to groups in SAML, LDAP or Oauth, and manage access at a Team level in Grafana',\n        'Update users’ permissions immediately when you add or remove them from an LDAP group, with no need for them to sign out and back in',\n      ]}\n      image={`team-sync-${theme.isLight ? 'light' : 'dark'}.png`}\n      featureName={'team sync'}\n      featureUrl={'https://grafana.com/docs/grafana/latest/enterprise/team-sync'}\n      description={\n        'Team Sync makes it easier for you to manage users’ access in Grafana, by immediately updating each user’s Grafana teams and permissions based on their single sign-on group membership, instead of when users sign in.'\n      }\n    />\n  );\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamGroupSync);\n","import React, { FunctionComponent } from 'react';\n\nexport interface Props {\n  featureToggle: boolean;\n}\n\nexport const WithFeatureToggle: FunctionComponent<Props> = ({ featureToggle, children }) => {\n  if (featureToggle === true) {\n    return <>{children}</>;\n  }\n\n  return null;\n};\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select, DeleteButton } from '@grafana/ui';\nimport { TagBadge } from 'app/core/components/TagFilter/TagBadge';\nimport { WithFeatureToggle } from 'app/core/components/WithFeatureToggle';\nimport { TeamMember, teamsPermissionLevels, TeamPermissionLevel } from 'app/types';\n\nimport { updateTeamMember, removeTeamMember } from './state/actions';\n\nconst mapDispatchToProps = {\n  removeTeamMember,\n  updateTeamMember,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\ninterface OwnProps {\n  member: TeamMember;\n  syncEnabled: boolean;\n  editorsCanAdmin: boolean;\n  signedInUserIsTeamAdmin: boolean;\n}\nexport type Props = ConnectedProps<typeof connector> & OwnProps;\n\nexport class TeamMemberRow extends PureComponent<Props> {\n  constructor(props: Props) {\n    super(props);\n    this.renderLabels = this.renderLabels.bind(this);\n    this.renderPermissions = this.renderPermissions.bind(this);\n  }\n\n  onRemoveMember(member: TeamMember) {\n    this.props.removeTeamMember(member.userId);\n  }\n\n  onPermissionChange = (item: SelectableValue<TeamPermissionLevel>, member: TeamMember) => {\n    const permission = item.value;\n    const updatedTeamMember: TeamMember = {\n      ...member,\n      permission: permission as number,\n    };\n\n    this.props.updateTeamMember(updatedTeamMember);\n  };\n\n  renderPermissions(member: TeamMember) {\n    const { editorsCanAdmin, signedInUserIsTeamAdmin } = this.props;\n    const value = teamsPermissionLevels.find((dp) => dp.value === member.permission)!;\n\n    return (\n      <WithFeatureToggle featureToggle={editorsCanAdmin}>\n        <td className=\"width-5 team-permissions\">\n          {signedInUserIsTeamAdmin ? (\n            <Select\n              isSearchable={false}\n              options={teamsPermissionLevels}\n              onChange={(item) => this.onPermissionChange(item, member)}\n              value={value}\n              width={32}\n              aria-label={`Select member's ${member.name} permission level`}\n            />\n          ) : (\n            <span>{value.label}</span>\n          )}\n        </td>\n      </WithFeatureToggle>\n    );\n  }\n\n  renderLabels(labels: string[]) {\n    if (!labels) {\n      return <td />;\n    }\n\n    return (\n      <td>\n        {labels.map((label) => (\n          <TagBadge key={label} label={label} removeIcon={false} count={0} />\n        ))}\n      </td>\n    );\n  }\n\n  render() {\n    const { member, syncEnabled, signedInUserIsTeamAdmin } = this.props;\n    return (\n      <tr key={member.userId}>\n        <td className=\"width-4 text-center\">\n          <img\n            alt={`Avatar for team member \"${member.name}\"`}\n            className=\"filter-table__avatar\"\n            src={member.avatarUrl}\n          />\n        </td>\n        <td>{member.login}</td>\n        <td>{member.email}</td>\n        <td>{member.name}</td>\n        {this.renderPermissions(member)}\n        {syncEnabled && this.renderLabels(member.labels)}\n        <td className=\"text-right\">\n          <DeleteButton\n            aria-label={`Remove team member ${member.name}`}\n            size=\"sm\"\n            disabled={!signedInUserIsTeamAdmin}\n            onConfirm={() => this.onRemoveMember(member)}\n          />\n        </td>\n      </tr>\n    );\n  }\n}\n\nexport default connector(TeamMemberRow);\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Button, FilterInput, Label } from '@grafana/ui';\nimport { SlideDown } from 'app/core/components/Animations/SlideDown';\nimport { CloseButton } from 'app/core/components/CloseButton/CloseButton';\nimport { UserPicker } from 'app/core/components/Select/UserPicker';\nimport { TagBadge } from 'app/core/components/TagFilter/TagBadge';\nimport { WithFeatureToggle } from 'app/core/components/WithFeatureToggle';\nimport { config } from 'app/core/config';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { TeamMember, OrgUser } from 'app/types';\n\nimport TeamMemberRow from './TeamMemberRow';\nimport { addTeamMember } from './state/actions';\nimport { setSearchMemberQuery } from './state/reducers';\nimport { getSearchMemberQuery, isSignedInUserTeamAdmin } from './state/selectors';\n\nfunction mapStateToProps(state: any) {\n  return {\n    searchMemberQuery: getSearchMemberQuery(state.team),\n    editorsCanAdmin: config.editorsCanAdmin, // this makes the feature toggle mockable/controllable from tests,\n    signedInUser: contextSrv.user, // this makes the feature toggle mockable/controllable from tests,\n  };\n}\n\nconst mapDispatchToProps = {\n  addTeamMember,\n  setSearchMemberQuery,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ninterface OwnProps {\n  members: TeamMember[];\n  syncEnabled: boolean;\n}\n\nexport type Props = ConnectedProps<typeof connector> & OwnProps;\n\nexport interface State {\n  isAdding: boolean;\n  newTeamMember?: SelectableValue<OrgUser['userId']> | null;\n}\n\nexport class TeamMembers extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { isAdding: false, newTeamMember: null };\n  }\n\n  onSearchQueryChange = (value: string) => {\n    this.props.setSearchMemberQuery(value);\n  };\n\n  onToggleAdding = () => {\n    this.setState({ isAdding: !this.state.isAdding });\n  };\n\n  onUserSelected = (user: SelectableValue<OrgUser['userId']>) => {\n    this.setState({ newTeamMember: user });\n  };\n\n  onAddUserToTeam = async () => {\n    this.props.addTeamMember(this.state.newTeamMember!.id);\n    this.setState({ newTeamMember: null });\n  };\n\n  renderLabels(labels: string[]) {\n    if (!labels) {\n      return <td />;\n    }\n\n    return (\n      <td>\n        {labels.map((label) => (\n          <TagBadge key={label} label={label} removeIcon={false} count={0} />\n        ))}\n      </td>\n    );\n  }\n\n  render() {\n    const { isAdding } = this.state;\n    const { searchMemberQuery, members, syncEnabled, editorsCanAdmin, signedInUser } = this.props;\n    const isTeamAdmin = isSignedInUserTeamAdmin({ members, editorsCanAdmin, signedInUser });\n\n    return (\n      <div>\n        <div className=\"page-action-bar\">\n          <div className=\"gf-form gf-form--grow\">\n            <FilterInput placeholder=\"Search members\" value={searchMemberQuery} onChange={this.onSearchQueryChange} />\n          </div>\n          <Button className=\"pull-right\" onClick={this.onToggleAdding} disabled={isAdding || !isTeamAdmin}>\n            Add member\n          </Button>\n        </div>\n\n        <SlideDown in={isAdding}>\n          <div className=\"cta-form\">\n            <CloseButton aria-label=\"Close 'Add team member' dialogue\" onClick={this.onToggleAdding} />\n            <Label htmlFor=\"user-picker\">Add team member</Label>\n            <div className=\"gf-form-inline\">\n              <UserPicker inputId=\"user-picker\" onSelected={this.onUserSelected} className=\"min-width-30\" />\n              {this.state.newTeamMember && (\n                <Button type=\"submit\" onClick={this.onAddUserToTeam}>\n                  Add to team\n                </Button>\n              )}\n            </div>\n          </div>\n        </SlideDown>\n\n        <div className=\"admin-list-table\">\n          <table className=\"filter-table filter-table--hover form-inline\">\n            <thead>\n              <tr>\n                <th />\n                <th>Login</th>\n                <th>Email</th>\n                <th>Name</th>\n                <WithFeatureToggle featureToggle={editorsCanAdmin}>\n                  <th>Permission</th>\n                </WithFeatureToggle>\n                {syncEnabled && <th />}\n                <th style={{ width: '1%' }} />\n              </tr>\n            </thead>\n            <tbody>\n              {members &&\n                members.map((member) => (\n                  <TeamMemberRow\n                    key={member.userId}\n                    member={member}\n                    syncEnabled={syncEnabled}\n                    editorsCanAdmin={editorsCanAdmin}\n                    signedInUserIsTeamAdmin={isTeamAdmin}\n                  />\n                ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connector(TeamMembers);\n","import React from 'react';\n\nimport { Permissions } from 'app/core/components/AccessControl';\nimport { contextSrv } from 'app/core/services/context_srv';\n\nimport { AccessControlAction, Team } from '../../types';\n\ntype TeamPermissionsProps = {\n  team: Team;\n};\n\n// TeamPermissions component replaces TeamMembers component when the accesscontrol feature flag is set\nconst TeamPermissions = (props: TeamPermissionsProps) => {\n  const canSetPermissions = contextSrv.hasPermissionInMetadata(\n    AccessControlAction.ActionTeamsPermissionsWrite,\n    props.team\n  );\n\n  return (\n    <Permissions\n      title=\"\"\n      addPermissionTitle=\"Add member\"\n      buttonLabel=\"Add member\"\n      emptyLabel=\"There are no members in this team or you do not have the permissions to list the current members.\"\n      resource=\"teams\"\n      resourceId={props.team.id}\n      canSetPermissions={canSetPermissions}\n    />\n  );\n};\n\nexport default TeamPermissions;\n","import React, { FC, useState } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { Input, Field, Form, Button, FieldSet, VerticalGroup } from '@grafana/ui';\nimport { TeamRolePicker } from 'app/core/components/RolePicker/TeamRolePicker';\nimport { updateTeamRoles } from 'app/core/components/RolePicker/api';\nimport { useRoleOptions } from 'app/core/components/RolePicker/hooks';\nimport { SharedPreferences } from 'app/core/components/SharedPreferences/SharedPreferences';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AccessControlAction, Role, Team } from 'app/types';\n\nimport { updateTeam } from './state/actions';\n\nconst mapDispatchToProps = {\n  updateTeam,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\ninterface OwnProps {\n  team: Team;\n}\nexport type Props = ConnectedProps<typeof connector> & OwnProps;\n\nexport const TeamSettings: FC<Props> = ({ team, updateTeam }) => {\n  const canWriteTeamSettings = contextSrv.hasPermissionInMetadata(AccessControlAction.ActionTeamsWrite, team);\n  const currentOrgId = contextSrv.user.orgId;\n\n  const [{ roleOptions }] = useRoleOptions(currentOrgId);\n  const [pendingRoles, setPendingRoles] = useState<Role[]>([]);\n\n  const canUpdateRoles =\n    contextSrv.hasPermission(AccessControlAction.ActionUserRolesAdd) &&\n    contextSrv.hasPermission(AccessControlAction.ActionUserRolesRemove);\n\n  return (\n    <VerticalGroup spacing=\"lg\">\n      <Form\n        defaultValues={{ ...team }}\n        onSubmit={async (formTeam: Team) => {\n          if (contextSrv.licensedAccessControlEnabled() && canUpdateRoles) {\n            await updateTeamRoles(pendingRoles, team.id);\n          }\n          updateTeam(formTeam.name, formTeam.email);\n        }}\n        disabled={!canWriteTeamSettings}\n      >\n        {({ register, errors }) => (\n          <FieldSet label=\"Team details\">\n            <Field\n              label=\"Name\"\n              disabled={!canWriteTeamSettings}\n              required\n              invalid={!!errors.name}\n              error=\"Name is required\"\n            >\n              <Input {...register('name', { required: true })} id=\"name-input\" />\n            </Field>\n\n            {contextSrv.licensedAccessControlEnabled() && (\n              <Field label=\"Role\">\n                <TeamRolePicker\n                  teamId={team.id}\n                  roleOptions={roleOptions}\n                  disabled={false}\n                  apply={true}\n                  onApplyRoles={setPendingRoles}\n                  pendingRoles={pendingRoles}\n                  maxWidth=\"100%\"\n                />\n              </Field>\n            )}\n\n            <Field\n              label=\"Email\"\n              description=\"This is optional and is primarily used to set the team profile avatar (via gravatar service).\"\n              disabled={!canWriteTeamSettings}\n            >\n              <Input {...register('email')} placeholder=\"team@email.com\" type=\"email\" id=\"email-input\" />\n            </Field>\n            <Button type=\"submit\" disabled={!canWriteTeamSettings}>\n              Update\n            </Button>\n          </FieldSet>\n        )}\n      </Form>\n      <SharedPreferences resourceUri={`teams/${team.id}`} disabled={!canWriteTeamSettings} />\n    </VerticalGroup>\n  );\n};\n\nexport default connector(TeamSettings);\n","import { includes } from 'lodash';\nimport React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { NavModelItem } from '@grafana/data';\nimport { featureEnabled } from '@grafana/runtime';\nimport { Themeable2, withTheme2 } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { UpgradeBox } from 'app/core/components/Upgrade/UpgradeBox';\nimport config from 'app/core/config';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AccessControlAction, StoreState } from 'app/types';\n\nimport TeamGroupSync, { TeamSyncUpgradeContent } from './TeamGroupSync';\nimport TeamMembers from './TeamMembers';\nimport TeamPermissions from './TeamPermissions';\nimport TeamSettings from './TeamSettings';\nimport { loadTeam, loadTeamMembers } from './state/actions';\nimport { getTeamLoadingNav } from './state/navModel';\nimport { getTeam, getTeamMembers, isSignedInUserTeamAdmin } from './state/selectors';\n\ninterface TeamPageRouteParams {\n  id: string;\n  page: string | null;\n}\n\nexport interface OwnProps extends GrafanaRouteComponentProps<TeamPageRouteParams>, Themeable2 {}\n\ninterface State {\n  isSyncEnabled: boolean;\n  isLoading: boolean;\n}\n\nenum PageTypes {\n  Members = 'members',\n  Settings = 'settings',\n  GroupSync = 'groupsync',\n}\n\nfunction mapStateToProps(state: StoreState, props: OwnProps) {\n  const teamId = parseInt(props.match.params.id, 10);\n  const team = getTeam(state.team, teamId);\n  let defaultPage = 'members';\n  if (contextSrv.accessControlEnabled()) {\n    // With RBAC the settings page will always be available\n    if (!team || !contextSrv.hasPermissionInMetadata(AccessControlAction.ActionTeamsPermissionsRead, team)) {\n      defaultPage = 'settings';\n    }\n  }\n  const pageName = props.match.params.page ?? defaultPage;\n  const teamLoadingNav = getTeamLoadingNav(pageName as string);\n  const pageNav = getNavModel(state.navIndex, `team-${pageName}-${teamId}`, teamLoadingNav).main;\n  const members = getTeamMembers(state.team);\n\n  return {\n    pageNav,\n    teamId: teamId,\n    pageName: pageName,\n    team,\n    members,\n    editorsCanAdmin: config.editorsCanAdmin, // this makes the feature toggle mockable/controllable from tests,\n    signedInUser: contextSrv.user, // this makes the feature toggle mockable/controllable from tests,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadTeam,\n  loadTeamMembers,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport class TeamPages extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      isLoading: false,\n      isSyncEnabled: featureEnabled('teamsync'),\n    };\n  }\n\n  async componentDidMount() {\n    await this.fetchTeam();\n  }\n\n  async fetchTeam() {\n    const { loadTeam, teamId } = this.props;\n    this.setState({ isLoading: true });\n    const team = await loadTeam(teamId);\n    // With accesscontrol, the TeamPermissions will fetch team members\n    if (!contextSrv.accessControlEnabled()) {\n      await this.props.loadTeamMembers();\n    }\n    this.setState({ isLoading: false });\n    return team;\n  }\n\n  getCurrentPage() {\n    const pages = ['members', 'settings', 'groupsync'];\n    const currentPage = this.props.pageName;\n    return includes(pages, currentPage) ? currentPage : pages[0];\n  }\n\n  textsAreEqual = (text1: string, text2: string) => {\n    if (!text1 && !text2) {\n      return true;\n    }\n\n    if (!text1 || !text2) {\n      return false;\n    }\n\n    return text1.toLocaleLowerCase() === text2.toLocaleLowerCase();\n  };\n\n  hideTabsFromNonTeamAdmin = (pageNav: NavModelItem, isSignedInUserTeamAdmin: boolean) => {\n    if (contextSrv.accessControlEnabled()) {\n      return pageNav;\n    }\n\n    if (!isSignedInUserTeamAdmin && pageNav && pageNav.children) {\n      pageNav.children\n        .filter((navItem) => !this.textsAreEqual(navItem.text, PageTypes.Members))\n        .map((navItem) => {\n          navItem.hideFromTabs = true;\n        });\n    }\n\n    return pageNav;\n  };\n\n  renderPage(isSignedInUserTeamAdmin: boolean): React.ReactNode {\n    const { isSyncEnabled } = this.state;\n    const { members, team } = this.props;\n    const currentPage = this.getCurrentPage();\n\n    const canReadTeam = contextSrv.hasAccessInMetadata(\n      AccessControlAction.ActionTeamsRead,\n      team!,\n      isSignedInUserTeamAdmin\n    );\n    const canReadTeamPermissions = contextSrv.hasAccessInMetadata(\n      AccessControlAction.ActionTeamsPermissionsRead,\n      team!,\n      isSignedInUserTeamAdmin\n    );\n    const canWriteTeamPermissions = contextSrv.hasAccessInMetadata(\n      AccessControlAction.ActionTeamsPermissionsWrite,\n      team!,\n      isSignedInUserTeamAdmin\n    );\n\n    switch (currentPage) {\n      case PageTypes.Members:\n        if (contextSrv.accessControlEnabled()) {\n          return <TeamPermissions team={team!} />;\n        } else {\n          return <TeamMembers syncEnabled={isSyncEnabled} members={members} />;\n        }\n      case PageTypes.Settings:\n        return canReadTeam && <TeamSettings team={team!} />;\n      case PageTypes.GroupSync:\n        if (isSyncEnabled) {\n          if (canReadTeamPermissions) {\n            return <TeamGroupSync isReadOnly={!canWriteTeamPermissions} />;\n          }\n        } else if (config.featureToggles.featureHighlights) {\n          return (\n            <>\n              <UpgradeBox featureName={'team sync'} featureId={'team-sync'} />\n              <TeamSyncUpgradeContent />\n            </>\n          );\n        }\n    }\n\n    return null;\n  }\n\n  render() {\n    const { team, pageNav, members, editorsCanAdmin, signedInUser } = this.props;\n    const isTeamAdmin = isSignedInUserTeamAdmin({ members, editorsCanAdmin, signedInUser });\n\n    return (\n      <Page navId=\"teams\" pageNav={this.hideTabsFromNonTeamAdmin(pageNav, isTeamAdmin)}>\n        <Page.Contents isLoading={this.state.isLoading}>\n          {team && Object.keys(team).length !== 0 && this.renderPage(isTeamAdmin)}\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nexport default connector(withTheme2(TeamPages));\n","import { getBackendSrv } from '@grafana/runtime';\nimport { updateNavIndex } from 'app/core/actions';\nimport { contextSrv } from 'app/core/core';\nimport { accessControlQueryParam } from 'app/core/utils/accessControl';\nimport { AccessControlAction, TeamMember, ThunkResult } from 'app/types';\n\nimport { buildNavModel } from './navModel';\nimport { teamGroupsLoaded, teamLoaded, teamMembersLoaded, teamsLoaded } from './reducers';\n\nexport function loadTeams(): ThunkResult<void> {\n  return async (dispatch) => {\n    // Early return if the user cannot list teams\n    if (!contextSrv.hasPermission(AccessControlAction.ActionTeamsRead)) {\n      dispatch(teamsLoaded([]));\n      return;\n    }\n\n    const response = await getBackendSrv().get(\n      '/api/teams/search',\n      accessControlQueryParam({ perpage: 1000, page: 1 })\n    );\n    dispatch(teamsLoaded(response.teams));\n  };\n}\n\nexport function loadTeam(id: number): ThunkResult<void> {\n  return async (dispatch) => {\n    const response = await getBackendSrv().get(`/api/teams/${id}`, accessControlQueryParam());\n    dispatch(teamLoaded(response));\n    dispatch(updateNavIndex(buildNavModel(response)));\n  };\n}\n\nexport function loadTeamMembers(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    const response = await getBackendSrv().get(`/api/teams/${team.id}/members`);\n    dispatch(teamMembersLoaded(response));\n  };\n}\n\nexport function addTeamMember(id: number): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().post(`/api/teams/${team.id}/members`, { userId: id });\n    dispatch(loadTeamMembers());\n  };\n}\n\nexport function removeTeamMember(id: number): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().delete(`/api/teams/${team.id}/members/${id}`);\n    dispatch(loadTeamMembers());\n  };\n}\n\nexport function updateTeam(name: string, email: string): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().put(`/api/teams/${team.id}`, { name, email });\n    dispatch(loadTeam(team.id));\n  };\n}\n\nexport function loadTeamGroups(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    const response = await getBackendSrv().get(`/api/teams/${team.id}/groups`);\n    dispatch(teamGroupsLoaded(response));\n  };\n}\n\nexport function addTeamGroup(groupId: string): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().post(`/api/teams/${team.id}/groups`, { groupId: groupId });\n    dispatch(loadTeamGroups());\n  };\n}\n\nexport function removeTeamGroup(groupId: string): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().delete(`/api/teams/${team.id}/groups/${encodeURIComponent(groupId)}`);\n    dispatch(loadTeamGroups());\n  };\n}\n\nexport function deleteTeam(id: number): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().delete(`/api/teams/${id}`);\n    // Update users permissions in case they lost teams.read with the deletion\n    await contextSrv.fetchUserPermissions();\n    dispatch(loadTeams());\n  };\n}\n\nexport function updateTeamMember(member: TeamMember): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().put(`/api/teams/${member.teamId}/members/${member.userId}`, {\n      permission: member.permission,\n    });\n    dispatch(loadTeamMembers());\n  };\n}\n","import { NavModelItem, NavModel } from '@grafana/data';\nimport { featureEnabled } from '@grafana/runtime';\nimport { ProBadge } from 'app/core/components/Upgrade/ProBadge';\nimport config from 'app/core/config';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { highlightTrial } from 'app/features/admin/utils';\nimport { AccessControlAction, Team, TeamPermissionLevel } from 'app/types';\n\nconst loadingTeam = {\n  avatarUrl: 'public/img/user_profile.png',\n  id: 1,\n  name: 'Loading',\n  email: 'loading',\n  memberCount: 0,\n  permission: TeamPermissionLevel.Member,\n};\n\nexport function buildNavModel(team: Team): NavModelItem {\n  const navModel: NavModelItem = {\n    img: team.avatarUrl,\n    id: 'team-' + team.id,\n    subTitle: 'Manage members and settings',\n    url: '',\n    text: team.name,\n    breadcrumbs: [{ title: 'Teams', url: 'org/teams' }],\n    children: [\n      // With RBAC this tab will always be available (but not always editable)\n      // With Legacy it will be hidden by hideTabsFromNonTeamAdmin should the user not be allowed to see it\n      {\n        active: false,\n        icon: 'sliders-v-alt',\n        id: `team-settings-${team.id}`,\n        text: 'Settings',\n        url: `org/teams/edit/${team.id}/settings`,\n      },\n    ],\n  };\n\n  // While team is loading we leave the members tab\n  // With RBAC the Members tab is available when user has ActionTeamsPermissionsRead for this team\n  // With Legacy it will always be present\n  if (\n    team === loadingTeam ||\n    contextSrv.hasPermissionInMetadata(AccessControlAction.ActionTeamsPermissionsRead, team)\n  ) {\n    navModel.children!.unshift({\n      active: false,\n      icon: 'users-alt',\n      id: `team-members-${team.id}`,\n      text: 'Members',\n      url: `org/teams/edit/${team.id}/members`,\n    });\n  }\n\n  const teamGroupSync: NavModelItem = {\n    active: false,\n    icon: 'sync',\n    id: `team-groupsync-${team.id}`,\n    text: 'External group sync',\n    url: `org/teams/edit/${team.id}/groupsync`,\n  };\n\n  const isLoadingTeam = team === loadingTeam;\n\n  if (highlightTrial()) {\n    teamGroupSync.tabSuffix = () =>\n      ProBadge({ experimentId: isLoadingTeam ? '' : 'feature-highlights-team-sync-badge', eventVariant: 'trial' });\n  }\n\n  // With both Legacy and RBAC the tab is protected being featureEnabled\n  // While team is loading we leave the teamsync tab\n  // With RBAC the External Group Sync tab is available when user has ActionTeamsPermissionsRead for this team\n  if (featureEnabled('teamsync')) {\n    if (isLoadingTeam || contextSrv.hasPermissionInMetadata(AccessControlAction.ActionTeamsPermissionsRead, team)) {\n      navModel.children!.push(teamGroupSync);\n    }\n  } else if (config.featureToggles.featureHighlights) {\n    navModel.children!.push({\n      ...teamGroupSync,\n      tabSuffix: () => ProBadge({ experimentId: isLoadingTeam ? '' : 'feature-highlights-team-sync-badge' }),\n    });\n  }\n\n  return navModel;\n}\n\nexport function getTeamLoadingNav(pageName: string): NavModel {\n  const main = buildNavModel(loadingTeam);\n\n  let node: NavModelItem;\n\n  // find active page\n  for (const child of main.children!) {\n    if (child.id!.indexOf(pageName) > 0) {\n      child.active = true;\n      node = child;\n      break;\n    }\n  }\n\n  return {\n    main: main,\n    node: node!,\n  };\n}\n","import { User } from 'app/core/services/context_srv';\nimport { Team, TeamsState, TeamState, TeamMember, OrgRole, TeamPermissionLevel } from 'app/types';\n\nexport const getSearchQuery = (state: TeamsState) => state.searchQuery;\nexport const getSearchMemberQuery = (state: TeamState) => state.searchMemberQuery;\nexport const getTeamGroups = (state: TeamState) => state.groups;\nexport const getTeamsCount = (state: TeamsState) => state.teams.length;\nexport const getTeamsSearchPage = (state: TeamsState) => state.searchPage;\n\nexport const getTeam = (state: TeamState, currentTeamId: any): Team | null => {\n  if (state.team.id === parseInt(currentTeamId, 10)) {\n    return state.team;\n  }\n\n  return null;\n};\n\nexport const getTeams = (state: TeamsState) => {\n  const regex = RegExp(state.searchQuery, 'i');\n\n  return state.teams.filter((team) => {\n    return regex.test(team.name);\n  });\n};\n\nexport const getTeamMembers = (state: TeamState) => {\n  const regex = RegExp(state.searchMemberQuery, 'i');\n\n  return state.members.filter((member) => {\n    return regex.test(member.login) || regex.test(member.email) || regex.test(member.name);\n  });\n};\n\nexport interface Config {\n  members: TeamMember[];\n  editorsCanAdmin: boolean;\n  signedInUser: User;\n}\n\nexport const isSignedInUserTeamAdmin = (config: Config): boolean => {\n  const { members, signedInUser, editorsCanAdmin } = config;\n  const userInMembers = members.find((m) => m.userId === signedInUser.id);\n  const permission = userInMembers ? userInMembers.permission : TeamPermissionLevel.Member;\n\n  return isPermissionTeamAdmin({ permission, signedInUser, editorsCanAdmin });\n};\n\nexport interface PermissionConfig {\n  permission: TeamPermissionLevel;\n  editorsCanAdmin: boolean;\n  signedInUser: User;\n}\n\nexport const isPermissionTeamAdmin = (config: PermissionConfig): boolean => {\n  const { permission, signedInUser, editorsCanAdmin } = config;\n  const isAdmin = signedInUser.isGrafanaAdmin || signedInUser.orgRole === OrgRole.Admin;\n  const userIsTeamAdmin = permission === TeamPermissionLevel.Admin;\n  const isSignedInUserTeamAdmin = isAdmin || userIsTeamAdmin;\n\n  return isSignedInUserTeamAdmin || !editorsCanAdmin;\n};\n"],"names":["TeamRolePicker","teamId","roleOptions","disabled","onApplyRoles","pendingRoles","apply","maxWidth","loading","value","appliedRoles","getTeamRoles","useAsyncFn","async","Boolean","length","contextSrv","AccessControlAction","fetchTeamRoles","e","console","error","useEffect","canUpdateRoles","onRolesChange","roles","updateTeamRoles","isLoading","basicRoleDisabled","useRoleOptions","organizationId","orgId","setOrgId","useState","useAsync","fetchRoleOptions","Promise","resolve","themes","label","id","languages","ENGLISH_US","SPANISH_SPAIN","FRENCH_FRANCE","i18nFlag","config","SharedPreferences","PureComponent","constructor","props","super","homeDashboardUID","theme","timezone","weekStart","locale","queryHistory","this","state","service","update","window","location","reload","setState","dashboardUID","PreferencesService","resourceUri","homeTab","prefs","load","render","styles","getStyles","onSubmit","onSubmitForm","options","find","item","onChange","onThemeChanged","htmlFor","className","labelText","v","onHomeDashboardChanged","uid","defaultOptions","isClearable","placeholder","inputId","selectors","includeInternal","onTimeZoneChanged","onWeekStartChanged","featureState","FeatureState","lang","onLocaleChanged","type","variant","stylesFactory","css","w3cStandardEmailValidator","highlightTrial","expiry","trialExpiry","isTrial","UpgradeBox","featureName","text","featureId","eventVariant","size","htmlProps","useStyles2","getUpgradeBoxStyles","reportExperimentView","cx","box","Icon","name","icon","inner","button","href","target","rel","borderRadius","shape","fontBase","colors","success","transparent","spacing","typography","fontSize","breakpoints","values","xxl","main","fontWeightLight","primary","UpgradeContent","listItems","image","featureUrl","description","caption","action","getUpgradeContentStyles","container","content","title","list","map","index","link","onClick","Button","fill","media","src","getImgUrl","alt","maxContrast","urlOrId","startsWith","mapStateToProps","groups","getTeamGroups","team","mapDispatchToProps","loadTeamGroups","addTeamGroup","removeTeamGroup","headerTooltip","connect","TeamGroupSync","isAdding","event","newGroupId","preventDefault","group","groupId","componentDidMount","fetchTeamGroups","isNewGroupValid","renderGroup","isReadOnly","style","width","onRemoveGroup","Tooltip","placement","onToggleAdding","SlideDown","in","CloseButton","onAddGroup","InlineFieldRow","InlineField","tooltip","Input","I","onNewGroupIdChanged","marginLeft","TeamSyncUpgradeContent","EmptyListCTA","buttonIcon","buttonTitle","proTip","proTipLinkTitle","proTipLink","proTipTarget","buttonDisabled","useTheme2","isLight","WithFeatureToggle","featureToggle","children","removeTeamMember","updateTeamMember","connector","TeamMemberRow","member","permission","updatedTeamMember","renderLabels","bind","renderPermissions","onRemoveMember","userId","editorsCanAdmin","signedInUserIsTeamAdmin","teamsPermissionLevels","dp","Select","isSearchable","onPermissionChange","labels","TagBadge","removeIcon","count","syncEnabled","avatarUrl","login","email","DeleteButton","onConfirm","addTeamMember","setSearchMemberQuery","searchMemberQuery","getSearchMemberQuery","signedInUser","TeamMembers","user","newTeamMember","members","isTeamAdmin","isSignedInUserTeamAdmin","FilterInput","onSearchQueryChange","Label","UserPicker","onSelected","onUserSelected","onAddUserToTeam","canSetPermissions","P","addPermissionTitle","buttonLabel","emptyLabel","resource","resourceId","updateTeam","canWriteTeamSettings","currentOrgId","setPendingRoles","Form","defaultValues","formTeam","register","errors","FieldSet","Field","required","invalid","PageTypes","loadTeam","loadTeamMembers","parseInt","match","params","getTeam","defaultPage","pageName","page","teamLoadingNav","getTeamLoadingNav","pageNav","getNavModel","navIndex","getTeamMembers","TeamPages","text1","text2","toLocaleLowerCase","filter","navItem","textsAreEqual","Members","hideFromTabs","isSyncEnabled","featureEnabled","fetchTeam","getCurrentPage","pages","currentPage","includes","renderPage","canReadTeam","canReadTeamPermissions","canWriteTeamPermissions","Settings","GroupSync","Page","navId","hideTabsFromNonTeamAdmin","Object","keys","withTheme2","loadTeams","dispatch","teamsLoaded","response","getBackendSrv","get","accessControlQueryParam","perpage","teams","teamLoaded","updateNavIndex","buildNavModel","getStore","teamMembersLoaded","post","delete","put","teamGroupsLoaded","encodeURIComponent","deleteTeam","loadingTeam","memberCount","TeamPermissionLevel","navModel","img","subTitle","url","breadcrumbs","active","unshift","teamGroupSync","isLoadingTeam","tabSuffix","ProBadge","experimentId","push","node","child","indexOf","getSearchQuery","searchQuery","getTeamsCount","getTeamsSearchPage","searchPage","currentTeamId","getTeams","regex","RegExp","test","userInMembers","m","isPermissionTeamAdmin","isAdmin","isGrafanaAdmin","orgRole","OrgRole","userIsTeamAdmin"],"sourceRoot":""}