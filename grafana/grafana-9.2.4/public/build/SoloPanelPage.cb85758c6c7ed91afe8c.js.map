{"version":3,"file":"SoloPanelPage.cb85758c6c7ed91afe8c.js","mappings":"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","sources":["webpack://grafana/./public/app/features/dashboard/containers/SoloPanelPage.tsx","webpack://grafana/./public/app/features/dashboard/dashgrid/SeriesVisibilityConfigFactory.ts","webpack://grafana/./public/app/features/inspector/types.ts"],"sourcesContent":["import React, { Component } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaContext } from 'app/core/context/GrafanaContext';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { DashboardModel, PanelModel } from 'app/features/dashboard/state';\nimport { StoreState } from 'app/types';\n\nimport { DashboardPanel } from '../dashgrid/DashboardPanel';\nimport { initDashboard } from '../state/initDashboard';\n\nexport interface DashboardPageRouteParams {\n  uid?: string;\n  type?: string;\n  slug?: string;\n}\n\nconst mapStateToProps = (state: StoreState) => ({\n  dashboard: state.dashboard.getModel(),\n});\n\nconst mapDispatchToProps = {\n  initDashboard,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = GrafanaRouteComponentProps<DashboardPageRouteParams, { panelId: string }> &\n  ConnectedProps<typeof connector>;\n\nexport interface State {\n  panel: PanelModel | null;\n  notFound: boolean;\n}\n\nexport class SoloPanelPage extends Component<Props, State> {\n  static contextType = GrafanaContext;\n\n  state: State = {\n    panel: null,\n    notFound: false,\n  };\n\n  componentDidMount() {\n    const { match, route } = this.props;\n\n    this.props.initDashboard({\n      urlSlug: match.params.slug,\n      urlUid: match.params.uid,\n      urlType: match.params.type,\n      routeName: route.routeName,\n      fixUrl: false,\n      keybindingSrv: this.context.keybindings,\n    });\n  }\n\n  getPanelId(): number {\n    return parseInt(this.props.queryParams.panelId ?? '0', 10);\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { dashboard } = this.props;\n\n    if (!dashboard) {\n      return;\n    }\n\n    // we just got a new dashboard\n    if (!prevProps.dashboard || prevProps.dashboard.uid !== dashboard.uid) {\n      const panel = dashboard.getPanelByUrlId(this.props.queryParams.panelId);\n\n      if (!panel) {\n        this.setState({ notFound: true });\n        return;\n      }\n\n      this.setState({ panel });\n    }\n  }\n\n  render() {\n    return (\n      <SoloPanel\n        dashboard={this.props.dashboard}\n        notFound={this.state.notFound}\n        panel={this.state.panel}\n        panelId={this.getPanelId()}\n      />\n    );\n  }\n}\n\nexport interface SoloPanelProps extends State {\n  dashboard: DashboardModel | null;\n  panelId: number;\n}\n\nexport const SoloPanel = ({ dashboard, notFound, panel, panelId }: SoloPanelProps) => {\n  if (notFound) {\n    return <div className=\"alert alert-error\">Panel with id {panelId} not found</div>;\n  }\n\n  if (!panel || !dashboard) {\n    return <div>Loading & initializing dashboard</div>;\n  }\n\n  return (\n    <div className=\"panel-solo\">\n      <AutoSizer>\n        {({ width, height }) => {\n          if (width === 0) {\n            return null;\n          }\n          return (\n            <DashboardPanel\n              stateKey={panel.key}\n              width={width}\n              height={height}\n              dashboard={dashboard}\n              panel={panel}\n              isEditing={false}\n              isViewing={false}\n              lazy={false}\n            />\n          );\n        }}\n      </AutoSizer>\n    </div>\n  );\n};\n\nexport default connector(SoloPanelPage);\n","import {\n  ByNamesMatcherMode,\n  ConfigOverrideRule,\n  DataFrame,\n  DynamicConfigValue,\n  FieldConfigSource,\n  FieldMatcherID,\n  fieldMatchers,\n  FieldType,\n  getFieldDisplayName,\n  isSystemOverrideWithRef,\n  SystemConfigOverrideRule,\n} from '@grafana/data';\nimport { SeriesVisibilityChangeMode } from '@grafana/ui';\n\nconst displayOverrideRef = 'hideSeriesFrom';\nconst isHideSeriesOverride = isSystemOverrideWithRef(displayOverrideRef);\n\nexport function seriesVisibilityConfigFactory(\n  label: string,\n  mode: SeriesVisibilityChangeMode,\n  fieldConfig: FieldConfigSource,\n  data: DataFrame[]\n) {\n  const { overrides } = fieldConfig;\n\n  const displayName = label;\n  const currentIndex = overrides.findIndex(isHideSeriesOverride);\n\n  if (currentIndex < 0) {\n    if (mode === SeriesVisibilityChangeMode.ToggleSelection) {\n      const override = createOverride([displayName, ...getNamesOfHiddenFields(overrides, data)]);\n\n      return {\n        ...fieldConfig,\n        overrides: [...fieldConfig.overrides, override],\n      };\n    }\n\n    const displayNames = getDisplayNames(data, displayName);\n    const override = createOverride(displayNames);\n\n    return {\n      ...fieldConfig,\n      overrides: [...fieldConfig.overrides, override],\n    };\n  }\n\n  const overridesCopy = Array.from(overrides);\n  const [current] = overridesCopy.splice(currentIndex, 1) as SystemConfigOverrideRule[];\n\n  if (mode === SeriesVisibilityChangeMode.ToggleSelection) {\n    let existing = getExistingDisplayNames(current);\n    const nameOfHiddenFields = getNamesOfHiddenFields(overridesCopy, data);\n\n    if (nameOfHiddenFields.length > 0) {\n      existing = existing.filter((el) => nameOfHiddenFields.indexOf(el) < 0);\n    }\n\n    if (existing[0] === displayName && existing.length === 1) {\n      return {\n        ...fieldConfig,\n        overrides: overridesCopy,\n      };\n    }\n\n    const override = createOverride([displayName, ...nameOfHiddenFields]);\n\n    return {\n      ...fieldConfig,\n      overrides: [...overridesCopy, override],\n    };\n  }\n\n  const override = createExtendedOverride(current, displayName);\n\n  if (allFieldsAreExcluded(override, data)) {\n    return {\n      ...fieldConfig,\n      overrides: overridesCopy,\n    };\n  }\n\n  return {\n    ...fieldConfig,\n    overrides: [...overridesCopy, override],\n  };\n}\n\nfunction createOverride(\n  names: string[],\n  mode = ByNamesMatcherMode.exclude,\n  property?: DynamicConfigValue\n): SystemConfigOverrideRule {\n  property = property ?? {\n    id: 'custom.hideFrom',\n    value: {\n      viz: true,\n      legend: false,\n      tooltip: false,\n    },\n  };\n\n  return {\n    __systemRef: displayOverrideRef,\n    matcher: {\n      id: FieldMatcherID.byNames,\n      options: {\n        mode: mode,\n        names: names,\n        prefix: mode === ByNamesMatcherMode.exclude ? 'All except:' : undefined,\n        readOnly: true,\n      },\n    },\n    properties: [\n      {\n        ...property,\n        value: {\n          viz: true,\n          legend: false,\n          tooltip: false,\n        },\n      },\n    ],\n  };\n}\n\nconst createExtendedOverride = (\n  current: SystemConfigOverrideRule,\n  displayName: string,\n  mode = ByNamesMatcherMode.exclude\n): SystemConfigOverrideRule => {\n  const property = current.properties.find((p) => p.id === 'custom.hideFrom');\n  const existing = getExistingDisplayNames(current);\n  const index = existing.findIndex((name) => name === displayName);\n\n  if (index < 0) {\n    existing.push(displayName);\n  } else {\n    existing.splice(index, 1);\n  }\n\n  return createOverride(existing, mode, property);\n};\n\nconst getExistingDisplayNames = (rule: SystemConfigOverrideRule): string[] => {\n  const names = rule.matcher.options?.names;\n  if (!Array.isArray(names)) {\n    return [];\n  }\n  return [...names];\n};\n\nconst allFieldsAreExcluded = (override: SystemConfigOverrideRule, data: DataFrame[]): boolean => {\n  return getExistingDisplayNames(override).length === getDisplayNames(data).length;\n};\n\nconst getDisplayNames = (data: DataFrame[], excludeName?: string): string[] => {\n  const unique = new Set<string>();\n\n  for (const frame of data) {\n    for (const field of frame.fields) {\n      if (field.type !== FieldType.number) {\n        continue;\n      }\n\n      const name = getFieldDisplayName(field, frame, data);\n\n      if (name === excludeName) {\n        continue;\n      }\n\n      unique.add(name);\n    }\n  }\n\n  return Array.from(unique);\n};\n\nconst getNamesOfHiddenFields = (overrides: ConfigOverrideRule[], data: DataFrame[]): string[] => {\n  let names: string[] = [];\n\n  for (const override of overrides) {\n    const property = override.properties.find((p) => p.id === 'custom.hideFrom');\n\n    if (property !== undefined && property.value?.legend === true) {\n      const info = fieldMatchers.get(override.matcher.id);\n      const matcher = info.get(override.matcher.options);\n\n      for (const frame of data) {\n        for (const field of frame.fields) {\n          if (field.type !== FieldType.number) {\n            continue;\n          }\n\n          const name = getFieldDisplayName(field, frame, data);\n\n          if (matcher(field, frame, data)) {\n            names.push(name);\n          }\n        }\n      }\n    }\n  }\n\n  return names;\n};\n","export enum InspectTab {\n  Data = 'data',\n  Meta = 'meta', // When result metadata exists\n  Error = 'error',\n  Stats = 'stats',\n  JSON = 'json',\n  Query = 'query',\n  Actions = 'actions', // ALPHA!\n  Help = 'help', // get info required for support+debugging\n}\n"],"names":["mapDispatchToProps","initDashboard","connector","connect","state","dashboard","getModel","SoloPanelPage","Component","panel","notFound","componentDidMount","match","route","this","props","urlSlug","params","slug","urlUid","uid","urlType","type","routeName","fixUrl","keybindingSrv","context","keybindings","getPanelId","parseInt","queryParams","panelId","componentDidUpdate","prevProps","getPanelByUrlId","setState","render","SoloPanel","GrafanaContext","className","width","height","stateKey","key","isEditing","isViewing","lazy","displayOverrideRef","isHideSeriesOverride","isSystemOverrideWithRef","seriesVisibilityConfigFactory","label","mode","fieldConfig","data","overrides","displayName","currentIndex","findIndex","SeriesVisibilityChangeMode","override","createOverride","getNamesOfHiddenFields","getDisplayNames","overridesCopy","Array","from","current","splice","existing","getExistingDisplayNames","nameOfHiddenFields","length","filter","el","indexOf","createExtendedOverride","allFieldsAreExcluded","names","ByNamesMatcherMode","property","id","value","viz","legend","tooltip","__systemRef","matcher","FieldMatcherID","options","prefix","undefined","readOnly","properties","find","p","index","name","push","rule","isArray","excludeName","unique","Set","frame","field","fields","FieldType","getFieldDisplayName","add","fieldMatchers","get","InspectTab"],"sourceRoot":""}