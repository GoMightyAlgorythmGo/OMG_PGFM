{"version":3,"file":"prometheusPlugin.2ec77bbb19477bf09f8e.js","mappings":"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ACZC,cAAe,kCAEjB,CACErmC,MAAO,MACPomC,WAAY,MACZC,cAAe,yCAEjB,CACErmC,MAAO,QACPomC,WAAY,QACZC,cAAe,4CAEjB,CACErmC,MAAO,SACPomC,WAAY,SACZC,cAAe,2DAEjB,CACErmC,MAAO,SACPomC,WAAY,SACZC,cAAe,0DAEjB,CACErmC,MAAO,QACPomC,WAAY,QACZC,cAAe,0CAEjB,CACErmC,MAAO,eACPomC,WAAY,eACZC,cAAe,gDAEjB,CACErmC,MAAO,UACPomC,WAAY,UACZC,cAAe,uCAEjB,CACErmC,MAAO,OACPomC,WAAY,OACZC,cAAe,sCAEjB,CACErmC,MAAO,WACPomC,WAAY,WACZC,cAAe,oDArIjB,CACErmC,MAAO,OACPomC,WAAY,OACZE,OAAQ,yBACRD,cAAe,iDAEjB,CACErmC,MAAO,QACPomC,WAAY,QACZE,OAAQ,0BACRD,cAAe,iEAEjB,CACErmC,MAAO,OACPomC,WAAY,OACZE,OAAQ,yBACRD,cAAe,+CAEjB,CACErmC,MAAO,QACPomC,WAAY,QACZE,OAAQ,0BACRD,cAAe,+DAEjB,CACErmC,MAAO,OACPomC,WAAY,OACZE,OAAQ,yBACRD,cAAe,kDAEjB,CACErmC,MAAO,QACPomC,WAAY,QACZE,OAAQ,0BACRD,cAAe,kEAEjB,CACErmC,MAAO,MACPomC,WAAY,MACZE,OAAQ,wBACRD,cAAe,8CAEjB,CACErmC,MAAO,OACPomC,WAAY,OACZE,OAAQ,yBACRD,cAAe,yDAEjB,CACErmC,MAAO,MACPomC,WAAY,MACZE,OAAQ,wBACRD,cAAe,4CAEjB,CACErmC,MAAO,OACPomC,WAAY,OACZE,OAAQ,yBACRD,cAAe,uDAEjB,CACErmC,MAAO,MACPomC,WAAY,MACZE,OAAQ,wBACRD,cAAe,+CAEjB,CACErmC,MAAO,OACPomC,WAAY,OACZE,OAAQ,yBACRD,cAAe,0DAsEjB,CACED,WAAY,MACZpmC,MAAO,MACPsmC,OAAQ,wBACRD,cAAe,sFAEjB,CACED,WAAY,SACZpmC,MAAO,SACPsmC,OAAQ,2BACRD,cACE,mQAEJ,CA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","sources":["webpack://grafana/./public/app/features/datasources/state/contexts.ts","webpack://grafana/./public/app/features/datasources/state/hooks.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/components/PromCheatSheet.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/types.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/state.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/MetricSelect.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/NestedQuery.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/NestedQueryList.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryBuilderExplained.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryBuilder.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/QueryPreview.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryBuilderContainer.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/components/PromExemplarField.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/components/PromExploreExtraField.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/components/PromLink.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/components/PrometheusMetricsBrowser.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/components/monaco-query-field/MonacoQueryFieldLazy.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/components/monaco-query-field/MonacoQueryFieldWrapper.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/components/PromQueryField.tsx","webpack://grafana/./public/app/core/utils/CancelablePromise.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/components/PromQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryLegendEditor.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryBuilderOptions.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryCodeEditor.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryEditorSelector.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/components/PromExploreQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/components/PromQueryEditorForAlerting.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/components/PromQueryEditorByApp.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/configuration/AzureCredentials.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/configuration/AzureCredentialsConfig.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/configuration/AzureCredentialsForm.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/configuration/AzureAuthSettings.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/configuration/ExemplarSetting.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/configuration/ExemplarsSettings.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/configuration/PromFlavorVersions.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/configuration/PromSettings.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/components/AnnotationQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/metric_find_query.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/result_transformer.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/variables.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/datasource.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/query_hints.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/module.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/configuration/ConfigEditor.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/promql.ts","webpack://grafana/../../opt/drone/yarncache/semver-npm-7.3.7-3bfe704194-2fa3e87756.zip/node_modules/semver/preload.js"],"sourcesContent":["import { createContext } from 'react';\n\nimport { DATASOURCES_ROUTES } from '../constants';\nimport { DataSourcesRoutes } from '../types';\n\n// The purpose of this context is to be able to override the data-sources routes (used for links for example) used under\n// the app/features/datasources modules, so we can reuse them more easily in different parts of the application (e.g. under Data Connections)\nexport const DataSourcesRoutesContext = createContext<DataSourcesRoutes>(DATASOURCES_ROUTES);\n","import { useContext, useEffect } from 'react';\n\nimport { DataSourcePluginMeta, DataSourceSettings, NavModelItem, urlUtil } from '@grafana/data';\nimport { cleanUpAction } from 'app/core/actions/cleanUp';\nimport appEvents from 'app/core/app_events';\nimport { contextSrv } from 'app/core/core';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { AccessControlAction, useDispatch, useSelector } from 'app/types';\nimport { ShowConfirmModalEvent } from 'app/types/events';\n\nimport { DataSourceRights } from '../types';\n\nimport {\n  initDataSourceSettings,\n  testDataSource,\n  loadDataSource,\n  loadDataSources,\n  loadDataSourcePlugins,\n  addDataSource,\n  updateDataSource,\n  deleteLoadedDataSource,\n} from './actions';\nimport { DataSourcesRoutesContext } from './contexts';\nimport { getDataSourceLoadingNav, buildNavModel, getDataSourceNav } from './navModel';\nimport { getDataSource, getDataSourceMeta } from './selectors';\n\nexport const useInitDataSourceSettings = (uid: string) => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(initDataSourceSettings(uid));\n\n    return function cleanUp() {\n      dispatch(\n        cleanUpAction({\n          cleanupAction: (state) => state.dataSourceSettings,\n        })\n      );\n    };\n  }, [uid, dispatch]);\n};\n\nexport const useTestDataSource = (uid: string) => {\n  const dispatch = useDispatch();\n\n  return () => dispatch(testDataSource(uid));\n};\n\nexport const useLoadDataSources = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(loadDataSources());\n  }, [dispatch]);\n};\n\nexport const useLoadDataSource = (uid: string) => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(loadDataSource(uid));\n  }, [dispatch, uid]);\n};\n\nexport const useLoadDataSourcePlugins = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(loadDataSourcePlugins());\n  }, [dispatch]);\n};\n\nexport const useAddDatasource = () => {\n  const dispatch = useDispatch();\n  const dataSourcesRoutes = useDataSourcesRoutes();\n\n  return (plugin: DataSourcePluginMeta) => {\n    dispatch(addDataSource(plugin, dataSourcesRoutes.Edit));\n  };\n};\n\nexport const useUpdateDatasource = () => {\n  const dispatch = useDispatch();\n\n  return async (dataSource: DataSourceSettings) => dispatch(updateDataSource(dataSource));\n};\n\nexport const useDeleteLoadedDataSource = () => {\n  const dispatch = useDispatch();\n  const { name } = useSelector((state) => state.dataSources.dataSource);\n\n  return () => {\n    appEvents.publish(\n      new ShowConfirmModalEvent({\n        title: 'Delete',\n        text: `Are you sure you want to delete the \"${name}\" data source?`,\n        yesText: 'Delete',\n        icon: 'trash-alt',\n        onConfirm: () => dispatch(deleteLoadedDataSource()),\n      })\n    );\n  };\n};\n\nexport const useDataSource = (uid: string) => {\n  return useSelector((state) => getDataSource(state.dataSources, uid));\n};\n\nexport const useDataSourceExploreUrl = (uid: string) => {\n  const dataSource = useDataSource(uid);\n  const exploreState = JSON.stringify({ datasource: dataSource.name, context: 'explore' });\n  const exploreUrl = urlUtil.renderUrl('/explore', { left: exploreState });\n\n  return exploreUrl;\n};\n\nexport const useDataSourceMeta = (pluginType: string): DataSourcePluginMeta => {\n  return useSelector((state) => getDataSourceMeta(state.dataSources, pluginType));\n};\n\nexport const useDataSourceSettings = () => {\n  return useSelector((state) => state.dataSourceSettings);\n};\n\nexport const useDataSourceSettingsNav = (dataSourceId: string, pageId: string | null) => {\n  const dataSource = useDataSource(dataSourceId);\n  const { plugin, loadError, loading } = useDataSourceSettings();\n  const navIndex = useSelector((state) => state.navIndex);\n  const navIndexId = pageId ? `datasource-${pageId}-${dataSourceId}` : `datasource-settings-${dataSourceId}`;\n\n  if (loadError) {\n    const node: NavModelItem = {\n      text: loadError,\n      subTitle: 'Data Source Error',\n      icon: 'exclamation-triangle',\n    };\n\n    return {\n      node: node,\n      main: node,\n    };\n  }\n\n  if (loading || !plugin) {\n    return getNavModel(navIndex, navIndexId, getDataSourceLoadingNav('settings'));\n  }\n\n  return getNavModel(navIndex, navIndexId, getDataSourceNav(buildNavModel(dataSource, plugin), pageId || 'settings'));\n};\n\nexport const useDataSourceRights = (uid: string): DataSourceRights => {\n  const dataSource = useDataSource(uid);\n  const readOnly = dataSource.readOnly === true;\n  const hasWriteRights = contextSrv.hasPermissionInMetadata(AccessControlAction.DataSourcesWrite, dataSource);\n  const hasDeleteRights = contextSrv.hasPermissionInMetadata(AccessControlAction.DataSourcesDelete, dataSource);\n\n  return {\n    readOnly,\n    hasWriteRights,\n    hasDeleteRights,\n  };\n};\n\nexport const useDataSourcesRoutes = () => {\n  return useContext(DataSourcesRoutesContext);\n};\n","import React from 'react';\n\nimport { QueryEditorHelpProps } from '@grafana/data';\n\nimport { PromQuery } from '../types';\n\nconst CHEAT_SHEET_ITEMS = [\n  {\n    title: 'Request Rate',\n    expression: 'rate(http_request_total[5m])',\n    label:\n      'Given an HTTP request counter, this query calculates the per-second average request rate over the last 5 minutes.',\n  },\n  {\n    title: '95th Percentile of Request Latencies',\n    expression: 'histogram_quantile(0.95, sum(rate(prometheus_http_request_duration_seconds_bucket[5m])) by (le))',\n    label: 'Calculates the 95th percentile of HTTP request rate over 5 minute windows.',\n  },\n  {\n    title: 'Alerts Firing',\n    expression: 'sort_desc(sum(sum_over_time(ALERTS{alertstate=\"firing\"}[24h])) by (alertname))',\n    label: 'Sums up the alerts that have been firing over the last 24 hours.',\n  },\n  {\n    title: 'Step',\n    label:\n      'Defines the graph resolution using a duration format (15s, 1m, 3h, ...). Small steps create high-resolution graphs but can be slow over larger time ranges. Using a longer step lowers the resolution and smooths the graph by producing fewer datapoints. If no step is given the resolution is calculated automatically.',\n  },\n];\n\nconst PromCheatSheet = (props: QueryEditorHelpProps<PromQuery>) => (\n  <div>\n    <h2>PromQL Cheat Sheet</h2>\n    {CHEAT_SHEET_ITEMS.map((item, index) => (\n      <div className=\"cheat-sheet-item\" key={index}>\n        <div className=\"cheat-sheet-item__title\">{item.title}</div>\n        {item.expression ? (\n          <div\n            className=\"cheat-sheet-item__example\"\n            onClick={(e) => props.onClickExample({ refId: 'A', expr: item.expression })}\n          >\n            <code>{item.expression}</code>\n          </div>\n        ) : null}\n        <div className=\"cheat-sheet-item__label\">{item.label}</div>\n      </div>\n    ))}\n  </div>\n);\n\nexport default PromCheatSheet;\n","import { DataQuery, DataSourceJsonData, QueryResultMeta, ScopedVars } from '@grafana/data';\n\nimport { PromApplication } from '../../../types/unified-alerting-dto';\n\nimport { QueryEditorMode } from './querybuilder/shared/types';\n\nexport interface PromQuery extends DataQuery {\n  expr: string;\n  format?: string;\n  instant?: boolean;\n  range?: boolean;\n  exemplar?: boolean;\n  hinting?: boolean;\n  interval?: string;\n  intervalFactor?: number;\n  // Timezone offset to align start & end time on backend\n  utcOffsetSec?: number;\n  legendFormat?: string;\n  valueWithRefId?: boolean;\n  requestId?: string;\n  showingGraph?: boolean;\n  showingTable?: boolean;\n  /** Code, Builder or Explain */\n  editorMode?: QueryEditorMode;\n}\n\nexport interface PromOptions extends DataSourceJsonData {\n  timeInterval?: string;\n  queryTimeout?: string;\n  httpMethod?: string;\n  directUrl?: string;\n  customQueryParameters?: string;\n  disableMetricsLookup?: boolean;\n  exemplarTraceIdDestinations?: ExemplarTraceIdDestination[];\n  prometheusType?: PromApplication;\n  prometheusVersion?: string;\n}\n\nexport enum PromQueryType {\n  timeSeriesQuery = 'timeSeriesQuery',\n}\n\nexport type ExemplarTraceIdDestination = {\n  name: string;\n  url?: string;\n  urlDisplayLabel?: string;\n  datasourceUid?: string;\n};\n\nexport interface PromQueryRequest extends PromQuery {\n  step?: number;\n  requestId?: string;\n  start: number;\n  end: number;\n  headers?: any;\n}\n\nexport interface PromMetricsMetadataItem {\n  type: string;\n  help: string;\n  unit?: string;\n}\n\nexport interface PromMetricsMetadata {\n  [metric: string]: PromMetricsMetadataItem;\n}\n\nexport interface PromDataSuccessResponse<T = PromData> {\n  status: 'success';\n  data: T;\n}\n\nexport interface PromDataErrorResponse<T = PromData> {\n  status: 'error';\n  errorType: string;\n  error: string;\n  data: T;\n}\n\nexport type PromData = PromMatrixData | PromVectorData | PromScalarData | PromExemplarData[];\n\nexport interface Labels {\n  [index: string]: any;\n}\n\nexport interface Exemplar {\n  labels: Labels;\n  value: number;\n  timestamp: number;\n}\n\nexport interface PromExemplarData {\n  seriesLabels: PromMetric;\n  exemplars: Exemplar[];\n}\n\nexport interface PromVectorData {\n  resultType: 'vector';\n  result: Array<{\n    metric: PromMetric;\n    value: PromValue;\n  }>;\n}\n\nexport interface PromMatrixData {\n  resultType: 'matrix';\n  result: Array<{\n    metric: PromMetric;\n    values: PromValue[];\n  }>;\n}\n\nexport interface PromScalarData {\n  resultType: 'scalar';\n  result: PromValue;\n}\n\nexport type PromValue = [number, any];\n\nexport interface PromMetric {\n  __name__?: string;\n  [index: string]: any;\n}\n\nexport function isMatrixData(result: MatrixOrVectorResult): result is PromMatrixData['result'][0] {\n  return 'values' in result;\n}\n\nexport function isExemplarData(result: PromData): result is PromExemplarData[] {\n  if (result == null || !Array.isArray(result)) {\n    return false;\n  }\n  return result.length ? 'exemplars' in result[0] : false;\n}\n\nexport type MatrixOrVectorResult = PromMatrixData['result'][0] | PromVectorData['result'][0];\n\nexport interface TransformOptions {\n  format?: string;\n  step?: number;\n  legendFormat?: string;\n  start: number;\n  end: number;\n  query: string;\n  responseListLength: number;\n  scopedVars?: ScopedVars;\n  refId: string;\n  valueWithRefId?: boolean;\n  meta: QueryResultMeta;\n}\n\nexport interface PromLabelQueryResponse {\n  data: {\n    status: string;\n    data: string[];\n  };\n  cancelled?: boolean;\n}\n\n/**\n * Auto = query.legendFormat == '__auto'\n * Verbose = query.legendFormat == null/undefined/''\n * Custom query.legendFormat.length > 0 && query.legendFormat !== '__auto'\n */\nexport enum LegendFormatMode {\n  Auto = '__auto',\n  Verbose = '__verbose',\n  Custom = '__custom',\n}\n","import { CoreApp } from '@grafana/data';\nimport store from 'app/core/store';\n\nimport { LegendFormatMode, PromQuery } from '../types';\n\nimport { QueryEditorMode } from './shared/types';\n\nconst queryEditorModeDefaultLocalStorageKey = 'PrometheusQueryEditorModeDefault';\n\nexport function changeEditorMode(query: PromQuery, editorMode: QueryEditorMode, onChange: (query: PromQuery) => void) {\n  // If empty query store new mode as default\n  if (query.expr === '') {\n    store.set(queryEditorModeDefaultLocalStorageKey, editorMode);\n  }\n\n  onChange({ ...query, editorMode });\n}\n\nfunction getDefaultEditorMode(expr: string) {\n  // If we already have an expression default to code view\n  if (expr != null && expr !== '') {\n    return QueryEditorMode.Code;\n  }\n\n  const value = store.get(queryEditorModeDefaultLocalStorageKey) as QueryEditorMode;\n  switch (value) {\n    case QueryEditorMode.Builder:\n    case QueryEditorMode.Code:\n      return value;\n    default:\n      return QueryEditorMode.Builder;\n  }\n}\n\n/**\n * Returns query with defaults, and boolean true/false depending on change was required\n */\nexport function getQueryWithDefaults(query: PromQuery, app: CoreApp | undefined): PromQuery {\n  let result = query;\n\n  if (!query.editorMode) {\n    result = { ...query, editorMode: getDefaultEditorMode(query.expr) };\n  }\n\n  if (query.expr == null) {\n    result = { ...result, expr: '', legendFormat: LegendFormatMode.Auto };\n  }\n\n  if (query.range == null && query.instant == null) {\n    // Default to range query\n    result = { ...result, range: true };\n\n    // In explore we default to both instant & range\n    if (app === CoreApp.Explore) {\n      result.instant = true;\n    }\n  }\n\n  // Unified Alerting does not support \"both\" for query type – fall back to \"range\".\n  const isBothInstantAndRange = query.instant && query.range;\n  if (app === CoreApp.UnifiedAlerting && isBothInstantAndRange) {\n    result = { ...result, instant: false, range: true };\n  }\n\n  return result;\n}\n","import { css } from '@emotion/css';\nimport debounce from 'debounce-promise';\nimport React, { useCallback, useState } from 'react';\nimport Highlighter from 'react-highlight-words';\n\nimport { SelectableValue, toOption, GrafanaTheme2 } from '@grafana/data';\nimport { EditorField, EditorFieldGroup } from '@grafana/experimental';\nimport { AsyncSelect, FormatOptionLabelMeta, useStyles2 } from '@grafana/ui';\n\nimport { PrometheusDatasource } from '../../datasource';\nimport { QueryBuilderLabelFilter } from '../shared/types';\nimport { PromVisualQuery } from '../types';\n\n// We are matching words split with space\nconst splitSeparator = ' ';\n\nexport interface Props {\n  query: PromVisualQuery;\n  onChange: (query: PromVisualQuery) => void;\n  onGetMetrics: () => Promise<SelectableValue[]>;\n  datasource: PrometheusDatasource;\n  labelsFilters: QueryBuilderLabelFilter[];\n}\n\nconst MAX_NUMBER_OF_RESULTS = 1000;\n\nexport function MetricSelect({ datasource, query, onChange, onGetMetrics, labelsFilters }: Props) {\n  const styles = useStyles2(getStyles);\n  const [state, setState] = useState<{\n    metrics?: Array<SelectableValue<any>>;\n    isLoading?: boolean;\n  }>({});\n\n  const customFilterOption = useCallback((option: SelectableValue<any>, searchQuery: string) => {\n    const label = option.label ?? option.value;\n    if (!label) {\n      return false;\n    }\n\n    // custom value is not a string label but a react node\n    if (!label.toLowerCase) {\n      return true;\n    }\n\n    const searchWords = searchQuery.split(splitSeparator);\n    return searchWords.reduce((acc, cur) => acc && label.toLowerCase().includes(cur.toLowerCase()), true);\n  }, []);\n\n  const formatOptionLabel = useCallback(\n    (option: SelectableValue<any>, meta: FormatOptionLabelMeta<any>) => {\n      // For newly created custom value we don't want to add highlight\n      if (option['__isNew__']) {\n        return option.label;\n      }\n\n      return (\n        <Highlighter\n          searchWords={meta.inputValue.split(splitSeparator)}\n          textToHighlight={option.label ?? ''}\n          highlightClassName={styles.highlight}\n        />\n      );\n    },\n    [styles.highlight]\n  );\n\n  const formatLabelFilters = (labelsFilters: QueryBuilderLabelFilter[]): string[] => {\n    return labelsFilters.map((label) => {\n      return `,${label.label}=\"${label.value}\"`;\n    });\n  };\n\n  /**\n   * Transform queryString and any currently set label filters into label_values() string\n   */\n  const queryAndFilterToLabelValuesString = (\n    queryString: string,\n    labelsFilters: QueryBuilderLabelFilter[] | undefined\n  ): string => {\n    return `label_values({__name__=~\".*${queryString}\"${\n      labelsFilters ? formatLabelFilters(labelsFilters).join() : ''\n    }},__name__)`;\n  };\n\n  /**\n   * There aren't any spaces in the metric names, so let's introduce a wildcard into the regex for each space to better facilitate a fuzzy search\n   */\n  const regexifyLabelValuesQueryString = (query: string) => {\n    const queryArray = query.split(' ');\n    return queryArray.map((query) => `${query}.*`).join('');\n  };\n\n  /**\n   * Reformat the query string and label filters to return all valid results for current query editor state\n   */\n  const formatKeyValueStringsForLabelValuesQuery = (\n    query: string,\n    labelsFilters?: QueryBuilderLabelFilter[]\n  ): string => {\n    const queryString = regexifyLabelValuesQueryString(query);\n\n    return queryAndFilterToLabelValuesString(queryString, labelsFilters);\n  };\n\n  /**\n   * Gets label_values response from prometheus API for current autocomplete query string and any existing labels filters\n   */\n  const getMetricLabels = (query: string) => {\n    // Since some customers can have millions of metrics, whenever the user changes the autocomplete text we want to call the backend and request all metrics that match the current query string\n    const results = datasource.metricFindQuery(formatKeyValueStringsForLabelValuesQuery(query, labelsFilters));\n    return results.then((results) => {\n      if (results.length > MAX_NUMBER_OF_RESULTS) {\n        results.splice(0, results.length - MAX_NUMBER_OF_RESULTS);\n      }\n      return results.map((result) => {\n        return {\n          label: result.text,\n          value: result.text,\n        };\n      });\n    });\n  };\n\n  const debouncedSearch = debounce((query: string) => getMetricLabels(query), 300);\n\n  return (\n    <EditorFieldGroup>\n      <EditorField label=\"Metric\">\n        <AsyncSelect\n          inputId=\"prometheus-metric-select\"\n          className={styles.select}\n          value={query.metric ? toOption(query.metric) : undefined}\n          placeholder=\"Select metric\"\n          allowCustomValue\n          formatOptionLabel={formatOptionLabel}\n          filterOption={customFilterOption}\n          onOpenMenu={async () => {\n            setState({ isLoading: true });\n            const metrics = await onGetMetrics();\n            if (metrics.length > MAX_NUMBER_OF_RESULTS) {\n              metrics.splice(0, metrics.length - MAX_NUMBER_OF_RESULTS);\n            }\n            setState({ metrics, isLoading: undefined });\n          }}\n          loadOptions={debouncedSearch}\n          isLoading={state.isLoading}\n          defaultOptions={state.metrics}\n          onChange={({ value }) => {\n            if (value) {\n              onChange({ ...query, metric: value });\n            }\n          }}\n        />\n      </EditorField>\n    </EditorFieldGroup>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  select: css`\n    min-width: 125px;\n  `,\n  highlight: css`\n    label: select__match-highlight;\n    background: inherit;\n    padding: inherit;\n    color: ${theme.colors.warning.contrastText};\n    background-color: ${theme.colors.warning.main};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2, toOption } from '@grafana/data';\nimport { EditorRows, FlexItem } from '@grafana/experimental';\nimport { AutoSizeInput, IconButton, Select, useStyles2 } from '@grafana/ui';\n\nimport { PrometheusDatasource } from '../../datasource';\nimport { binaryScalarDefs } from '../binaryScalarOperations';\nimport { PromVisualQueryBinary } from '../types';\n\nimport { PromQueryBuilder } from './PromQueryBuilder';\n\nexport interface Props {\n  nestedQuery: PromVisualQueryBinary;\n  datasource: PrometheusDatasource;\n  index: number;\n  onChange: (index: number, update: PromVisualQueryBinary) => void;\n  onRemove: (index: number) => void;\n  onRunQuery: () => void;\n  showExplain: boolean;\n}\n\nexport const NestedQuery = React.memo<Props>((props) => {\n  const { nestedQuery, index, datasource, onChange, onRemove, onRunQuery, showExplain } = props;\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.card}>\n      <div className={styles.header}>\n        <div className={styles.name}>Operator</div>\n        <Select\n          width=\"auto\"\n          options={operators}\n          value={toOption(nestedQuery.operator)}\n          onChange={(value) => {\n            onChange(index, {\n              ...nestedQuery,\n              operator: value.value!,\n            });\n          }}\n        />\n        <div className={styles.name}>Vector matches</div>\n        <div className={styles.vectorMatchWrapper}>\n          <Select<PromVisualQueryBinary['vectorMatchesType']>\n            width=\"auto\"\n            value={nestedQuery.vectorMatchesType || 'on'}\n            allowCustomValue\n            options={[\n              { value: 'on', label: 'on' },\n              { value: 'ignoring', label: 'ignoring' },\n            ]}\n            onChange={(val) => {\n              onChange(index, {\n                ...nestedQuery,\n                vectorMatchesType: val.value,\n              });\n            }}\n          />\n          <AutoSizeInput\n            className={styles.vectorMatchInput}\n            minWidth={20}\n            defaultValue={nestedQuery.vectorMatches}\n            onCommitChange={(evt) => {\n              onChange(index, {\n                ...nestedQuery,\n                vectorMatches: evt.currentTarget.value,\n                vectorMatchesType: nestedQuery.vectorMatchesType || 'on',\n              });\n            }}\n          />\n        </div>\n        <FlexItem grow={1} />\n        <IconButton name=\"times\" size=\"sm\" onClick={() => onRemove(index)} />\n      </div>\n      <div className={styles.body}>\n        <EditorRows>\n          <PromQueryBuilder\n            showExplain={showExplain}\n            query={nestedQuery.query}\n            datasource={datasource}\n            onRunQuery={onRunQuery}\n            onChange={(update) => {\n              onChange(index, { ...nestedQuery, query: update });\n            }}\n          />\n        </EditorRows>\n      </div>\n    </div>\n  );\n});\n\nconst operators = binaryScalarDefs.map((def) => ({ label: def.sign, value: def.sign }));\n\nNestedQuery.displayName = 'NestedQuery';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    card: css({\n      label: 'card',\n      display: 'flex',\n      flexDirection: 'column',\n      gap: theme.spacing(0.5),\n    }),\n    header: css({\n      label: 'header',\n      padding: theme.spacing(0.5, 0.5, 0.5, 1),\n      gap: theme.spacing(1),\n      display: 'flex',\n      alignItems: 'center',\n    }),\n    name: css({\n      label: 'name',\n      whiteSpace: 'nowrap',\n    }),\n    body: css({\n      label: 'body',\n      paddingLeft: theme.spacing(2),\n    }),\n    vectorMatchInput: css({\n      label: 'vectorMatchInput',\n      marginLeft: -1,\n    }),\n    vectorMatchWrapper: css({\n      label: 'vectorMatchWrapper',\n      display: 'flex',\n    }),\n  };\n};\n","import React from 'react';\n\nimport { Stack } from '@grafana/experimental';\n\nimport { PrometheusDatasource } from '../../datasource';\nimport { PromVisualQuery, PromVisualQueryBinary } from '../types';\n\nimport { NestedQuery } from './NestedQuery';\n\nexport interface Props {\n  query: PromVisualQuery;\n  datasource: PrometheusDatasource;\n  onChange: (query: PromVisualQuery) => void;\n  onRunQuery: () => void;\n  showExplain: boolean;\n}\n\nexport function NestedQueryList(props: Props) {\n  const { query, datasource, onChange, onRunQuery, showExplain } = props;\n  const nestedQueries = query.binaryQueries ?? [];\n\n  const onNestedQueryUpdate = (index: number, update: PromVisualQueryBinary) => {\n    const updatedList = [...nestedQueries];\n    updatedList.splice(index, 1, update);\n    onChange({ ...query, binaryQueries: updatedList });\n  };\n\n  const onRemove = (index: number) => {\n    const updatedList = [...nestedQueries.slice(0, index), ...nestedQueries.slice(index + 1)];\n    onChange({ ...query, binaryQueries: updatedList });\n  };\n\n  return (\n    <Stack direction=\"column\" gap={1}>\n      {nestedQueries.map((nestedQuery, index) => (\n        <NestedQuery\n          key={index.toString()}\n          nestedQuery={nestedQuery}\n          index={index}\n          onChange={onNestedQueryUpdate}\n          datasource={datasource}\n          onRemove={onRemove}\n          onRunQuery={onRunQuery}\n          showExplain={showExplain}\n        />\n      ))}\n    </Stack>\n  );\n}\n","import React from 'react';\n\nimport { Stack } from '@grafana/experimental';\n\nimport promqlGrammar from '../../promql';\nimport { promQueryModeller } from '../PromQueryModeller';\nimport { buildVisualQueryFromString } from '../parsing';\nimport { OperationExplainedBox } from '../shared/OperationExplainedBox';\nimport { OperationListExplained } from '../shared/OperationListExplained';\nimport { RawQuery } from '../shared/RawQuery';\nimport { PromVisualQuery } from '../types';\n\nexport const EXPLAIN_LABEL_FILTER_CONTENT = 'Fetch all series matching metric name and label filters.';\n\nexport interface Props {\n  query: string;\n}\n\nexport const PromQueryBuilderExplained = React.memo<Props>(({ query }) => {\n  const visQuery = buildVisualQueryFromString(query || '').query;\n  const lang = { grammar: promqlGrammar, name: 'promql' };\n\n  return (\n    <Stack gap={0.5} direction=\"column\">\n      <OperationExplainedBox\n        stepNumber={1}\n        title={<RawQuery query={`${visQuery.metric} ${promQueryModeller.renderLabels(visQuery.labels)}`} lang={lang} />}\n      >\n        {EXPLAIN_LABEL_FILTER_CONTENT}\n      </OperationExplainedBox>\n      <OperationListExplained<PromVisualQuery>\n        stepNumber={2}\n        queryModeller={promQueryModeller}\n        query={visQuery}\n        lang={lang}\n      />\n    </Stack>\n  );\n});\n\nPromQueryBuilderExplained.displayName = 'PromQueryBuilderExplained';\n","import React, { useCallback, useState } from 'react';\n\nimport { DataSourceApi, PanelData, SelectableValue } from '@grafana/data';\nimport { EditorRow } from '@grafana/experimental';\n\nimport { PrometheusDatasource } from '../../datasource';\nimport { getMetadataString } from '../../language_provider';\nimport promqlGrammar from '../../promql';\nimport { promQueryModeller } from '../PromQueryModeller';\nimport { buildVisualQueryFromString } from '../parsing';\nimport { LabelFilters } from '../shared/LabelFilters';\nimport { OperationExplainedBox } from '../shared/OperationExplainedBox';\nimport { OperationList } from '../shared/OperationList';\nimport { OperationListExplained } from '../shared/OperationListExplained';\nimport { OperationsEditorRow } from '../shared/OperationsEditorRow';\nimport { QueryBuilderHints } from '../shared/QueryBuilderHints';\nimport { RawQuery } from '../shared/RawQuery';\nimport { QueryBuilderLabelFilter, QueryBuilderOperation } from '../shared/types';\nimport { PromVisualQuery } from '../types';\n\nimport { MetricSelect } from './MetricSelect';\nimport { NestedQueryList } from './NestedQueryList';\nimport { EXPLAIN_LABEL_FILTER_CONTENT } from './PromQueryBuilderExplained';\n\nexport interface Props {\n  query: PromVisualQuery;\n  datasource: PrometheusDatasource;\n  onChange: (update: PromVisualQuery) => void;\n  onRunQuery: () => void;\n  data?: PanelData;\n  showExplain: boolean;\n}\n\nexport const PromQueryBuilder = React.memo<Props>((props) => {\n  const { datasource, query, onChange, onRunQuery, data, showExplain } = props;\n  const [highlightedOp, setHighlightedOp] = useState<QueryBuilderOperation | undefined>();\n  const onChangeLabels = (labels: QueryBuilderLabelFilter[]) => {\n    onChange({ ...query, labels });\n  };\n\n  /**\n   * Map metric metadata to SelectableValue for Select component and also adds defined template variables to the list.\n   */\n  const withTemplateVariableOptions = useCallback(\n    async (optionsPromise: Promise<Array<{ value: string; description?: string }>>): Promise<SelectableValue[]> => {\n      const variables = datasource.getVariables();\n      const options = await optionsPromise;\n      return [\n        ...variables.map((value) => ({ label: value, value })),\n        ...options.map((option) => ({ label: option.value, value: option.value, title: option.description })),\n      ];\n    },\n    [datasource]\n  );\n\n  const onGetLabelNames = async (forLabel: Partial<QueryBuilderLabelFilter>): Promise<Array<{ value: string }>> => {\n    // If no metric we need to use a different method\n    if (!query.metric) {\n      // Todo add caching but inside language provider!\n      await datasource.languageProvider.fetchLabels();\n      return datasource.languageProvider.getLabelKeys().map((k) => ({ value: k }));\n    }\n\n    const labelsToConsider = query.labels.filter((x) => x !== forLabel);\n    labelsToConsider.push({ label: '__name__', op: '=', value: query.metric });\n    const expr = promQueryModeller.renderLabels(labelsToConsider);\n    const labelsIndex = await datasource.languageProvider.fetchSeriesLabels(expr);\n\n    // filter out already used labels\n    return Object.keys(labelsIndex)\n      .filter((labelName) => !labelsToConsider.find((filter) => filter.label === labelName))\n      .map((k) => ({ value: k }));\n  };\n\n  const onGetLabelValues = async (forLabel: Partial<QueryBuilderLabelFilter>) => {\n    if (!forLabel.label) {\n      return [];\n    }\n\n    // If no metric we need to use a different method\n    if (!query.metric) {\n      return (await datasource.languageProvider.getLabelValues(forLabel.label)).map((v) => ({ value: v }));\n    }\n\n    const labelsToConsider = query.labels.filter((x) => x !== forLabel);\n    labelsToConsider.push({ label: '__name__', op: '=', value: query.metric });\n    const expr = promQueryModeller.renderLabels(labelsToConsider);\n    const result = await datasource.languageProvider.fetchSeriesLabels(expr);\n    const forLabelInterpolated = datasource.interpolateString(forLabel.label);\n    return result[forLabelInterpolated].map((v) => ({ value: v })) ?? [];\n  };\n\n  const onGetMetrics = useCallback(() => {\n    return withTemplateVariableOptions(getMetrics(datasource, query));\n  }, [datasource, query, withTemplateVariableOptions]);\n\n  const lang = { grammar: promqlGrammar, name: 'promql' };\n\n  return (\n    <>\n      <EditorRow>\n        <MetricSelect\n          query={query}\n          onChange={onChange}\n          onGetMetrics={onGetMetrics}\n          datasource={datasource}\n          labelsFilters={query.labels}\n        />\n        <LabelFilters\n          labelsFilters={query.labels}\n          onChange={onChangeLabels}\n          onGetLabelNames={(forLabel: Partial<QueryBuilderLabelFilter>) =>\n            withTemplateVariableOptions(onGetLabelNames(forLabel))\n          }\n          onGetLabelValues={(forLabel: Partial<QueryBuilderLabelFilter>) =>\n            withTemplateVariableOptions(onGetLabelValues(forLabel))\n          }\n        />\n      </EditorRow>\n      {showExplain && (\n        <OperationExplainedBox\n          stepNumber={1}\n          title={<RawQuery query={`${query.metric} ${promQueryModeller.renderLabels(query.labels)}`} lang={lang} />}\n        >\n          {EXPLAIN_LABEL_FILTER_CONTENT}\n        </OperationExplainedBox>\n      )}\n      <OperationsEditorRow>\n        <OperationList<PromVisualQuery>\n          queryModeller={promQueryModeller}\n          datasource={datasource as DataSourceApi}\n          query={query}\n          onChange={onChange}\n          onRunQuery={onRunQuery}\n          highlightedOp={highlightedOp}\n        />\n        <QueryBuilderHints<PromVisualQuery>\n          datasource={datasource}\n          query={query}\n          onChange={onChange}\n          data={data}\n          queryModeller={promQueryModeller}\n          buildVisualQueryFromString={buildVisualQueryFromString}\n        />\n      </OperationsEditorRow>\n      {showExplain && (\n        <OperationListExplained<PromVisualQuery>\n          lang={lang}\n          query={query}\n          stepNumber={2}\n          queryModeller={promQueryModeller}\n          onMouseEnter={(op) => setHighlightedOp(op)}\n          onMouseLeave={() => setHighlightedOp(undefined)}\n        />\n      )}\n      {query.binaryQueries && query.binaryQueries.length > 0 && (\n        <NestedQueryList\n          query={query}\n          datasource={datasource}\n          onChange={onChange}\n          onRunQuery={onRunQuery}\n          showExplain={showExplain}\n        />\n      )}\n    </>\n  );\n});\n\n/**\n * Returns list of metrics, either all or filtered by query param. It also adds description string to each metric if it\n * exists.\n * @param datasource\n * @param query\n */\nasync function getMetrics(\n  datasource: PrometheusDatasource,\n  query: PromVisualQuery\n): Promise<Array<{ value: string; description?: string }>> {\n  // Makes sure we loaded the metadata for metrics. Usually this is done in the start() method of the provider but we\n  // don't use it with the visual builder and there is no need to run all the start() setup anyway.\n  if (!datasource.languageProvider.metricsMetadata) {\n    await datasource.languageProvider.loadMetricsMetadata();\n  }\n\n  // Error handling for when metrics metadata returns as undefined\n  if (!datasource.languageProvider.metricsMetadata) {\n    datasource.languageProvider.metricsMetadata = {};\n  }\n\n  let metrics;\n  if (query.labels.length > 0) {\n    const expr = promQueryModeller.renderLabels(query.labels);\n    metrics = (await datasource.languageProvider.getSeries(expr, true))['__name__'] ?? [];\n  } else {\n    metrics = (await datasource.languageProvider.getLabelValues('__name__')) ?? [];\n  }\n\n  return metrics.map((m) => ({\n    value: m,\n    description: getMetadataString(m, datasource.languageProvider.metricsMetadata!),\n  }));\n}\n\nPromQueryBuilder.displayName = 'PromQueryBuilder';\n","import React from 'react';\n\nimport { EditorRow, EditorFieldGroup, EditorField } from '@grafana/experimental';\n\nimport promqlGrammar from '../../promql';\nimport { RawQuery } from '../shared/RawQuery';\n\nexport interface Props {\n  query: string;\n}\n\nexport function QueryPreview({ query }: Props) {\n  return (\n    <EditorRow>\n      <EditorFieldGroup>\n        <EditorField label=\"Raw query\">\n          <RawQuery query={query} lang={{ grammar: promqlGrammar, name: 'promql' }} />\n        </EditorField>\n      </EditorFieldGroup>\n    </EditorRow>\n  );\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport React, { useEffect, useReducer } from 'react';\n\nimport { PanelData } from '@grafana/data';\n\nimport { PrometheusDatasource } from '../../datasource';\nimport { PromQuery } from '../../types';\nimport { promQueryModeller } from '../PromQueryModeller';\nimport { buildVisualQueryFromString } from '../parsing';\nimport { PromVisualQuery } from '../types';\n\nimport { PromQueryBuilder } from './PromQueryBuilder';\nimport { QueryPreview } from './QueryPreview';\n\nexport interface Props {\n  query: PromQuery;\n  datasource: PrometheusDatasource;\n  onChange: (update: PromQuery) => void;\n  onRunQuery: () => void;\n  data?: PanelData;\n  showRawQuery?: boolean;\n  showExplain: boolean;\n}\n\nexport interface State {\n  visQuery?: PromVisualQuery;\n  expr: string;\n}\n\n/**\n * This component is here just to contain the translation logic between string query and the visual query builder model.\n */\nexport function PromQueryBuilderContainer(props: Props) {\n  const { query, onChange, onRunQuery, datasource, data, showRawQuery, showExplain } = props;\n  const [state, dispatch] = useReducer(stateSlice.reducer, { expr: query.expr });\n\n  // Only rebuild visual query if expr changes from outside\n  useEffect(() => {\n    dispatch(exprChanged(query.expr));\n  }, [query.expr]);\n\n  const onVisQueryChange = (visQuery: PromVisualQuery) => {\n    const expr = promQueryModeller.renderQuery(visQuery);\n    dispatch(visualQueryChange({ visQuery, expr }));\n    onChange({ ...props.query, expr: expr });\n  };\n\n  if (!state.visQuery) {\n    return null;\n  }\n\n  return (\n    <>\n      <PromQueryBuilder\n        query={state.visQuery}\n        datasource={datasource}\n        onChange={onVisQueryChange}\n        onRunQuery={onRunQuery}\n        data={data}\n        showExplain={showExplain}\n      />\n      {showRawQuery && <QueryPreview query={query.expr} />}\n    </>\n  );\n}\n\nconst stateSlice = createSlice({\n  name: 'prom-builder-container',\n  initialState: { expr: '' } as State,\n  reducers: {\n    visualQueryChange: (state, action: PayloadAction<{ visQuery: PromVisualQuery; expr: string }>) => {\n      state.expr = action.payload.expr;\n      state.visQuery = action.payload.visQuery;\n    },\n    exprChanged: (state, action: PayloadAction<string>) => {\n      if (!state.visQuery || state.expr !== action.payload) {\n        state.expr = action.payload;\n        const parseResult = buildVisualQueryFromString(action.payload);\n        state.visQuery = parseResult.query;\n      }\n    },\n  },\n});\n\nconst { visualQueryChange, exprChanged } = stateSlice.actions;\n","import { css, cx } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\nimport { usePrevious } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { IconButton, InlineLabel, Tooltip, useStyles2 } from '@grafana/ui';\n\nimport { PrometheusDatasource } from '../datasource';\nimport { PromQuery } from '../types';\n\ninterface Props {\n  onChange: (exemplar: boolean) => void;\n  datasource: PrometheusDatasource;\n  query: PromQuery;\n  'data-testid'?: string;\n}\n\nexport function PromExemplarField({ datasource, onChange, query, ...rest }: Props) {\n  const [error, setError] = useState<string | null>(null);\n  const styles = useStyles2(getStyles);\n  const prevError = usePrevious(error);\n\n  useEffect(() => {\n    if (!datasource.exemplarsAvailable) {\n      setError('Exemplars for this query are not available');\n      onChange(false);\n    } else if (query.instant && !query.range) {\n      setError('Exemplars are not available for instant queries');\n      onChange(false);\n    } else {\n      setError(null);\n      // If error is cleared, we want to change exemplar to true\n      if (prevError && !error) {\n        onChange(true);\n      }\n    }\n  }, [datasource.exemplarsAvailable, query.instant, query.range, onChange, prevError, error]);\n\n  const iconButtonStyles = cx(\n    {\n      [styles.activeIcon]: !!query.exemplar,\n    },\n    styles.eyeIcon\n  );\n\n  return (\n    <InlineLabel width=\"auto\" data-testid={rest['data-testid']}>\n      <Tooltip content={error ?? ''}>\n        <div className={styles.iconWrapper}>\n          Exemplars\n          <IconButton\n            name=\"eye\"\n            tooltip={!!query.exemplar ? 'Disable query with exemplars' : 'Enable query with exemplars'}\n            disabled={!!error}\n            className={iconButtonStyles}\n            onClick={() => {\n              onChange(!query.exemplar);\n            }}\n          />\n        </div>\n      </Tooltip>\n    </InlineLabel>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    eyeIcon: css`\n      margin-left: ${theme.spacing(2)};\n    `,\n    activeIcon: css`\n      color: ${theme.colors.primary.main};\n    `,\n    iconWrapper: css`\n      display: flex;\n      align-items: center;\n    `,\n  };\n}\n","import { css, cx } from '@emotion/css';\nimport { isEqual } from 'lodash';\nimport React, { memo, useCallback } from 'react';\nimport { usePrevious } from 'react-use';\n\nimport { InlineFormLabel, RadioButtonGroup } from '@grafana/ui';\n\nimport { PrometheusDatasource } from '../datasource';\nimport { PromQuery } from '../types';\n\nimport { PromExemplarField } from './PromExemplarField';\n\nexport interface PromExploreExtraFieldProps {\n  query: PromQuery;\n  onChange: (value: PromQuery) => void;\n  onRunQuery: () => void;\n  datasource: PrometheusDatasource;\n}\n\nexport const PromExploreExtraField: React.FC<PromExploreExtraFieldProps> = memo(\n  ({ query, datasource, onChange, onRunQuery }) => {\n    const rangeOptions = getQueryTypeOptions(true);\n    const prevQuery = usePrevious(query);\n\n    const onExemplarChange = useCallback(\n      (exemplar: boolean) => {\n        if (!isEqual(query, prevQuery) || exemplar !== query.exemplar) {\n          onChange({ ...query, exemplar });\n        }\n      },\n      [prevQuery, query, onChange]\n    );\n\n    function onChangeQueryStep(interval: string) {\n      onChange({ ...query, interval });\n    }\n\n    function onStepChange(e: React.SyntheticEvent<HTMLInputElement>) {\n      if (e.currentTarget.value !== query.interval) {\n        onChangeQueryStep(e.currentTarget.value);\n      }\n    }\n\n    function onReturnKeyDown(e: React.KeyboardEvent<HTMLInputElement>) {\n      if (e.key === 'Enter' && e.shiftKey) {\n        onRunQuery();\n      }\n    }\n\n    const onQueryTypeChange = getQueryTypeChangeHandler(query, onChange);\n\n    return (\n      <div aria-label=\"Prometheus extra field\" className=\"gf-form-inline\" data-testid={testIds.extraFieldEditor}>\n        {/*Query type field*/}\n        <div\n          data-testid={testIds.queryTypeField}\n          className={cx(\n            'gf-form explore-input-margin',\n            css`\n              flex-wrap: nowrap;\n            `\n          )}\n          aria-label=\"Query type field\"\n        >\n          <InlineFormLabel width=\"auto\">Query type</InlineFormLabel>\n\n          <RadioButtonGroup\n            options={rangeOptions}\n            value={query.range && query.instant ? 'both' : query.instant ? 'instant' : 'range'}\n            onChange={onQueryTypeChange}\n          />\n        </div>\n        {/*Step field*/}\n        <div\n          data-testid={testIds.stepField}\n          className={cx(\n            'gf-form',\n            css`\n              flex-wrap: nowrap;\n            `\n          )}\n          aria-label=\"Step field\"\n        >\n          <InlineFormLabel\n            width={6}\n            tooltip={\n              'Time units and built-in variables can be used here, for example: $__interval, $__rate_interval, 5s, 1m, 3h, 1d, 1y (Default if no unit is specified: s)'\n            }\n          >\n            Min step\n          </InlineFormLabel>\n          <input\n            type={'text'}\n            className=\"gf-form-input width-4\"\n            placeholder={'auto'}\n            onChange={onStepChange}\n            onKeyDown={onReturnKeyDown}\n            value={query.interval ?? ''}\n          />\n        </div>\n\n        <PromExemplarField onChange={onExemplarChange} datasource={datasource} query={query} />\n      </div>\n    );\n  }\n);\n\nPromExploreExtraField.displayName = 'PromExploreExtraField';\n\nexport function getQueryTypeOptions(includeBoth: boolean) {\n  const rangeOptions = [\n    { value: 'range', label: 'Range', description: 'Run query over a range of time' },\n    {\n      value: 'instant',\n      label: 'Instant',\n      description: 'Run query against a single point in time. For this query, the \"To\" time is used',\n    },\n  ];\n\n  if (includeBoth) {\n    rangeOptions.push({ value: 'both', label: 'Both', description: 'Run an Instant query and a Range query' });\n  }\n\n  return rangeOptions;\n}\n\nexport function getQueryTypeChangeHandler(query: PromQuery, onChange: (update: PromQuery) => void) {\n  return (queryType: string) => {\n    if (queryType === 'instant') {\n      onChange({ ...query, instant: true, range: false, exemplar: false });\n    } else if (queryType === 'range') {\n      onChange({ ...query, instant: false, range: true });\n    } else {\n      onChange({ ...query, instant: true, range: true });\n    }\n  };\n}\n\nexport const testIds = {\n  extraFieldEditor: 'prom-editor-extra-field',\n  stepField: 'prom-editor-extra-field-step',\n  queryTypeField: 'prom-editor-extra-field-query-type',\n};\n","import { map } from 'lodash';\nimport React, { FC, useEffect, useState, memo } from 'react';\n\nimport { DataQueryRequest, PanelData, ScopedVars, textUtil, rangeUtil } from '@grafana/data';\n\nimport { PrometheusDatasource } from '../datasource';\nimport { PromQuery } from '../types';\n\ninterface Props {\n  datasource: PrometheusDatasource;\n  query: PromQuery;\n  panelData?: PanelData;\n}\n\nconst PromLink: FC<Props> = ({ panelData, query, datasource }) => {\n  const [href, setHref] = useState('');\n\n  useEffect(() => {\n    if (panelData) {\n      const getExternalLink = () => {\n        if (!panelData.request) {\n          return '';\n        }\n\n        const {\n          request: { range, interval, scopedVars },\n        } = panelData;\n\n        const start = datasource.getPrometheusTime(range.from, false);\n        const end = datasource.getPrometheusTime(range.to, true);\n        const rangeDiff = Math.ceil(end - start);\n        const endTime = range.to.utc().format('YYYY-MM-DD HH:mm');\n\n        const enrichedScopedVars: ScopedVars = {\n          ...scopedVars,\n          // As we support $__rate_interval variable in min step, we need add it to scopedVars\n          ...datasource.getRateIntervalScopedVariable(\n            rangeUtil.intervalToSeconds(interval),\n            rangeUtil.intervalToSeconds(datasource.interval)\n          ),\n        };\n\n        const options = {\n          interval,\n          scopedVars: enrichedScopedVars,\n        } as DataQueryRequest<PromQuery>;\n\n        const customQueryParameters: { [key: string]: string } = {};\n        if (datasource.customQueryParameters) {\n          for (const [k, v] of datasource.customQueryParameters) {\n            customQueryParameters[k] = v;\n          }\n        }\n\n        const queryOptions = datasource.createQuery(query, options, start, end);\n\n        const expr = {\n          ...customQueryParameters,\n          'g0.expr': queryOptions.expr,\n          'g0.range_input': rangeDiff + 's',\n          'g0.end_input': endTime,\n          'g0.step_input': queryOptions.step,\n          'g0.tab': 0,\n        };\n\n        const args = map(expr, (v: string, k: string) => {\n          return k + '=' + encodeURIComponent(v);\n        }).join('&');\n        return `${datasource.directUrl}/graph?${args}`;\n      };\n\n      setHref(getExternalLink());\n    }\n  }, [datasource, panelData, query]);\n\n  return (\n    <a href={textUtil.sanitizeUrl(href)} target=\"_blank\" rel=\"noopener noreferrer\">\n      Prometheus\n    </a>\n  );\n};\n\nexport default memo(PromLink);\n","import { css, cx } from '@emotion/css';\nimport React, { ChangeEvent } from 'react';\nimport { FixedSizeList } from 'react-window';\n\nimport { GrafanaTheme } from '@grafana/data';\nimport {\n  Button,\n  HorizontalGroup,\n  Input,\n  Label,\n  LoadingPlaceholder,\n  stylesFactory,\n  withTheme,\n  BrowserLabel as PromLabel,\n} from '@grafana/ui';\n\nimport PromQlLanguageProvider from '../language_provider';\nimport { escapeLabelValueInExactSelector, escapeLabelValueInRegexSelector } from '../language_utils';\n\n// Hard limit on labels to render\nconst EMPTY_SELECTOR = '{}';\nconst METRIC_LABEL = '__name__';\nconst LIST_ITEM_SIZE = 25;\n\nexport interface BrowserProps {\n  languageProvider: PromQlLanguageProvider;\n  onChange: (selector: string) => void;\n  theme: GrafanaTheme;\n  autoSelect?: number;\n  hide?: () => void;\n  lastUsedLabels: string[];\n  storeLastUsedLabels: (labels: string[]) => void;\n  deleteLastUsedLabels: () => void;\n}\n\ninterface BrowserState {\n  labels: SelectableLabel[];\n  labelSearchTerm: string;\n  metricSearchTerm: string;\n  status: string;\n  error: string;\n  validationStatus: string;\n  valueSearchTerm: string;\n}\n\ninterface FacettableValue {\n  name: string;\n  selected?: boolean;\n  details?: string;\n}\n\nexport interface SelectableLabel {\n  name: string;\n  selected?: boolean;\n  loading?: boolean;\n  values?: FacettableValue[];\n  hidden?: boolean;\n  facets?: number;\n}\n\nexport function buildSelector(labels: SelectableLabel[]): string {\n  let singleMetric = '';\n  const selectedLabels = [];\n  for (const label of labels) {\n    if ((label.name === METRIC_LABEL || label.selected) && label.values && label.values.length > 0) {\n      const selectedValues = label.values.filter((value) => value.selected).map((value) => value.name);\n      if (selectedValues.length > 1) {\n        selectedLabels.push(`${label.name}=~\"${selectedValues.map(escapeLabelValueInRegexSelector).join('|')}\"`);\n      } else if (selectedValues.length === 1) {\n        if (label.name === METRIC_LABEL) {\n          singleMetric = selectedValues[0];\n        } else {\n          selectedLabels.push(`${label.name}=\"${escapeLabelValueInExactSelector(selectedValues[0])}\"`);\n        }\n      }\n    }\n  }\n  return [singleMetric, '{', selectedLabels.join(','), '}'].join('');\n}\n\nexport function facetLabels(\n  labels: SelectableLabel[],\n  possibleLabels: Record<string, string[]>,\n  lastFacetted?: string\n): SelectableLabel[] {\n  return labels.map((label) => {\n    const possibleValues = possibleLabels[label.name];\n    if (possibleValues) {\n      let existingValues: FacettableValue[];\n      if (label.name === lastFacetted && label.values) {\n        // Facetting this label, show all values\n        existingValues = label.values;\n      } else {\n        // Keep selection in other facets\n        const selectedValues: Set<string> = new Set(\n          label.values?.filter((value) => value.selected).map((value) => value.name) || []\n        );\n        // Values for this label have not been requested yet, let's use the facetted ones as the initial values\n        existingValues = possibleValues.map((value) => ({ name: value, selected: selectedValues.has(value) }));\n      }\n      return {\n        ...label,\n        loading: false,\n        values: existingValues,\n        hidden: !possibleValues,\n        facets: existingValues.length,\n      };\n    }\n\n    // Label is facetted out, hide all values\n    return { ...label, loading: false, hidden: !possibleValues, values: undefined, facets: 0 };\n  });\n}\n\nconst getStyles = stylesFactory((theme: GrafanaTheme) => ({\n  wrapper: css`\n    background-color: ${theme.colors.bg2};\n    padding: ${theme.spacing.sm};\n    width: 100%;\n  `,\n  list: css`\n    margin-top: ${theme.spacing.sm};\n    display: flex;\n    flex-wrap: wrap;\n    max-height: 200px;\n    overflow: auto;\n    align-content: flex-start;\n  `,\n  section: css`\n    & + & {\n      margin: ${theme.spacing.md} 0;\n    }\n    position: relative;\n  `,\n  selector: css`\n    font-family: ${theme.typography.fontFamily.monospace};\n    margin-bottom: ${theme.spacing.sm};\n  `,\n  status: css`\n    padding: ${theme.spacing.xs};\n    color: ${theme.colors.textSemiWeak};\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    /* using absolute positioning because flex interferes with ellipsis */\n    position: absolute;\n    width: 50%;\n    right: 0;\n    text-align: right;\n    transition: opacity 100ms linear;\n    opacity: 0;\n  `,\n  statusShowing: css`\n    opacity: 1;\n  `,\n  error: css`\n    color: ${theme.palette.brandDanger};\n  `,\n  valueList: css`\n    margin-right: ${theme.spacing.sm};\n    resize: horizontal;\n  `,\n  valueListWrapper: css`\n    border-left: 1px solid ${theme.colors.border2};\n    margin: ${theme.spacing.sm} 0;\n    padding: ${theme.spacing.sm} 0 ${theme.spacing.sm} ${theme.spacing.sm};\n  `,\n  valueListArea: css`\n    display: flex;\n    flex-wrap: wrap;\n    margin-top: ${theme.spacing.sm};\n  `,\n  valueTitle: css`\n    margin-left: -${theme.spacing.xs};\n    margin-bottom: ${theme.spacing.sm};\n  `,\n  validationStatus: css`\n    padding: ${theme.spacing.xs};\n    margin-bottom: ${theme.spacing.sm};\n    color: ${theme.colors.textStrong};\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  `,\n}));\n\n/**\n * TODO #33976: Remove duplicated code. The component is very similar to LokiLabelBrowser.tsx. Check if it's possible\n *              to create a single, generic component.\n */\nexport class UnthemedPrometheusMetricsBrowser extends React.Component<BrowserProps, BrowserState> {\n  valueListsRef = React.createRef<HTMLDivElement>();\n  state: BrowserState = {\n    labels: [] as SelectableLabel[],\n    labelSearchTerm: '',\n    metricSearchTerm: '',\n    status: 'Ready',\n    error: '',\n    validationStatus: '',\n    valueSearchTerm: '',\n  };\n\n  onChangeLabelSearch = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({ labelSearchTerm: event.target.value });\n  };\n\n  onChangeMetricSearch = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({ metricSearchTerm: event.target.value });\n  };\n\n  onChangeValueSearch = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({ valueSearchTerm: event.target.value });\n  };\n\n  onClickRunQuery = () => {\n    const selector = buildSelector(this.state.labels);\n    this.props.onChange(selector);\n  };\n\n  onClickRunRateQuery = () => {\n    const selector = buildSelector(this.state.labels);\n    const query = `rate(${selector}[$__interval])`;\n    this.props.onChange(query);\n  };\n\n  onClickClear = () => {\n    this.setState((state) => {\n      const labels: SelectableLabel[] = state.labels.map((label) => ({\n        ...label,\n        values: undefined,\n        selected: false,\n        loading: false,\n        hidden: false,\n        facets: undefined,\n      }));\n      return {\n        labels,\n        labelSearchTerm: '',\n        metricSearchTerm: '',\n        status: '',\n        error: '',\n        validationStatus: '',\n        valueSearchTerm: '',\n      };\n    });\n    this.props.deleteLastUsedLabels();\n    // Get metrics\n    this.fetchValues(METRIC_LABEL, EMPTY_SELECTOR);\n  };\n\n  onClickLabel = (name: string, value: string | undefined, event: React.MouseEvent<HTMLElement>) => {\n    const label = this.state.labels.find((l) => l.name === name);\n    if (!label) {\n      return;\n    }\n    // Toggle selected state\n    const selected = !label.selected;\n    let nextValue: Partial<SelectableLabel> = { selected };\n    if (label.values && !selected) {\n      // Deselect all values if label was deselected\n      const values = label.values.map((value) => ({ ...value, selected: false }));\n      nextValue = { ...nextValue, facets: 0, values };\n    }\n    // Resetting search to prevent empty results\n    this.setState({ labelSearchTerm: '' });\n    this.updateLabelState(name, nextValue, '', () => this.doFacettingForLabel(name));\n  };\n\n  onClickValue = (name: string, value: string | undefined, event: React.MouseEvent<HTMLElement>) => {\n    const label = this.state.labels.find((l) => l.name === name);\n    if (!label || !label.values) {\n      return;\n    }\n    // Resetting search to prevent empty results\n    this.setState({ labelSearchTerm: '' });\n    // Toggling value for selected label, leaving other values intact\n    const values = label.values.map((v) => ({ ...v, selected: v.name === value ? !v.selected : v.selected }));\n    this.updateLabelState(name, { values }, '', () => this.doFacetting(name));\n  };\n\n  onClickMetric = (name: string, value: string | undefined, event: React.MouseEvent<HTMLElement>) => {\n    // Finding special metric label\n    const label = this.state.labels.find((l) => l.name === name);\n    if (!label || !label.values) {\n      return;\n    }\n    // Resetting search to prevent empty results\n    this.setState({ metricSearchTerm: '' });\n    // Toggling value for selected label, leaving other values intact\n    const values = label.values.map((v) => ({\n      ...v,\n      selected: v.name === value || v.selected ? !v.selected : v.selected,\n    }));\n    // Toggle selected state of special metrics label\n    const selected = values.some((v) => v.selected);\n    this.updateLabelState(name, { selected, values }, '', () => this.doFacetting(name));\n  };\n\n  onClickValidate = () => {\n    const selector = buildSelector(this.state.labels);\n    this.validateSelector(selector);\n  };\n\n  updateLabelState(name: string, updatedFields: Partial<SelectableLabel>, status = '', cb?: () => void) {\n    this.setState((state) => {\n      const labels: SelectableLabel[] = state.labels.map((label) => {\n        if (label.name === name) {\n          return { ...label, ...updatedFields };\n        }\n        return label;\n      });\n      // New status overrides errors\n      const error = status ? '' : state.error;\n      return { labels, status, error, validationStatus: '' };\n    }, cb);\n  }\n\n  componentDidMount() {\n    const { languageProvider, lastUsedLabels } = this.props;\n    if (languageProvider) {\n      const selectedLabels: string[] = lastUsedLabels;\n      languageProvider.start().then(() => {\n        let rawLabels: string[] = languageProvider.getLabelKeys();\n        // Get metrics\n        this.fetchValues(METRIC_LABEL, EMPTY_SELECTOR);\n        // Auto-select previously selected labels\n        const labels: SelectableLabel[] = rawLabels.map((label, i, arr) => ({\n          name: label,\n          selected: selectedLabels.includes(label),\n          loading: false,\n        }));\n        // Pre-fetch values for selected labels\n        this.setState({ labels }, () => {\n          this.state.labels.forEach((label) => {\n            if (label.selected) {\n              this.fetchValues(label.name, EMPTY_SELECTOR);\n            }\n          });\n        });\n      });\n    }\n  }\n\n  doFacettingForLabel(name: string) {\n    const label = this.state.labels.find((l) => l.name === name);\n    if (!label) {\n      return;\n    }\n    const selectedLabels = this.state.labels.filter((label) => label.selected).map((label) => label.name);\n    this.props.storeLastUsedLabels(selectedLabels);\n    if (label.selected) {\n      // Refetch values for newly selected label...\n      if (!label.values) {\n        this.fetchValues(name, buildSelector(this.state.labels));\n      }\n    } else {\n      // Only need to facet when deselecting labels\n      this.doFacetting();\n    }\n  }\n\n  doFacetting = (lastFacetted?: string) => {\n    const selector = buildSelector(this.state.labels);\n    if (selector === EMPTY_SELECTOR) {\n      // Clear up facetting\n      const labels: SelectableLabel[] = this.state.labels.map((label) => {\n        return { ...label, facets: 0, values: undefined, hidden: false };\n      });\n      this.setState({ labels }, () => {\n        // Get fresh set of values\n        this.state.labels.forEach(\n          (label) => (label.selected || label.name === METRIC_LABEL) && this.fetchValues(label.name, selector)\n        );\n      });\n    } else {\n      // Do facetting\n      this.fetchSeries(selector, lastFacetted);\n    }\n  };\n\n  async fetchValues(name: string, selector: string) {\n    const { languageProvider } = this.props;\n    this.updateLabelState(name, { loading: true }, `Fetching values for ${name}`);\n    try {\n      let rawValues = await languageProvider.getLabelValues(name);\n      // If selector changed, clear loading state and discard result by returning early\n      if (selector !== buildSelector(this.state.labels)) {\n        this.updateLabelState(name, { loading: false });\n        return;\n      }\n      const values: FacettableValue[] = [];\n      const { metricsMetadata } = languageProvider;\n      for (const labelValue of rawValues) {\n        const value: FacettableValue = { name: labelValue };\n        // Adding type/help text to metrics\n        if (name === METRIC_LABEL && metricsMetadata) {\n          const meta = metricsMetadata[labelValue];\n          if (meta) {\n            value.details = `(${meta.type}) ${meta.help}`;\n          }\n        }\n        values.push(value);\n      }\n      this.updateLabelState(name, { values, loading: false });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async fetchSeries(selector: string, lastFacetted?: string) {\n    const { languageProvider } = this.props;\n    if (lastFacetted) {\n      this.updateLabelState(lastFacetted, { loading: true }, `Facetting labels for ${selector}`);\n    }\n    try {\n      const possibleLabels = await languageProvider.fetchSeriesLabels(selector, true);\n      // If selector changed, clear loading state and discard result by returning early\n      if (selector !== buildSelector(this.state.labels)) {\n        if (lastFacetted) {\n          this.updateLabelState(lastFacetted, { loading: false });\n        }\n        return;\n      }\n      if (Object.keys(possibleLabels).length === 0) {\n        this.setState({ error: `Empty results, no matching label for ${selector}` });\n        return;\n      }\n      const labels: SelectableLabel[] = facetLabels(this.state.labels, possibleLabels, lastFacetted);\n      this.setState({ labels, error: '' });\n      if (lastFacetted) {\n        this.updateLabelState(lastFacetted, { loading: false });\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async validateSelector(selector: string) {\n    const { languageProvider } = this.props;\n    this.setState({ validationStatus: `Validating selector ${selector}`, error: '' });\n    const streams = await languageProvider.fetchSeries(selector);\n    this.setState({ validationStatus: `Selector is valid (${streams.length} series found)` });\n  }\n\n  render() {\n    const { theme } = this.props;\n    const { labels, labelSearchTerm, metricSearchTerm, status, error, validationStatus, valueSearchTerm } = this.state;\n    const styles = getStyles(theme);\n    if (labels.length === 0) {\n      return (\n        <div className={styles.wrapper}>\n          <LoadingPlaceholder text=\"Loading labels...\" />\n        </div>\n      );\n    }\n\n    // Filter metrics\n    let metrics = labels.find((label) => label.name === METRIC_LABEL);\n    if (metrics && metricSearchTerm) {\n      metrics = {\n        ...metrics,\n        values: metrics.values?.filter((value) => value.selected || value.name.includes(metricSearchTerm)),\n      };\n    }\n\n    // Filter labels\n    let nonMetricLabels = labels.filter((label) => !label.hidden && label.name !== METRIC_LABEL);\n    if (labelSearchTerm) {\n      nonMetricLabels = nonMetricLabels.filter((label) => label.selected || label.name.includes(labelSearchTerm));\n    }\n\n    // Filter non-metric label values\n    let selectedLabels = nonMetricLabels.filter((label) => label.selected && label.values);\n    if (valueSearchTerm) {\n      selectedLabels = selectedLabels.map((label) => ({\n        ...label,\n        values: label.values?.filter((value) => value.selected || value.name.includes(valueSearchTerm)),\n      }));\n    }\n    const selector = buildSelector(this.state.labels);\n    const empty = selector === EMPTY_SELECTOR;\n    const metricCount = metrics?.values?.length || 0;\n\n    return (\n      <div className={styles.wrapper}>\n        <HorizontalGroup align=\"flex-start\" spacing=\"lg\">\n          <div>\n            <div className={styles.section}>\n              <Label description=\"Once a metric is selected only possible labels are shown.\">1. Select a metric</Label>\n              <div>\n                <Input\n                  onChange={this.onChangeMetricSearch}\n                  aria-label=\"Filter expression for metric\"\n                  value={metricSearchTerm}\n                />\n              </div>\n              <div role=\"list\" className={styles.valueListWrapper}>\n                <FixedSizeList\n                  height={Math.min(450, metricCount * LIST_ITEM_SIZE)}\n                  itemCount={metricCount}\n                  itemSize={LIST_ITEM_SIZE}\n                  itemKey={(i) => (metrics!.values as FacettableValue[])[i].name}\n                  width={300}\n                  className={styles.valueList}\n                >\n                  {({ index, style }) => {\n                    const value = metrics?.values?.[index];\n                    if (!value) {\n                      return null;\n                    }\n                    return (\n                      <div style={style}>\n                        <PromLabel\n                          name={metrics!.name}\n                          value={value?.name}\n                          title={value.details}\n                          active={value?.selected}\n                          onClick={this.onClickMetric}\n                          searchTerm={metricSearchTerm}\n                        />\n                      </div>\n                    );\n                  }}\n                </FixedSizeList>\n              </div>\n            </div>\n          </div>\n\n          <div>\n            <div className={styles.section}>\n              <Label description=\"Once label values are selected, only possible label combinations are shown.\">\n                2. Select labels to search in\n              </Label>\n              <div>\n                <Input\n                  onChange={this.onChangeLabelSearch}\n                  aria-label=\"Filter expression for label\"\n                  value={labelSearchTerm}\n                />\n              </div>\n              {/* Using fixed height here to prevent jumpy layout */}\n              <div className={styles.list} style={{ height: 120 }}>\n                {nonMetricLabels.map((label) => (\n                  <PromLabel\n                    key={label.name}\n                    name={label.name}\n                    loading={label.loading}\n                    active={label.selected}\n                    hidden={label.hidden}\n                    facets={label.facets}\n                    onClick={this.onClickLabel}\n                    searchTerm={labelSearchTerm}\n                  />\n                ))}\n              </div>\n            </div>\n            <div className={styles.section}>\n              <Label description=\"Use the search field to find values across selected labels.\">\n                3. Select (multiple) values for your labels\n              </Label>\n              <div>\n                <Input\n                  onChange={this.onChangeValueSearch}\n                  aria-label=\"Filter expression for label values\"\n                  value={valueSearchTerm}\n                />\n              </div>\n              <div className={styles.valueListArea} ref={this.valueListsRef}>\n                {selectedLabels.map((label) => (\n                  <div\n                    role=\"list\"\n                    key={label.name}\n                    aria-label={`Values for ${label.name}`}\n                    className={styles.valueListWrapper}\n                  >\n                    <div className={styles.valueTitle}>\n                      <PromLabel\n                        name={label.name}\n                        loading={label.loading}\n                        active={label.selected}\n                        hidden={label.hidden}\n                        //If no facets, we want to show number of all label values\n                        facets={label.facets || label.values?.length}\n                        onClick={this.onClickLabel}\n                      />\n                    </div>\n                    <FixedSizeList\n                      height={Math.min(200, LIST_ITEM_SIZE * (label.values?.length || 0))}\n                      itemCount={label.values?.length || 0}\n                      itemSize={28}\n                      itemKey={(i) => (label.values as FacettableValue[])[i].name}\n                      width={200}\n                      className={styles.valueList}\n                    >\n                      {({ index, style }) => {\n                        const value = label.values?.[index];\n                        if (!value) {\n                          return null;\n                        }\n                        return (\n                          <div style={style}>\n                            <PromLabel\n                              name={label.name}\n                              value={value?.name}\n                              active={value?.selected}\n                              onClick={this.onClickValue}\n                              searchTerm={valueSearchTerm}\n                            />\n                          </div>\n                        );\n                      }}\n                    </FixedSizeList>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </HorizontalGroup>\n\n        <div className={styles.section}>\n          <Label>4. Resulting selector</Label>\n          <div aria-label=\"selector\" className={styles.selector}>\n            {selector}\n          </div>\n          {validationStatus && <div className={styles.validationStatus}>{validationStatus}</div>}\n          <HorizontalGroup>\n            <Button aria-label=\"Use selector for query button\" disabled={empty} onClick={this.onClickRunQuery}>\n              Use query\n            </Button>\n            <Button\n              aria-label=\"Use selector as metrics button\"\n              variant=\"secondary\"\n              disabled={empty}\n              onClick={this.onClickRunRateQuery}\n            >\n              Use as rate query\n            </Button>\n            <Button\n              aria-label=\"Validate submit button\"\n              variant=\"secondary\"\n              disabled={empty}\n              onClick={this.onClickValidate}\n            >\n              Validate selector\n            </Button>\n            <Button aria-label=\"Selector clear button\" variant=\"secondary\" onClick={this.onClickClear}>\n              Clear\n            </Button>\n            <div className={cx(styles.status, (status || error) && styles.statusShowing)}>\n              <span className={error ? styles.error : ''}>{error || status}</span>\n            </div>\n          </HorizontalGroup>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport const PrometheusMetricsBrowser = withTheme(UnthemedPrometheusMetricsBrowser);\n","import React, { Suspense } from 'react';\n\nimport { Props } from './MonacoQueryFieldProps';\n\nconst Field = React.lazy(() => import(/* webpackChunkName: \"prom-query-field\" */ './MonacoQueryField'));\n\nexport const MonacoQueryFieldLazy = (props: Props) => {\n  return (\n    <Suspense fallback={null}>\n      <Field {...props} />\n    </Suspense>\n  );\n};\n","import React, { useRef } from 'react';\n\nimport { MonacoQueryFieldLazy } from './MonacoQueryFieldLazy';\nimport { Props as MonacoProps } from './MonacoQueryFieldProps';\n\ntype Props = Omit<MonacoProps, 'onRunQuery' | 'onBlur'> & {\n  onChange: (query: string) => void;\n  onRunQuery: () => void;\n  runQueryOnBlur: boolean;\n};\n\nexport const MonacoQueryFieldWrapper = (props: Props) => {\n  const lastRunValueRef = useRef<string | null>(null);\n  const { runQueryOnBlur, onRunQuery, onChange, ...rest } = props;\n\n  const handleRunQuery = (value: string) => {\n    lastRunValueRef.current = value;\n    onChange(value);\n    onRunQuery();\n  };\n\n  const handleBlur = (value: string) => {\n    if (runQueryOnBlur) {\n      // run handleRunQuery only if the current value is different from the last-time-executed value\n      if (value !== lastRunValueRef.current) {\n        handleRunQuery(value);\n      }\n    } else {\n      onChange(value);\n    }\n  };\n\n  /**\n   * Handles changes without running any queries\n   * @param value\n   */\n  const handleChange = (value: string) => {\n    onChange(value);\n  };\n\n  return <MonacoQueryFieldLazy onChange={handleChange} onRunQuery={handleRunQuery} onBlur={handleBlur} {...rest} />;\n};\n","import { LanguageMap, languages as prismLanguages } from 'prismjs';\nimport React, { ReactNode } from 'react';\nimport { Plugin } from 'slate';\nimport { Editor } from 'slate-react';\n\nimport { CoreApp, isDataFrame, QueryEditorProps, QueryHint, TimeRange, toLegacyResponseData } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime/src';\nimport {\n  BracesPlugin,\n  DOMUtil,\n  Icon,\n  SlatePrism,\n  SuggestionsState,\n  TypeaheadInput,\n  TypeaheadOutput,\n} from '@grafana/ui';\nimport { LocalStorageValueProvider } from 'app/core/components/LocalStorageValueProvider';\nimport {\n  CancelablePromise,\n  isCancelablePromiseRejection,\n  makePromiseCancelable,\n} from 'app/core/utils/CancelablePromise';\n\nimport { PrometheusDatasource } from '../datasource';\nimport { roundMsToMin } from '../language_utils';\nimport { PromOptions, PromQuery } from '../types';\n\nimport { PrometheusMetricsBrowser } from './PrometheusMetricsBrowser';\nimport { MonacoQueryFieldWrapper } from './monaco-query-field/MonacoQueryFieldWrapper';\n\nexport const RECORDING_RULES_GROUP = '__recording_rules__';\nconst LAST_USED_LABELS_KEY = 'grafana.datasources.prometheus.browser.labels';\n\nfunction getChooserText(metricsLookupDisabled: boolean, hasSyntax: boolean, hasMetrics: boolean) {\n  if (metricsLookupDisabled) {\n    return '(Disabled)';\n  }\n\n  if (!hasSyntax) {\n    return 'Loading metrics...';\n  }\n\n  if (!hasMetrics) {\n    return '(No metrics found)';\n  }\n\n  return 'Metrics browser';\n}\n\nexport function willApplySuggestion(suggestion: string, { typeaheadContext, typeaheadText }: SuggestionsState): string {\n  // Modify suggestion based on context\n  switch (typeaheadContext) {\n    case 'context-labels': {\n      const nextChar = DOMUtil.getNextCharacter();\n      if (!nextChar || nextChar === '}' || nextChar === ',') {\n        suggestion += '=';\n      }\n      break;\n    }\n\n    case 'context-label-values': {\n      // Always add quotes and remove existing ones instead\n      if (!typeaheadText.match(/^(!?=~?\"|\")/)) {\n        suggestion = `\"${suggestion}`;\n      }\n      if (DOMUtil.getNextCharacter() !== '\"') {\n        suggestion = `${suggestion}\"`;\n      }\n      break;\n    }\n\n    default:\n  }\n  return suggestion;\n}\n\ninterface PromQueryFieldProps extends QueryEditorProps<PrometheusDatasource, PromQuery, PromOptions> {\n  ExtraFieldElement?: ReactNode;\n  'data-testid'?: string;\n}\n\ninterface PromQueryFieldState {\n  labelBrowserVisible: boolean;\n  syntaxLoaded: boolean;\n  hint: QueryHint | null;\n}\n\nclass PromQueryField extends React.PureComponent<PromQueryFieldProps, PromQueryFieldState> {\n  plugins: Array<Plugin<Editor>>;\n  declare languageProviderInitializationPromise: CancelablePromise<any>;\n\n  constructor(props: PromQueryFieldProps, context: React.Context<any>) {\n    super(props, context);\n\n    this.plugins = [\n      BracesPlugin(),\n      SlatePrism(\n        {\n          onlyIn: (node: any) => node.type === 'code_block',\n          getSyntax: (node: any) => 'promql',\n        },\n        { ...(prismLanguages as LanguageMap), promql: this.props.datasource.languageProvider.syntax }\n      ),\n    ];\n\n    this.state = {\n      labelBrowserVisible: false,\n      syntaxLoaded: false,\n      hint: null,\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.datasource.languageProvider) {\n      this.refreshMetrics();\n    }\n    this.refreshHint();\n  }\n\n  componentWillUnmount() {\n    if (this.languageProviderInitializationPromise) {\n      this.languageProviderInitializationPromise.cancel();\n    }\n  }\n\n  componentDidUpdate(prevProps: PromQueryFieldProps) {\n    const {\n      data,\n      datasource: { languageProvider },\n      range,\n    } = this.props;\n\n    if (languageProvider !== prevProps.datasource.languageProvider) {\n      // We reset this only on DS change so we do not flesh loading state on every rangeChange which happens on every\n      // query run if using relative range.\n      this.setState({\n        syntaxLoaded: false,\n      });\n    }\n\n    const changedRangeToRefresh = this.rangeChangedToRefresh(range, prevProps.range);\n    // We want to refresh metrics when language provider changes and/or when range changes (we round up intervals to a minute)\n    if (languageProvider !== prevProps.datasource.languageProvider || changedRangeToRefresh) {\n      this.refreshMetrics();\n    }\n\n    if (data && prevProps.data && prevProps.data.series !== data.series) {\n      this.refreshHint();\n    }\n  }\n\n  refreshHint = () => {\n    const { datasource, query, data } = this.props;\n    const initHints = datasource.getInitHints();\n    const initHint = initHints.length > 0 ? initHints[0] : null;\n\n    if (!data || data.series.length === 0) {\n      this.setState({\n        hint: initHint,\n      });\n      return;\n    }\n\n    const result = isDataFrame(data.series[0]) ? data.series.map(toLegacyResponseData) : data.series;\n    const queryHints = datasource.getQueryHints(query, result);\n    let queryHint = queryHints.length > 0 ? queryHints[0] : null;\n\n    this.setState({ hint: queryHint ?? initHint });\n  };\n\n  refreshMetrics = async () => {\n    const {\n      datasource: { languageProvider },\n    } = this.props;\n\n    this.languageProviderInitializationPromise = makePromiseCancelable(languageProvider.start());\n\n    try {\n      const remainingTasks = await this.languageProviderInitializationPromise.promise;\n      await Promise.all(remainingTasks);\n      this.onUpdateLanguage();\n    } catch (err) {\n      if (isCancelablePromiseRejection(err) && err.isCanceled) {\n        // do nothing, promise was canceled\n      } else {\n        throw err;\n      }\n    }\n  };\n\n  rangeChangedToRefresh(range?: TimeRange, prevRange?: TimeRange): boolean {\n    if (range && prevRange) {\n      const sameMinuteFrom = roundMsToMin(range.from.valueOf()) === roundMsToMin(prevRange.from.valueOf());\n      const sameMinuteTo = roundMsToMin(range.to.valueOf()) === roundMsToMin(prevRange.to.valueOf());\n      // If both are same, don't need to refresh.\n      return !(sameMinuteFrom && sameMinuteTo);\n    }\n    return false;\n  }\n\n  /**\n   * TODO #33976: Remove this, add histogram group (query = `histogram_quantile(0.95, sum(rate(${metric}[5m])) by (le))`;)\n   */\n  onChangeLabelBrowser = (selector: string) => {\n    this.onChangeQuery(selector, true);\n    this.setState({ labelBrowserVisible: false });\n  };\n\n  onChangeQuery = (value: string, override?: boolean) => {\n    // Send text change to parent\n    const { query, onChange, onRunQuery } = this.props;\n    if (onChange) {\n      const nextQuery: PromQuery = { ...query, expr: value };\n      onChange(nextQuery);\n\n      if (override && onRunQuery) {\n        onRunQuery();\n      }\n    }\n  };\n\n  onClickChooserButton = () => {\n    this.setState((state) => ({ labelBrowserVisible: !state.labelBrowserVisible }));\n\n    reportInteraction('user_grafana_prometheus_metrics_browser_clicked', {\n      editorMode: this.state.labelBrowserVisible ? 'metricViewClosed' : 'metricViewOpen',\n      app: this.props?.app ?? '',\n    });\n  };\n\n  onClickHintFix = () => {\n    const { datasource, query, onChange, onRunQuery } = this.props;\n    const { hint } = this.state;\n    if (hint?.fix?.action) {\n      onChange(datasource.modifyQuery(query, hint.fix.action));\n    }\n    onRunQuery();\n  };\n\n  onUpdateLanguage = () => {\n    const {\n      datasource: { languageProvider },\n    } = this.props;\n    const { metrics } = languageProvider;\n\n    if (!metrics) {\n      return;\n    }\n\n    this.setState({ syntaxLoaded: true });\n  };\n\n  onTypeahead = async (typeahead: TypeaheadInput): Promise<TypeaheadOutput> => {\n    const {\n      datasource: { languageProvider },\n    } = this.props;\n\n    if (!languageProvider) {\n      return { suggestions: [] };\n    }\n\n    const { history } = this.props;\n    const { prefix, text, value, wrapperClasses, labelKey } = typeahead;\n\n    const result = await languageProvider.provideCompletionItems(\n      { text, value, prefix, wrapperClasses, labelKey },\n      { history }\n    );\n\n    return result;\n  };\n\n  render() {\n    const {\n      datasource,\n      datasource: { languageProvider },\n      query,\n      ExtraFieldElement,\n      history = [],\n    } = this.props;\n\n    const { labelBrowserVisible, syntaxLoaded, hint } = this.state;\n    const hasMetrics = languageProvider.metrics.length > 0;\n    const chooserText = getChooserText(datasource.lookupsDisabled, syntaxLoaded, hasMetrics);\n    const buttonDisabled = !(syntaxLoaded && hasMetrics);\n\n    return (\n      <LocalStorageValueProvider<string[]> storageKey={LAST_USED_LABELS_KEY} defaultValue={[]}>\n        {(lastUsedLabels, onLastUsedLabelsSave, onLastUsedLabelsDelete) => {\n          return (\n            <>\n              <div\n                className=\"gf-form-inline gf-form-inline--xs-view-flex-column flex-grow-1\"\n                data-testid={this.props['data-testid']}\n              >\n                <button\n                  className=\"gf-form-label query-keyword pointer\"\n                  onClick={this.onClickChooserButton}\n                  disabled={buttonDisabled}\n                  type=\"button\"\n                >\n                  {chooserText}\n                  <Icon name={labelBrowserVisible ? 'angle-down' : 'angle-right'} />\n                </button>\n\n                <div className=\"gf-form gf-form--grow flex-shrink-1 min-width-15\">\n                  <MonacoQueryFieldWrapper\n                    runQueryOnBlur={this.props.app !== CoreApp.Explore}\n                    languageProvider={languageProvider}\n                    history={history}\n                    onChange={this.onChangeQuery}\n                    onRunQuery={this.props.onRunQuery}\n                    initialValue={query.expr ?? ''}\n                    placeholder=\"Enter a PromQL query…\"\n                  />\n                </div>\n              </div>\n              {labelBrowserVisible && (\n                <div className=\"gf-form\">\n                  <PrometheusMetricsBrowser\n                    languageProvider={languageProvider}\n                    onChange={this.onChangeLabelBrowser}\n                    lastUsedLabels={lastUsedLabels || []}\n                    storeLastUsedLabels={onLastUsedLabelsSave}\n                    deleteLastUsedLabels={onLastUsedLabelsDelete}\n                  />\n                </div>\n              )}\n\n              {ExtraFieldElement}\n              {hint ? (\n                <div className=\"query-row-break\">\n                  <div className=\"prom-query-field-info text-warning\">\n                    {hint.label}{' '}\n                    {hint.fix ? (\n                      <a className=\"text-link muted\" onClick={this.onClickHintFix}>\n                        {hint.fix.label}\n                      </a>\n                    ) : null}\n                  </div>\n                </div>\n              ) : null}\n            </>\n          );\n        }}\n      </LocalStorageValueProvider>\n    );\n  }\n}\n\nexport default PromQueryField;\n","// https://github.com/facebook/react/issues/5465\n\nexport interface CancelablePromise<T> {\n  promise: Promise<T>;\n  cancel: () => void;\n}\n\nexport interface CancelablePromiseRejection {\n  isCanceled: boolean;\n}\n\nexport function isCancelablePromiseRejection(promise: unknown): promise is CancelablePromiseRejection {\n  return typeof promise === 'object' && promise !== null && 'isCanceled' in promise;\n}\n\nexport const makePromiseCancelable = <T>(promise: Promise<T>): CancelablePromise<T> => {\n  let hasCanceled_ = false;\n\n  const wrappedPromise = new Promise<T>((resolve, reject) => {\n    const canceledPromiseRejection: CancelablePromiseRejection = { isCanceled: true };\n    promise.then((val) => (hasCanceled_ ? reject(canceledPromiseRejection) : resolve(val)));\n    promise.catch((error) => (hasCanceled_ ? reject(canceledPromiseRejection) : reject(error)));\n  });\n\n  return {\n    promise: wrappedPromise,\n    cancel() {\n      hasCanceled_ = true;\n    },\n  };\n};\n","import { map } from 'lodash';\nimport React, { PureComponent } from 'react';\n\n// Types\nimport { CoreApp, SelectableValue } from '@grafana/data';\nimport { InlineFormLabel, LegacyForms, Select } from '@grafana/ui';\n\nimport { PromQuery } from '../types';\n\nimport { PromExemplarField } from './PromExemplarField';\nimport PromLink from './PromLink';\nimport PromQueryField from './PromQueryField';\nimport { PromQueryEditorProps } from './types';\n\nconst { Switch } = LegacyForms;\n\nexport const FORMAT_OPTIONS: Array<SelectableValue<string>> = [\n  { label: 'Time series', value: 'time_series' },\n  { label: 'Table', value: 'table' },\n  { label: 'Heatmap', value: 'heatmap' },\n];\n\nexport const INTERVAL_FACTOR_OPTIONS: Array<SelectableValue<number>> = map([1, 2, 3, 4, 5, 10], (value: number) => ({\n  value,\n  label: '1/' + value,\n}));\n\ninterface State {\n  legendFormat?: string;\n  formatOption: SelectableValue<string>;\n  interval?: string;\n  intervalFactorOption: SelectableValue<number>;\n  instant: boolean;\n  exemplar: boolean;\n}\n\nexport class PromQueryEditor extends PureComponent<PromQueryEditorProps, State> {\n  // Query target to be modified and used for queries\n  query: PromQuery;\n\n  constructor(props: PromQueryEditorProps) {\n    super(props);\n    // Use default query to prevent undefined input values\n    const defaultQuery: Partial<PromQuery> = {\n      expr: '',\n      legendFormat: '',\n      interval: '',\n      // Set exemplar to false for alerting queries\n      exemplar: props.app === CoreApp.UnifiedAlerting ? false : true,\n    };\n    const query = Object.assign({}, defaultQuery, props.query);\n    this.query = query;\n    // Query target properties that are fully controlled inputs\n    this.state = {\n      // Fully controlled text inputs\n      interval: query.interval,\n      legendFormat: query.legendFormat,\n      // Select options\n      formatOption: FORMAT_OPTIONS.find((option) => option.value === query.format) || FORMAT_OPTIONS[0],\n      intervalFactorOption:\n        INTERVAL_FACTOR_OPTIONS.find((option) => option.value === query.intervalFactor) || INTERVAL_FACTOR_OPTIONS[0],\n      // Switch options\n      instant: Boolean(query.instant),\n      exemplar: Boolean(query.exemplar),\n    };\n  }\n\n  onFieldChange = (query: PromQuery, override?: any) => {\n    this.query.expr = query.expr;\n  };\n\n  onFormatChange = (option: SelectableValue<string>) => {\n    this.query.format = option.value;\n    this.setState({ formatOption: option }, this.onRunQuery);\n  };\n\n  onInstantChange = (e: React.SyntheticEvent<HTMLInputElement>) => {\n    const instant = (e.target as HTMLInputElement).checked;\n    this.query.instant = instant;\n    this.setState({ instant }, this.onRunQuery);\n  };\n\n  onIntervalChange = (e: React.SyntheticEvent<HTMLInputElement>) => {\n    const interval = e.currentTarget.value;\n    this.query.interval = interval;\n    this.setState({ interval });\n  };\n\n  onIntervalFactorChange = (option: SelectableValue<number>) => {\n    this.query.intervalFactor = option.value;\n    this.setState({ intervalFactorOption: option }, this.onRunQuery);\n  };\n\n  onLegendChange = (e: React.SyntheticEvent<HTMLInputElement>) => {\n    const legendFormat = e.currentTarget.value;\n    this.query.legendFormat = legendFormat;\n    this.setState({ legendFormat });\n  };\n\n  onExemplarChange = (isEnabled: boolean) => {\n    this.query.exemplar = isEnabled;\n    this.setState({ exemplar: isEnabled }, this.onRunQuery);\n  };\n\n  onRunQuery = () => {\n    const { query } = this;\n    // Change of query.hide happens outside of this component and is just passed as prop. We have to update it when running queries.\n    const { hide } = this.props.query;\n    this.props.onChange({ ...query, hide });\n    this.props.onRunQuery();\n  };\n\n  render() {\n    const { datasource, query, range, data } = this.props;\n    const { formatOption, instant, interval, intervalFactorOption, legendFormat } = this.state;\n    //We want to hide exemplar field for unified alerting as exemplars in alerting don't make sense and are source of confusion\n    const showExemplarField = this.props.app !== CoreApp.UnifiedAlerting;\n\n    return (\n      <PromQueryField\n        datasource={datasource}\n        query={query}\n        range={range}\n        onRunQuery={this.onRunQuery}\n        onChange={this.onFieldChange}\n        history={[]}\n        data={data}\n        data-testid={testIds.editor}\n        ExtraFieldElement={\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineFormLabel\n                width={7}\n                tooltip=\"Controls the name of the time series, using name or pattern. For example\n        {{hostname}} will be replaced with label value for the label hostname.\"\n              >\n                Legend\n              </InlineFormLabel>\n              <input\n                type=\"text\"\n                className=\"gf-form-input\"\n                placeholder=\"legend format\"\n                value={legendFormat}\n                onChange={this.onLegendChange}\n                onBlur={this.onRunQuery}\n              />\n            </div>\n\n            <div className=\"gf-form\">\n              <InlineFormLabel\n                width={7}\n                tooltip={\n                  <>\n                    An additional lower limit for the step parameter of the Prometheus query and for the{' '}\n                    <code>$__interval</code> and <code>$__rate_interval</code> variables. The limit is absolute and not\n                    modified by the &quot;Resolution&quot; setting.\n                  </>\n                }\n              >\n                Min step\n              </InlineFormLabel>\n              <input\n                type=\"text\"\n                className=\"gf-form-input width-8\"\n                aria-label=\"Set lower limit for the step parameter\"\n                placeholder={interval}\n                onChange={this.onIntervalChange}\n                onBlur={this.onRunQuery}\n                value={interval}\n              />\n            </div>\n\n            <div className=\"gf-form\">\n              <div className=\"gf-form-label\">Resolution</div>\n              <Select\n                aria-label=\"Select resolution\"\n                isSearchable={false}\n                options={INTERVAL_FACTOR_OPTIONS}\n                onChange={this.onIntervalFactorChange}\n                value={intervalFactorOption}\n              />\n            </div>\n\n            <div className=\"gf-form\">\n              <div className=\"gf-form-label width-7\">Format</div>\n              <Select\n                className=\"select-container\"\n                width={16}\n                isSearchable={false}\n                options={FORMAT_OPTIONS}\n                onChange={this.onFormatChange}\n                value={formatOption}\n                aria-label=\"Select format\"\n              />\n              <Switch label=\"Instant\" checked={instant} onChange={this.onInstantChange} />\n\n              <InlineFormLabel width={10} tooltip=\"Link to Graph in Prometheus\">\n                <PromLink\n                  datasource={datasource}\n                  query={this.query} // Use modified query\n                  panelData={data}\n                />\n              </InlineFormLabel>\n            </div>\n            {showExemplarField && (\n              <PromExemplarField\n                onChange={this.onExemplarChange}\n                datasource={datasource}\n                query={this.query}\n                data-testid={testIds.exemplar}\n              />\n            )}\n          </div>\n        }\n      />\n    );\n  }\n}\n\nexport const testIds = {\n  editor: 'prom-editor',\n  exemplar: 'exemplar-editor',\n};\n","import React, { useRef } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField } from '@grafana/experimental';\nimport { Select, AutoSizeInput } from '@grafana/ui';\n\nimport { LegendFormatMode } from '../../types';\n\nexport interface Props {\n  legendFormat: string | undefined;\n  onChange: (legendFormat: string) => void;\n  onRunQuery: () => void;\n}\n\nconst legendModeOptions = [\n  {\n    label: 'Auto',\n    value: LegendFormatMode.Auto,\n    description: 'Only includes unique labels',\n  },\n  { label: 'Verbose', value: LegendFormatMode.Verbose, description: 'All label names and values' },\n  { label: 'Custom', value: LegendFormatMode.Custom, description: 'Provide a naming template' },\n];\n\n/**\n * Tests for this component are on the parent level (PromQueryBuilderOptions).\n */\nexport const PromQueryLegendEditor = React.memo<Props>(({ legendFormat, onChange, onRunQuery }) => {\n  const mode = getLegendMode(legendFormat);\n  const inputRef = useRef<HTMLInputElement | null>(null);\n\n  const onLegendFormatChanged = (evt: React.FormEvent<HTMLInputElement>) => {\n    let newFormat = evt.currentTarget.value;\n    if (newFormat.length === 0) {\n      newFormat = LegendFormatMode.Auto;\n    }\n\n    if (newFormat !== legendFormat) {\n      onChange(newFormat);\n      onRunQuery();\n    }\n  };\n\n  const onLegendModeChanged = (value: SelectableValue<LegendFormatMode>) => {\n    switch (value.value!) {\n      case LegendFormatMode.Auto:\n        onChange(LegendFormatMode.Auto);\n        break;\n      case LegendFormatMode.Custom:\n        onChange('{{label_name}}');\n        setTimeout(() => {\n          inputRef.current?.focus();\n          inputRef.current?.setSelectionRange(2, 12, 'forward');\n        }, 10);\n        break;\n      case LegendFormatMode.Verbose:\n        onChange('');\n        break;\n    }\n    onRunQuery();\n  };\n\n  return (\n    <EditorField\n      label=\"Legend\"\n      tooltip=\"Series name override or template. Ex. {{hostname}} will be replaced with label value for hostname.\"\n    >\n      <>\n        {mode === LegendFormatMode.Custom && (\n          <AutoSizeInput\n            id=\"legendFormat\"\n            minWidth={22}\n            placeholder=\"auto\"\n            defaultValue={legendFormat}\n            onCommitChange={onLegendFormatChanged}\n            ref={inputRef}\n          />\n        )}\n        {mode !== LegendFormatMode.Custom && (\n          <Select\n            inputId=\"legend.mode\"\n            isSearchable={false}\n            placeholder=\"Select legend mode\"\n            options={legendModeOptions}\n            width={22}\n            onChange={onLegendModeChanged}\n            value={legendModeOptions.find((x) => x.value === mode)}\n          />\n        )}\n      </>\n    </EditorField>\n  );\n});\n\nPromQueryLegendEditor.displayName = 'PromQueryLegendEditor';\n\nfunction getLegendMode(legendFormat: string | undefined) {\n  // This special value means the new smart minimal series naming\n  if (legendFormat === LegendFormatMode.Auto) {\n    return LegendFormatMode.Auto;\n  }\n\n  // Missing or empty legend format is the old verbose behavior\n  if (legendFormat == null || legendFormat === '') {\n    return LegendFormatMode.Verbose;\n  }\n\n  return LegendFormatMode.Custom;\n}\n\nexport function getLegendModeLabel(legendFormat: string | undefined) {\n  const mode = getLegendMode(legendFormat);\n  if (mode !== LegendFormatMode.Custom) {\n    return legendModeOptions.find((x) => x.value === mode)?.label;\n  }\n  return legendFormat;\n}\n","import React, { SyntheticEvent } from 'react';\n\nimport { CoreApp, SelectableValue } from '@grafana/data';\nimport { EditorField, EditorRow, EditorSwitch } from '@grafana/experimental';\nimport { AutoSizeInput, RadioButtonGroup, Select } from '@grafana/ui';\n\nimport { getQueryTypeChangeHandler, getQueryTypeOptions } from '../../components/PromExploreExtraField';\nimport { FORMAT_OPTIONS, INTERVAL_FACTOR_OPTIONS } from '../../components/PromQueryEditor';\nimport { PromQuery } from '../../types';\nimport { QueryOptionGroup } from '../shared/QueryOptionGroup';\n\nimport { getLegendModeLabel, PromQueryLegendEditor } from './PromQueryLegendEditor';\n\nexport interface UIOptions {\n  exemplars: boolean;\n  type: boolean;\n  format: boolean;\n  minStep: boolean;\n  legend: boolean;\n  resolution: boolean;\n}\n\nexport interface Props {\n  query: PromQuery;\n  app?: CoreApp;\n  onChange: (update: PromQuery) => void;\n  onRunQuery: () => void;\n}\n\nexport const PromQueryBuilderOptions = React.memo<Props>(({ query, app, onChange, onRunQuery }) => {\n  const onChangeFormat = (value: SelectableValue<string>) => {\n    onChange({ ...query, format: value.value });\n    onRunQuery();\n  };\n\n  const onChangeStep = (evt: React.FormEvent<HTMLInputElement>) => {\n    onChange({ ...query, interval: evt.currentTarget.value });\n    onRunQuery();\n  };\n\n  const queryTypeOptions = getQueryTypeOptions(app === CoreApp.Explore || app === CoreApp.PanelEditor);\n  const onQueryTypeChange = getQueryTypeChangeHandler(query, onChange);\n\n  const onExemplarChange = (event: SyntheticEvent<HTMLInputElement>) => {\n    const isEnabled = event.currentTarget.checked;\n    onChange({ ...query, exemplar: isEnabled });\n    onRunQuery();\n  };\n\n  const onIntervalFactorChange = (value: SelectableValue<number>) => {\n    onChange({ ...query, intervalFactor: value.value });\n    onRunQuery();\n  };\n\n  const formatOption = FORMAT_OPTIONS.find((option) => option.value === query.format) || FORMAT_OPTIONS[0];\n  const queryTypeValue = getQueryTypeValue(query);\n  const queryTypeLabel = queryTypeOptions.find((x) => x.value === queryTypeValue)!.label;\n\n  return (\n    <EditorRow>\n      <QueryOptionGroup\n        title=\"Options\"\n        collapsedInfo={getCollapsedInfo(query, formatOption.label!, queryTypeLabel, app)}\n      >\n        <PromQueryLegendEditor\n          legendFormat={query.legendFormat}\n          onChange={(legendFormat) => onChange({ ...query, legendFormat })}\n          onRunQuery={onRunQuery}\n        />\n        <EditorField\n          label=\"Min step\"\n          tooltip={\n            <>\n              An additional lower limit for the step parameter of the Prometheus query and for the{' '}\n              <code>$__interval</code> and <code>$__rate_interval</code> variables.\n            </>\n          }\n        >\n          <AutoSizeInput\n            type=\"text\"\n            aria-label=\"Set lower limit for the step parameter\"\n            placeholder={'auto'}\n            minWidth={10}\n            onCommitChange={onChangeStep}\n            defaultValue={query.interval}\n          />\n        </EditorField>\n        <EditorField label=\"Format\">\n          <Select value={formatOption} allowCustomValue onChange={onChangeFormat} options={FORMAT_OPTIONS} />\n        </EditorField>\n        <EditorField label=\"Type\">\n          <RadioButtonGroup options={queryTypeOptions} value={queryTypeValue} onChange={onQueryTypeChange} />\n        </EditorField>\n        {shouldShowExemplarSwitch(query, app) && (\n          <EditorField label=\"Exemplars\">\n            <EditorSwitch value={query.exemplar || false} onChange={onExemplarChange} />\n          </EditorField>\n        )}\n        {query.intervalFactor && query.intervalFactor > 1 && (\n          <EditorField label=\"Resolution\">\n            <Select\n              aria-label=\"Select resolution\"\n              isSearchable={false}\n              options={INTERVAL_FACTOR_OPTIONS}\n              onChange={onIntervalFactorChange}\n              value={INTERVAL_FACTOR_OPTIONS.find((option) => option.value === query.intervalFactor)}\n            />\n          </EditorField>\n        )}\n      </QueryOptionGroup>\n    </EditorRow>\n  );\n});\n\nfunction shouldShowExemplarSwitch(query: PromQuery, app?: CoreApp) {\n  if (app === CoreApp.UnifiedAlerting || !query.range) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction getQueryTypeValue(query: PromQuery) {\n  return query.range && query.instant ? 'both' : query.instant ? 'instant' : 'range';\n}\n\nfunction getCollapsedInfo(query: PromQuery, formatOption: string, queryType: string, app?: CoreApp): string[] {\n  const items: string[] = [];\n\n  items.push(`Legend: ${getLegendModeLabel(query.legendFormat)}`);\n  items.push(`Format: ${formatOption}`);\n  items.push(`Step: ${query.interval ?? 'auto'}`);\n  items.push(`Type: ${queryType}`);\n\n  if (shouldShowExemplarSwitch(query, app)) {\n    if (query.exemplar) {\n      items.push(`Exemplars: true`);\n    } else {\n      items.push(`Exemplars: false`);\n    }\n  }\n  return items;\n}\n\nPromQueryBuilderOptions.displayName = 'PromQueryBuilderOptions';\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { testIds } from '../../components/PromQueryEditor';\nimport PromQueryField from '../../components/PromQueryField';\nimport { PromQueryEditorProps } from '../../components/types';\n\nimport { PromQueryBuilderExplained } from './PromQueryBuilderExplained';\n\ntype Props = PromQueryEditorProps & {\n  showExplain: boolean;\n};\n\nexport function PromQueryCodeEditor(props: Props) {\n  const { query, datasource, range, onRunQuery, onChange, data, app, showExplain } = props;\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.wrapper}>\n      <PromQueryField\n        datasource={datasource}\n        query={query}\n        range={range}\n        onRunQuery={onRunQuery}\n        onChange={onChange}\n        history={[]}\n        data={data}\n        data-testid={testIds.editor}\n        app={app}\n      />\n\n      {showExplain && <PromQueryBuilderExplained query={query.expr} />}\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    // This wrapper styling can be removed after the old PromQueryEditor is removed.\n    // This is removing margin bottom on the old legacy inline form styles\n    wrapper: css`\n      .gf-form {\n        margin-bottom: 0;\n      }\n    `,\n  };\n};\n","import React, { SyntheticEvent, useCallback, useEffect, useState } from 'react';\n\nimport { CoreApp, LoadingState } from '@grafana/data';\nimport { EditorHeader, EditorRows, FlexItem, InlineSelect, Space } from '@grafana/experimental';\nimport { reportInteraction } from '@grafana/runtime';\nimport { ConfirmModal, Button } from '@grafana/ui';\n\nimport { PromQueryEditorProps } from '../../components/types';\nimport { PromQuery } from '../../types';\nimport { promQueryModeller } from '../PromQueryModeller';\nimport { buildVisualQueryFromString } from '../parsing';\nimport { QueryEditorModeToggle } from '../shared/QueryEditorModeToggle';\nimport { QueryHeaderSwitch } from '../shared/QueryHeaderSwitch';\nimport { promQueryEditorExplainKey, promQueryEditorRawQueryKey, useFlag } from '../shared/hooks/useFlag';\nimport { QueryEditorMode } from '../shared/types';\nimport { changeEditorMode, getQueryWithDefaults } from '../state';\n\nimport { PromQueryBuilderContainer } from './PromQueryBuilderContainer';\nimport { PromQueryBuilderOptions } from './PromQueryBuilderOptions';\nimport { PromQueryCodeEditor } from './PromQueryCodeEditor';\n\ntype Props = PromQueryEditorProps;\n\nexport const PromQueryEditorSelector = React.memo<Props>((props) => {\n  const { onChange, onRunQuery, data, app } = props;\n  const [parseModalOpen, setParseModalOpen] = useState(false);\n  const [dataIsStale, setDataIsStale] = useState(false);\n  const { flag: explain, setFlag: setExplain } = useFlag(promQueryEditorExplainKey);\n  const { flag: rawQuery, setFlag: setRawQuery } = useFlag(promQueryEditorRawQueryKey, true);\n\n  const query = getQueryWithDefaults(props.query, app);\n  // This should be filled in from the defaults by now.\n  const editorMode = query.editorMode!;\n\n  const onEditorModeChange = useCallback(\n    (newMetricEditorMode: QueryEditorMode) => {\n      reportInteraction('user_grafana_prometheus_editor_mode_clicked', {\n        newEditor: newMetricEditorMode,\n        previousEditor: query.editorMode ?? '',\n        newQuery: !query.expr,\n        app: app ?? '',\n      });\n\n      if (newMetricEditorMode === QueryEditorMode.Builder) {\n        const result = buildVisualQueryFromString(query.expr || '');\n        // If there are errors, give user a chance to decide if they want to go to builder as that can lose some data.\n        if (result.errors.length) {\n          setParseModalOpen(true);\n          return;\n        }\n      }\n      changeEditorMode(query, newMetricEditorMode, onChange);\n    },\n    [onChange, query, app]\n  );\n\n  useEffect(() => {\n    setDataIsStale(false);\n  }, [data]);\n\n  const onQueryPreviewChange = (event: SyntheticEvent<HTMLInputElement>) => {\n    const isEnabled = event.currentTarget.checked;\n    setRawQuery(isEnabled);\n  };\n\n  const onChangeInternal = (query: PromQuery) => {\n    setDataIsStale(true);\n    onChange(query);\n  };\n\n  const onShowExplainChange = (e: SyntheticEvent<HTMLInputElement>) => {\n    setExplain(e.currentTarget.checked);\n  };\n\n  return (\n    <>\n      <ConfirmModal\n        isOpen={parseModalOpen}\n        title=\"Query parsing\"\n        body=\"There were errors while trying to parse the query. Continuing to visual builder may lose some parts of the query.\"\n        confirmText=\"Continue\"\n        onConfirm={() => {\n          changeEditorMode(query, QueryEditorMode.Builder, onChange);\n          setParseModalOpen(false);\n        }}\n        onDismiss={() => setParseModalOpen(false)}\n      />\n      <EditorHeader>\n        <InlineSelect\n          value={null}\n          placeholder=\"Query patterns\"\n          allowCustomValue\n          onChange={({ value }) => {\n            // TODO: Bit convoluted as we don't have access to visualQuery model here. Maybe would make sense to\n            //  move it inside the editor?\n            const result = buildVisualQueryFromString(query.expr || '');\n            result.query.operations = value?.operations!;\n            onChange({\n              ...query,\n              expr: promQueryModeller.renderQuery(result.query),\n            });\n          }}\n          options={promQueryModeller.getQueryPatterns().map((x) => ({ label: x.name, value: x }))}\n        />\n\n        <QueryHeaderSwitch label=\"Explain\" value={explain} onChange={onShowExplainChange} />\n        {editorMode === QueryEditorMode.Builder && (\n          <>\n            <QueryHeaderSwitch label=\"Raw query\" value={rawQuery} onChange={onQueryPreviewChange} />\n          </>\n        )}\n        <FlexItem grow={1} />\n        {app !== CoreApp.Explore && (\n          <Button\n            variant={dataIsStale ? 'primary' : 'secondary'}\n            size=\"sm\"\n            onClick={onRunQuery}\n            icon={data?.state === LoadingState.Loading ? 'fa fa-spinner' : undefined}\n            disabled={data?.state === LoadingState.Loading}\n          >\n            Run queries\n          </Button>\n        )}\n        <QueryEditorModeToggle mode={editorMode} onChange={onEditorModeChange} />\n      </EditorHeader>\n      <Space v={0.5} />\n      <EditorRows>\n        {editorMode === QueryEditorMode.Code && <PromQueryCodeEditor {...props} query={query} showExplain={explain} />}\n        {editorMode === QueryEditorMode.Builder && (\n          <PromQueryBuilderContainer\n            query={query}\n            datasource={props.datasource}\n            onChange={onChangeInternal}\n            onRunQuery={props.onRunQuery}\n            data={data}\n            showRawQuery={rawQuery}\n            showExplain={explain}\n          />\n        )}\n        <PromQueryBuilderOptions query={query} app={props.app} onChange={onChange} onRunQuery={onRunQuery} />\n      </EditorRows>\n    </>\n  );\n});\n\nPromQueryEditorSelector.displayName = 'PromQueryEditorSelector';\n","import React, { memo, useEffect } from 'react';\n\nimport { QueryEditorProps, CoreApp } from '@grafana/data';\n\nimport { PrometheusDatasource } from '../datasource';\nimport { PromQuery, PromOptions } from '../types';\n\nimport { PromExploreExtraField } from './PromExploreExtraField';\nimport PromQueryField from './PromQueryField';\n\nexport type Props = QueryEditorProps<PrometheusDatasource, PromQuery, PromOptions>;\n\nexport const PromExploreQueryEditor = memo((props: Props) => {\n  const { range, query, data, datasource, history, onChange, onRunQuery } = props;\n\n  // Setting default values\n  useEffect(() => {\n    if (query.expr === undefined) {\n      onChange({ ...query, expr: '' });\n    }\n    if (query.exemplar === undefined) {\n      onChange({ ...query, exemplar: true });\n    }\n\n    // Override query type to \"Both\" only for new queries (no query.expr).\n    if (!query.instant && !query.range && !query.expr) {\n      onChange({ ...query, instant: true, range: true });\n    }\n  }, [onChange, query]);\n\n  return (\n    <PromQueryField\n      app={CoreApp.Explore}\n      datasource={datasource}\n      query={query}\n      range={range}\n      onRunQuery={onRunQuery}\n      onChange={onChange}\n      onBlur={() => {}}\n      history={history}\n      data={data}\n      data-testid={testIds.editor}\n      ExtraFieldElement={\n        <PromExploreExtraField query={query} onChange={onChange} datasource={datasource} onRunQuery={onRunQuery} />\n      }\n    />\n  );\n});\n\nPromExploreQueryEditor.displayName = 'PromExploreQueryEditor';\n\nexport const testIds = {\n  editor: 'prom-editor-explore',\n};\n","import React from 'react';\n\nimport PromQueryField from './PromQueryField';\nimport { PromQueryEditorProps } from './types';\n\nexport function PromQueryEditorForAlerting(props: PromQueryEditorProps) {\n  const { datasource, query, range, data, onChange, onRunQuery } = props;\n\n  return (\n    <PromQueryField\n      datasource={datasource}\n      query={query}\n      onRunQuery={onRunQuery}\n      onChange={onChange}\n      history={[]}\n      range={range}\n      data={data}\n      data-testid={testIds.editor}\n    />\n  );\n}\n\nexport const testIds = {\n  editor: 'prom-editor-cloud-alerting',\n};\n","import React, { memo } from 'react';\n\nimport { CoreApp } from '@grafana/data';\nimport { config } from '@grafana/runtime';\n\nimport { PromQueryEditorSelector } from '../querybuilder/components/PromQueryEditorSelector';\n\nimport { PromExploreQueryEditor } from './PromExploreQueryEditor';\nimport { PromQueryEditor } from './PromQueryEditor';\nimport { PromQueryEditorForAlerting } from './PromQueryEditorForAlerting';\nimport { PromQueryEditorProps } from './types';\n\nexport function PromQueryEditorByApp(props: PromQueryEditorProps) {\n  const { app } = props;\n\n  switch (app) {\n    case CoreApp.CloudAlerting:\n      return <PromQueryEditorForAlerting {...props} />;\n    case CoreApp.Explore:\n      if (config.featureToggles.promQueryBuilder) {\n        return <PromQueryEditorSelector {...props} />;\n      }\n      return <PromExploreQueryEditor {...props} />;\n    default:\n      if (config.featureToggles.promQueryBuilder) {\n        return <PromQueryEditorSelector {...props} />;\n      }\n      return <PromQueryEditor {...props} />;\n  }\n}\n\nexport default memo(PromQueryEditorByApp);\n","import { SelectableValue } from '@grafana/data';\n\nexport enum AzureCloud {\n  Public = 'AzureCloud',\n  China = 'AzureChinaCloud',\n  USGovernment = 'AzureUSGovernment',\n  Germany = 'AzureGermanCloud',\n  None = '',\n}\n\nexport const KnownAzureClouds = [\n  { value: AzureCloud.Public, label: 'Azure' },\n  { value: AzureCloud.China, label: 'Azure China' },\n  { value: AzureCloud.USGovernment, label: 'Azure US Government' },\n  { value: AzureCloud.Germany, label: 'Azure Germany' },\n] as SelectableValue[];\n\nexport type AzureAuthType = 'msi' | 'clientsecret';\n\nexport type ConcealedSecret = symbol;\n\ninterface AzureCredentialsBase {\n  authType: AzureAuthType;\n  defaultSubscriptionId?: string;\n}\n\nexport interface AzureManagedIdentityCredentials extends AzureCredentialsBase {\n  authType: 'msi';\n}\n\nexport interface AzureClientSecretCredentials extends AzureCredentialsBase {\n  authType: 'clientsecret';\n  azureCloud?: string;\n  tenantId?: string;\n  clientId?: string;\n  clientSecret?: string | ConcealedSecret;\n}\n\nexport type AzureCredentials = AzureManagedIdentityCredentials | AzureClientSecretCredentials;\n\nexport function isCredentialsComplete(credentials: AzureCredentials): boolean {\n  switch (credentials.authType) {\n    case 'msi':\n      return true;\n    case 'clientsecret':\n      return !!(credentials.azureCloud && credentials.tenantId && credentials.clientId && credentials.clientSecret);\n  }\n}\n","import { DataSourceSettings } from '@grafana/data';\nimport { config } from '@grafana/runtime';\n\nimport { AzureCloud, AzureCredentials, ConcealedSecret } from './AzureCredentials';\n\nconst concealed: ConcealedSecret = Symbol('Concealed client secret');\n\nfunction getDefaultAzureCloud(): string {\n  return config.azure.cloud || AzureCloud.Public;\n}\n\nfunction getSecret(options: DataSourceSettings<any, any>): undefined | string | ConcealedSecret {\n  if (options.secureJsonFields.azureClientSecret) {\n    // The secret is concealed on server\n    return concealed;\n  } else {\n    const secret = options.secureJsonData?.azureClientSecret;\n    return typeof secret === 'string' && secret.length > 0 ? secret : undefined;\n  }\n}\n\nexport function hasCredentials(options: DataSourceSettings<any, any>): boolean {\n  return !!options.jsonData.azureCredentials;\n}\n\nexport function getDefaultCredentials(): AzureCredentials {\n  if (config.azure.managedIdentityEnabled) {\n    return { authType: 'msi' };\n  } else {\n    return { authType: 'clientsecret', azureCloud: getDefaultAzureCloud() };\n  }\n}\n\nexport function getCredentials(options: DataSourceSettings<any, any>): AzureCredentials {\n  const credentials = options.jsonData.azureCredentials as AzureCredentials | undefined;\n\n  // If no credentials saved, then return empty credentials\n  // of type based on whether the managed identity enabled\n  if (!credentials) {\n    return getDefaultCredentials();\n  }\n\n  switch (credentials.authType) {\n    case 'msi':\n      if (config.azure.managedIdentityEnabled) {\n        return {\n          authType: 'msi',\n        };\n      } else {\n        // If authentication type is managed identity but managed identities were disabled in Grafana config,\n        // then we should fallback to an empty app registration (client secret) configuration\n        return {\n          authType: 'clientsecret',\n          azureCloud: getDefaultAzureCloud(),\n        };\n      }\n    case 'clientsecret':\n      return {\n        authType: 'clientsecret',\n        azureCloud: credentials.azureCloud || getDefaultAzureCloud(),\n        tenantId: credentials.tenantId,\n        clientId: credentials.clientId,\n        clientSecret: getSecret(options),\n      };\n  }\n}\n\nexport function updateCredentials(\n  options: DataSourceSettings<any, any>,\n  credentials: AzureCredentials\n): DataSourceSettings<any, any> {\n  switch (credentials.authType) {\n    case 'msi':\n      if (!config.azure.managedIdentityEnabled) {\n        throw new Error('Managed Identity authentication is not enabled in Grafana config.');\n      }\n\n      options = {\n        ...options,\n        jsonData: {\n          ...options.jsonData,\n          azureCredentials: {\n            authType: 'msi',\n          },\n        },\n      };\n\n      return options;\n\n    case 'clientsecret':\n      options = {\n        ...options,\n        jsonData: {\n          ...options.jsonData,\n          azureCredentials: {\n            authType: 'clientsecret',\n            azureCloud: credentials.azureCloud || getDefaultAzureCloud(),\n            tenantId: credentials.tenantId,\n            clientId: credentials.clientId,\n          },\n        },\n        secureJsonData: {\n          ...options.secureJsonData,\n          azureClientSecret:\n            typeof credentials.clientSecret === 'string' && credentials.clientSecret.length > 0\n              ? credentials.clientSecret\n              : undefined,\n        },\n        secureJsonFields: {\n          ...options.secureJsonFields,\n          azureClientSecret: typeof credentials.clientSecret === 'symbol',\n        },\n      };\n\n      return options;\n  }\n}\n\nexport function setDefaultCredentials(options: DataSourceSettings<any, any>): Partial<DataSourceSettings<any, any>> {\n  return {\n    jsonData: {\n      ...options.jsonData,\n      azureCredentials: getDefaultCredentials(),\n    },\n  };\n}\n\nexport function resetCredentials(options: DataSourceSettings<any, any>): Partial<DataSourceSettings<any, any>> {\n  return {\n    jsonData: {\n      ...options.jsonData,\n      azureAuth: undefined,\n      azureCredentials: undefined,\n      azureEndpointResourceId: undefined,\n    },\n  };\n}\n","import React, { ChangeEvent, FunctionComponent, useEffect, useReducer, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { InlineFormLabel, Button } from '@grafana/ui/src/components';\nimport { Input } from '@grafana/ui/src/components/Forms/Legacy/Input/Input';\nimport { Select } from '@grafana/ui/src/components/Forms/Legacy/Select/Select';\n\nimport { AzureAuthType, AzureCredentials, isCredentialsComplete } from './AzureCredentials';\n\nexport interface Props {\n  managedIdentityEnabled: boolean;\n  credentials: AzureCredentials;\n  azureCloudOptions?: SelectableValue[];\n  onCredentialsChange: (updatedCredentials: AzureCredentials) => void;\n  getSubscriptions?: () => Promise<SelectableValue[]>;\n}\n\nconst authTypeOptions: Array<SelectableValue<AzureAuthType>> = [\n  {\n    value: 'msi',\n    label: 'Managed Identity',\n  },\n  {\n    value: 'clientsecret',\n    label: 'App Registration',\n  },\n];\n\nexport const AzureCredentialsForm: FunctionComponent<Props> = (props: Props) => {\n  const { credentials, azureCloudOptions, onCredentialsChange, getSubscriptions } = props;\n  const hasRequiredFields = isCredentialsComplete(credentials);\n\n  const [subscriptions, setSubscriptions] = useState<Array<SelectableValue<string>>>([]);\n  const [loadSubscriptionsClicked, onLoadSubscriptions] = useReducer((val) => val + 1, 0);\n  useEffect(() => {\n    if (!getSubscriptions || !hasRequiredFields) {\n      updateSubscriptions([]);\n      return;\n    }\n    let canceled = false;\n    getSubscriptions().then((result) => {\n      if (!canceled) {\n        updateSubscriptions(result, loadSubscriptionsClicked);\n      }\n    });\n    return () => {\n      canceled = true;\n    };\n    // This effect is intended to be called only once initially and on Load Subscriptions click\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadSubscriptionsClicked]);\n\n  const updateSubscriptions = (received: Array<SelectableValue<string>>, autoSelect = false) => {\n    setSubscriptions(received);\n    if (getSubscriptions) {\n      if (autoSelect && !credentials.defaultSubscriptionId && received.length > 0) {\n        // Selecting the default subscription if subscriptions received but no default subscription selected\n        onSubscriptionChange(received[0]);\n      } else if (credentials.defaultSubscriptionId) {\n        const found = received.find((opt) => opt.value === credentials.defaultSubscriptionId);\n        if (!found) {\n          // Unselecting the default subscription if it isn't found among the received subscriptions\n          onSubscriptionChange(undefined);\n        }\n      }\n    }\n  };\n\n  const onAuthTypeChange = (selected: SelectableValue<AzureAuthType>) => {\n    if (onCredentialsChange) {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        authType: selected.value || 'msi',\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onAzureCloudChange = (selected: SelectableValue<string>) => {\n    if (onCredentialsChange && credentials.authType === 'clientsecret') {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        azureCloud: selected.value,\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onTenantIdChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (onCredentialsChange && credentials.authType === 'clientsecret') {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        tenantId: event.target.value,\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onClientIdChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (onCredentialsChange && credentials.authType === 'clientsecret') {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        clientId: event.target.value,\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onClientSecretChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (onCredentialsChange && credentials.authType === 'clientsecret') {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        clientSecret: event.target.value,\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onClientSecretReset = () => {\n    if (onCredentialsChange && credentials.authType === 'clientsecret') {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        clientSecret: '',\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onSubscriptionChange = (selected: SelectableValue<string> | undefined) => {\n    if (onCredentialsChange) {\n      const updated: AzureCredentials = {\n        ...credentials,\n        defaultSubscriptionId: selected?.value,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  return (\n    <div className=\"gf-form-group\">\n      {props.managedIdentityEnabled && (\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel className=\"width-12\" tooltip=\"Choose the type of authentication to Azure services\">\n              Authentication\n            </InlineFormLabel>\n            <Select\n              className=\"width-15\"\n              value={authTypeOptions.find((opt) => opt.value === credentials.authType)}\n              options={authTypeOptions}\n              onChange={onAuthTypeChange}\n            />\n          </div>\n        </div>\n      )}\n      {credentials.authType === 'clientsecret' && (\n        <>\n          {azureCloudOptions && (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <InlineFormLabel className=\"width-12\" tooltip=\"Choose an Azure Cloud\">\n                  Azure Cloud\n                </InlineFormLabel>\n                <Select\n                  className=\"width-15\"\n                  value={azureCloudOptions.find((opt) => opt.value === credentials.azureCloud)}\n                  options={azureCloudOptions}\n                  onChange={onAzureCloudChange}\n                />\n              </div>\n            </div>\n          )}\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineFormLabel className=\"width-12\">Directory (tenant) ID</InlineFormLabel>\n              <div className=\"width-15\">\n                <Input\n                  className=\"width-30\"\n                  placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n                  value={credentials.tenantId || ''}\n                  onChange={onTenantIdChange}\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineFormLabel className=\"width-12\">Application (client) ID</InlineFormLabel>\n              <div className=\"width-15\">\n                <Input\n                  className=\"width-30\"\n                  placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n                  value={credentials.clientId || ''}\n                  onChange={onClientIdChange}\n                />\n              </div>\n            </div>\n          </div>\n          {typeof credentials.clientSecret === 'symbol' ? (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <InlineFormLabel htmlFor=\"azure-client-secret\" className=\"width-12\">\n                  Client Secret\n                </InlineFormLabel>\n                <Input id=\"azure-client-secret\" className=\"width-25\" placeholder=\"configured\" disabled={true} />\n              </div>\n              <div className=\"gf-form\">\n                <div className=\"max-width-30 gf-form-inline\">\n                  <Button variant=\"secondary\" type=\"button\" onClick={onClientSecretReset}>\n                    reset\n                  </Button>\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <InlineFormLabel className=\"width-12\">Client Secret</InlineFormLabel>\n                <div className=\"width-15\">\n                  <Input\n                    className=\"width-30\"\n                    placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n                    value={credentials.clientSecret || ''}\n                    onChange={onClientSecretChange}\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n        </>\n      )}\n      {getSubscriptions && (\n        <>\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineFormLabel className=\"width-12\">Default Subscription</InlineFormLabel>\n              <div className=\"width-25\">\n                <Select\n                  value={\n                    credentials.defaultSubscriptionId\n                      ? subscriptions.find((opt) => opt.value === credentials.defaultSubscriptionId)\n                      : undefined\n                  }\n                  options={subscriptions}\n                  onChange={onSubscriptionChange}\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <div className=\"max-width-30 gf-form-inline\">\n                <Button\n                  variant=\"secondary\"\n                  size=\"sm\"\n                  type=\"button\"\n                  onClick={onLoadSubscriptions}\n                  disabled={!hasRequiredFields}\n                >\n                  Load Subscriptions\n                </Button>\n              </div>\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default AzureCredentialsForm;\n","import React, { FunctionComponent, FormEvent, useMemo, useState } from 'react';\n\nimport { config } from '@grafana/runtime';\nimport { InlineField, InlineFieldRow, InlineSwitch, Input } from '@grafana/ui';\nimport { HttpSettingsBaseProps } from '@grafana/ui/src/components/DataSourceSettings/types';\n\nimport { KnownAzureClouds, AzureCredentials } from './AzureCredentials';\nimport { getCredentials, updateCredentials } from './AzureCredentialsConfig';\nimport { AzureCredentialsForm } from './AzureCredentialsForm';\n\nexport const AzureAuthSettings: FunctionComponent<HttpSettingsBaseProps> = (props: HttpSettingsBaseProps) => {\n  const { dataSourceConfig, onChange } = props;\n\n  const [overrideAudienceAllowed] = useState<boolean>(\n    config.featureToggles.prometheusAzureOverrideAudience || !!dataSourceConfig.jsonData.azureEndpointResourceId\n  );\n  const [overrideAudienceChecked, setOverrideAudienceChecked] = useState<boolean>(\n    !!dataSourceConfig.jsonData.azureEndpointResourceId\n  );\n\n  const credentials = useMemo(() => getCredentials(dataSourceConfig), [dataSourceConfig]);\n\n  const onCredentialsChange = (credentials: AzureCredentials): void => {\n    onChange(updateCredentials(dataSourceConfig, credentials));\n  };\n\n  const onOverrideAudienceChange = (ev: FormEvent<HTMLInputElement>): void => {\n    setOverrideAudienceChecked(ev.currentTarget.checked);\n    if (!ev.currentTarget.checked) {\n      onChange({\n        ...dataSourceConfig,\n        jsonData: { ...dataSourceConfig.jsonData, azureEndpointResourceId: undefined },\n      });\n    }\n  };\n\n  const onResourceIdChange = (ev: FormEvent<HTMLInputElement>): void => {\n    if (overrideAudienceChecked) {\n      onChange({\n        ...dataSourceConfig,\n        jsonData: { ...dataSourceConfig.jsonData, azureEndpointResourceId: ev.currentTarget.value },\n      });\n    }\n  };\n\n  return (\n    <>\n      <h6>Azure Authentication</h6>\n      <AzureCredentialsForm\n        managedIdentityEnabled={config.azure.managedIdentityEnabled}\n        credentials={credentials}\n        azureCloudOptions={KnownAzureClouds}\n        onCredentialsChange={onCredentialsChange}\n      />\n      {overrideAudienceAllowed && (\n        <>\n          <h6>Azure Configuration</h6>\n          <div className=\"gf-form-group\">\n            <InlineFieldRow>\n              <InlineField labelWidth={26} label=\"Override AAD audience\">\n                <InlineSwitch value={overrideAudienceChecked} onChange={onOverrideAudienceChange} />\n              </InlineField>\n            </InlineFieldRow>\n            {overrideAudienceChecked && (\n              <InlineFieldRow>\n                <InlineField labelWidth={26} label=\"Resource ID\">\n                  <Input\n                    className=\"width-30\"\n                    value={dataSourceConfig.jsonData.azureEndpointResourceId || ''}\n                    onChange={onResourceIdChange}\n                  />\n                </InlineField>\n              </InlineFieldRow>\n            )}\n          </div>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default AzureAuthSettings;\n","import { css } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { Button, InlineField, InlineSwitch, Input } from '@grafana/ui';\n\nimport { ExemplarTraceIdDestination } from '../types';\n\ntype Props = {\n  value: ExemplarTraceIdDestination;\n  onChange: (value: ExemplarTraceIdDestination) => void;\n  onDelete: () => void;\n};\n\nexport default function ExemplarSetting({ value, onChange, onDelete }: Props) {\n  const [isInternalLink, setIsInternalLink] = useState(Boolean(value.datasourceUid));\n\n  return (\n    <div className=\"gf-form-group\">\n      <InlineField label=\"Internal link\" labelWidth={24}>\n        <>\n          <InlineSwitch\n            value={isInternalLink}\n            aria-label={selectors.components.DataSource.Prometheus.configPage.internalLinkSwitch}\n            onChange={(ev) => setIsInternalLink(ev.currentTarget.checked)}\n          />\n          <Button\n            variant=\"destructive\"\n            title=\"Remove link\"\n            icon=\"times\"\n            onClick={(event) => {\n              event.preventDefault();\n              onDelete();\n            }}\n            className={css`\n              margin-left: 8px;\n            `}\n          />\n        </>\n      </InlineField>\n\n      {isInternalLink ? (\n        <InlineField\n          label=\"Data source\"\n          labelWidth={24}\n          tooltip=\"The data source the exemplar is going to navigate to.\"\n        >\n          <DataSourcePicker\n            tracing={true}\n            current={value.datasourceUid}\n            noDefault={true}\n            width={40}\n            onChange={(ds) =>\n              onChange({\n                ...value,\n                datasourceUid: ds.uid,\n                url: undefined,\n              })\n            }\n          />\n        </InlineField>\n      ) : (\n        <InlineField\n          label=\"URL\"\n          labelWidth={24}\n          tooltip=\"The URL of the trace backend the user would go to see its trace.\"\n        >\n          <Input\n            placeholder=\"https://example.com/${__value.raw}\"\n            spellCheck={false}\n            width={40}\n            value={value.url}\n            onChange={(event) =>\n              onChange({\n                ...value,\n                datasourceUid: undefined,\n                url: event.currentTarget.value,\n              })\n            }\n          />\n        </InlineField>\n      )}\n\n      <InlineField\n        label=\"URL Label\"\n        labelWidth={24}\n        tooltip=\"Use to override the button label on the exemplar traceID field.\"\n      >\n        <Input\n          placeholder=\"Go to example.com\"\n          spellCheck={false}\n          width={40}\n          value={value.urlDisplayLabel}\n          onChange={(event) =>\n            onChange({\n              ...value,\n              urlDisplayLabel: event.currentTarget.value,\n            })\n          }\n        />\n      </InlineField>\n      <InlineField\n        label=\"Label name\"\n        labelWidth={24}\n        tooltip=\"The name of the field in the labels object that should be used to get the traceID.\"\n      >\n        <Input\n          placeholder=\"traceID\"\n          spellCheck={false}\n          width={40}\n          value={value.name}\n          onChange={(event) =>\n            onChange({\n              ...value,\n              name: event.currentTarget.value,\n            })\n          }\n        />\n      </InlineField>\n    </div>\n  );\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Button } from '@grafana/ui';\n\nimport { ExemplarTraceIdDestination } from '../types';\n\nimport ExemplarSetting from './ExemplarSetting';\n\ntype Props = {\n  options?: ExemplarTraceIdDestination[];\n  onChange: (value: ExemplarTraceIdDestination[]) => void;\n};\n\nexport function ExemplarsSettings({ options, onChange }: Props) {\n  return (\n    <>\n      <h3 className=\"page-heading\">Exemplars</h3>\n\n      {options &&\n        options.map((option, index) => {\n          return (\n            <ExemplarSetting\n              key={index}\n              value={option}\n              onChange={(newField) => {\n                const newOptions = [...options];\n                newOptions.splice(index, 1, newField);\n                onChange(newOptions);\n              }}\n              onDelete={() => {\n                const newOptions = [...options];\n                newOptions.splice(index, 1);\n                onChange(newOptions);\n              }}\n            />\n          );\n        })}\n\n      <Button\n        variant=\"secondary\"\n        aria-label={selectors.components.DataSource.Prometheus.configPage.exemplarsAddButton}\n        className={css`\n          margin-bottom: 10px;\n        `}\n        icon=\"plus\"\n        onClick={(event) => {\n          event.preventDefault();\n          const newOptions = [...(options || []), { name: 'traceID' }];\n          onChange(newOptions);\n        }}\n      >\n        Add\n      </Button>\n    </>\n  );\n}\n","export const PromFlavorVersions: { [index: string]: Array<{ value?: string; label: string }> } = {\n  Prometheus: [\n    { value: undefined, label: 'Please select' },\n    { value: '2.0.0', label: '< 2.14.x' },\n    { value: '2.14.0', label: '2.14.x' },\n    { value: '2.15.0', label: '2.15.x' },\n    { value: '2.16.0', label: '2.16.x' },\n    { value: '2.17.0', label: '2.17.x' },\n    { value: '2.18.0', label: '2.18.x' },\n    { value: '2.19.0', label: '2.19.x' },\n    { value: '2.20.0', label: '2.20.x' },\n    { value: '2.21.0', label: '2.21.x' },\n    { value: '2.22.0', label: '2.22.x' },\n    { value: '2.23.0', label: '2.23.x' },\n    { value: '2.24.0', label: '2.24.x' },\n    { value: '2.25.0', label: '2.25.x' },\n    { value: '2.26.0', label: '2.26.x' },\n    { value: '2.27.0', label: '2.27.x' },\n    { value: '2.28.0', label: '2.28.x' },\n    { value: '2.29.0', label: '2.29.x' },\n    { value: '2.30.0', label: '2.30.x' },\n    { value: '2.31.0', label: '2.31.x' },\n    { value: '2.32.0', label: '2.32.x' },\n    { value: '2.33.0', label: '2.33.x' },\n    { value: '2.34.0', label: '2.34.x' },\n    { value: '2.35.0', label: '2.35.x' },\n    { value: '2.36.0', label: '2.36.x' },\n    { value: '2.37.0', label: '2.37.x' },\n    { value: '2.38.0', label: '2.38.x' },\n    { value: '2.39.0', label: '2.39.x' },\n    { value: '2.40.0', label: '2.40.x' },\n\n    // This value will be returned for future versions of prometheus until we add new entries to this object\n    { value: '2.40.1', label: '> 2.40.x' },\n  ],\n  Mimir: [\n    { value: undefined, label: 'Please select' },\n    { value: '2.0.0', label: '2.0.x' },\n    { value: '2.1.0', label: '2.1.x' },\n    { value: '2.2.0', label: '2.2.x' },\n    { value: '2.3.0', label: '2.3.x' },\n    { value: '2.4.0', label: '> 2.3.x' },\n  ],\n  Thanos: [\n    { value: undefined, label: 'Please select' },\n    { value: '0.0.0', label: '< 0.16.x' },\n    { value: '0.16.0', label: '0.16.x' },\n    { value: '0.17.0', label: '0.17.x' },\n    { value: '0.18.0', label: '0.18.x' },\n    { value: '0.19.0', label: '0.19.x' },\n    { value: '0.20.0', label: '0.20.x' },\n    { value: '0.21.0', label: '0.21.x' },\n    { value: '0.22.0', label: '0.22.x' },\n    { value: '0.23.0', label: '0.23.x' },\n    { value: '0.24.0', label: '0.24.x' },\n    { value: '0.25.0', label: '0.25.x' },\n    { value: '0.26.0', label: '0.26.x' },\n    { value: '0.27.0', label: '0.27.x' },\n    { value: '0.28.0', label: '0.28.x' },\n    { value: '0.29.0', label: '> 0.28.x' },\n  ],\n  Cortex: [\n    { value: undefined, label: 'Please select' },\n    { value: '0.0.0', label: '< 1.0.0' },\n    { value: '1.0.0', label: '1.0.0' },\n    { value: '1.1.0', label: '1.1.x' },\n    { value: '1.2.0', label: '1.2.x' },\n    { value: '1.3.0', label: '1.3.x' },\n    { value: '1.4.0', label: '1.4.x' },\n    { value: '1.5.0', label: '1.5.x' },\n    { value: '1.6.0', label: '1.6.x' },\n    { value: '1.7.0', label: '1.7.x' },\n    { value: '1.8.0', label: '1.8.x' },\n    { value: '1.9.0', label: '1.9.x' },\n    { value: '1.10.0', label: '1.10.x' },\n    { value: '1.11.0', label: '1.11.x' },\n    { value: '1.13.0', label: '1.13.x' },\n    { value: '1.14.0', label: '> 1.13.x' },\n  ],\n};\n","import React, { SyntheticEvent } from 'react';\nimport semver from 'semver/preload';\n\nimport {\n  DataSourcePluginOptionsEditorProps,\n  DataSourceSettings as DataSourceSettingsType,\n  onUpdateDatasourceJsonDataOptionChecked,\n  SelectableValue,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime/src';\nimport {\n  EventsWithValidation,\n  InlineField,\n  InlineFormLabel,\n  InlineSwitch,\n  LegacyForms,\n  regexValidation,\n} from '@grafana/ui';\n\nimport { useUpdateDatasource } from '../../../../features/datasources/state';\nimport { PromApplication, PromBuildInfoResponse } from '../../../../types/unified-alerting-dto';\nimport { PromOptions } from '../types';\n\nimport { ExemplarsSettings } from './ExemplarsSettings';\nimport { PromFlavorVersions } from './PromFlavorVersions';\n\nconst { Select, Input, FormField } = LegacyForms;\n\nconst httpOptions = [\n  { value: 'POST', label: 'POST' },\n  { value: 'GET', label: 'GET' },\n];\n\ntype PrometheusSelectItemsType = Array<{ value: PromApplication; label: PromApplication }>;\n\nconst prometheusFlavorSelectItems: PrometheusSelectItemsType = [\n  { value: PromApplication.Prometheus, label: PromApplication.Prometheus },\n  { value: PromApplication.Cortex, label: PromApplication.Cortex },\n  { value: PromApplication.Mimir, label: PromApplication.Mimir },\n  { value: PromApplication.Thanos, label: PromApplication.Thanos },\n];\n\ntype Props = Pick<DataSourcePluginOptionsEditorProps<PromOptions>, 'options' | 'onOptionsChange'>;\n\n/**\n * Returns the closest version to what the user provided that we have in our PromFlavorVersions for the currently selected flavor\n * Bugs: It will only reject versions that are a major release apart, so Mimir 2.x might get selected for Prometheus 2.8 if the user selects an incorrect flavor\n * Advantages: We don't need to maintain a list of every possible version for each release\n *\n * This function will return the closest version from PromFlavorVersions that is equal or lower to the version argument,\n * unless the versions are a major release apart.\n */\nconst getVersionString = (version: string, flavor?: string): string | undefined => {\n  if (!flavor || !PromFlavorVersions[flavor]) {\n    return;\n  }\n  const flavorVersionValues = PromFlavorVersions[flavor];\n\n  // As long as it's assured we're using versions which are sorted, we could just filter out the values greater than the target version, and then check the last element in the array\n  const versionsLessThanOrEqual = flavorVersionValues\n    ?.filter((el) => !!el.value && semver.lte(el.value, version))\n    .map((el) => el.value);\n\n  const closestVersion = versionsLessThanOrEqual[versionsLessThanOrEqual.length - 1];\n\n  if (closestVersion) {\n    const differenceBetweenActualAndClosest = semver.diff(closestVersion, version);\n\n    // Only return versions if the target is close to the actual.\n    if (['patch', 'prepatch', 'prerelease', null].includes(differenceBetweenActualAndClosest)) {\n      return closestVersion;\n    }\n  }\n\n  return;\n};\n\nconst unableToDeterminePrometheusVersion = (error?: Error): void => {\n  console.warn('Error fetching version from buildinfo API, must manually select version!', error);\n};\n\n/**\n * I don't like the daisy chain of network requests, and that we have to save on behalf of the user, but currently\n * the backend doesn't allow for the prometheus client url to be passed in from the frontend, so we currently need to save it\n * to the database before consumption.\n *\n * Since the prometheus version fields are below the url field, we can expect users to populate this field before\n * hitting save and test at the bottom of the page. For this case we need to save the current fields before calling the\n * resource to auto-detect the version.\n *\n * @param options\n * @param onOptionsChange\n * @param onUpdate\n */\nconst setPrometheusVersion = (\n  options: DataSourceSettingsType<PromOptions>,\n  onOptionsChange: (options: DataSourceSettingsType<PromOptions>) => void,\n  onUpdate: (dataSource: DataSourceSettingsType<PromOptions>) => Promise<DataSourceSettingsType<PromOptions>>\n) => {\n  // This will save the current state of the form, as the url is needed for this API call to function\n  onUpdate(options)\n    .then((updatedOptions) => {\n      getBackendSrv()\n        .get(`/api/datasources/${updatedOptions.id}/resources/version-detect`)\n        .then((rawResponse: PromBuildInfoResponse) => {\n          const rawVersionStringFromApi = rawResponse.data?.version ?? '';\n          if (rawVersionStringFromApi && semver.valid(rawVersionStringFromApi)) {\n            const parsedVersion = getVersionString(rawVersionStringFromApi, updatedOptions.jsonData.prometheusType);\n            // If we got a successful response, let's update the backend with the version right away if it's new\n            if (parsedVersion) {\n              onUpdate({\n                ...updatedOptions,\n                jsonData: {\n                  ...updatedOptions.jsonData,\n                  prometheusVersion: parsedVersion,\n                },\n              }).then((updatedUpdatedOptions) => {\n                onOptionsChange(updatedUpdatedOptions);\n              });\n            }\n          } else {\n            unableToDeterminePrometheusVersion();\n          }\n        });\n    })\n    .catch((error) => {\n      unableToDeterminePrometheusVersion(error);\n    });\n};\n\nexport const PromSettings = (props: Props) => {\n  const { options, onOptionsChange } = props;\n\n  // This update call is typed as void, but it returns a response which we need\n  const onUpdate = useUpdateDatasource();\n\n  // We are explicitly adding httpMethod so it is correctly displayed in dropdown. This way, it is more predictable for users.\n  if (!options.jsonData.httpMethod) {\n    options.jsonData.httpMethod = 'POST';\n  }\n\n  return (\n    <>\n      <div className=\"gf-form-group\">\n        {/* Scrape interval */}\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <FormField\n              label=\"Scrape interval\"\n              labelWidth={13}\n              inputEl={\n                <Input\n                  className=\"width-6\"\n                  value={options.jsonData.timeInterval}\n                  spellCheck={false}\n                  placeholder=\"15s\"\n                  onChange={onChangeHandler('timeInterval', options, onOptionsChange)}\n                  validationEvents={promSettingsValidationEvents}\n                />\n              }\n              tooltip=\"Set this to the typical scrape and evaluation interval configured in Prometheus. Defaults to 15s.\"\n            />\n          </div>\n        </div>\n        {/* Query Timeout */}\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <FormField\n              label=\"Query timeout\"\n              labelWidth={13}\n              inputEl={\n                <Input\n                  className=\"width-6\"\n                  value={options.jsonData.queryTimeout}\n                  onChange={onChangeHandler('queryTimeout', options, onOptionsChange)}\n                  spellCheck={false}\n                  placeholder=\"60s\"\n                  validationEvents={promSettingsValidationEvents}\n                />\n              }\n              tooltip=\"Set the Prometheus query timeout.\"\n            />\n          </div>\n        </div>\n        {/* HTTP Method */}\n        <div className=\"gf-form\">\n          <InlineFormLabel\n            width={13}\n            tooltip=\"You can use either POST or GET HTTP method to query your Prometheus data source. POST is the recommended method as it allows bigger queries. Change this to GET if you have a Prometheus version older than 2.1 or if POST requests are restricted in your network.\"\n          >\n            HTTP method\n          </InlineFormLabel>\n          <Select\n            aria-label=\"Select HTTP method\"\n            options={httpOptions}\n            value={httpOptions.find((o) => o.value === options.jsonData.httpMethod)}\n            onChange={onChangeHandler('httpMethod', options, onOptionsChange)}\n            width={7}\n          />\n        </div>\n      </div>\n\n      <h3 className=\"page-heading\">Type and version</h3>\n      {!options.jsonData.prometheusType && !options.jsonData.prometheusVersion && options.readOnly && (\n        <div style={{ marginBottom: '12px' }}>\n          For more information on configuring prometheus type and version in data sources, see the{' '}\n          <a\n            style={{ textDecoration: 'underline' }}\n            href=\"https://grafana.com/docs/grafana/latest/administration/provisioning/\"\n          >\n            provisioning documentation\n          </a>\n          .\n        </div>\n      )}\n      <div className=\"gf-form-group\">\n        <div className=\"gf-form\">\n          <div className=\"gf-form\">\n            <FormField\n              label=\"Prometheus type\"\n              labelWidth={13}\n              inputEl={\n                <Select\n                  aria-label=\"Prometheus type\"\n                  options={prometheusFlavorSelectItems}\n                  value={prometheusFlavorSelectItems.find((o) => o.value === options.jsonData.prometheusType)}\n                  onChange={onChangeHandler(\n                    'prometheusType',\n                    {\n                      ...options,\n                      jsonData: { ...options.jsonData, prometheusVersion: undefined },\n                    },\n                    (options) => {\n                      // Check buildinfo api and set default version if we can\n                      setPrometheusVersion(options, onOptionsChange, onUpdate);\n                      return onOptionsChange({\n                        ...options,\n                        jsonData: { ...options.jsonData, prometheusVersion: undefined },\n                      });\n                    }\n                  )}\n                  width={20}\n                />\n              }\n              tooltip=\"Set this to the type of your prometheus database, e.g. Prometheus, Cortex, Mimir or Thanos. Changing this field will save your current settings, and attempt to detect the version.\"\n            />\n          </div>\n        </div>\n        <div className=\"gf-form\">\n          {options.jsonData.prometheusType && (\n            <div className=\"gf-form\">\n              <FormField\n                label={`${options.jsonData.prometheusType} version`}\n                labelWidth={13}\n                inputEl={\n                  <Select\n                    aria-label={`${options.jsonData.prometheusType} type`}\n                    options={PromFlavorVersions[options.jsonData.prometheusType]}\n                    value={PromFlavorVersions[options.jsonData.prometheusType]?.find(\n                      (o) => o.value === options.jsonData.prometheusVersion\n                    )}\n                    onChange={onChangeHandler('prometheusVersion', options, onOptionsChange)}\n                    width={20}\n                  />\n                }\n                tooltip={`Use this to set the version of your ${options.jsonData.prometheusType} instance if it is not automatically configured.`}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n\n      <h3 className=\"page-heading\">Misc</h3>\n      <div className=\"gf-form-group\">\n        <div className=\"gf-form\">\n          <InlineField\n            labelWidth={28}\n            label=\"Disable metrics lookup\"\n            tooltip=\"Checking this option will disable the metrics chooser and metric/label support in the query field's autocomplete. This helps if you have performance issues with bigger Prometheus instances.\"\n          >\n            <InlineSwitch\n              value={options.jsonData.disableMetricsLookup ?? false}\n              onChange={onUpdateDatasourceJsonDataOptionChecked(props, 'disableMetricsLookup')}\n            />\n          </InlineField>\n        </div>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form max-width-30\">\n            <FormField\n              label=\"Custom query parameters\"\n              labelWidth={14}\n              tooltip=\"Add custom parameters to all Prometheus or Thanos queries.\"\n              inputEl={\n                <Input\n                  className=\"width-25\"\n                  value={options.jsonData.customQueryParameters}\n                  onChange={onChangeHandler('customQueryParameters', options, onOptionsChange)}\n                  spellCheck={false}\n                  placeholder=\"Example: max_source_resolution=5m&timeout=10\"\n                />\n              }\n            />\n          </div>\n        </div>\n      </div>\n      <ExemplarsSettings\n        options={options.jsonData.exemplarTraceIdDestinations}\n        onChange={(exemplarOptions) =>\n          updateDatasourcePluginJsonDataOption(\n            { onOptionsChange, options },\n            'exemplarTraceIdDestinations',\n            exemplarOptions\n          )\n        }\n      />\n    </>\n  );\n};\n\nexport const promSettingsValidationEvents = {\n  [EventsWithValidation.onBlur]: [\n    regexValidation(\n      /^$|^\\d+(ms|[Mwdhmsy])$/,\n      'Value is not valid, you can use number with time unit specifier: y, M, w, d, h, m, s'\n    ),\n  ],\n};\n\nexport const getValueFromEventItem = (eventItem: SyntheticEvent<HTMLInputElement> | SelectableValue<string>) => {\n  if (!eventItem) {\n    return '';\n  }\n\n  if (eventItem.hasOwnProperty('currentTarget')) {\n    return eventItem.currentTarget.value;\n  }\n\n  return (eventItem as SelectableValue<string>).value;\n};\n\nconst onChangeHandler =\n  (key: keyof PromOptions, options: Props['options'], onOptionsChange: Props['onOptionsChange']) =>\n  (eventItem: SyntheticEvent<HTMLInputElement> | SelectableValue<string>) => {\n    onOptionsChange({\n      ...options,\n      jsonData: {\n        ...options.jsonData,\n        [key]: getValueFromEventItem(eventItem),\n      },\n    });\n  };\n","import React from 'react';\n\nimport { AnnotationQuery } from '@grafana/data';\nimport { EditorField, EditorRow, EditorRows, EditorSwitch, Space } from '@grafana/experimental';\nimport { AutoSizeInput, Input } from '@grafana/ui';\n\nimport { PromQueryCodeEditor } from '../querybuilder/components/PromQueryCodeEditor';\nimport { PromQuery } from '../types';\n\nimport { PromQueryEditorProps } from './types';\n\ntype Props = PromQueryEditorProps & {\n  annotation?: AnnotationQuery<PromQuery>;\n  onAnnotationChange?: (annotation: AnnotationQuery<PromQuery>) => void;\n};\n\nexport function AnnotationQueryEditor(props: Props) {\n  // This is because of problematic typing. See AnnotationQueryEditorProps in grafana-data/annotations.ts.\n  const annotation = props.annotation!;\n  const onAnnotationChange = props.onAnnotationChange!;\n  const query = { expr: annotation.expr, refId: annotation.name, interval: annotation.step };\n\n  return (\n    <>\n      <EditorRows>\n        <PromQueryCodeEditor\n          {...props}\n          query={query}\n          showExplain={false}\n          onChange={(query) => {\n            onAnnotationChange({\n              ...annotation,\n              expr: query.expr,\n            });\n          }}\n        />\n        <EditorRow>\n          <EditorField\n            label=\"Min step\"\n            tooltip={\n              <>\n                An additional lower limit for the step parameter of the Prometheus query and for the{' '}\n                <code>$__interval</code> and <code>$__rate_interval</code> variables.\n              </>\n            }\n          >\n            <AutoSizeInput\n              type=\"text\"\n              aria-label=\"Set lower limit for the step parameter\"\n              placeholder={'auto'}\n              minWidth={10}\n              onCommitChange={(ev) => {\n                onAnnotationChange({\n                  ...annotation,\n                  step: ev.currentTarget.value,\n                });\n              }}\n              defaultValue={query.interval}\n            />\n          </EditorField>\n        </EditorRow>\n      </EditorRows>\n      <Space v={0.5} />\n      <EditorRow>\n        <EditorField\n          label=\"Title\"\n          tooltip={\n            'Use either the name or a pattern. For example, {{instance}} is replaced with label value for the label instance.'\n          }\n        >\n          <Input\n            type=\"text\"\n            placeholder=\"{{alertname}}\"\n            value={annotation.titleFormat}\n            onChange={(event) => {\n              onAnnotationChange({\n                ...annotation,\n                titleFormat: event.currentTarget.value,\n              });\n            }}\n          />\n        </EditorField>\n        <EditorField label=\"Tags\">\n          <Input\n            type=\"text\"\n            placeholder=\"label1,label2\"\n            value={annotation.tagKeys}\n            onChange={(event) => {\n              onAnnotationChange({\n                ...annotation,\n                tagKeys: event.currentTarget.value,\n              });\n            }}\n          />\n        </EditorField>\n        <EditorField\n          label=\"Text\"\n          tooltip={\n            'Use either the name or a pattern. For example, {{instance}} is replaced with label value for the label instance.'\n          }\n        >\n          <Input\n            type=\"text\"\n            placeholder=\"{{instance}}\"\n            value={annotation.textFormat}\n            onChange={(event) => {\n              onAnnotationChange({\n                ...annotation,\n                textFormat: event.currentTarget.value,\n              });\n            }}\n          />\n        </EditorField>\n        <EditorField\n          label=\"Series value as timestamp\"\n          tooltip={\n            'The unit of timestamp is milliseconds. If the unit of the series value is seconds, multiply its range vector by 1000.'\n          }\n        >\n          <EditorSwitch\n            value={annotation.useValueForTime}\n            onChange={(event) => {\n              onAnnotationChange({\n                ...annotation,\n                useValueForTime: event.currentTarget.value,\n              });\n            }}\n          />\n        </EditorField>\n      </EditorRow>\n    </>\n  );\n}\n","import { chain, map as _map, uniq } from 'lodash';\nimport { lastValueFrom } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { MetricFindValue, TimeRange } from '@grafana/data';\nimport { getTimeSrv } from 'app/features/dashboard/services/TimeSrv';\n\nimport { PrometheusDatasource } from './datasource';\nimport { PromQueryRequest } from './types';\n\nexport default class PrometheusMetricFindQuery {\n  range: TimeRange;\n\n  constructor(private datasource: PrometheusDatasource, private query: string) {\n    this.datasource = datasource;\n    this.query = query;\n    this.range = getTimeSrv().timeRange();\n  }\n\n  process(): Promise<MetricFindValue[]> {\n    const labelNamesRegex = /^label_names\\(\\)\\s*$/;\n    const labelValuesRegex = /^label_values\\((?:(.+),\\s*)?([a-zA-Z_][a-zA-Z0-9_]*)\\)\\s*$/;\n    const metricNamesRegex = /^metrics\\((.+)\\)\\s*$/;\n    const queryResultRegex = /^query_result\\((.+)\\)\\s*$/;\n    const labelNamesQuery = this.query.match(labelNamesRegex);\n    if (labelNamesQuery) {\n      return this.labelNamesQuery();\n    }\n\n    const labelValuesQuery = this.query.match(labelValuesRegex);\n    if (labelValuesQuery) {\n      if (labelValuesQuery[1]) {\n        return this.labelValuesQuery(labelValuesQuery[2], labelValuesQuery[1]);\n      } else {\n        return this.labelValuesQuery(labelValuesQuery[2]);\n      }\n    }\n\n    const metricNamesQuery = this.query.match(metricNamesRegex);\n    if (metricNamesQuery) {\n      return this.metricNameQuery(metricNamesQuery[1]);\n    }\n\n    const queryResultQuery = this.query.match(queryResultRegex);\n    if (queryResultQuery) {\n      return lastValueFrom(this.queryResultQuery(queryResultQuery[1]));\n    }\n\n    // if query contains full metric name, return metric name and label list\n    return this.metricNameAndLabelsQuery(this.query);\n  }\n\n  labelNamesQuery() {\n    const start = this.datasource.getPrometheusTime(this.range.from, false);\n    const end = this.datasource.getPrometheusTime(this.range.to, true);\n    const params = {\n      start: start.toString(),\n      end: end.toString(),\n    };\n\n    const url = `/api/v1/labels`;\n\n    return this.datasource.metadataRequest(url, params).then((result: any) => {\n      return _map(result.data.data, (value) => {\n        return { text: value };\n      });\n    });\n  }\n\n  labelValuesQuery(label: string, metric?: string) {\n    const start = this.datasource.getPrometheusTime(this.range.from, false);\n    const end = this.datasource.getPrometheusTime(this.range.to, true);\n    const params = { ...(metric && { 'match[]': metric }), start: start.toString(), end: end.toString() };\n\n    if (!metric || this.datasource.hasLabelsMatchAPISupport()) {\n      const url = `/api/v1/label/${label}/values`;\n\n      return this.datasource.metadataRequest(url, params).then((result: any) => {\n        return _map(result.data.data, (value) => {\n          return { text: value };\n        });\n      });\n    } else {\n      const url = `/api/v1/series`;\n\n      return this.datasource.metadataRequest(url, params).then((result: any) => {\n        const _labels = _map(result.data.data, (metric) => {\n          return metric[label] || '';\n        }).filter((label) => {\n          return label !== '';\n        });\n\n        return uniq(_labels).map((metric) => {\n          return {\n            text: metric,\n            expandable: true,\n          };\n        });\n      });\n    }\n  }\n\n  metricNameQuery(metricFilterPattern: string) {\n    const start = this.datasource.getPrometheusTime(this.range.from, false);\n    const end = this.datasource.getPrometheusTime(this.range.to, true);\n    const params = {\n      start: start.toString(),\n      end: end.toString(),\n    };\n    const url = `/api/v1/label/__name__/values`;\n\n    return this.datasource.metadataRequest(url, params).then((result: any) => {\n      return chain(result.data.data)\n        .filter((metricName) => {\n          const r = new RegExp(metricFilterPattern);\n          return r.test(metricName);\n        })\n        .map((matchedMetricName) => {\n          return {\n            text: matchedMetricName,\n            expandable: true,\n          };\n        })\n        .value();\n    });\n  }\n\n  queryResultQuery(query: string) {\n    const end = this.datasource.getPrometheusTime(this.range.to, true);\n    const instantQuery: PromQueryRequest = { expr: query } as PromQueryRequest;\n    return this.datasource.performInstantQuery(instantQuery, end).pipe(\n      map((result) => {\n        switch (result.data.data.resultType) {\n          case 'scalar': // [ <unix_time>, \"<scalar_value>\" ]\n          case 'string': // [ <unix_time>, \"<string_value>\" ]\n            return [\n              {\n                text: result.data.data.result[1] || '',\n                expandable: false,\n              },\n            ];\n          case 'vector':\n            return _map(result.data.data.result, (metricData) => {\n              let text = metricData.metric.__name__ || '';\n              delete metricData.metric.__name__;\n              text +=\n                '{' +\n                _map(metricData.metric, (v, k) => {\n                  return k + '=\"' + v + '\"';\n                }).join(',') +\n                '}';\n              text += ' ' + metricData.value[1] + ' ' + metricData.value[0] * 1000;\n\n              return {\n                text: text,\n                expandable: true,\n              };\n            });\n          default:\n            throw Error(`Unknown/Unhandled result type: [${result.data.data.resultType}]`);\n        }\n      })\n    );\n  }\n\n  metricNameAndLabelsQuery(query: string): Promise<MetricFindValue[]> {\n    const start = this.datasource.getPrometheusTime(this.range.from, false);\n    const end = this.datasource.getPrometheusTime(this.range.to, true);\n    const params = {\n      'match[]': query,\n      start: start.toString(),\n      end: end.toString(),\n    };\n\n    const url = `/api/v1/series`;\n    const self = this;\n\n    return this.datasource.metadataRequest(url, params).then((result: any) => {\n      return _map(result.data.data, (metric: { [key: string]: string }) => {\n        return {\n          text: self.datasource.getOriginalMetricName(metric),\n          expandable: true,\n        };\n      });\n    });\n  }\n}\n","import { descending, deviation } from 'd3';\nimport { flatten, forOwn, groupBy, partition } from 'lodash';\n\nimport {\n  ArrayDataFrame,\n  ArrayVector,\n  CoreApp,\n  DataFrame,\n  DataFrameType,\n  DataLink,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataTopic,\n  Field,\n  FieldType,\n  formatLabels,\n  getDisplayProcessor,\n  Labels,\n  MutableField,\n  PreferredVisualisationType,\n  ScopedVars,\n  TIME_SERIES_TIME_FIELD_NAME,\n  TIME_SERIES_VALUE_FIELD_NAME,\n} from '@grafana/data';\nimport { FetchResponse, getDataSourceSrv, getTemplateSrv } from '@grafana/runtime';\n\nimport { renderLegendFormat } from './legend';\nimport {\n  ExemplarTraceIdDestination,\n  isExemplarData,\n  isMatrixData,\n  MatrixOrVectorResult,\n  PromDataSuccessResponse,\n  PromMetric,\n  PromQuery,\n  PromQueryRequest,\n  PromValue,\n  TransformOptions,\n} from './types';\n\n// handles case-insensitive Inf, +Inf, -Inf (with optional \"inity\" suffix)\nconst INFINITY_SAMPLE_REGEX = /^[+-]?inf(?:inity)?$/i;\n\ninterface TimeAndValue {\n  [TIME_SERIES_TIME_FIELD_NAME]: number;\n  [TIME_SERIES_VALUE_FIELD_NAME]: number;\n}\n\nconst isTableResult = (dataFrame: DataFrame, options: DataQueryRequest<PromQuery>): boolean => {\n  // We want to process vector and scalar results in Explore as table\n  if (\n    options.app === CoreApp.Explore &&\n    (dataFrame.meta?.custom?.resultType === 'vector' || dataFrame.meta?.custom?.resultType === 'scalar')\n  ) {\n    return true;\n  }\n\n  // We want to process all dataFrames with target.format === 'table' as table\n  const target = options.targets.find((target) => target.refId === dataFrame.refId);\n  return target?.format === 'table';\n};\n\nconst isHeatmapResult = (dataFrame: DataFrame, options: DataQueryRequest<PromQuery>): boolean => {\n  const target = options.targets.find((target) => target.refId === dataFrame.refId);\n  return target?.format === 'heatmap';\n};\n\n// V2 result transformer used to transform query results from queries that were run through prometheus backend\nexport function transformV2(\n  response: DataQueryResponse,\n  request: DataQueryRequest<PromQuery>,\n  options: { exemplarTraceIdDestinations?: ExemplarTraceIdDestination[] }\n) {\n  const [tableFrames, framesWithoutTable] = partition<DataFrame>(response.data, (df) => isTableResult(df, request));\n  const processedTableFrames = transformDFToTable(tableFrames);\n\n  const [exemplarFrames, framesWithoutTableAndExemplars] = partition<DataFrame>(\n    framesWithoutTable,\n    (df) => df.meta?.custom?.resultType === 'exemplar'\n  );\n\n  // EXEMPLAR FRAMES: We enrich exemplar frames with data links and add dataTopic meta info\n  const { exemplarTraceIdDestinations: destinations } = options;\n  const processedExemplarFrames = exemplarFrames.map((dataFrame) => {\n    if (destinations?.length) {\n      for (const exemplarTraceIdDestination of destinations) {\n        const traceIDField = dataFrame.fields.find((field) => field.name === exemplarTraceIdDestination.name);\n        if (traceIDField) {\n          const links = getDataLinks(exemplarTraceIdDestination);\n          traceIDField.config.links = traceIDField.config.links?.length\n            ? [...traceIDField.config.links, ...links]\n            : links;\n        }\n      }\n    }\n\n    return { ...dataFrame, meta: { ...dataFrame.meta, dataTopic: DataTopic.Annotations } };\n  });\n\n  const [heatmapResults, framesWithoutTableHeatmapsAndExemplars] = partition<DataFrame>(\n    framesWithoutTableAndExemplars,\n    (df) => isHeatmapResult(df, request)\n  );\n\n  // Group heatmaps by query\n  const heatmapResultsGroupedByQuery = groupBy<DataFrame>(heatmapResults, (h) => h.refId);\n\n  // Initialize empty array to push grouped histogram frames to\n  let processedHeatmapResultsGroupedByQuery: DataFrame[][] = [];\n\n  // Iterate through every query in this heatmap\n  for (const query in heatmapResultsGroupedByQuery) {\n    // Get reference to dataFrames for heatmap\n    const heatmapResultsGroup = heatmapResultsGroupedByQuery[query];\n\n    // Create a new grouping by iterating through the data frames...\n    const heatmapResultsGroupedByValues = groupBy<DataFrame>(heatmapResultsGroup, (dataFrame) => {\n      // Each data frame has `Time` and `Value` properties, we want to get the values\n      const values = dataFrame.fields.find((field) => field.name === TIME_SERIES_VALUE_FIELD_NAME);\n      // Specific functionality for special \"le\" quantile heatmap value, we know if this value exists, that we do not want to calculate the heatmap density across data frames from the same quartile\n      if (values?.labels && HISTOGRAM_QUANTILE_LABEL_NAME in values.labels) {\n        const { le, ...notLE } = values?.labels;\n        return Object.values(notLE).join();\n      }\n\n      // Return a string made from the concatenation of this frame's values to represent a grouping in the query\n      return Object.values(values?.labels ?? []).join();\n    });\n\n    // Then iterate through the resultant object\n    forOwn(heatmapResultsGroupedByValues, (dataFrames, key) => {\n      // Sort frames within each grouping\n      const sortedHeatmap = dataFrames.sort(sortSeriesByLabel);\n      // And push the sorted grouping with the rest\n      processedHeatmapResultsGroupedByQuery.push(mergeHeatmapFrames(transformToHistogramOverTime(sortedHeatmap)));\n    });\n  }\n\n  // Everything else is processed as time_series result and graph preferredVisualisationType\n  const otherFrames = framesWithoutTableHeatmapsAndExemplars.map((dataFrame) => {\n    const df = {\n      ...dataFrame,\n      meta: {\n        ...dataFrame.meta,\n        preferredVisualisationType: 'graph',\n      },\n    } as DataFrame;\n    return df;\n  });\n\n  const flattenedProcessedHeatmapFrames = flatten(processedHeatmapResultsGroupedByQuery);\n\n  return {\n    ...response,\n    data: [...otherFrames, ...processedTableFrames, ...flattenedProcessedHeatmapFrames, ...processedExemplarFrames],\n  };\n}\n\nconst HISTOGRAM_QUANTILE_LABEL_NAME = 'le';\n\nexport function transformDFToTable(dfs: DataFrame[]): DataFrame[] {\n  // If no dataFrames or if 1 dataFrames with no values, return original dataFrame\n  if (dfs.length === 0 || (dfs.length === 1 && dfs[0].length === 0)) {\n    return dfs;\n  }\n\n  // Group results by refId and process dataFrames with the same refId as 1 dataFrame\n  const dataFramesByRefId = groupBy(dfs, 'refId');\n  const refIds = Object.keys(dataFramesByRefId);\n\n  const frames = refIds.map((refId) => {\n    // Create timeField, valueField and labelFields\n    const valueText = getValueText(refIds.length, refId);\n    const valueField = getValueField({ data: [], valueName: valueText });\n    const timeField = getTimeField([]);\n    const labelFields: MutableField[] = [];\n\n    // Fill labelsFields with labels from dataFrames\n    dataFramesByRefId[refId].forEach((df) => {\n      const frameValueField = df.fields[1];\n      const promLabels = frameValueField.labels ?? {};\n\n      Object.keys(promLabels)\n        .sort()\n        .forEach((label) => {\n          // If we don't have label in labelFields, add it\n          if (!labelFields.some((l) => l.name === label)) {\n            const numberField = label === HISTOGRAM_QUANTILE_LABEL_NAME;\n            labelFields.push({\n              name: label,\n              config: { filterable: true },\n              type: numberField ? FieldType.number : FieldType.string,\n              values: new ArrayVector(),\n            });\n          }\n        });\n    });\n\n    // Fill valueField, timeField and labelFields with values\n    dataFramesByRefId[refId].forEach((df) => {\n      df.fields[0].values.toArray().forEach((value) => timeField.values.add(value));\n      df.fields[1].values.toArray().forEach((value) => {\n        valueField.values.add(parseSampleValue(value));\n        const labelsForField = df.fields[1].labels ?? {};\n        labelFields.forEach((field) => field.values.add(getLabelValue(labelsForField, field.name)));\n      });\n    });\n\n    const fields = [timeField, ...labelFields, valueField];\n    return {\n      refId,\n      fields,\n      meta: { ...dfs[0].meta, preferredVisualisationType: 'table' as PreferredVisualisationType },\n      length: timeField.values.length,\n    };\n  });\n  return frames;\n}\n\nfunction getValueText(responseLength: number, refId = '') {\n  return responseLength > 1 ? `Value #${refId}` : 'Value';\n}\n\nexport function transform(\n  response: FetchResponse<PromDataSuccessResponse>,\n  transformOptions: {\n    query: PromQueryRequest;\n    exemplarTraceIdDestinations?: ExemplarTraceIdDestination[];\n    target: PromQuery;\n    responseListLength: number;\n    scopedVars?: ScopedVars;\n  }\n) {\n  // Create options object from transformOptions\n  const options: TransformOptions = {\n    format: transformOptions.target.format,\n    step: transformOptions.query.step,\n    legendFormat: transformOptions.target.legendFormat,\n    start: transformOptions.query.start,\n    end: transformOptions.query.end,\n    query: transformOptions.query.expr,\n    responseListLength: transformOptions.responseListLength,\n    scopedVars: transformOptions.scopedVars,\n    refId: transformOptions.target.refId,\n    valueWithRefId: transformOptions.target.valueWithRefId,\n    meta: {\n      // Fix for showing of Prometheus results in Explore table\n      preferredVisualisationType: transformOptions.query.instant ? 'table' : 'graph',\n    },\n  };\n  const prometheusResult = response.data.data;\n\n  if (isExemplarData(prometheusResult)) {\n    const events: TimeAndValue[] = [];\n    prometheusResult.forEach((exemplarData) => {\n      const data = exemplarData.exemplars.map((exemplar) => {\n        return {\n          [TIME_SERIES_TIME_FIELD_NAME]: exemplar.timestamp * 1000,\n          [TIME_SERIES_VALUE_FIELD_NAME]: exemplar.value,\n          ...exemplar.labels,\n          ...exemplarData.seriesLabels,\n        };\n      });\n      events.push(...data);\n    });\n\n    // Grouping exemplars by step\n    const sampledExemplars = sampleExemplars(events, options);\n\n    const dataFrame = new ArrayDataFrame(sampledExemplars);\n    dataFrame.meta = { dataTopic: DataTopic.Annotations };\n\n    // Add data links if configured\n    if (transformOptions.exemplarTraceIdDestinations?.length) {\n      for (const exemplarTraceIdDestination of transformOptions.exemplarTraceIdDestinations) {\n        const traceIDField = dataFrame.fields.find((field) => field.name === exemplarTraceIdDestination.name);\n        if (traceIDField) {\n          const links = getDataLinks(exemplarTraceIdDestination);\n          traceIDField.config.links = traceIDField.config.links?.length\n            ? [...traceIDField.config.links, ...links]\n            : links;\n        }\n      }\n    }\n    return [dataFrame];\n  }\n\n  if (!prometheusResult?.result) {\n    return [];\n  }\n\n  // Return early if result type is scalar\n  if (prometheusResult.resultType === 'scalar') {\n    return [\n      {\n        meta: options.meta,\n        refId: options.refId,\n        length: 1,\n        fields: [getTimeField([prometheusResult.result]), getValueField({ data: [prometheusResult.result] })],\n      },\n    ];\n  }\n\n  // Return early again if the format is table, this needs special transformation.\n  if (options.format === 'table') {\n    const tableData = transformMetricDataToTable(prometheusResult.result, options);\n    return [tableData];\n  }\n\n  // Process matrix and vector results to DataFrame\n  const dataFrame: DataFrame[] = [];\n  prometheusResult.result.forEach((data: MatrixOrVectorResult) => dataFrame.push(transformToDataFrame(data, options)));\n\n  // When format is heatmap use the already created data frames and transform it more\n  if (options.format === 'heatmap') {\n    return mergeHeatmapFrames(transformToHistogramOverTime(dataFrame.sort(sortSeriesByLabel)));\n  }\n\n  // Return matrix or vector result as DataFrame[]\n  return dataFrame;\n}\n\nfunction getDataLinks(options: ExemplarTraceIdDestination): DataLink[] {\n  const dataLinks: DataLink[] = [];\n\n  if (options.datasourceUid) {\n    const dataSourceSrv = getDataSourceSrv();\n    const dsSettings = dataSourceSrv.getInstanceSettings(options.datasourceUid);\n\n    // dsSettings is undefined because of the reasons below:\n    // - permissions issues (probably most likely)\n    // - deleted datasource\n    // - misconfiguration\n    if (dsSettings) {\n      dataLinks.push({\n        title: options.urlDisplayLabel || `Query with ${dsSettings?.name}`,\n        url: '',\n        internal: {\n          query: { query: '${__value.raw}', queryType: 'traceId' },\n          datasourceUid: options.datasourceUid,\n          datasourceName: dsSettings?.name ?? 'Data source not found',\n        },\n      });\n    }\n  }\n\n  if (options.url) {\n    dataLinks.push({\n      title: options.urlDisplayLabel || `Go to ${options.url}`,\n      url: options.url,\n      targetBlank: true,\n    });\n  }\n  return dataLinks;\n}\n\n/**\n * Reduce the density of the exemplars by making sure that the highest value exemplar is included\n * and then only the ones that are 2 times the standard deviation of the all the values.\n * This makes sure not to show too many dots near each other.\n */\nfunction sampleExemplars(events: TimeAndValue[], options: TransformOptions) {\n  const step = options.step || 15;\n  const bucketedExemplars: { [ts: string]: TimeAndValue[] } = {};\n  const values: number[] = [];\n  for (const exemplar of events) {\n    // Align exemplar timestamp to nearest step second\n    const alignedTs = String(Math.floor(exemplar[TIME_SERIES_TIME_FIELD_NAME] / 1000 / step) * step * 1000);\n    if (!bucketedExemplars[alignedTs]) {\n      // New bucket found\n      bucketedExemplars[alignedTs] = [];\n    }\n    bucketedExemplars[alignedTs].push(exemplar);\n    values.push(exemplar[TIME_SERIES_VALUE_FIELD_NAME]);\n  }\n\n  // Getting exemplars from each bucket\n  const standardDeviation = deviation(values);\n  const sampledBuckets = Object.keys(bucketedExemplars).sort();\n  const sampledExemplars = [];\n  for (const ts of sampledBuckets) {\n    const exemplarsInBucket = bucketedExemplars[ts];\n    if (exemplarsInBucket.length === 1) {\n      sampledExemplars.push(exemplarsInBucket[0]);\n    } else {\n      // Choose which values to sample\n      const bucketValues = exemplarsInBucket.map((ex) => ex[TIME_SERIES_VALUE_FIELD_NAME]).sort(descending);\n      const sampledBucketValues = bucketValues.reduce((acc: number[], curr) => {\n        if (acc.length === 0) {\n          // First value is max and is always added\n          acc.push(curr);\n        } else {\n          // Then take values only when at least 2 standard deviation distance to previously taken value\n          const prev = acc[acc.length - 1];\n          if (standardDeviation && prev - curr >= 2 * standardDeviation) {\n            acc.push(curr);\n          }\n        }\n        return acc;\n      }, []);\n      // Find the exemplars for the sampled values\n      sampledExemplars.push(\n        ...sampledBucketValues.map(\n          (value) => exemplarsInBucket.find((ex) => ex[TIME_SERIES_VALUE_FIELD_NAME] === value)!\n        )\n      );\n    }\n  }\n  return sampledExemplars;\n}\n\n/**\n * Transforms matrix and vector result from Prometheus result to DataFrame\n */\nfunction transformToDataFrame(data: MatrixOrVectorResult, options: TransformOptions): DataFrame {\n  const { name, labels } = createLabelInfo(data.metric, options);\n\n  const fields: Field[] = [];\n\n  if (isMatrixData(data)) {\n    const stepMs = options.step ? options.step * 1000 : NaN;\n    let baseTimestamp = options.start * 1000;\n    const dps: PromValue[] = [];\n\n    for (const value of data.values) {\n      let dpValue: number | null = parseSampleValue(value[1]);\n\n      if (isNaN(dpValue)) {\n        dpValue = null;\n      }\n\n      const timestamp = value[0] * 1000;\n      for (let t = baseTimestamp; t < timestamp; t += stepMs) {\n        dps.push([t, null]);\n      }\n      baseTimestamp = timestamp + stepMs;\n      dps.push([timestamp, dpValue]);\n    }\n\n    const endTimestamp = options.end * 1000;\n    for (let t = baseTimestamp; t <= endTimestamp; t += stepMs) {\n      dps.push([t, null]);\n    }\n    fields.push(getTimeField(dps, true));\n    fields.push(getValueField({ data: dps, parseValue: false, labels, displayNameFromDS: name }));\n  } else {\n    fields.push(getTimeField([data.value]));\n    fields.push(getValueField({ data: [data.value], labels, displayNameFromDS: name }));\n  }\n\n  return {\n    meta: options.meta,\n    refId: options.refId,\n    length: fields[0].values.length,\n    fields,\n    name,\n  };\n}\n\nfunction transformMetricDataToTable(md: MatrixOrVectorResult[], options: TransformOptions): DataFrame {\n  if (!md || md.length === 0) {\n    return {\n      meta: options.meta,\n      refId: options.refId,\n      length: 0,\n      fields: [],\n    };\n  }\n\n  const valueText = options.responseListLength > 1 || options.valueWithRefId ? `Value #${options.refId}` : 'Value';\n\n  const timeField = getTimeField([]);\n  const metricFields = Object.keys(md.reduce((acc, series) => ({ ...acc, ...series.metric }), {}))\n    .sort()\n    .map((label) => {\n      // Labels have string field type, otherwise table tries to figure out the type which can result in unexpected results\n      // Only \"le\" label has a number field type\n      const numberField = label === HISTOGRAM_QUANTILE_LABEL_NAME;\n      return {\n        name: label,\n        config: { filterable: true },\n        type: numberField ? FieldType.number : FieldType.string,\n        values: new ArrayVector(),\n      };\n    });\n  const valueField = getValueField({ data: [], valueName: valueText });\n\n  md.forEach((d) => {\n    if (isMatrixData(d)) {\n      d.values.forEach((val) => {\n        timeField.values.add(val[0] * 1000);\n        metricFields.forEach((metricField) => metricField.values.add(getLabelValue(d.metric, metricField.name)));\n        valueField.values.add(parseSampleValue(val[1]));\n      });\n    } else {\n      timeField.values.add(d.value[0] * 1000);\n      metricFields.forEach((metricField) => metricField.values.add(getLabelValue(d.metric, metricField.name)));\n      valueField.values.add(parseSampleValue(d.value[1]));\n    }\n  });\n\n  return {\n    meta: options.meta,\n    refId: options.refId,\n    length: timeField.values.length,\n    fields: [timeField, ...metricFields, valueField],\n  };\n}\n\nfunction getLabelValue(metric: PromMetric, label: string): string | number {\n  if (metric.hasOwnProperty(label)) {\n    if (label === HISTOGRAM_QUANTILE_LABEL_NAME) {\n      return parseSampleValue(metric[label]);\n    }\n    return metric[label];\n  }\n  return '';\n}\n\nfunction getTimeField(data: PromValue[], isMs = false): MutableField {\n  return {\n    name: TIME_SERIES_TIME_FIELD_NAME,\n    type: FieldType.time,\n    config: {},\n    values: new ArrayVector<number>(data.map((val) => (isMs ? val[0] : val[0] * 1000))),\n  };\n}\n\ntype ValueFieldOptions = {\n  data: PromValue[];\n  valueName?: string;\n  parseValue?: boolean;\n  labels?: Labels;\n  displayNameFromDS?: string;\n};\n\nfunction getValueField({\n  data,\n  valueName = TIME_SERIES_VALUE_FIELD_NAME,\n  parseValue = true,\n  labels,\n  displayNameFromDS,\n}: ValueFieldOptions): MutableField {\n  return {\n    name: valueName,\n    type: FieldType.number,\n    display: getDisplayProcessor(),\n    config: {\n      displayNameFromDS,\n    },\n    labels,\n    values: new ArrayVector<number | null>(data.map((val) => (parseValue ? parseSampleValue(val[1]) : val[1]))),\n  };\n}\n\nfunction createLabelInfo(labels: { [key: string]: string }, options: TransformOptions) {\n  if (options?.legendFormat) {\n    const title = renderLegendFormat(getTemplateSrv().replace(options.legendFormat, options?.scopedVars), labels);\n    return { name: title, labels };\n  }\n\n  const { __name__, ...labelsWithoutName } = labels;\n  const labelPart = formatLabels(labelsWithoutName);\n  let title = `${__name__ ?? ''}${labelPart}`;\n\n  if (!title) {\n    title = options.query;\n  }\n\n  return { name: title, labels: labelsWithoutName };\n}\n\nexport function getOriginalMetricName(labelData: { [key: string]: string }) {\n  const metricName = labelData.__name__ || '';\n  delete labelData.__name__;\n  const labelPart = Object.entries(labelData)\n    .map((label) => `${label[0]}=\"${label[1]}\"`)\n    .join(',');\n  return `${metricName}{${labelPart}}`;\n}\n\nfunction mergeHeatmapFrames(frames: DataFrame[]): DataFrame[] {\n  if (frames.length === 0) {\n    return [];\n  }\n\n  const timeField = frames[0].fields.find((field) => field.type === FieldType.time)!;\n  const countFields = frames.map((frame) => {\n    let field = frame.fields.find((field) => field.type === FieldType.number)!;\n\n    return {\n      ...field,\n      name: field.config.displayNameFromDS!,\n    };\n  });\n\n  return [\n    {\n      ...frames[0],\n      meta: {\n        ...frames[0].meta,\n        type: DataFrameType.HeatmapRows,\n      },\n      fields: [timeField!, ...countFields],\n    },\n  ];\n}\n\nfunction transformToHistogramOverTime(seriesList: DataFrame[]) {\n  /*      t1 = timestamp1, t2 = timestamp2 etc.\n            t1  t2  t3          t1  t2  t3\n    le10    10  10  0     =>    10  10  0\n    le20    20  10  30    =>    10  0   30\n    le30    30  10  35    =>    10  0   5\n    */\n  for (let i = seriesList.length - 1; i > 0; i--) {\n    const topSeries = seriesList[i].fields.find((s) => s.name === TIME_SERIES_VALUE_FIELD_NAME);\n    const bottomSeries = seriesList[i - 1].fields.find((s) => s.name === TIME_SERIES_VALUE_FIELD_NAME);\n    if (!topSeries || !bottomSeries) {\n      throw new Error('Prometheus heatmap transform error: data should be a time series');\n    }\n\n    for (let j = 0; j < topSeries.values.length; j++) {\n      const bottomPoint = bottomSeries.values.get(j) || [0];\n      topSeries.values.toArray()[j] -= bottomPoint;\n    }\n  }\n\n  return seriesList;\n}\n\nfunction sortSeriesByLabel(s1: DataFrame, s2: DataFrame): number {\n  let le1, le2;\n\n  try {\n    // fail if not integer. might happen with bad queries\n    le1 = parseSampleValue(s1.name ?? '');\n    le2 = parseSampleValue(s2.name ?? '');\n  } catch (err) {\n    console.error(err);\n    return 0;\n  }\n\n  if (le1 > le2) {\n    return 1;\n  }\n\n  if (le1 < le2) {\n    return -1;\n  }\n\n  return 0;\n}\n\n/** @internal */\nexport function parseSampleValue(value: string): number {\n  if (INFINITY_SAMPLE_REGEX.test(value)) {\n    return value[0] === '-' ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY;\n  }\n  return parseFloat(value);\n}\n","import { from, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport {\n  DataQueryRequest,\n  DataQueryResponse,\n  rangeUtil,\n  StandardVariableQuery,\n  StandardVariableSupport,\n} from '@grafana/data';\nimport { getTemplateSrv, TemplateSrv } from '@grafana/runtime';\n\nimport { getTimeSrv, TimeSrv } from '../../../features/dashboard/services/TimeSrv';\n\nimport { PrometheusDatasource } from './datasource';\nimport PrometheusMetricFindQuery from './metric_find_query';\nimport { PromQuery } from './types';\n\nexport class PrometheusVariableSupport extends StandardVariableSupport<PrometheusDatasource> {\n  constructor(\n    private readonly datasource: PrometheusDatasource,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv(),\n    private readonly timeSrv: TimeSrv = getTimeSrv()\n  ) {\n    super();\n    this.query = this.query.bind(this);\n  }\n\n  query(request: DataQueryRequest<PromQuery>): Observable<DataQueryResponse> {\n    const query = request.targets[0].expr;\n    if (!query) {\n      return of({ data: [] });\n    }\n\n    const scopedVars = {\n      ...request.scopedVars,\n      __interval: { text: this.datasource.interval, value: this.datasource.interval },\n      __interval_ms: {\n        text: rangeUtil.intervalToMs(this.datasource.interval),\n        value: rangeUtil.intervalToMs(this.datasource.interval),\n      },\n      ...this.datasource.getRangeScopedVars(this.timeSrv.timeRange()),\n    };\n\n    const interpolated = this.templateSrv.replace(query, scopedVars, this.datasource.interpolateQueryExpr);\n    const metricFindQuery = new PrometheusMetricFindQuery(this.datasource, interpolated);\n    const metricFindStream = from(metricFindQuery.process());\n\n    return metricFindStream.pipe(map((results) => ({ data: results })));\n  }\n\n  toDataQuery(query: StandardVariableQuery): PromQuery {\n    return {\n      refId: 'PrometheusDatasource-VariableQuery',\n      expr: query.query,\n    };\n  }\n}\n","import { cloneDeep, defaults } from 'lodash';\nimport LRU from 'lru-cache';\nimport React from 'react';\nimport { forkJoin, lastValueFrom, merge, Observable, of, OperatorFunction, pipe, throwError } from 'rxjs';\nimport { catchError, filter, map, tap } from 'rxjs/operators';\nimport semver from 'semver/preload';\n\nimport {\n  AnnotationEvent,\n  CoreApp,\n  DataQueryError,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n  DataSourceWithQueryExportSupport,\n  DataSourceWithQueryImportSupport,\n  dateMath,\n  DateTime,\n  AbstractQuery,\n  LoadingState,\n  rangeUtil,\n  ScopedVars,\n  TimeRange,\n  DataFrame,\n  dateTime,\n  AnnotationQueryRequest,\n  QueryFixAction,\n} from '@grafana/data';\nimport {\n  BackendSrvRequest,\n  FetchError,\n  FetchResponse,\n  getBackendSrv,\n  DataSourceWithBackend,\n  BackendDataSourceResponse,\n  toDataQueryResponse,\n  isFetchError,\n} from '@grafana/runtime';\nimport { Badge, BadgeColor, Tooltip } from '@grafana/ui';\nimport { safeStringifyValue } from 'app/core/utils/explore';\nimport { discoverDataSourceFeatures } from 'app/features/alerting/unified/api/buildInfo';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { getTemplateSrv, TemplateSrv } from 'app/features/templating/template_srv';\nimport { PromApplication, PromApiFeatures } from 'app/types/unified-alerting-dto';\n\nimport { addLabelToQuery } from './add_label_to_query';\nimport { AnnotationQueryEditor } from './components/AnnotationQueryEditor';\nimport PrometheusLanguageProvider from './language_provider';\nimport { expandRecordingRules } from './language_utils';\nimport { renderLegendFormat } from './legend';\nimport PrometheusMetricFindQuery from './metric_find_query';\nimport { getInitHints, getQueryHints } from './query_hints';\nimport { getOriginalMetricName, transform, transformV2 } from './result_transformer';\nimport {\n  ExemplarTraceIdDestination,\n  PromDataErrorResponse,\n  PromDataSuccessResponse,\n  PromExemplarData,\n  PromMatrixData,\n  PromOptions,\n  PromQuery,\n  PromQueryRequest,\n  PromQueryType,\n  PromScalarData,\n  PromVectorData,\n} from './types';\nimport { PrometheusVariableSupport } from './variables';\n\nconst ANNOTATION_QUERY_STEP_DEFAULT = '60s';\nconst GET_AND_POST_METADATA_ENDPOINTS = ['api/v1/query', 'api/v1/query_range', 'api/v1/series', 'api/v1/labels'];\n\nexport class PrometheusDatasource\n  extends DataSourceWithBackend<PromQuery, PromOptions>\n  implements DataSourceWithQueryImportSupport<PromQuery>, DataSourceWithQueryExportSupport<PromQuery>\n{\n  type: string;\n  editorSrc: string;\n  ruleMappings: { [index: string]: string };\n  url: string;\n  id: number;\n  directUrl: string;\n  access: 'direct' | 'proxy';\n  basicAuth: any;\n  withCredentials: any;\n  metricsNameCache = new LRU<string, string[]>({ max: 10 });\n  interval: string;\n  queryTimeout: string | undefined;\n  httpMethod: string;\n  languageProvider: PrometheusLanguageProvider;\n  exemplarTraceIdDestinations: ExemplarTraceIdDestination[] | undefined;\n  lookupsDisabled: boolean;\n  customQueryParameters: any;\n  datasourceConfigurationPrometheusFlavor?: PromApplication;\n  datasourceConfigurationPrometheusVersion?: string;\n  exemplarsAvailable: boolean;\n  subType: PromApplication;\n  rulerEnabled: boolean;\n\n  constructor(\n    instanceSettings: DataSourceInstanceSettings<PromOptions>,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv(),\n    private readonly timeSrv: TimeSrv = getTimeSrv(),\n    languageProvider?: PrometheusLanguageProvider\n  ) {\n    super(instanceSettings);\n\n    this.type = 'prometheus';\n    this.subType = PromApplication.Prometheus;\n    this.rulerEnabled = false;\n    this.editorSrc = 'app/features/prometheus/partials/query.editor.html';\n    this.id = instanceSettings.id;\n    this.url = instanceSettings.url!;\n    this.access = instanceSettings.access;\n    this.basicAuth = instanceSettings.basicAuth;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.interval = instanceSettings.jsonData.timeInterval || '15s';\n    this.queryTimeout = instanceSettings.jsonData.queryTimeout;\n    this.httpMethod = instanceSettings.jsonData.httpMethod || 'GET';\n    // `directUrl` is never undefined, we set it at https://github.com/grafana/grafana/blob/main/pkg/api/frontendsettings.go#L108\n    // here we \"fall back\" to this.url to make typescript happy, but it should never happen\n    this.directUrl = instanceSettings.jsonData.directUrl ?? this.url;\n    this.exemplarTraceIdDestinations = instanceSettings.jsonData.exemplarTraceIdDestinations;\n    this.ruleMappings = {};\n    this.languageProvider = languageProvider ?? new PrometheusLanguageProvider(this);\n    this.lookupsDisabled = instanceSettings.jsonData.disableMetricsLookup ?? false;\n    this.customQueryParameters = new URLSearchParams(instanceSettings.jsonData.customQueryParameters);\n    this.datasourceConfigurationPrometheusFlavor = instanceSettings.jsonData.prometheusType;\n    this.datasourceConfigurationPrometheusVersion = instanceSettings.jsonData.prometheusVersion;\n    this.variables = new PrometheusVariableSupport(this, this.templateSrv, this.timeSrv);\n    this.exemplarsAvailable = true;\n\n    // This needs to be here and cannot be static because of how annotations typing affects casting of data source\n    // objects to DataSourceApi types.\n    // We don't use the default processing for prometheus.\n    // See standardAnnotationSupport.ts/[shouldUseMappingUI|shouldUseLegacyRunner]\n    this.annotations = {\n      QueryEditor: AnnotationQueryEditor,\n    };\n  }\n\n  init = async () => {\n    this.loadRules();\n    this.exemplarsAvailable = await this.areExemplarsAvailable();\n  };\n\n  getQueryDisplayText(query: PromQuery) {\n    return query.expr;\n  }\n\n  hasLabelsMatchAPISupport(): boolean {\n    return (\n      // https://github.com/prometheus/prometheus/releases/tag/v2.24.0\n      this._isDatasourceVersionGreaterOrEqualTo('2.24.0', PromApplication.Prometheus) ||\n      // All versions of Mimir support matchers for labels API\n      this._isDatasourceVersionGreaterOrEqualTo('2.0.0', PromApplication.Mimir) ||\n      // https://github.com/cortexproject/cortex/discussions/4542\n      this._isDatasourceVersionGreaterOrEqualTo('1.11.0', PromApplication.Cortex) ||\n      // https://github.com/thanos-io/thanos/pull/3566\n      //https://github.com/thanos-io/thanos/releases/tag/v0.18.0\n      this._isDatasourceVersionGreaterOrEqualTo('0.18.0', PromApplication.Thanos)\n    );\n  }\n\n  _isDatasourceVersionGreaterOrEqualTo(targetVersion: string, targetFlavor: PromApplication): boolean {\n    // User hasn't configured flavor/version yet, default behavior is to not support features that require version configuration when not provided\n    if (!this.datasourceConfigurationPrometheusVersion || !this.datasourceConfigurationPrometheusFlavor) {\n      return false;\n    }\n\n    if (targetFlavor !== this.datasourceConfigurationPrometheusFlavor) {\n      return false;\n    }\n\n    return semver.gte(this.datasourceConfigurationPrometheusVersion, targetVersion);\n  }\n\n  _addTracingHeaders(httpOptions: PromQueryRequest, options: DataQueryRequest<PromQuery>) {\n    httpOptions.headers = {};\n    const proxyMode = !this.url.match(/^http/);\n    if (proxyMode) {\n      httpOptions.headers['X-Dashboard-Id'] = options.dashboardId;\n      httpOptions.headers['X-Dashboard-UID'] = options.dashboardUID;\n      httpOptions.headers['X-Panel-Id'] = options.panelId;\n    }\n  }\n\n  /**\n   * Any request done from this data source should go through here as it contains some common processing for the\n   * request. Any processing done here needs to be also copied on the backend as this goes through data source proxy\n   * but not through the same code as alerting.\n   */\n  _request<T = any>(\n    url: string,\n    data: Record<string, string> | null,\n    overrides: Partial<BackendSrvRequest> = {}\n  ): Observable<FetchResponse<T>> {\n    if (this.access === 'direct') {\n      const error = new Error(\n        'Browser access mode in the Prometheus datasource is no longer available. Switch to server access mode.'\n      );\n      return throwError(() => error);\n    }\n\n    data = data || {};\n    for (const [key, value] of this.customQueryParameters) {\n      if (data[key] == null) {\n        data[key] = value;\n      }\n    }\n\n    let queryUrl = this.url + url;\n    if (url.startsWith(`/api/datasources/${this.id}`)) {\n      // This url is meant to be a replacement for the whole URL. Replace the entire URL\n      queryUrl = url;\n    }\n\n    const options: BackendSrvRequest = defaults(overrides, {\n      url: queryUrl,\n      method: this.httpMethod,\n      headers: {},\n    });\n\n    if (options.method === 'GET') {\n      if (data && Object.keys(data).length) {\n        options.url =\n          options.url +\n          (options.url.search(/\\?/) >= 0 ? '&' : '?') +\n          Object.entries(data)\n            .map(([k, v]) => `${encodeURIComponent(k)}=${encodeURIComponent(v)}`)\n            .join('&');\n      }\n    } else {\n      options.headers!['Content-Type'] = 'application/x-www-form-urlencoded';\n      options.data = data;\n    }\n\n    if (this.basicAuth || this.withCredentials) {\n      options.withCredentials = true;\n    }\n\n    if (this.basicAuth) {\n      options.headers!.Authorization = this.basicAuth;\n    }\n\n    return getBackendSrv().fetch<T>(options);\n  }\n\n  async importFromAbstractQueries(abstractQueries: AbstractQuery[]): Promise<PromQuery[]> {\n    return abstractQueries.map((abstractQuery) => this.languageProvider.importFromAbstractQuery(abstractQuery));\n  }\n\n  async exportToAbstractQueries(queries: PromQuery[]): Promise<AbstractQuery[]> {\n    return queries.map((query) => this.languageProvider.exportToAbstractQuery(query));\n  }\n\n  // Use this for tab completion features, wont publish response to other components\n  async metadataRequest<T = any>(url: string, params = {}, options?: Partial<BackendSrvRequest>) {\n    // If URL includes endpoint that supports POST and GET method, try to use configured method. This might fail as POST is supported only in v2.10+.\n    if (GET_AND_POST_METADATA_ENDPOINTS.some((endpoint) => url.includes(endpoint))) {\n      try {\n        return await lastValueFrom(\n          this._request<T>(`/api/datasources/${this.id}/resources${url}`, params, {\n            method: this.httpMethod,\n            hideFromInspector: true,\n            showErrorAlert: false,\n            ...options,\n          })\n        );\n      } catch (err) {\n        // If status code of error is Method Not Allowed (405) and HTTP method is POST, retry with GET\n        if (this.httpMethod === 'POST' && isFetchError(err) && (err.status === 405 || err.status === 400)) {\n          console.warn(`Couldn't use configured POST HTTP method for this request. Trying to use GET method instead.`);\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    return await lastValueFrom(\n      this._request<T>(`/api/datasources/${this.id}/resources${url}`, params, {\n        method: 'GET',\n        hideFromInspector: true,\n        ...options,\n      })\n    ); // toPromise until we change getTagValues, getTagKeys to Observable\n  }\n\n  interpolateQueryExpr(value: string | string[] = [], variable: any) {\n    // if no multi or include all do not regexEscape\n    if (!variable.multi && !variable.includeAll) {\n      return prometheusRegularEscape(value);\n    }\n\n    if (typeof value === 'string') {\n      return prometheusSpecialRegexEscape(value);\n    }\n\n    const escapedValues = value.map((val) => prometheusSpecialRegexEscape(val));\n\n    if (escapedValues.length === 1) {\n      return escapedValues[0];\n    }\n\n    return '(' + escapedValues.join('|') + ')';\n  }\n\n  targetContainsTemplate(target: PromQuery) {\n    return this.templateSrv.containsTemplate(target.expr);\n  }\n\n  prepareTargets = (options: DataQueryRequest<PromQuery>, start: number, end: number) => {\n    const queries: PromQueryRequest[] = [];\n    const activeTargets: PromQuery[] = [];\n    const clonedTargets = cloneDeep(options.targets);\n\n    for (const target of clonedTargets) {\n      if (!target.expr || target.hide) {\n        continue;\n      }\n\n      target.requestId = options.panelId + target.refId;\n      const metricName = this.languageProvider.histogramMetrics.find((m) => target.expr.includes(m));\n\n      // In Explore, we run both (instant and range) queries if both are true (selected) or both are undefined (legacy Explore queries)\n      if (options.app === CoreApp.Explore && target.range === target.instant) {\n        // Create instant target\n        const instantTarget: any = cloneDeep(target);\n        instantTarget.format = 'table';\n        instantTarget.instant = true;\n        instantTarget.range = false;\n        instantTarget.valueWithRefId = true;\n        delete instantTarget.maxDataPoints;\n        instantTarget.requestId += '_instant';\n\n        // Create range target\n        const rangeTarget: any = cloneDeep(target);\n        rangeTarget.format = 'time_series';\n        rangeTarget.instant = false;\n        instantTarget.range = true;\n\n        // Create exemplar query\n        if (target.exemplar) {\n          // Only create exemplar target for different metric names\n          if (\n            !metricName ||\n            (metricName && !activeTargets.some((activeTarget) => activeTarget.expr.includes(metricName)))\n          ) {\n            const exemplarTarget = cloneDeep(target);\n            exemplarTarget.instant = false;\n            exemplarTarget.requestId += '_exemplar';\n            queries.push(this.createQuery(exemplarTarget, options, start, end));\n            activeTargets.push(exemplarTarget);\n          }\n          instantTarget.exemplar = false;\n          rangeTarget.exemplar = false;\n        }\n\n        // Add both targets to activeTargets and queries arrays\n        activeTargets.push(instantTarget, rangeTarget);\n        queries.push(\n          this.createQuery(instantTarget, options, start, end),\n          this.createQuery(rangeTarget, options, start, end)\n        );\n        // If running only instant query in Explore, format as table\n      } else if (target.instant && options.app === CoreApp.Explore) {\n        const instantTarget: any = cloneDeep(target);\n        instantTarget.format = 'table';\n        queries.push(this.createQuery(instantTarget, options, start, end));\n        activeTargets.push(instantTarget);\n      } else {\n        // It doesn't make sense to query for exemplars in dashboard if only instant is selected\n        if (target.exemplar && !target.instant) {\n          if (\n            !metricName ||\n            (metricName && !activeTargets.some((activeTarget) => activeTarget.expr.includes(metricName)))\n          ) {\n            const exemplarTarget = cloneDeep(target);\n            exemplarTarget.requestId += '_exemplar';\n            queries.push(this.createQuery(exemplarTarget, options, start, end));\n            activeTargets.push(exemplarTarget);\n          }\n          target.exemplar = false;\n        }\n        queries.push(this.createQuery(target, options, start, end));\n        activeTargets.push(target);\n      }\n    }\n\n    return {\n      queries,\n      activeTargets,\n    };\n  };\n\n  shouldRunExemplarQuery(target: PromQuery, request: DataQueryRequest<PromQuery>): boolean {\n    if (target.exemplar) {\n      // We check all already processed targets and only create exemplar target for not used metric names\n      const metricName = this.languageProvider.histogramMetrics.find((m) => target.expr.includes(m));\n      // Remove targets that weren't processed yet (in targets array they are after current target)\n      const currentTargetIdx = request.targets.findIndex((t) => t.refId === target.refId);\n      const targets = request.targets.slice(0, currentTargetIdx).filter((t) => !t.hide);\n\n      if (!metricName || (metricName && !targets.some((t) => t.expr.includes(metricName)))) {\n        return true;\n      }\n      return false;\n    }\n    return false;\n  }\n\n  processTargetV2(target: PromQuery, request: DataQueryRequest<PromQuery>) {\n    const processedTarget = {\n      ...target,\n      queryType: PromQueryType.timeSeriesQuery,\n      exemplar: this.shouldRunExemplarQuery(target, request),\n      requestId: request.panelId + target.refId,\n      // We need to pass utcOffsetSec to backend to calculate aligned range\n      utcOffsetSec: this.timeSrv.timeRange().to.utcOffset() * 60,\n    };\n    return processedTarget;\n  }\n\n  query(request: DataQueryRequest<PromQuery>): Observable<DataQueryResponse> {\n    if (this.access === 'proxy') {\n      const targets = request.targets.map((target) => this.processTargetV2(target, request));\n      return super\n        .query({ ...request, targets })\n        .pipe(\n          map((response) =>\n            transformV2(response, request, { exemplarTraceIdDestinations: this.exemplarTraceIdDestinations })\n          )\n        );\n      // Run queries trough browser/proxy\n    } else {\n      const start = this.getPrometheusTime(request.range.from, false);\n      const end = this.getPrometheusTime(request.range.to, true);\n      const { queries, activeTargets } = this.prepareTargets(request, start, end);\n\n      // No valid targets, return the empty result to save a round trip.\n      if (!queries || !queries.length) {\n        return of({\n          data: [],\n          state: LoadingState.Done,\n        });\n      }\n\n      if (request.app === CoreApp.Explore) {\n        return this.exploreQuery(queries, activeTargets, end);\n      }\n\n      return this.panelsQuery(queries, activeTargets, end, request.requestId, request.scopedVars);\n    }\n  }\n\n  private exploreQuery(queries: PromQueryRequest[], activeTargets: PromQuery[], end: number) {\n    let runningQueriesCount = queries.length;\n\n    const subQueries = queries.map((query, index) => {\n      const target = activeTargets[index];\n\n      const filterAndMapResponse = pipe(\n        // Decrease the counter here. We assume that each request returns only single value and then completes\n        // (should hold until there is some streaming requests involved).\n        tap(() => runningQueriesCount--),\n        filter((response: any) => (response.cancelled ? false : true)),\n        map((response: any) => {\n          const data = transform(response, {\n            query,\n            target,\n            responseListLength: queries.length,\n            exemplarTraceIdDestinations: this.exemplarTraceIdDestinations,\n          });\n          return {\n            data,\n            key: query.requestId,\n            state: runningQueriesCount === 0 ? LoadingState.Done : LoadingState.Loading,\n          } as DataQueryResponse;\n        })\n      );\n\n      return this.runQuery(query, end, filterAndMapResponse);\n    });\n\n    return merge(...subQueries);\n  }\n\n  private panelsQuery(\n    queries: PromQueryRequest[],\n    activeTargets: PromQuery[],\n    end: number,\n    requestId: string,\n    scopedVars: ScopedVars\n  ) {\n    const observables = queries.map((query, index) => {\n      const target = activeTargets[index];\n\n      const filterAndMapResponse = pipe(\n        filter((response: any) => (response.cancelled ? false : true)),\n        map((response: any) => {\n          const data = transform(response, {\n            query,\n            target,\n            responseListLength: queries.length,\n            scopedVars,\n            exemplarTraceIdDestinations: this.exemplarTraceIdDestinations,\n          });\n          return data;\n        })\n      );\n\n      return this.runQuery(query, end, filterAndMapResponse);\n    });\n\n    return forkJoin(observables).pipe(\n      map((results) => {\n        const data = results.reduce((result, current) => {\n          return [...result, ...current];\n        }, []);\n        return {\n          data,\n          key: requestId,\n          state: LoadingState.Done,\n        };\n      })\n    );\n  }\n\n  private runQuery<T>(query: PromQueryRequest, end: number, filter: OperatorFunction<any, T>): Observable<T> {\n    if (query.instant) {\n      return this.performInstantQuery(query, end).pipe(filter);\n    }\n\n    if (query.exemplar) {\n      return this.getExemplars(query).pipe(\n        catchError(() => {\n          return of({\n            data: [],\n            state: LoadingState.Done,\n          });\n        }),\n        filter\n      );\n    }\n\n    return this.performTimeSeriesQuery(query, query.start, query.end).pipe(filter);\n  }\n\n  createQuery(target: PromQuery, options: DataQueryRequest<PromQuery>, start: number, end: number) {\n    const query: PromQueryRequest = {\n      hinting: target.hinting,\n      instant: target.instant,\n      exemplar: target.exemplar,\n      step: 0,\n      expr: '',\n      requestId: target.requestId,\n      refId: target.refId,\n      start: 0,\n      end: 0,\n    };\n    const range = Math.ceil(end - start);\n\n    // options.interval is the dynamically calculated interval\n    let interval: number = rangeUtil.intervalToSeconds(options.interval);\n    // Minimum interval (\"Min step\"), if specified for the query, or same as interval otherwise.\n    const minInterval = rangeUtil.intervalToSeconds(\n      this.templateSrv.replace(target.interval || options.interval, options.scopedVars)\n    );\n    // Scrape interval as specified for the query (\"Min step\") or otherwise taken from the datasource.\n    // Min step field can have template variables in it, make sure to replace it.\n    const scrapeInterval = target.interval\n      ? rangeUtil.intervalToSeconds(this.templateSrv.replace(target.interval, options.scopedVars))\n      : rangeUtil.intervalToSeconds(this.interval);\n\n    const intervalFactor = target.intervalFactor || 1;\n    // Adjust the interval to take into account any specified minimum and interval factor plus Prometheus limits\n    const adjustedInterval = this.adjustInterval(interval, minInterval, range, intervalFactor);\n    let scopedVars = {\n      ...options.scopedVars,\n      ...this.getRangeScopedVars(options.range),\n      ...this.getRateIntervalScopedVariable(adjustedInterval, scrapeInterval),\n    };\n    // If the interval was adjusted, make a shallow copy of scopedVars with updated interval vars\n    if (interval !== adjustedInterval) {\n      interval = adjustedInterval;\n      scopedVars = Object.assign({}, options.scopedVars, {\n        __interval: { text: interval + 's', value: interval + 's' },\n        __interval_ms: { text: interval * 1000, value: interval * 1000 },\n        ...this.getRateIntervalScopedVariable(interval, scrapeInterval),\n        ...this.getRangeScopedVars(options.range),\n      });\n    }\n    query.step = interval;\n\n    let expr = target.expr;\n\n    // Apply adhoc filters\n    expr = this.enhanceExprWithAdHocFilters(expr);\n\n    // Only replace vars in expression after having (possibly) updated interval vars\n    query.expr = this.templateSrv.replace(expr, scopedVars, this.interpolateQueryExpr);\n\n    // Align query interval with step to allow query caching and to ensure\n    // that about-same-time query results look the same.\n    const adjusted = alignRange(start, end, query.step, this.timeSrv.timeRange().to.utcOffset() * 60);\n    query.start = adjusted.start;\n    query.end = adjusted.end;\n    this._addTracingHeaders(query, options);\n\n    return query;\n  }\n\n  getRateIntervalScopedVariable(interval: number, scrapeInterval: number) {\n    // Fall back to the default scrape interval of 15s if scrapeInterval is 0 for some reason.\n    if (scrapeInterval === 0) {\n      scrapeInterval = 15;\n    }\n    const rateInterval = Math.max(interval + scrapeInterval, 4 * scrapeInterval);\n    return { __rate_interval: { text: rateInterval + 's', value: rateInterval + 's' } };\n  }\n\n  adjustInterval(interval: number, minInterval: number, range: number, intervalFactor: number) {\n    // Prometheus will drop queries that might return more than 11000 data points.\n    // Calculate a safe interval as an additional minimum to take into account.\n    // Fractional safeIntervals are allowed, however serve little purpose if the interval is greater than 1\n    // If this is the case take the ceil of the value.\n    let safeInterval = range / 11000;\n    if (safeInterval > 1) {\n      safeInterval = Math.ceil(safeInterval);\n    }\n    return Math.max(interval * intervalFactor, minInterval, safeInterval);\n  }\n\n  performTimeSeriesQuery(query: PromQueryRequest, start: number, end: number) {\n    if (start > end) {\n      throw { message: 'Invalid time range' };\n    }\n\n    const url = '/api/v1/query_range';\n    const data: any = {\n      query: query.expr,\n      start,\n      end,\n      step: query.step,\n    };\n\n    if (this.queryTimeout) {\n      data['timeout'] = this.queryTimeout;\n    }\n\n    return this._request<PromDataSuccessResponse<PromMatrixData>>(url, data, {\n      requestId: query.requestId,\n      headers: query.headers,\n    }).pipe(\n      catchError((err: FetchError<PromDataErrorResponse<PromMatrixData>>) => {\n        if (err.cancelled) {\n          return of(err);\n        }\n\n        return throwError(this.handleErrors(err, query));\n      })\n    );\n  }\n\n  performInstantQuery(\n    query: PromQueryRequest,\n    time: number\n  ): Observable<FetchResponse<PromDataSuccessResponse<PromVectorData | PromScalarData>> | FetchError> {\n    const url = '/api/v1/query';\n    const data: any = {\n      query: query.expr,\n      time,\n    };\n\n    if (this.queryTimeout) {\n      data['timeout'] = this.queryTimeout;\n    }\n\n    return this._request<PromDataSuccessResponse<PromVectorData | PromScalarData>>(\n      `/api/datasources/${this.id}/resources${url}`,\n      data,\n      {\n        requestId: query.requestId,\n        headers: query.headers,\n      }\n    ).pipe(\n      catchError((err: FetchError<PromDataErrorResponse<PromVectorData | PromScalarData>>) => {\n        if (err.cancelled) {\n          return of(err);\n        }\n\n        return throwError(this.handleErrors(err, query));\n      })\n    );\n  }\n\n  handleErrors = (err: any, target: PromQuery) => {\n    const error: DataQueryError = {\n      message: (err && err.statusText) || 'Unknown error during query transaction. Please check JS console logs.',\n      refId: target.refId,\n    };\n\n    if (err.data) {\n      if (typeof err.data === 'string') {\n        error.message = err.data;\n      } else if (err.data.error) {\n        error.message = safeStringifyValue(err.data.error);\n      }\n    } else if (err.message) {\n      error.message = err.message;\n    } else if (typeof err === 'string') {\n      error.message = err;\n    }\n\n    error.status = err.status;\n    error.statusText = err.statusText;\n\n    return error;\n  };\n\n  metricFindQuery(query: string) {\n    if (!query) {\n      return Promise.resolve([]);\n    }\n\n    const scopedVars = {\n      __interval: { text: this.interval, value: this.interval },\n      __interval_ms: { text: rangeUtil.intervalToMs(this.interval), value: rangeUtil.intervalToMs(this.interval) },\n      ...this.getRangeScopedVars(this.timeSrv.timeRange()),\n    };\n    const interpolated = this.templateSrv.replace(query, scopedVars, this.interpolateQueryExpr);\n    const metricFindQuery = new PrometheusMetricFindQuery(this, interpolated);\n    return metricFindQuery.process();\n  }\n\n  getRangeScopedVars(range: TimeRange = this.timeSrv.timeRange()) {\n    const msRange = range.to.diff(range.from);\n    const sRange = Math.round(msRange / 1000);\n    return {\n      __range_ms: { text: msRange, value: msRange },\n      __range_s: { text: sRange, value: sRange },\n      __range: { text: sRange + 's', value: sRange + 's' },\n    };\n  }\n\n  async annotationQuery(options: AnnotationQueryRequest<PromQuery>): Promise<AnnotationEvent[]> {\n    if (this.access === 'direct') {\n      const error = new Error(\n        'Browser access mode in the Prometheus datasource is no longer available. Switch to server access mode.'\n      );\n      return Promise.reject(error);\n    }\n\n    const annotation = options.annotation;\n    const { expr = '' } = annotation;\n\n    if (!expr) {\n      return Promise.resolve([]);\n    }\n\n    const step = options.annotation.step || ANNOTATION_QUERY_STEP_DEFAULT;\n    const queryModel = {\n      expr,\n      range: true,\n      instant: false,\n      exemplar: false,\n      interval: step,\n      queryType: PromQueryType.timeSeriesQuery,\n      refId: 'X',\n      datasource: this.getRef(),\n    };\n\n    return await lastValueFrom(\n      getBackendSrv()\n        .fetch<BackendDataSourceResponse>({\n          url: '/api/ds/query',\n          method: 'POST',\n          data: {\n            from: (this.getPrometheusTime(options.range.from, false) * 1000).toString(),\n            to: (this.getPrometheusTime(options.range.to, true) * 1000).toString(),\n            queries: [this.applyTemplateVariables(queryModel, {})],\n          },\n          requestId: `prom-query-${annotation.name}`,\n        })\n        .pipe(\n          map((rsp: FetchResponse<BackendDataSourceResponse>) => {\n            return this.processAnnotationResponse(options, rsp.data);\n          })\n        )\n    );\n  }\n\n  processAnnotationResponse = (options: AnnotationQueryRequest<PromQuery>, data: BackendDataSourceResponse) => {\n    const frames: DataFrame[] = toDataQueryResponse({ data: data }).data;\n    if (!frames || !frames.length) {\n      return [];\n    }\n\n    const annotation = options.annotation;\n    const { tagKeys = '', titleFormat = '', textFormat = '' } = annotation;\n\n    const step = rangeUtil.intervalToSeconds(annotation.step || ANNOTATION_QUERY_STEP_DEFAULT) * 1000;\n    const tagKeysArray = tagKeys.split(',');\n\n    const eventList: AnnotationEvent[] = [];\n\n    for (const frame of frames) {\n      const timeField = frame.fields[0];\n      const valueField = frame.fields[1];\n      const labels = valueField?.labels || {};\n\n      const tags = Object.keys(labels)\n        .filter((label) => tagKeysArray.includes(label))\n        .map((label) => labels[label]);\n\n      const timeValueTuple: Array<[number, number]> = [];\n\n      let idx = 0;\n      valueField.values.toArray().forEach((value: string) => {\n        let timeStampValue: number;\n        let valueValue: number;\n        const time = timeField.values.get(idx);\n\n        // If we want to use value as a time, we use value as timeStampValue and valueValue will be 1\n        if (options.annotation.useValueForTime) {\n          timeStampValue = Math.floor(parseFloat(value));\n          valueValue = 1;\n        } else {\n          timeStampValue = Math.floor(parseFloat(time));\n          valueValue = parseFloat(value);\n        }\n\n        idx++;\n        timeValueTuple.push([timeStampValue, valueValue]);\n      });\n\n      const activeValues = timeValueTuple.filter((value) => value[1] >= 1);\n      const activeValuesTimestamps = activeValues.map((value) => value[0]);\n\n      // Instead of creating singular annotation for each active event we group events into region if they are less\n      // or equal to `step` apart.\n      let latestEvent: AnnotationEvent | null = null;\n\n      for (const timestamp of activeValuesTimestamps) {\n        // We already have event `open` and we have new event that is inside the `step` so we just update the end.\n        if (latestEvent && (latestEvent.timeEnd ?? 0) + step >= timestamp) {\n          latestEvent.timeEnd = timestamp;\n          continue;\n        }\n\n        // Event exists but new one is outside of the `step` so we add it to eventList.\n        if (latestEvent) {\n          eventList.push(latestEvent);\n        }\n\n        // We start a new region.\n        latestEvent = {\n          time: timestamp,\n          timeEnd: timestamp,\n          annotation,\n          title: renderLegendFormat(titleFormat, labels),\n          tags,\n          text: renderLegendFormat(textFormat, labels),\n        };\n      }\n\n      if (latestEvent) {\n        // Finish up last point if we have one\n        latestEvent.timeEnd = activeValuesTimestamps[activeValuesTimestamps.length - 1];\n        eventList.push(latestEvent);\n      }\n    }\n\n    return eventList;\n  };\n\n  getExemplars(query: PromQueryRequest) {\n    const url = '/api/v1/query_exemplars';\n    return this._request<PromDataSuccessResponse<PromExemplarData>>(\n      url,\n      { query: query.expr, start: query.start.toString(), end: query.end.toString() },\n      { requestId: query.requestId, headers: query.headers }\n    );\n  }\n\n  async getTagKeys(options?: any) {\n    if (options?.series) {\n      // Get tags for the provided series only\n      const seriesLabels: Array<Record<string, string[]>> = await Promise.all(\n        options.series.map((series: string) => this.languageProvider.fetchSeriesLabels(series))\n      );\n      // Combines tags from all options.series provided\n      let tags: string[] = [];\n      seriesLabels.map((value) => (tags = tags.concat(Object.keys(value))));\n      const uniqueLabels = [...new Set(tags)];\n      return uniqueLabels.map((value: any) => ({ text: value }));\n    } else {\n      // Get all tags\n      const result = await this.metadataRequest('/api/v1/labels');\n      return result?.data?.data?.map((value: any) => ({ text: value })) ?? [];\n    }\n  }\n\n  async getTagValues(options: { key?: string } = {}) {\n    const result = await this.metadataRequest(`/api/v1/label/${options.key}/values`);\n    return result?.data?.data?.map((value: any) => ({ text: value })) ?? [];\n  }\n\n  async getBuildInfo() {\n    try {\n      const buildInfo = await discoverDataSourceFeatures({ url: this.url, name: this.name, type: 'prometheus' });\n      return buildInfo;\n    } catch (error) {\n      // We don't want to break the rest of functionality if build info does not work correctly\n      return undefined;\n    }\n  }\n\n  getBuildInfoMessage(buildInfo: PromApiFeatures) {\n    const enabled = <Badge color=\"green\" icon=\"check\" text=\"Ruler API enabled\" />;\n    const disabled = <Badge color=\"orange\" icon=\"exclamation-triangle\" text=\"Ruler API not enabled\" />;\n    const unsupported = (\n      <Tooltip\n        placement=\"top\"\n        content=\"Prometheus does not allow editing rules, connect to either a Mimir or Cortex datasource to manage alerts via Grafana.\"\n      >\n        <div>\n          <Badge color=\"red\" icon=\"exclamation-triangle\" text=\"Ruler API not supported\" />\n        </div>\n      </Tooltip>\n    );\n\n    const LOGOS = {\n      [PromApplication.Cortex]: '/public/app/plugins/datasource/prometheus/img/cortex_logo.svg',\n      [PromApplication.Mimir]: '/public/app/plugins/datasource/prometheus/img/mimir_logo.svg',\n      [PromApplication.Prometheus]: '/public/app/plugins/datasource/prometheus/img/prometheus_logo.svg',\n      [PromApplication.Thanos]: '/public/app/plugins/datasource/prometheus/img/thanos_logo.svg',\n    };\n\n    const COLORS: Record<PromApplication, BadgeColor> = {\n      [PromApplication.Cortex]: 'blue',\n      [PromApplication.Mimir]: 'orange',\n      [PromApplication.Prometheus]: 'red',\n      [PromApplication.Thanos]: 'purple', // Purple hex taken from thanos.io\n    };\n\n    const AppDisplayNames: Record<PromApplication, string> = {\n      [PromApplication.Cortex]: 'Cortex',\n      [PromApplication.Mimir]: 'Mimir',\n      [PromApplication.Prometheus]: 'Prometheus',\n      [PromApplication.Thanos]: 'Thanos',\n    };\n\n    const application = this.datasourceConfigurationPrometheusFlavor ?? buildInfo.application;\n\n    // this will inform the user about what \"subtype\" the datasource is; Mimir, Cortex or vanilla Prometheus\n    const applicationSubType = (\n      <Badge\n        text={\n          <span>\n            <img\n              style={{ width: 14, height: 14, verticalAlign: 'text-bottom' }}\n              src={LOGOS[application ?? PromApplication.Prometheus]}\n            />{' '}\n            {application ? AppDisplayNames[application] : 'Unknown'}\n          </span>\n        }\n        color={COLORS[application ?? PromApplication.Prometheus]}\n      />\n    );\n\n    return (\n      <div\n        style={{\n          display: 'grid',\n          gridTemplateColumns: 'max-content max-content',\n          rowGap: '0.5rem',\n          columnGap: '2rem',\n          marginTop: '1rem',\n        }}\n      >\n        <div>Type</div>\n        <div>{applicationSubType}</div>\n        <>\n          <div>Ruler API</div>\n          {/* Prometheus does not have a Ruler API – so show that it is not supported */}\n          {buildInfo.application === PromApplication.Prometheus && <div>{unsupported}</div>}\n          {buildInfo.application !== PromApplication.Prometheus && (\n            <div>{buildInfo.features.rulerApiEnabled ? enabled : disabled}</div>\n          )}\n        </>\n      </div>\n    );\n  }\n\n  async testDatasource() {\n    const now = new Date().getTime();\n    const request: DataQueryRequest<PromQuery> = {\n      targets: [{ refId: 'test', expr: '1+1', instant: true }],\n      requestId: `${this.id}-health`,\n      scopedVars: {},\n      dashboardId: 0,\n      panelId: 0,\n      interval: '1m',\n      intervalMs: 60000,\n      maxDataPoints: 1,\n      range: {\n        from: dateTime(now - 1000),\n        to: dateTime(now),\n      },\n    } as DataQueryRequest<PromQuery>;\n\n    const buildInfo = await this.getBuildInfo();\n\n    return lastValueFrom(this.query(request))\n      .then((res: DataQueryResponse) => {\n        if (!res || !res.data || res.state !== LoadingState.Done) {\n          return { status: 'error', message: `Error reading Prometheus: ${res?.error?.message}` };\n        } else {\n          return {\n            status: 'success',\n            message: 'Data source is working',\n            details: buildInfo && {\n              verboseMessage: this.getBuildInfoMessage(buildInfo),\n            },\n          };\n        }\n      })\n      .catch((err: any) => {\n        console.error('Prometheus Error', err);\n        return { status: 'error', message: err.message };\n      });\n  }\n\n  interpolateVariablesInQueries(queries: PromQuery[], scopedVars: ScopedVars): PromQuery[] {\n    let expandedQueries = queries;\n    if (queries && queries.length) {\n      expandedQueries = queries.map((query) => {\n        const expandedQuery = {\n          ...query,\n          datasource: this.getRef(),\n          expr: this.enhanceExprWithAdHocFilters(\n            this.templateSrv.replace(query.expr, scopedVars, this.interpolateQueryExpr)\n          ),\n          interval: this.templateSrv.replace(query.interval, scopedVars),\n        };\n        return expandedQuery;\n      });\n    }\n    return expandedQueries;\n  }\n\n  getQueryHints(query: PromQuery, result: any[]) {\n    return getQueryHints(query.expr ?? '', result, this);\n  }\n\n  getInitHints() {\n    return getInitHints(this);\n  }\n\n  async loadRules() {\n    try {\n      const res = await this.metadataRequest('/api/v1/rules', {}, { showErrorAlert: false });\n      const groups = res.data?.data?.groups;\n\n      if (groups) {\n        this.ruleMappings = extractRuleMappingFromGroups(groups);\n      }\n    } catch (e) {\n      console.log('Rules API is experimental. Ignore next error.');\n      console.error(e);\n    }\n  }\n\n  async areExemplarsAvailable() {\n    try {\n      const res = await this.metadataRequest(\n        '/api/v1/query_exemplars',\n        {\n          query: 'test',\n          start: dateTime().subtract(30, 'minutes').valueOf().toString(),\n          end: dateTime().valueOf().toString(),\n        },\n        {\n          // Avoid alerting the user if this test fails\n          showErrorAlert: false,\n        }\n      );\n      if (res.data.status === 'success') {\n        return true;\n      }\n      return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  modifyQuery(query: PromQuery, action: QueryFixAction): PromQuery {\n    let expression = query.expr ?? '';\n    switch (action.type) {\n      case 'ADD_FILTER': {\n        const { key, value } = action.options ?? {};\n        if (key && value) {\n          expression = addLabelToQuery(expression, key, value);\n        }\n\n        break;\n      }\n      case 'ADD_FILTER_OUT': {\n        const { key, value } = action.options ?? {};\n        if (key && value) {\n          expression = addLabelToQuery(expression, key, value, '!=');\n        }\n        break;\n      }\n      case 'ADD_HISTOGRAM_QUANTILE': {\n        expression = `histogram_quantile(0.95, sum(rate(${expression}[$__rate_interval])) by (le))`;\n        break;\n      }\n      case 'ADD_RATE': {\n        expression = `rate(${expression}[$__rate_interval])`;\n        break;\n      }\n      case 'ADD_SUM': {\n        expression = `sum(${expression.trim()}) by ($1)`;\n        break;\n      }\n      case 'EXPAND_RULES': {\n        if (action.options) {\n          expression = expandRecordingRules(expression, action.options);\n        }\n        break;\n      }\n      default:\n        break;\n    }\n    return { ...query, expr: expression };\n  }\n\n  getPrometheusTime(date: string | DateTime, roundUp: boolean) {\n    if (typeof date === 'string') {\n      date = dateMath.parse(date, roundUp)!;\n    }\n\n    return Math.ceil(date.valueOf() / 1000);\n  }\n\n  getTimeRangeParams(): { start: string; end: string } {\n    const range = this.timeSrv.timeRange();\n    return {\n      start: this.getPrometheusTime(range.from, false).toString(),\n      end: this.getPrometheusTime(range.to, true).toString(),\n    };\n  }\n\n  getOriginalMetricName(labelData: { [key: string]: string }) {\n    return getOriginalMetricName(labelData);\n  }\n\n  enhanceExprWithAdHocFilters(expr: string) {\n    const adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n\n    const finalQuery = adhocFilters.reduce((acc: string, filter: { key?: any; operator?: any; value?: any }) => {\n      const { key, operator } = filter;\n      let { value } = filter;\n      if (operator === '=~' || operator === '!~') {\n        value = prometheusRegularEscape(value);\n      }\n      return addLabelToQuery(acc, key, value, operator);\n    }, expr);\n    return finalQuery;\n  }\n\n  // Used when running queries trough backend\n  filterQuery(query: PromQuery): boolean {\n    if (query.hide || !query.expr) {\n      return false;\n    }\n    return true;\n  }\n\n  // Used when running queries trough backend\n  applyTemplateVariables(target: PromQuery, scopedVars: ScopedVars): Record<string, any> {\n    const variables = cloneDeep(scopedVars);\n\n    // We want to interpolate these variables on backend\n    delete variables.__interval;\n    delete variables.__interval_ms;\n\n    //Add ad hoc filters\n    const expr = this.enhanceExprWithAdHocFilters(target.expr);\n\n    return {\n      ...target,\n      legendFormat: this.templateSrv.replace(target.legendFormat, variables),\n      expr: this.templateSrv.replace(expr, variables, this.interpolateQueryExpr),\n      interval: this.templateSrv.replace(target.interval, variables),\n    };\n  }\n\n  getVariables(): string[] {\n    return this.templateSrv.getVariables().map((v) => `$${v.name}`);\n  }\n\n  interpolateString(string: string) {\n    return this.templateSrv.replace(string, undefined, this.interpolateQueryExpr);\n  }\n}\n\n/**\n * Align query range to step.\n * Rounds start and end down to a multiple of step.\n * @param start Timestamp marking the beginning of the range.\n * @param end Timestamp marking the end of the range.\n * @param step Interval to align start and end with.\n * @param utcOffsetSec Number of seconds current timezone is offset from UTC\n */\nexport function alignRange(\n  start: number,\n  end: number,\n  step: number,\n  utcOffsetSec: number\n): { end: number; start: number } {\n  const alignedEnd = Math.floor((end + utcOffsetSec) / step) * step - utcOffsetSec;\n  const alignedStart = Math.floor((start + utcOffsetSec) / step) * step - utcOffsetSec;\n  return {\n    end: alignedEnd,\n    start: alignedStart,\n  };\n}\n\nexport function extractRuleMappingFromGroups(groups: any[]) {\n  return groups.reduce(\n    (mapping, group) =>\n      group.rules\n        .filter((rule: any) => rule.type === 'recording')\n        .reduce(\n          (acc: { [key: string]: string }, rule: any) => ({\n            ...acc,\n            [rule.name]: rule.query,\n          }),\n          mapping\n        ),\n    {}\n  );\n}\n\n// NOTE: these two functions are very similar to the escapeLabelValueIn* functions\n// in language_utils.ts, but they are not exactly the same algorithm, and we found\n// no way to reuse one in the another or vice versa.\nexport function prometheusRegularEscape(value: any) {\n  return typeof value === 'string' ? value.replace(/\\\\/g, '\\\\\\\\').replace(/'/g, \"\\\\\\\\'\") : value;\n}\n\nexport function prometheusSpecialRegexEscape(value: any) {\n  return typeof value === 'string' ? value.replace(/\\\\/g, '\\\\\\\\\\\\\\\\').replace(/[$^*{}\\[\\]\\'+?.()|]/g, '\\\\\\\\$&') : value;\n}\n","import { size } from 'lodash';\n\nimport { QueryHint, QueryFix } from '@grafana/data';\n\nimport { PrometheusDatasource } from './datasource';\n\n/**\n * Number of time series results needed before starting to suggest sum aggregation hints\n */\nexport const SUM_HINT_THRESHOLD_COUNT = 20;\n\nexport function getQueryHints(query: string, series?: any[], datasource?: PrometheusDatasource): QueryHint[] {\n  const hints = [];\n\n  // ..._bucket metric needs a histogram_quantile()\n  const histogramMetric = query.trim().match(/^\\w+_bucket$|^\\w+_bucket{.*}$/);\n  if (histogramMetric) {\n    const label = 'Selected metric has buckets.';\n    hints.push({\n      type: 'HISTOGRAM_QUANTILE',\n      label,\n      fix: {\n        label: 'Consider calculating aggregated quantile by adding histogram_quantile().',\n        action: {\n          type: 'ADD_HISTOGRAM_QUANTILE',\n          query,\n        },\n      } as QueryFix,\n    });\n  }\n\n  // Check for need of rate()\n  if (query.indexOf('rate(') === -1 && query.indexOf('increase(') === -1) {\n    // Use metric metadata for exact types\n    const nameMatch = query.match(/\\b(\\w+_(total|sum|count))\\b/);\n    let counterNameMetric = nameMatch ? nameMatch[1] : '';\n    const metricsMetadata = datasource?.languageProvider?.metricsMetadata;\n    let certain = false;\n\n    if (metricsMetadata) {\n      // Tokenize the query into its identifiers (see https://prometheus.io/docs/concepts/data_model/#metric-names-and-labels)\n      const queryTokens = Array.from(query.matchAll(/\\$?[a-zA-Z_:][a-zA-Z0-9_:]*/g))\n        .map(([match]) => match)\n        // Exclude variable identifiers\n        .filter((token) => !token.startsWith('$'))\n        // Split composite keys to match the tokens returned by the language provider\n        .flatMap((token) => token.split(':'));\n      // Determine whether any of the query identifier tokens refers to a counter metric\n      counterNameMetric =\n        queryTokens.find((metricName) => {\n          // Only considering first type information, could be non-deterministic\n          const metadata = metricsMetadata[metricName];\n          if (metadata && metadata.type.toLowerCase() === 'counter') {\n            certain = true;\n            return true;\n          } else {\n            return false;\n          }\n        }) ?? '';\n    }\n\n    if (counterNameMetric) {\n      // FixableQuery consists of metric name and optionally label-value pairs. We are not offering fix for complex queries yet.\n      const fixableQuery = query.trim().match(/^\\w+$|^\\w+{.*}$/);\n      const verb = certain ? 'is' : 'looks like';\n      let label = `Selected metric ${verb} a counter.`;\n      let fix: QueryFix | undefined;\n\n      if (fixableQuery) {\n        fix = {\n          label: 'Consider calculating rate of counter by adding rate().',\n          action: {\n            type: 'ADD_RATE',\n            query,\n          },\n        };\n      } else {\n        label = `${label} Consider calculating rate of counter by adding rate().`;\n      }\n\n      hints.push({\n        type: 'APPLY_RATE',\n        label,\n        fix,\n      });\n    }\n  }\n\n  // Check for recording rules expansion\n  if (datasource && datasource.ruleMappings) {\n    const mapping = datasource.ruleMappings;\n    const mappingForQuery = Object.keys(mapping).reduce((acc, ruleName) => {\n      if (query.search(ruleName) > -1) {\n        return {\n          ...acc,\n          [ruleName]: mapping[ruleName],\n        };\n      }\n      return acc;\n    }, {});\n    if (size(mappingForQuery) > 0) {\n      const label = 'Query contains recording rules.';\n      hints.push({\n        type: 'EXPAND_RULES',\n        label,\n        fix: {\n          label: 'Expand rules',\n          action: {\n            type: 'EXPAND_RULES',\n            query,\n            options: mappingForQuery,\n          },\n        } as any as QueryFix,\n      });\n    }\n  }\n\n  if (series && series.length >= SUM_HINT_THRESHOLD_COUNT) {\n    const simpleMetric = query.trim().match(/^\\w+$/);\n    if (simpleMetric) {\n      hints.push({\n        type: 'ADD_SUM',\n        label: 'Many time series results returned.',\n        fix: {\n          label: 'Consider aggregating with sum().',\n          action: {\n            type: 'ADD_SUM',\n            query: query,\n            preventSubmit: true,\n          },\n        } as QueryFix,\n      });\n    }\n  }\n\n  return hints;\n}\n\nexport function getInitHints(datasource: PrometheusDatasource): QueryHint[] {\n  const hints = [];\n  // Hint if using Loki as Prometheus data source\n  if (datasource.directUrl.includes('/loki') && !datasource.languageProvider.metrics.length) {\n    hints.push({\n      label: `Using Loki as a Prometheus data source is no longer supported. You must use the Loki data source for your Loki instance.`,\n      type: 'INFO',\n    });\n  }\n\n  // Hint for big disabled lookups\n  if (datasource.lookupsDisabled) {\n    hints.push({\n      label: `Labels and metrics lookup was disabled in data source settings.`,\n      type: 'INFO',\n    });\n  }\n\n  return hints;\n}\n","import { DataSourcePlugin } from '@grafana/data';\n\nimport PromCheatSheet from './components/PromCheatSheet';\nimport PromQueryEditorByApp from './components/PromQueryEditorByApp';\nimport { ConfigEditor } from './configuration/ConfigEditor';\nimport { PrometheusDatasource } from './datasource';\n\nexport const plugin = new DataSourcePlugin(PrometheusDatasource)\n  .setQueryEditor(PromQueryEditorByApp)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditorHelp(PromCheatSheet);\n","import React, { useRef } from 'react';\n\nimport { SIGV4ConnectionConfig } from '@grafana/aws-sdk';\nimport { DataSourcePluginOptionsEditorProps, DataSourceSettings } from '@grafana/data';\nimport { AlertingSettings, DataSourceHttpSettings, Alert } from '@grafana/ui';\nimport { config } from 'app/core/config';\nimport { getAllAlertmanagerDataSources } from 'app/features/alerting/unified/utils/alertmanager';\n\nimport { PromOptions } from '../types';\n\nimport { AzureAuthSettings } from './AzureAuthSettings';\nimport { hasCredentials, setDefaultCredentials, resetCredentials } from './AzureCredentialsConfig';\nimport { PromSettings } from './PromSettings';\n\nexport type Props = DataSourcePluginOptionsEditorProps<PromOptions>;\nexport const ConfigEditor = (props: Props) => {\n  const { options, onOptionsChange } = props;\n  const alertmanagers = getAllAlertmanagerDataSources();\n  // use ref so this is evaluated only first time it renders and the select does not disappear suddenly.\n  const showAccessOptions = useRef(props.options.access === 'direct');\n\n  const azureAuthSettings = {\n    azureAuthSupported: config.azureAuthEnabled,\n    getAzureAuthEnabled: (config: DataSourceSettings<any, any>): boolean => hasCredentials(config),\n    setAzureAuthEnabled: (config: DataSourceSettings<any, any>, enabled: boolean) =>\n      enabled ? setDefaultCredentials(config) : resetCredentials(config),\n    azureSettingsUI: AzureAuthSettings,\n  };\n\n  return (\n    <>\n      {options.access === 'direct' && (\n        <Alert title=\"Error\" severity=\"error\">\n          Browser access mode in the Prometheus datasource is no longer available. Switch to server access mode.\n        </Alert>\n      )}\n\n      <DataSourceHttpSettings\n        defaultUrl=\"http://localhost:9090\"\n        dataSourceConfig={options}\n        showAccessOptions={showAccessOptions.current}\n        onChange={onOptionsChange}\n        sigV4AuthToggleEnabled={config.sigV4AuthEnabled}\n        azureAuthSettings={azureAuthSettings}\n        renderSigV4Editor={<SIGV4ConnectionConfig {...props}></SIGV4ConnectionConfig>}\n      />\n\n      <AlertingSettings<PromOptions>\n        alertmanagerDataSources={alertmanagers}\n        options={options}\n        onOptionsChange={onOptionsChange}\n      />\n\n      <PromSettings options={options} onOptionsChange={onOptionsChange} />\n    </>\n  );\n};\n","import { Grammar } from 'prismjs';\n\nimport { CompletionItem } from '@grafana/ui';\n\n// When changing RATE_RANGES, check if Loki/LogQL ranges should be changed too\n// @see public/app/plugins/datasource/loki/LanguageProvider.ts\nexport const RATE_RANGES: CompletionItem[] = [\n  { label: '$__interval', sortValue: '$__interval' },\n  { label: '$__rate_interval', sortValue: '$__rate_interval' },\n  { label: '$__range', sortValue: '$__range' },\n  { label: '1m', sortValue: '00:01:00' },\n  { label: '5m', sortValue: '00:05:00' },\n  { label: '10m', sortValue: '00:10:00' },\n  { label: '30m', sortValue: '00:30:00' },\n  { label: '1h', sortValue: '01:00:00' },\n  { label: '1d', sortValue: '24:00:00' },\n];\n\nexport const OPERATORS = ['by', 'group_left', 'group_right', 'ignoring', 'on', 'offset', 'without'];\nexport const LOGICAL_OPERATORS = ['or', 'and', 'unless'];\n\nconst TRIGONOMETRIC_FUNCTIONS: CompletionItem[] = [\n  {\n    label: 'acos',\n    insertText: 'acos',\n    detail: 'acos(v instant-vector)',\n    documentation: 'calculates the arccosine of all elements in v',\n  },\n  {\n    label: 'acosh',\n    insertText: 'acosh',\n    detail: 'acosh(v instant-vector)',\n    documentation: 'calculates the inverse hyperbolic cosine of all elements in v',\n  },\n  {\n    label: 'asin',\n    insertText: 'asin',\n    detail: 'asin(v instant-vector)',\n    documentation: 'calculates the arcsine of all elements in v',\n  },\n  {\n    label: 'asinh',\n    insertText: 'asinh',\n    detail: 'asinh(v instant-vector)',\n    documentation: 'calculates the inverse hyperbolic sine of all elements in v',\n  },\n  {\n    label: 'atan',\n    insertText: 'atan',\n    detail: 'atan(v instant-vector)',\n    documentation: 'calculates the arctangent of all elements in v',\n  },\n  {\n    label: 'atanh',\n    insertText: 'atanh',\n    detail: 'atanh(v instant-vector)',\n    documentation: 'calculates the inverse hyperbolic tangent of all elements in v',\n  },\n  {\n    label: 'cos',\n    insertText: 'cos',\n    detail: 'cos(v instant-vector)',\n    documentation: 'calculates the cosine of all elements in v',\n  },\n  {\n    label: 'cosh',\n    insertText: 'cosh',\n    detail: 'cosh(v instant-vector)',\n    documentation: 'calculates the hyperbolic cosine of all elements in v',\n  },\n  {\n    label: 'sin',\n    insertText: 'sin',\n    detail: 'sin(v instant-vector)',\n    documentation: 'calculates the sine of all elements in v',\n  },\n  {\n    label: 'sinh',\n    insertText: 'sinh',\n    detail: 'sinh(v instant-vector)',\n    documentation: 'calculates the hyperbolic sine of all elements in v',\n  },\n  {\n    label: 'tan',\n    insertText: 'tan',\n    detail: 'tan(v instant-vector)',\n    documentation: 'calculates the tangent of all elements in v',\n  },\n  {\n    label: 'tanh',\n    insertText: 'tanh',\n    detail: 'tanh(v instant-vector)',\n    documentation: 'calculates the hyperbolic tangent of all elements in v',\n  },\n];\n\nconst AGGREGATION_OPERATORS: CompletionItem[] = [\n  {\n    label: 'sum',\n    insertText: 'sum',\n    documentation: 'Calculate sum over dimensions',\n  },\n  {\n    label: 'min',\n    insertText: 'min',\n    documentation: 'Select minimum over dimensions',\n  },\n  {\n    label: 'max',\n    insertText: 'max',\n    documentation: 'Select maximum over dimensions',\n  },\n  {\n    label: 'avg',\n    insertText: 'avg',\n    documentation: 'Calculate the average over dimensions',\n  },\n  {\n    label: 'group',\n    insertText: 'group',\n    documentation: 'All values in the resulting vector are 1',\n  },\n  {\n    label: 'stddev',\n    insertText: 'stddev',\n    documentation: 'Calculate population standard deviation over dimensions',\n  },\n  {\n    label: 'stdvar',\n    insertText: 'stdvar',\n    documentation: 'Calculate population standard variance over dimensions',\n  },\n  {\n    label: 'count',\n    insertText: 'count',\n    documentation: 'Count number of elements in the vector',\n  },\n  {\n    label: 'count_values',\n    insertText: 'count_values',\n    documentation: 'Count number of elements with the same value',\n  },\n  {\n    label: 'bottomk',\n    insertText: 'bottomk',\n    documentation: 'Smallest k elements by sample value',\n  },\n  {\n    label: 'topk',\n    insertText: 'topk',\n    documentation: 'Largest k elements by sample value',\n  },\n  {\n    label: 'quantile',\n    insertText: 'quantile',\n    documentation: 'Calculate φ-quantile (0 ≤ φ ≤ 1) over dimensions',\n  },\n];\n\nexport const FUNCTIONS = [\n  ...AGGREGATION_OPERATORS,\n  ...TRIGONOMETRIC_FUNCTIONS,\n  {\n    insertText: 'abs',\n    label: 'abs',\n    detail: 'abs(v instant-vector)',\n    documentation: 'Returns the input vector with all sample values converted to their absolute value.',\n  },\n  {\n    insertText: 'absent',\n    label: 'absent',\n    detail: 'absent(v instant-vector)',\n    documentation:\n      'Returns an empty vector if the vector passed to it has any elements and a 1-element vector with the value 1 if the vector passed to it has no elements. This is useful for alerting on when no time series exist for a given metric name and label combination.',\n  },\n  {\n    insertText: 'absent_over_time',\n    label: 'absent_over_time',\n    detail: 'absent(v range-vector)',\n    documentation:\n      'Returns an empty vector if the range vector passed to it has any elements and a 1-element vector with the value 1 if the range vector passed to it has no elements.',\n  },\n  {\n    insertText: 'ceil',\n    label: 'ceil',\n    detail: 'ceil(v instant-vector)',\n    documentation: 'Rounds the sample values of all elements in `v` up to the nearest integer.',\n  },\n  {\n    insertText: 'changes',\n    label: 'changes',\n    detail: 'changes(v range-vector)',\n    documentation:\n      'For each input time series, `changes(v range-vector)` returns the number of times its value has changed within the provided time range as an instant vector.',\n  },\n  {\n    insertText: 'clamp',\n    label: 'clamp',\n    detail: 'clamp(v instant-vector, min scalar, max scalar)',\n    documentation:\n      'Clamps the sample values of all elements in `v` to have a lower limit of `min` and an upper limit of `max`.',\n  },\n  {\n    insertText: 'clamp_max',\n    label: 'clamp_max',\n    detail: 'clamp_max(v instant-vector, max scalar)',\n    documentation: 'Clamps the sample values of all elements in `v` to have an upper limit of `max`.',\n  },\n  {\n    insertText: 'clamp_min',\n    label: 'clamp_min',\n    detail: 'clamp_min(v instant-vector, min scalar)',\n    documentation: 'Clamps the sample values of all elements in `v` to have a lower limit of `min`.',\n  },\n  {\n    insertText: 'count_scalar',\n    label: 'count_scalar',\n    detail: 'count_scalar(v instant-vector)',\n    documentation:\n      'Returns the number of elements in a time series vector as a scalar. This is in contrast to the `count()` aggregation operator, which always returns a vector (an empty one if the input vector is empty) and allows grouping by labels via a `by` clause.',\n  },\n  {\n    insertText: 'deg',\n    label: 'deg',\n    detail: 'deg(v instant-vector)',\n    documentation: 'Converts radians to degrees for all elements in v',\n  },\n  {\n    insertText: 'day_of_month',\n    label: 'day_of_month',\n    detail: 'day_of_month(v=vector(time()) instant-vector)',\n    documentation: 'Returns the day of the month for each of the given times in UTC. Returned values are from 1 to 31.',\n  },\n  {\n    insertText: 'day_of_week',\n    label: 'day_of_week',\n    detail: 'day_of_week(v=vector(time()) instant-vector)',\n    documentation:\n      'Returns the day of the week for each of the given times in UTC. Returned values are from 0 to 6, where 0 means Sunday etc.',\n  },\n  {\n    insertText: 'days_in_month',\n    label: 'days_in_month',\n    detail: 'days_in_month(v=vector(time()) instant-vector)',\n    documentation:\n      'Returns number of days in the month for each of the given times in UTC. Returned values are from 28 to 31.',\n  },\n  {\n    insertText: 'delta',\n    label: 'delta',\n    detail: 'delta(v range-vector)',\n    documentation:\n      'Calculates the difference between the first and last value of each time series element in a range vector `v`, returning an instant vector with the given deltas and equivalent labels. The delta is extrapolated to cover the full time range as specified in the range vector selector, so that it is possible to get a non-integer result even if the sample values are all integers.',\n  },\n  {\n    insertText: 'deriv',\n    label: 'deriv',\n    detail: 'deriv(v range-vector)',\n    documentation:\n      'Calculates the per-second derivative of the time series in a range vector `v`, using simple linear regression.',\n  },\n  {\n    insertText: 'drop_common_labels',\n    label: 'drop_common_labels',\n    detail: 'drop_common_labels(instant-vector)',\n    documentation: 'Drops all labels that have the same name and value across all series in the input vector.',\n  },\n  {\n    insertText: 'exp',\n    label: 'exp',\n    detail: 'exp(v instant-vector)',\n    documentation:\n      'Calculates the exponential function for all elements in `v`.\\nSpecial cases are:\\n* `Exp(+Inf) = +Inf` \\n* `Exp(NaN) = NaN`',\n  },\n  {\n    insertText: 'floor',\n    label: 'floor',\n    detail: 'floor(v instant-vector)',\n    documentation: 'Rounds the sample values of all elements in `v` down to the nearest integer.',\n  },\n  {\n    insertText: 'histogram_quantile',\n    label: 'histogram_quantile',\n    detail: 'histogram_quantile(φ float, b instant-vector)',\n    documentation:\n      'Calculates the φ-quantile (0 ≤ φ ≤ 1) from the buckets `b` of a histogram. The samples in `b` are the counts of observations in each bucket. Each sample must have a label `le` where the label value denotes the inclusive upper bound of the bucket. (Samples without such a label are silently ignored.) The histogram metric type automatically provides time series with the `_bucket` suffix and the appropriate labels.',\n  },\n  {\n    insertText: 'holt_winters',\n    label: 'holt_winters',\n    detail: 'holt_winters(v range-vector, sf scalar, tf scalar)',\n    documentation:\n      'Produces a smoothed value for time series based on the range in `v`. The lower the smoothing factor `sf`, the more importance is given to old data. The higher the trend factor `tf`, the more trends in the data is considered. Both `sf` and `tf` must be between 0 and 1.',\n  },\n  {\n    insertText: 'hour',\n    label: 'hour',\n    detail: 'hour(v=vector(time()) instant-vector)',\n    documentation: 'Returns the hour of the day for each of the given times in UTC. Returned values are from 0 to 23.',\n  },\n  {\n    insertText: 'idelta',\n    label: 'idelta',\n    detail: 'idelta(v range-vector)',\n    documentation:\n      'Calculates the difference between the last two samples in the range vector `v`, returning an instant vector with the given deltas and equivalent labels.',\n  },\n  {\n    insertText: 'increase',\n    label: 'increase',\n    detail: 'increase(v range-vector)',\n    documentation:\n      'Calculates the increase in the time series in the range vector. Breaks in monotonicity (such as counter resets due to target restarts) are automatically adjusted for. The increase is extrapolated to cover the full time range as specified in the range vector selector, so that it is possible to get a non-integer result even if a counter increases only by integer increments.',\n  },\n  {\n    insertText: 'irate',\n    label: 'irate',\n    detail: 'irate(v range-vector)',\n    documentation:\n      'Calculates the per-second instant rate of increase of the time series in the range vector. This is based on the last two data points. Breaks in monotonicity (such as counter resets due to target restarts) are automatically adjusted for.',\n  },\n  {\n    insertText: 'label_join',\n    label: 'label_join',\n    detail:\n      'label_join(v instant-vector, dst_label string, separator string, src_label_1 string, src_label_2 string, ...)',\n    documentation:\n      'For each timeseries in `v`, joins all the values of all the `src_labels` using `separator` and returns the timeseries with the label `dst_label` containing the joined value. There can be any number of `src_labels` in this function.',\n  },\n  {\n    insertText: 'label_replace',\n    label: 'label_replace',\n    detail: 'label_replace(v instant-vector, dst_label string, replacement string, src_label string, regex string)',\n    documentation:\n      \"For each timeseries in `v`, `label_replace(v instant-vector, dst_label string, replacement string, src_label string, regex string)`  matches the regular expression `regex` against the label `src_label`.  If it matches, then the timeseries is returned with the label `dst_label` replaced by the expansion of `replacement`. `$1` is replaced with the first matching subgroup, `$2` with the second etc. If the regular expression doesn't match then the timeseries is returned unchanged.\",\n  },\n  {\n    insertText: 'ln',\n    label: 'ln',\n    detail: 'ln(v instant-vector)',\n    documentation:\n      'Calculates the natural logarithm for all elements in `v`.\\nSpecial cases are:\\n * `ln(+Inf) = +Inf`\\n * `ln(0) = -Inf`\\n * `ln(x < 0) = NaN`\\n * `ln(NaN) = NaN`',\n  },\n  {\n    insertText: 'log2',\n    label: 'log2',\n    detail: 'log2(v instant-vector)',\n    documentation:\n      'Calculates the binary logarithm for all elements in `v`. The special cases are equivalent to those in `ln`.',\n  },\n  {\n    insertText: 'log10',\n    label: 'log10',\n    detail: 'log10(v instant-vector)',\n    documentation:\n      'Calculates the decimal logarithm for all elements in `v`. The special cases are equivalent to those in `ln`.',\n  },\n  {\n    insertText: 'minute',\n    label: 'minute',\n    detail: 'minute(v=vector(time()) instant-vector)',\n    documentation:\n      'Returns the minute of the hour for each of the given times in UTC. Returned values are from 0 to 59.',\n  },\n  {\n    insertText: 'month',\n    label: 'month',\n    detail: 'month(v=vector(time()) instant-vector)',\n    documentation:\n      'Returns the month of the year for each of the given times in UTC. Returned values are from 1 to 12, where 1 means January etc.',\n  },\n  {\n    insertText: 'pi',\n    label: 'pi',\n    detail: 'pi()',\n    documentation: 'Returns pi',\n  },\n  {\n    insertText: 'predict_linear',\n    label: 'predict_linear',\n    detail: 'predict_linear(v range-vector, t scalar)',\n    documentation:\n      'Predicts the value of time series `t` seconds from now, based on the range vector `v`, using simple linear regression.',\n  },\n  {\n    insertText: 'rad',\n    label: 'rad',\n    detail: 'rad(v instant-vector)',\n    documentation: 'Converts degrees to radians for all elements in v',\n  },\n  {\n    insertText: 'rate',\n    label: 'rate',\n    detail: 'rate(v range-vector)',\n    documentation:\n      \"Calculates the per-second average rate of increase of the time series in the range vector. Breaks in monotonicity (such as counter resets due to target restarts) are automatically adjusted for. Also, the calculation extrapolates to the ends of the time range, allowing for missed scrapes or imperfect alignment of scrape cycles with the range's time period.\",\n  },\n  {\n    insertText: 'resets',\n    label: 'resets',\n    detail: 'resets(v range-vector)',\n    documentation:\n      'For each input time series, `resets(v range-vector)` returns the number of counter resets within the provided time range as an instant vector. Any decrease in the value between two consecutive samples is interpreted as a counter reset.',\n  },\n  {\n    insertText: 'round',\n    label: 'round',\n    detail: 'round(v instant-vector, to_nearest=1 scalar)',\n    documentation:\n      'Rounds the sample values of all elements in `v` to the nearest integer. Ties are resolved by rounding up. The optional `to_nearest` argument allows specifying the nearest multiple to which the sample values should be rounded. This multiple may also be a fraction.',\n  },\n  {\n    insertText: 'scalar',\n    label: 'scalar',\n    detail: 'scalar(v instant-vector)',\n    documentation:\n      'Given a single-element input vector, `scalar(v instant-vector)` returns the sample value of that single element as a scalar. If the input vector does not have exactly one element, `scalar` will return `NaN`.',\n  },\n  {\n    insertText: 'sgn',\n    label: 'sgn',\n    detail: 'sgn(v instant-vector)',\n    documentation:\n      'Returns a vector with all sample values converted to their sign, defined as this: 1 if v is positive, -1 if v is negative and 0 if v is equal to zero.',\n  },\n  {\n    insertText: 'sort',\n    label: 'sort',\n    detail: 'sort(v instant-vector)',\n    documentation: 'Returns vector elements sorted by their sample values, in ascending order.',\n  },\n  {\n    insertText: 'sort_desc',\n    label: 'sort_desc',\n    detail: 'sort_desc(v instant-vector)',\n    documentation: 'Returns vector elements sorted by their sample values, in descending order.',\n  },\n  {\n    insertText: 'sqrt',\n    label: 'sqrt',\n    detail: 'sqrt(v instant-vector)',\n    documentation: 'Calculates the square root of all elements in `v`.',\n  },\n  {\n    insertText: 'time',\n    label: 'time',\n    detail: 'time()',\n    documentation:\n      'Returns the number of seconds since January 1, 1970 UTC. Note that this does not actually return the current time, but the time at which the expression is to be evaluated.',\n  },\n  {\n    insertText: 'timestamp',\n    label: 'timestamp',\n    detail: 'timestamp(v instant-vector)',\n    documentation:\n      'Returns the timestamp of each of the samples of the given vector as the number of seconds since January 1, 1970 UTC.',\n  },\n  {\n    insertText: 'vector',\n    label: 'vector',\n    detail: 'vector(s scalar)',\n    documentation: 'Returns the scalar `s` as a vector with no labels.',\n  },\n  {\n    insertText: 'year',\n    label: 'year',\n    detail: 'year(v=vector(time()) instant-vector)',\n    documentation: 'Returns the year for each of the given times in UTC.',\n  },\n  {\n    insertText: 'avg_over_time',\n    label: 'avg_over_time',\n    detail: 'avg_over_time(range-vector)',\n    documentation: 'The average value of all points in the specified interval.',\n  },\n  {\n    insertText: 'min_over_time',\n    label: 'min_over_time',\n    detail: 'min_over_time(range-vector)',\n    documentation: 'The minimum value of all points in the specified interval.',\n  },\n  {\n    insertText: 'max_over_time',\n    label: 'max_over_time',\n    detail: 'max_over_time(range-vector)',\n    documentation: 'The maximum value of all points in the specified interval.',\n  },\n  {\n    insertText: 'sum_over_time',\n    label: 'sum_over_time',\n    detail: 'sum_over_time(range-vector)',\n    documentation: 'The sum of all values in the specified interval.',\n  },\n  {\n    insertText: 'count_over_time',\n    label: 'count_over_time',\n    detail: 'count_over_time(range-vector)',\n    documentation: 'The count of all values in the specified interval.',\n  },\n  {\n    insertText: 'quantile_over_time',\n    label: 'quantile_over_time',\n    detail: 'quantile_over_time(scalar, range-vector)',\n    documentation: 'The φ-quantile (0 ≤ φ ≤ 1) of the values in the specified interval.',\n  },\n  {\n    insertText: 'stddev_over_time',\n    label: 'stddev_over_time',\n    detail: 'stddev_over_time(range-vector)',\n    documentation: 'The population standard deviation of the values in the specified interval.',\n  },\n  {\n    insertText: 'stdvar_over_time',\n    label: 'stdvar_over_time',\n    detail: 'stdvar_over_time(range-vector)',\n    documentation: 'The population standard variance of the values in the specified interval.',\n  },\n  {\n    insertText: 'last_over_time',\n    label: 'last_over_time',\n    detail: 'last_over_time(range-vector)',\n    documentation: 'The most recent point value in specified interval.',\n  },\n];\n\nexport const PROM_KEYWORDS = FUNCTIONS.map((keyword) => keyword.label);\n\nexport const promqlGrammar: Grammar = {\n  comment: {\n    pattern: /#.*/,\n  },\n  'context-aggregation': {\n    pattern: /((by|without)\\s*)\\([^)]*\\)/, // by ()\n    lookbehind: true,\n    inside: {\n      'label-key': {\n        pattern: /[^(),\\s][^,)]*[^),\\s]*/,\n        alias: 'attr-name',\n      },\n      punctuation: /[()]/,\n    },\n  },\n  'context-labels': {\n    pattern: /\\{[^}]*(?=}?)/,\n    greedy: true,\n    inside: {\n      comment: {\n        pattern: /#.*/,\n      },\n      'label-key': {\n        pattern: /[a-z_]\\w*(?=\\s*(=|!=|=~|!~))/,\n        alias: 'attr-name',\n        greedy: true,\n      },\n      'label-value': {\n        pattern: /\"(?:\\\\.|[^\\\\\"])*\"/,\n        greedy: true,\n        alias: 'attr-value',\n      },\n      punctuation: /[{]/,\n    },\n  },\n  function: new RegExp(`\\\\b(?:${FUNCTIONS.map((f) => f.label).join('|')})(?=\\\\s*\\\\()`, 'i'),\n  'context-range': [\n    {\n      pattern: /\\[[^\\]]*(?=])/, // [1m]\n      inside: {\n        'range-duration': {\n          pattern: /\\b\\d+[smhdwy]\\b/i,\n          alias: 'number',\n        },\n      },\n    },\n    {\n      pattern: /(offset\\s+)\\w+/, // offset 1m\n      lookbehind: true,\n      inside: {\n        'range-duration': {\n          pattern: /\\b\\d+[smhdwy]\\b/i,\n          alias: 'number',\n        },\n      },\n    },\n  ],\n  idList: {\n    pattern: /\\d+(\\|\\d+)+/,\n    alias: 'number',\n  },\n  number: /\\b-?\\d+((\\.\\d*)?([eE][+-]?\\d+)?)?\\b/,\n  operator: new RegExp(`/[-+*/=%^~]|&&?|\\\\|?\\\\||!=?|<(?:=>?|<|>)?|>[>=]?|\\\\b(?:${OPERATORS.join('|')})\\\\b`, 'i'),\n  punctuation: /[{};()`,.]/,\n};\n\nexport default promqlGrammar;\n","// XXX remove in v8 or beyond\nmodule.exports = require('./index.js')\n"],"names":["DataSourcesRoutesContext","createContext","DATASOURCES_ROUTES","useInitDataSourceSettings","uid","dispatch","useDispatch","useEffect","initDataSourceSettings","cleanUpAction","cleanupAction","state","dataSourceSettings","useTestDataSource","testDataSource","useLoadDataSources","loadDataSources","useLoadDataSource","loadDataSource","useLoadDataSourcePlugins","loadDataSourcePlugins","useAddDatasource","dataSourcesRoutes","useDataSourcesRoutes","plugin","addDataSource","Edit","useUpdateDatasource","async","updateDataSource","dataSource","useDeleteLoadedDataSource","name","useSelector","dataSources","appEvents","ShowConfirmModalEvent","title","text","yesText","icon","onConfirm","deleteLoadedDataSource","useDataSource","getDataSource","useDataSourceExploreUrl","exploreState","JSON","stringify","datasource","context","urlUtil","left","useDataSourceMeta","pluginType","getDataSourceMeta","useDataSourceSettings","useDataSourceSettingsNav","dataSourceId","pageId","loadError","loading","navIndex","navIndexId","node","subTitle","main","getNavModel","getDataSourceLoadingNav","getDataSourceNav","buildNavModel","useDataSourceRights","readOnly","hasWriteRights","contextSrv","AccessControlAction","hasDeleteRights","useContext","CHEAT_SHEET_ITEMS","expression","label","props","map","item","index","className","onClick","e","onClickExample","refId","expr","PromQueryType","LegendFormatMode","isMatrixData","result","queryEditorModeDefaultLocalStorageKey","changeEditorMode","query","editorMode","onChange","store","getDefaultEditorMode","QueryEditorMode","value","MAX_NUMBER_OF_RESULTS","MetricSelect","onGetMetrics","labelsFilters","styles","useStyles2","getStyles","setState","useState","customFilterOption","useCallback","option","searchQuery","toLowerCase","split","reduce","acc","cur","includes","formatOptionLabel","meta","searchWords","inputValue","textToHighlight","highlightClassName","highlight","debouncedSearch","debounce","results","metricFindQuery","queryString","join","regexifyLabelValuesQueryString","formatLabelFilters","queryAndFilterToLabelValuesString","formatKeyValueStringsForLabelValuesQuery","then","length","splice","getMetricLabels","EditorFieldGroup","EditorField","inputId","select","metric","toOption","undefined","placeholder","allowCustomValue","filterOption","onOpenMenu","isLoading","metrics","loadOptions","defaultOptions","theme","css","colors","warning","contrastText","NestedQuery","React","nestedQuery","onRemove","onRunQuery","showExplain","card","header","Select","width","options","operators","operator","vectorMatchWrapper","vectorMatchesType","val","AutoSizeInput","vectorMatchInput","minWidth","defaultValue","vectorMatches","onCommitChange","evt","currentTarget","FlexItem","grow","IconButton","size","body","EditorRows","PromQueryBuilder","update","binaryScalarDefs","def","sign","displayName","display","flexDirection","gap","spacing","padding","alignItems","whiteSpace","paddingLeft","marginLeft","NestedQueryList","nestedQueries","binaryQueries","onNestedQueryUpdate","updatedList","slice","Stack","direction","toString","EXPLAIN_LABEL_FILTER_CONTENT","PromQueryBuilderExplained","visQuery","buildVisualQueryFromString","lang","grammar","promqlGrammar","OperationExplainedBox","stepNumber","RawQuery","promQueryModeller","labels","OperationListExplained","queryModeller","data","highlightedOp","setHighlightedOp","withTemplateVariableOptions","variables","getVariables","optionsPromise","description","languageProvider","metricsMetadata","loadMetricsMetadata","getSeries","getLabelValues","m","getMetadataString","getMetrics","EditorRow","LabelFilters","onGetLabelNames","forLabel","fetchLabels","getLabelKeys","k","labelsToConsider","filter","x","push","op","labelsIndex","fetchSeriesLabels","Object","keys","labelName","find","onGetLabelValues","v","interpolateString","OperationsEditorRow","OperationList","QueryBuilderHints","onMouseEnter","onMouseLeave","QueryPreview","PromQueryBuilderContainer","showRawQuery","useReducer","stateSlice","reducer","exprChanged","visualQueryChange","createSlice","initialState","reducers","action","payload","parseResult","actions","PromExemplarField","rest","error","setError","prevError","usePrevious","exemplarsAvailable","instant","range","iconButtonStyles","cx","activeIcon","exemplar","eyeIcon","InlineLabel","Tooltip","content","iconWrapper","tooltip","disabled","primary","PromExploreExtraField","memo","rangeOptions","getQueryTypeOptions","prevQuery","onExemplarChange","isEqual","onQueryTypeChange","getQueryTypeChangeHandler","testIds","extraFieldEditor","queryTypeField","RadioButtonGroup","stepField","type","interval","onKeyDown","key","shiftKey","includeBoth","queryType","PromLink","panelData","href","setHref","request","scopedVars","start","getPrometheusTime","from","end","to","rangeDiff","Math","ceil","endTime","utc","format","getRateIntervalScopedVariable","rangeUtil","customQueryParameters","queryOptions","createQuery","step","args","encodeURIComponent","directUrl","getExternalLink","textUtil","target","rel","EMPTY_SELECTOR","METRIC_LABEL","buildSelector","singleMetric","selectedLabels","selected","values","selectedValues","escapeLabelValueInRegexSelector","escapeLabelValueInExactSelector","stylesFactory","wrapper","bg2","sm","list","section","md","selector","typography","fontFamily","monospace","status","xs","textSemiWeak","statusShowing","palette","brandDanger","valueList","valueListWrapper","border2","valueListArea","valueTitle","validationStatus","textStrong","UnthemedPrometheusMetricsBrowser","labelSearchTerm","metricSearchTerm","valueSearchTerm","event","this","hidden","facets","deleteLastUsedLabels","fetchValues","l","nextValue","updateLabelState","doFacettingForLabel","doFacetting","some","validateSelector","lastFacetted","forEach","fetchSeries","updatedFields","cb","componentDidMount","lastUsedLabels","rawLabels","i","arr","storeLastUsedLabels","rawValues","labelValue","details","help","console","possibleLabels","possibleValues","existingValues","Set","has","facetLabels","streams","render","LoadingPlaceholder","nonMetricLabels","empty","metricCount","align","Label","Input","I","onChangeMetricSearch","role","height","min","itemCount","itemSize","itemKey","style","active","onClickMetric","searchTerm","onChangeLabelSearch","onClickLabel","onChangeValueSearch","ref","valueListsRef","onClickValue","Button","onClickRunQuery","variant","onClickRunRateQuery","onClickValidate","onClickClear","PrometheusMetricsBrowser","withTheme","Field","MonacoQueryFieldLazy","Suspense","fallback","MonacoQueryFieldWrapper","lastRunValueRef","useRef","runQueryOnBlur","handleRunQuery","current","onBlur","PromQueryField","constructor","super","initHints","getInitHints","initHint","series","hint","isDataFrame","toLegacyResponseData","queryHints","getQueryHints","queryHint","languageProviderInitializationPromise","promise","hasCanceled_","Promise","resolve","reject","canceledPromiseRejection","isCanceled","catch","cancel","makePromiseCancelable","remainingTasks","all","onUpdateLanguage","err","onChangeQuery","labelBrowserVisible","override","reportInteraction","app","fix","modifyQuery","syntaxLoaded","suggestions","history","prefix","wrapperClasses","labelKey","typeahead","provideCompletionItems","plugins","BracesPlugin","SlatePrism","onlyIn","getSyntax","prismLanguages","promql","syntax","refreshMetrics","refreshHint","componentWillUnmount","componentDidUpdate","prevProps","changedRangeToRefresh","rangeChangedToRefresh","prevRange","sameMinuteFrom","roundMsToMin","valueOf","sameMinuteTo","ExtraFieldElement","hasMetrics","chooserText","metricsLookupDisabled","hasSyntax","getChooserText","lookupsDisabled","buttonDisabled","LocalStorageValueProvider","storageKey","onLastUsedLabelsSave","onLastUsedLabelsDelete","onClickChooserButton","Icon","CoreApp","initialValue","onChangeLabelBrowser","onClickHintFix","Switch","LegacyForms","FORMAT_OPTIONS","INTERVAL_FACTOR_OPTIONS","PromQueryEditor","PureComponent","formatOption","checked","intervalFactor","intervalFactorOption","legendFormat","isEnabled","hide","defaultQuery","assign","Boolean","showExemplarField","onFieldChange","editor","onLegendChange","onIntervalChange","isSearchable","onIntervalFactorChange","onFormatChange","onInstantChange","legendModeOptions","Auto","Verbose","Custom","PromQueryLegendEditor","mode","getLegendMode","inputRef","id","newFormat","setTimeout","focus","setSelectionRange","PromQueryBuilderOptions","queryTypeOptions","queryTypeValue","getQueryTypeValue","queryTypeLabel","QueryOptionGroup","collapsedInfo","getCollapsedInfo","shouldShowExemplarSwitch","EditorSwitch","items","getLegendModeLabel","PromQueryCodeEditor","PromQueryEditorSelector","parseModalOpen","setParseModalOpen","dataIsStale","setDataIsStale","flag","explain","setFlag","setExplain","useFlag","promQueryEditorExplainKey","rawQuery","setRawQuery","promQueryEditorRawQueryKey","isBothInstantAndRange","getQueryWithDefaults","onEditorModeChange","newMetricEditorMode","newEditor","previousEditor","newQuery","errors","ConfirmModal","isOpen","confirmText","onDismiss","EditorHeader","InlineSelect","operations","QueryHeaderSwitch","LoadingState","QueryEditorModeToggle","Space","PromExploreQueryEditor","PromQueryEditorForAlerting","PromQueryEditorByApp","config","AzureCloud","KnownAzureClouds","Public","China","USGovernment","Germany","concealed","Symbol","getDefaultAzureCloud","getSecret","secureJsonFields","azureClientSecret","secret","secureJsonData","getDefaultCredentials","authType","azureCloud","authTypeOptions","AzureCredentialsForm","credentials","azureCloudOptions","onCredentialsChange","getSubscriptions","hasRequiredFields","tenantId","clientId","clientSecret","isCredentialsComplete","subscriptions","setSubscriptions","loadSubscriptionsClicked","onLoadSubscriptions","updateSubscriptions","canceled","received","autoSelect","defaultSubscriptionId","onSubscriptionChange","opt","updated","managedIdentityEnabled","htmlFor","AzureAuthSettings","dataSourceConfig","overrideAudienceAllowed","jsonData","azureEndpointResourceId","overrideAudienceChecked","setOverrideAudienceChecked","useMemo","azureCredentials","getCredentials","Error","updateCredentials","InlineFieldRow","InlineField","labelWidth","ev","ExemplarSetting","onDelete","isInternalLink","setIsInternalLink","datasourceUid","selectors","preventDefault","DataSourcePicker","tracing","noDefault","ds","url","spellCheck","urlDisplayLabel","ExemplarsSettings","newField","newOptions","PromFlavorVersions","Prometheus","Mimir","Thanos","Cortex","FormField","httpOptions","prometheusFlavorSelectItems","PromApplication","unableToDeterminePrometheusVersion","warn","setPrometheusVersion","onOptionsChange","onUpdate","updatedOptions","getBackendSrv","get","rawResponse","rawVersionStringFromApi","version","semver","parsedVersion","flavor","flavorVersionValues","versionsLessThanOrEqual","el","closestVersion","differenceBetweenActualAndClosest","getVersionString","prometheusType","prometheusVersion","updatedUpdatedOptions","PromSettings","httpMethod","inputEl","timeInterval","onChangeHandler","validationEvents","promSettingsValidationEvents","queryTimeout","o","marginBottom","textDecoration","disableMetricsLookup","onUpdateDatasourceJsonDataOptionChecked","exemplarTraceIdDestinations","exemplarOptions","updateDatasourcePluginJsonDataOption","EventsWithValidation","regexValidation","getValueFromEventItem","eventItem","hasOwnProperty","AnnotationQueryEditor","annotation","onAnnotationChange","titleFormat","tagKeys","textFormat","useValueForTime","PrometheusMetricFindQuery","getTimeSrv","timeRange","process","match","labelNamesQuery","labelValuesQuery","metricNamesQuery","metricNameQuery","queryResultQuery","lastValueFrom","metricNameAndLabelsQuery","params","metadataRequest","_map","hasLabelsMatchAPISupport","_labels","uniq","expandable","metricFilterPattern","chain","metricName","RegExp","test","matchedMetricName","instantQuery","performInstantQuery","pipe","resultType","metricData","__name__","self","getOriginalMetricName","INFINITY_SAMPLE_REGEX","transformV2","response","tableFrames","framesWithoutTable","partition","df","dataFrame","custom","targets","isTableResult","processedTableFrames","dfs","dataFramesByRefId","groupBy","refIds","valueText","responseLength","getValueText","valueField","getValueField","valueName","timeField","getTimeField","labelFields","promLabels","fields","sort","numberField","HISTOGRAM_QUANTILE_LABEL_NAME","filterable","FieldType","ArrayVector","toArray","add","parseSampleValue","labelsForField","field","getLabelValue","preferredVisualisationType","transformDFToTable","exemplarFrames","framesWithoutTableAndExemplars","destinations","processedExemplarFrames","exemplarTraceIdDestination","traceIDField","links","getDataLinks","dataTopic","DataTopic","heatmapResults","framesWithoutTableHeatmapsAndExemplars","isHeatmapResult","heatmapResultsGroupedByQuery","h","processedHeatmapResultsGroupedByQuery","heatmapResultsGroup","heatmapResultsGroupedByValues","TIME_SERIES_VALUE_FIELD_NAME","notLE","forOwn","dataFrames","sortedHeatmap","sortSeriesByLabel","mergeHeatmapFrames","transformToHistogramOverTime","otherFrames","flattenedProcessedHeatmapFrames","flatten","transform","transformOptions","responseListLength","valueWithRefId","prometheusResult","Array","isArray","events","exemplarData","exemplars","TIME_SERIES_TIME_FIELD_NAME","timestamp","seriesLabels","sampledExemplars","bucketedExemplars","alignedTs","String","floor","standardDeviation","deviation","sampledBuckets","ts","exemplarsInBucket","sampledBucketValues","ex","descending","curr","prev","sampleExemplars","ArrayDataFrame","tableData","metricFields","d","metricField","transformMetricDataToTable","renderLegendFormat","getTemplateSrv","replace","labelsWithoutName","labelPart","formatLabels","createLabelInfo","stepMs","NaN","baseTimestamp","dps","dpValue","isNaN","t","endTimestamp","parseValue","displayNameFromDS","transformToDataFrame","dataLinks","dsSettings","getDataSourceSrv","getInstanceSettings","internal","datasourceName","targetBlank","isMs","getDisplayProcessor","frames","countFields","frame","DataFrameType","seriesList","topSeries","s","bottomSeries","j","bottomPoint","s1","s2","le1","le2","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","parseFloat","PrometheusVariableSupport","StandardVariableSupport","templateSrv","timeSrv","bind","of","__interval","__interval_ms","getRangeScopedVars","interpolated","interpolateQueryExpr","toDataQuery","GET_AND_POST_METADATA_ENDPOINTS","PrometheusDatasource","DataSourceWithBackend","instanceSettings","LRU","max","loadRules","areExemplarsAvailable","queries","activeTargets","clonedTargets","cloneDeep","requestId","panelId","histogramMetrics","instantTarget","maxDataPoints","rangeTarget","activeTarget","exemplarTarget","message","statusText","safeStringifyValue","toDataQueryResponse","tagKeysArray","eventList","tags","timeValueTuple","idx","timeStampValue","valueValue","time","activeValuesTimestamps","latestEvent","timeEnd","subType","rulerEnabled","editorSrc","access","basicAuth","withCredentials","ruleMappings","PrometheusLanguageProvider","URLSearchParams","datasourceConfigurationPrometheusFlavor","datasourceConfigurationPrometheusVersion","annotations","QueryEditor","getQueryDisplayText","_isDatasourceVersionGreaterOrEqualTo","targetVersion","targetFlavor","_addTracingHeaders","headers","dashboardId","dashboardUID","_request","overrides","throwError","queryUrl","startsWith","defaults","method","search","entries","Authorization","fetch","abstractQueries","abstractQuery","importFromAbstractQuery","exportToAbstractQuery","endpoint","hideFromInspector","showErrorAlert","isFetchError","variable","multi","includeAll","prometheusRegularEscape","prometheusSpecialRegexEscape","escapedValues","targetContainsTemplate","containsTemplate","shouldRunExemplarQuery","currentTargetIdx","findIndex","processTargetV2","timeSeriesQuery","utcOffsetSec","utcOffset","prepareTargets","exploreQuery","panelsQuery","runningQueriesCount","subQueries","filterAndMapResponse","tap","cancelled","runQuery","merge","observables","forkJoin","getExemplars","catchError","performTimeSeriesQuery","hinting","minInterval","scrapeInterval","adjustedInterval","adjustInterval","enhanceExprWithAdHocFilters","adjusted","alignedEnd","alignedStart","alignRange","rateInterval","__rate_interval","safeInterval","handleErrors","msRange","diff","sRange","round","__range_ms","__range_s","__range","queryModel","getRef","applyTemplateVariables","rsp","processAnnotationResponse","concat","discoverDataSourceFeatures","getBuildInfoMessage","buildInfo","enabled","Badge","color","unsupported","placement","LOGOS","COLORS","AppDisplayNames","application","applicationSubType","verticalAlign","src","gridTemplateColumns","rowGap","columnGap","marginTop","features","rulerApiEnabled","now","Date","getTime","intervalMs","dateTime","getBuildInfo","res","verboseMessage","interpolateVariablesInQueries","expandedQueries","hints","trim","indexOf","nameMatch","counterNameMetric","certain","matchAll","token","flatMap","metadata","fixableQuery","mapping","mappingForQuery","ruleName","preventSubmit","groups","group","rules","rule","extractRuleMappingFromGroups","log","subtract","addLabelToQuery","expandRecordingRules","date","roundUp","dateMath","getTimeRangeParams","labelData","finalQuery","getAdhocFilters","filterQuery","string","DataSourcePlugin","setQueryEditor","setConfigEditor","alertmanagers","getAllAlertmanagerDataSources","showAccessOptions","azureAuthSettings","azureAuthSupported","getAzureAuthEnabled","hasCredentials","setAzureAuthEnabled","setDefaultCredentials","azureAuth","resetCredentials","azureSettingsUI","Alert","severity","DataSourceHttpSettings","defaultUrl","sigV4AuthToggleEnabled","renderSigV4Editor","SIGV4ConnectionConfig","AlertingSettings","alertmanagerDataSources","setQueryEditorHelp","PromCheatSheet","RATE_RANGES","sortValue","FUNCTIONS","insertText","documentation","detail","keyword","comment","pattern","lookbehind","inside","alias","punctuation","greedy","function","f","idList","number","module","exports"],"sourceRoot":""}