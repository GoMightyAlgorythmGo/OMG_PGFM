{"version":3,"file":"OrgDetailsPage.49229f8d2b4f8be7e4ab.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/SharedPreferences/SharedPreferences.tsx","webpack://grafana/./public/app/features/org/OrgProfile.tsx","webpack://grafana/./public/app/features/org/OrgDetailsPage.tsx","webpack://grafana/./public/app/features/org/state/actions.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport { t, Trans } from '@lingui/macro';\nimport React, { PureComponent } from 'react';\n\nimport { FeatureState, SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { config } from '@grafana/runtime';\nimport {\n  Button,\n  Field,\n  FieldSet,\n  Form,\n  Label,\n  RadioButtonGroup,\n  Select,\n  stylesFactory,\n  TimeZonePicker,\n  WeekStartPicker,\n  FeatureBadge,\n} from '@grafana/ui';\nimport { DashboardPicker } from 'app/core/components/Select/DashboardPicker';\nimport { ENGLISH_US, FRENCH_FRANCE, SPANISH_SPAIN } from 'app/core/internationalization/constants';\nimport { PreferencesService } from 'app/core/services/PreferencesService';\nimport { UserPreferencesDTO } from 'app/types';\n\nexport interface Props {\n  resourceUri: string;\n  disabled?: boolean;\n}\n\nexport type State = UserPreferencesDTO;\n\nconst themes: SelectableValue[] = [\n  { value: '', label: t({ id: 'shared-preferences.theme.default-label', message: 'Default' }) },\n  { value: 'dark', label: t({ id: 'shared-preferences.theme.dark-label', message: 'Dark' }) },\n  { value: 'light', label: t({ id: 'shared-preferences.theme.light-label', message: 'Light' }) },\n];\n\nconst languages: Array<SelectableValue<string>> = [\n  {\n    value: '',\n    label: t({\n      id: 'common.locale.default',\n      message: 'Default',\n    }),\n  },\n  {\n    value: ENGLISH_US,\n    label: t({\n      id: 'common.locale.en',\n      message: 'English',\n    }),\n  },\n  {\n    value: SPANISH_SPAIN,\n    label: t({\n      id: 'common.locale.es',\n      message: 'Spanish',\n    }),\n  },\n  {\n    value: FRENCH_FRANCE,\n    label: t({\n      id: 'common.locale.fr',\n      message: 'French',\n    }),\n  },\n];\n\nconst i18nFlag = Boolean(config.featureToggles.internationalization);\n\nexport class SharedPreferences extends PureComponent<Props, State> {\n  service: PreferencesService;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.service = new PreferencesService(props.resourceUri);\n    this.state = {\n      theme: '',\n      timezone: '',\n      weekStart: '',\n      locale: '',\n      queryHistory: { homeTab: '' },\n    };\n  }\n\n  async componentDidMount() {\n    const prefs = await this.service.load();\n\n    this.setState({\n      homeDashboardUID: prefs.homeDashboardUID,\n      theme: prefs.theme,\n      timezone: prefs.timezone,\n      weekStart: prefs.weekStart,\n      locale: prefs.locale,\n      queryHistory: prefs.queryHistory,\n    });\n  }\n\n  onSubmitForm = async () => {\n    const { homeDashboardUID, theme, timezone, weekStart, locale, queryHistory } = this.state;\n    await this.service.update({ homeDashboardUID, theme, timezone, weekStart, locale, queryHistory });\n    window.location.reload();\n  };\n\n  onThemeChanged = (value: string) => {\n    this.setState({ theme: value });\n  };\n\n  onTimeZoneChanged = (timezone?: string) => {\n    if (!timezone) {\n      return;\n    }\n    this.setState({ timezone: timezone });\n  };\n\n  onWeekStartChanged = (weekStart: string) => {\n    this.setState({ weekStart: weekStart });\n  };\n\n  onHomeDashboardChanged = (dashboardUID: string) => {\n    this.setState({ homeDashboardUID: dashboardUID });\n  };\n\n  onLocaleChanged = (locale: string) => {\n    this.setState({ locale });\n  };\n\n  render() {\n    const { theme, timezone, weekStart, homeDashboardUID, locale } = this.state;\n    const { disabled } = this.props;\n    const styles = getStyles();\n\n    return (\n      <Form onSubmit={this.onSubmitForm}>\n        {() => {\n          return (\n            <FieldSet label={<Trans id=\"shared-preferences.title\">Preferences</Trans>} disabled={disabled}>\n              <Field label={t({ id: 'shared-preferences.fields.theme-label', message: 'UI Theme' })}>\n                <RadioButtonGroup\n                  options={themes}\n                  value={themes.find((item) => item.value === theme)?.value}\n                  onChange={this.onThemeChanged}\n                />\n              </Field>\n\n              <Field\n                label={\n                  <Label htmlFor=\"home-dashboard-select\">\n                    <span className={styles.labelText}>\n                      <Trans id=\"shared-preferences.fields.home-dashboard-label\">Home Dashboard</Trans>\n                    </span>\n                  </Label>\n                }\n                data-testid=\"User preferences home dashboard drop down\"\n              >\n                <DashboardPicker\n                  value={homeDashboardUID}\n                  onChange={(v) => this.onHomeDashboardChanged(v?.uid ?? '')}\n                  defaultOptions={true}\n                  isClearable={true}\n                  placeholder={t({\n                    id: 'shared-preferences.fields.home-dashboard-placeholder',\n                    message: 'Default dashboard',\n                  })}\n                  inputId=\"home-dashboard-select\"\n                />\n              </Field>\n\n              <Field\n                label={t({ id: 'shared-dashboard.fields.timezone-label', message: 'Timezone' })}\n                data-testid={selectors.components.TimeZonePicker.containerV2}\n              >\n                <TimeZonePicker\n                  includeInternal={true}\n                  value={timezone}\n                  onChange={this.onTimeZoneChanged}\n                  inputId=\"shared-preferences-timezone-picker\"\n                />\n              </Field>\n\n              <Field\n                label={t({ id: 'shared-preferences.fields.week-start-label', message: 'Week start' })}\n                data-testid={selectors.components.WeekStartPicker.containerV2}\n              >\n                <WeekStartPicker\n                  value={weekStart}\n                  onChange={this.onWeekStartChanged}\n                  inputId={'shared-preferences-week-start-picker'}\n                />\n              </Field>\n\n              {i18nFlag ? (\n                <Field\n                  label={\n                    <Label htmlFor=\"locale-select\">\n                      <span className={styles.labelText}>\n                        <Trans id=\"shared-preferences.fields.locale-label\">Language</Trans>\n                      </span>\n                      <FeatureBadge featureState={FeatureState.alpha} />\n                    </Label>\n                  }\n                  data-testid=\"User preferences language drop down\"\n                >\n                  <Select\n                    value={languages.find((lang) => lang.value === locale)}\n                    onChange={(locale: SelectableValue<string>) => this.onLocaleChanged(locale.value ?? '')}\n                    options={languages}\n                    placeholder={t({\n                      id: 'shared-preferences.fields.locale-placeholder',\n                      message: 'Choose language',\n                    })}\n                    inputId=\"locale-select\"\n                  />\n                </Field>\n              ) : null}\n\n              <div className=\"gf-form-button-row\">\n                <Button\n                  type=\"submit\"\n                  variant=\"primary\"\n                  data-testid={selectors.components.UserProfile.preferencesSaveButton}\n                >\n                  <Trans id=\"common.save\">Save</Trans>\n                </Button>\n              </div>\n            </FieldSet>\n          );\n        }}\n      </Form>\n    );\n  }\n}\n\nexport default SharedPreferences;\n\nconst getStyles = stylesFactory(() => {\n  return {\n    labelText: css`\n      margin-right: 6px;\n    `,\n  };\n});\n","import React, { FC } from 'react';\n\nimport { Input, Field, FieldSet, Button, Form } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction } from 'app/types';\n\nexport interface Props {\n  orgName: string;\n  onSubmit: (orgName: string) => void;\n}\n\ninterface FormDTO {\n  orgName: string;\n}\n\nconst OrgProfile: FC<Props> = ({ onSubmit, orgName }) => {\n  const canWriteOrg = contextSrv.hasPermission(AccessControlAction.OrgsWrite);\n\n  return (\n    <Form defaultValues={{ orgName }} onSubmit={({ orgName }: FormDTO) => onSubmit(orgName)}>\n      {({ register }) => (\n        <FieldSet label=\"Organization profile\" disabled={!canWriteOrg}>\n          <Field label=\"Organization name\">\n            <Input id=\"org-name-input\" type=\"text\" {...register('orgName', { required: true })} />\n          </Field>\n\n          <Button type=\"submit\">Update organization name</Button>\n        </FieldSet>\n      )}\n    </Form>\n  );\n};\n\nexport default OrgProfile;\n","import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\n\nimport { NavModel } from '@grafana/data';\nimport { VerticalGroup } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport SharedPreferences from 'app/core/components/SharedPreferences/SharedPreferences';\nimport { contextSrv } from 'app/core/core';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { AccessControlAction, Organization, StoreState } from 'app/types';\n\nimport OrgProfile from './OrgProfile';\nimport { loadOrganization, updateOrganization } from './state/actions';\nimport { setOrganizationName } from './state/reducers';\n\nexport interface Props {\n  navModel: NavModel;\n  organization: Organization;\n  loadOrganization: typeof loadOrganization;\n  setOrganizationName: typeof setOrganizationName;\n  updateOrganization: typeof updateOrganization;\n}\n\nexport class OrgDetailsPage extends PureComponent<Props> {\n  async componentDidMount() {\n    await this.props.loadOrganization();\n  }\n\n  onUpdateOrganization = (orgName: string) => {\n    this.props.setOrganizationName(orgName);\n    this.props.updateOrganization();\n  };\n\n  render() {\n    const { navModel, organization } = this.props;\n    const isLoading = Object.keys(organization).length === 0;\n    const canReadOrg = contextSrv.hasPermission(AccessControlAction.OrgsRead);\n    const canReadPreferences = contextSrv.hasPermission(AccessControlAction.OrgsPreferencesRead);\n    const canWritePreferences = contextSrv.hasPermission(AccessControlAction.OrgsPreferencesWrite);\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={isLoading}>\n          {!isLoading && (\n            <VerticalGroup spacing=\"lg\">\n              {canReadOrg && <OrgProfile onSubmit={this.onUpdateOrganization} orgName={organization.name} />}\n              {canReadPreferences && <SharedPreferences resourceUri=\"org\" disabled={!canWritePreferences} />}\n            </VerticalGroup>\n          )}\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(state.navIndex, 'org-settings'),\n    organization: state.organization.organization,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadOrganization,\n  setOrganizationName,\n  updateOrganization,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OrgDetailsPage);\n","import { getBackendSrv } from '@grafana/runtime';\nimport { updateConfigurationSubtitle } from 'app/core/actions';\nimport { ThunkResult } from 'app/types';\n\nimport { organizationLoaded, userOrganizationsLoaded } from './reducers';\n\ntype OrganizationDependencies = { getBackendSrv: typeof getBackendSrv };\n\nexport function loadOrganization(\n  dependencies: OrganizationDependencies = { getBackendSrv: getBackendSrv }\n): ThunkResult<any> {\n  return async (dispatch) => {\n    const organizationResponse = await dependencies.getBackendSrv().get('/api/org');\n    dispatch(organizationLoaded(organizationResponse));\n\n    return organizationResponse;\n  };\n}\n\nexport function updateOrganization(\n  dependencies: OrganizationDependencies = { getBackendSrv: getBackendSrv }\n): ThunkResult<any> {\n  return async (dispatch, getStore) => {\n    const organization = getStore().organization.organization;\n\n    await dependencies.getBackendSrv().put('/api/org', { name: organization.name });\n\n    dispatch(updateConfigurationSubtitle(organization.name));\n    dispatch(loadOrganization(dependencies));\n  };\n}\n\nexport function setUserOrganization(\n  orgId: number,\n  dependencies: OrganizationDependencies = { getBackendSrv: getBackendSrv }\n): ThunkResult<any> {\n  return async (dispatch) => {\n    const organizationResponse = await dependencies.getBackendSrv().post('/api/user/using/' + orgId);\n\n    dispatch(updateConfigurationSubtitle(organizationResponse.name));\n  };\n}\n\nexport function createOrganization(\n  newOrg: { name: string },\n  dependencies: OrganizationDependencies = { getBackendSrv: getBackendSrv }\n): ThunkResult<any> {\n  return async (dispatch) => {\n    const result = await dependencies.getBackendSrv().post('/api/orgs/', newOrg);\n\n    dispatch(setUserOrganization(result.orgId));\n  };\n}\n\nexport function getUserOrganizations(\n  dependencies: OrganizationDependencies = { getBackendSrv: getBackendSrv }\n): ThunkResult<any> {\n  return async (dispatch) => {\n    const result = await dependencies.getBackendSrv().get('/api/user/orgs');\n    dispatch(userOrganizationsLoaded(result));\n\n    return result;\n  };\n}\n"],"names":["themes","value","label","id","languages","ENGLISH_US","SPANISH_SPAIN","FRENCH_FRANCE","i18nFlag","Boolean","config","SharedPreferences","PureComponent","constructor","props","super","async","homeDashboardUID","theme","timezone","weekStart","locale","queryHistory","this","state","service","update","window","location","reload","setState","dashboardUID","PreferencesService","resourceUri","homeTab","prefs","load","render","disabled","styles","getStyles","onSubmit","onSubmitForm","options","find","item","onChange","onThemeChanged","htmlFor","className","labelText","v","onHomeDashboardChanged","uid","defaultOptions","isClearable","placeholder","inputId","selectors","includeInternal","onTimeZoneChanged","onWeekStartChanged","featureState","FeatureState","lang","onLocaleChanged","type","variant","stylesFactory","css","orgName","canWriteOrg","contextSrv","AccessControlAction","Form","defaultValues","register","FieldSet","Field","Input","I","required","Button","OrgDetailsPage","setOrganizationName","updateOrganization","loadOrganization","navModel","organization","isLoading","Object","keys","length","canReadOrg","canReadPreferences","canWritePreferences","Page","spacing","onUpdateOrganization","name","mapDispatchToProps","connect","getNavModel","navIndex","dependencies","getBackendSrv","organizationResponse","get","dispatch","organizationLoaded","getStore","put","updateConfigurationSubtitle","setUserOrganization","orgId","post","createOrganization","newOrg","getUserOrganizations","result","userOrganizationsLoaded"],"sourceRoot":""}