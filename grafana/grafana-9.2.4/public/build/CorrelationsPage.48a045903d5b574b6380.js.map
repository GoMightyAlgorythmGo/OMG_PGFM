{"version":3,"file":"CorrelationsPage.48a045903d5b574b6380.js","mappings":"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","sources":["webpack://grafana/./public/app/core/utils/types.ts","webpack://grafana/./public/app/features/correlations/useCorrelations.ts","webpack://grafana/./public/app/features/correlations/Forms/CorrelationDetailsFormPart.tsx","webpack://grafana/./public/app/features/correlations/Forms/useCorrelationForm.ts","webpack://grafana/./public/app/features/correlations/Forms/AddCorrelationForm.tsx","webpack://grafana/./public/app/features/correlations/Forms/EditCorrelationForm.tsx","webpack://grafana/./public/app/features/correlations/components/EmptyCorrelationsCTA.tsx","webpack://grafana/./public/app/features/correlations/components/Table/ExpanderCell.tsx","webpack://grafana/./public/app/features/correlations/components/Table/utils.ts","webpack://grafana/./public/app/features/correlations/components/Table/index.tsx","webpack://grafana/./public/app/features/correlations/CorrelationsPage.tsx"],"sourcesContent":["type Truthy<T> = T extends false | '' | 0 | null | undefined ? never : T;\n\nexport const isTruthy = <T>(value: T): value is Truthy<T> => Boolean(value);\n","import { useAsyncFn } from 'react-use';\nimport { lastValueFrom } from 'rxjs';\n\nimport { DataSourceInstanceSettings } from '@grafana/data';\nimport { getDataSourceSrv, FetchResponse } from '@grafana/runtime';\nimport { useGrafana } from 'app/core/context/GrafanaContext';\n\nimport { Correlation, CreateCorrelationParams, RemoveCorrelationParams, UpdateCorrelationParams } from './types';\n\nexport interface CorrelationData extends Omit<Correlation, 'sourceUID' | 'targetUID'> {\n  source: DataSourceInstanceSettings;\n  target: DataSourceInstanceSettings;\n}\n\nconst toEnrichedCorrelationData = ({ sourceUID, targetUID, ...correlation }: Correlation): CorrelationData => ({\n  ...correlation,\n  source: getDataSourceSrv().getInstanceSettings(sourceUID)!,\n  target: getDataSourceSrv().getInstanceSettings(targetUID)!,\n});\n\nconst toEnrichedCorrelationsData = (correlations: Correlation[]) => correlations.map(toEnrichedCorrelationData);\nfunction getData<T>(response: FetchResponse<T>) {\n  return response.data;\n}\n\n/**\n * hook for managing correlations data.\n * TODO: ideally this hook shouldn't have any side effect like showing notifications on error\n * and let consumers handle them. It works nicely with the correlations settings page, but when we'll\n * expose this we'll have to remove those side effects.\n */\nexport const useCorrelations = () => {\n  const { backend } = useGrafana();\n\n  const [getInfo, get] = useAsyncFn<() => Promise<CorrelationData[]>>(\n    () =>\n      lastValueFrom(\n        backend.fetch<Correlation[]>({ url: '/api/datasources/correlations', method: 'GET', showErrorAlert: false })\n      )\n        .then(getData)\n        .then(toEnrichedCorrelationsData),\n    [backend]\n  );\n\n  const [createInfo, create] = useAsyncFn<(params: CreateCorrelationParams) => Promise<CorrelationData>>(\n    ({ sourceUID, ...correlation }) =>\n      backend.post(`/api/datasources/uid/${sourceUID}/correlations`, correlation).then(toEnrichedCorrelationData),\n    [backend]\n  );\n\n  const [removeInfo, remove] = useAsyncFn<(params: RemoveCorrelationParams) => Promise<void>>(\n    ({ sourceUID, uid }) => backend.delete(`/api/datasources/uid/${sourceUID}/correlations/${uid}`),\n    [backend]\n  );\n\n  const [updateInfo, update] = useAsyncFn<(params: UpdateCorrelationParams) => Promise<CorrelationData>>(\n    ({ sourceUID, uid, ...correlation }) =>\n      backend\n        .patch(`/api/datasources/uid/${sourceUID}/correlations/${uid}`, correlation)\n        .then(toEnrichedCorrelationData),\n    [backend]\n  );\n\n  return {\n    create: {\n      execute: create,\n      ...createInfo,\n    },\n    update: {\n      execute: update,\n      ...updateInfo,\n    },\n    get: {\n      execute: get,\n      ...getInfo,\n    },\n    remove: {\n      execute: remove,\n      ...removeInfo,\n    },\n  };\n};\n","import { css, cx } from '@emotion/css';\nimport React from 'react';\nimport { RegisterOptions, UseFormRegisterReturn } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Field, Input, TextArea, useStyles2 } from '@grafana/ui';\n\nimport { EditFormDTO } from './types';\n\nconst getInputId = (inputName: string, correlation?: EditFormDTO) => {\n  if (!correlation) {\n    return inputName;\n  }\n\n  return `${inputName}_${correlation.sourceUID}-${correlation.uid}`;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  marginless: css`\n    margin: 0;\n  `,\n  label: css`\n    max-width: ${theme.spacing(32)};\n  `,\n  description: css`\n    max-width: ${theme.spacing(80)};\n  `,\n});\n\ninterface Props {\n  register: (path: 'label' | 'description', options?: RegisterOptions) => UseFormRegisterReturn;\n  readOnly?: boolean;\n  correlation?: EditFormDTO;\n}\n\nexport function CorrelationDetailsFormPart({ register, readOnly = false, correlation }: Props) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <>\n      <Field label=\"Label\" className={styles.label}>\n        <Input\n          id={getInputId('label', correlation)}\n          {...register('label')}\n          readOnly={readOnly}\n          placeholder=\"i.e. Tempo traces\"\n        />\n      </Field>\n\n      <Field\n        label=\"Description\"\n        // the Field component automatically adds margin to itself, so we are forced to workaround it by overriding  its styles\n        className={cx(readOnly && styles.marginless, styles.description)}\n      >\n        <TextArea id={getInputId('description', correlation)} {...register('description')} readOnly={readOnly} />\n      </Field>\n    </>\n  );\n}\n","import { DeepPartial, FieldValues, SubmitHandler, UnpackNestedValue, useForm } from 'react-hook-form';\n\ninterface UseCorrelationFormOptions<T extends FieldValues> {\n  onSubmit: SubmitHandler<T>;\n  defaultValues?: UnpackNestedValue<DeepPartial<T>>;\n}\nexport const useCorrelationForm = <T extends FieldValues>({\n  onSubmit,\n  defaultValues,\n}: UseCorrelationFormOptions<T>) => {\n  const {\n    handleSubmit: submit,\n    control,\n    register,\n    formState: { errors },\n  } = useForm<T>({ defaultValues });\n\n  const handleSubmit = submit(onSubmit);\n\n  return { control, handleSubmit, register, errors };\n};\n","import { css } from '@emotion/css';\nimport React, { useEffect } from 'react';\nimport { Controller } from 'react-hook-form';\n\nimport { DataSourceInstanceSettings, GrafanaTheme2 } from '@grafana/data';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { Button, Field, HorizontalGroup, PanelContainer, useStyles2 } from '@grafana/ui';\nimport { CloseButton } from 'app/core/components/CloseButton/CloseButton';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\n\nimport { useCorrelations } from '../useCorrelations';\n\nimport { CorrelationDetailsFormPart } from './CorrelationDetailsFormPart';\nimport { FormDTO } from './types';\nimport { useCorrelationForm } from './useCorrelationForm';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  panelContainer: css`\n    position: relative;\n    padding: ${theme.spacing(1)};\n    margin-bottom: ${theme.spacing(2)};\n  `,\n  linksToContainer: css`\n    flex-grow: 1;\n    /* This is the width of the textarea minus the sum of the label&description fields,\n     * so that this element takes exactly the remaining space and the inputs will be\n     * nicely aligned with the textarea\n    **/\n    max-width: ${theme.spacing(80 - 64)};\n    margin-top: ${theme.spacing(3)};\n    text-align: right;\n    padding-right: ${theme.spacing(1)};\n  `,\n  // we can't use HorizontalGroup because it wraps elements in divs and sets margins on them\n  horizontalGroup: css`\n    display: flex;\n  `,\n});\n\ninterface Props {\n  onClose: () => void;\n  onCreated: () => void;\n}\n\nconst withDsUID = (fn: Function) => (ds: DataSourceInstanceSettings) => fn(ds.uid);\n\nexport const AddCorrelationForm = ({ onClose, onCreated }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const {\n    create: { execute, loading, error, value },\n  } = useCorrelations();\n\n  useEffect(() => {\n    if (!error && !loading && value) {\n      onCreated();\n    }\n  }, [error, loading, value, onCreated]);\n\n  const { control, handleSubmit, register, errors } = useCorrelationForm<FormDTO>({ onSubmit: execute });\n\n  return (\n    <PanelContainer className={styles.panelContainer}>\n      <CloseButton onClick={onClose} />\n      <form onSubmit={handleSubmit}>\n        <div className={styles.horizontalGroup}>\n          <Controller\n            control={control}\n            name=\"sourceUID\"\n            rules={{\n              required: { value: true, message: 'This field is required.' },\n              validate: {\n                writable: (uid: string) =>\n                  !getDatasourceSrv().getInstanceSettings(uid)?.readOnly || \"Source can't be a read-only data source.\",\n              },\n            }}\n            render={({ field: { onChange, value } }) => (\n              <Field label=\"Source\" htmlFor=\"source\" invalid={!!errors.sourceUID} error={errors.sourceUID?.message}>\n                <DataSourcePicker\n                  onChange={withDsUID(onChange)}\n                  noDefault\n                  current={value}\n                  inputId=\"source\"\n                  width={32}\n                />\n              </Field>\n            )}\n          />\n          <div className={styles.linksToContainer}>Links to</div>\n          <Controller\n            control={control}\n            name=\"targetUID\"\n            rules={{ required: { value: true, message: 'This field is required.' } }}\n            render={({ field: { onChange, value } }) => (\n              <Field label=\"Target\" htmlFor=\"target\" invalid={!!errors.targetUID} error={errors.targetUID?.message}>\n                <DataSourcePicker\n                  onChange={withDsUID(onChange)}\n                  noDefault\n                  current={value}\n                  inputId=\"target\"\n                  width={32}\n                />\n              </Field>\n            )}\n          />\n        </div>\n\n        <CorrelationDetailsFormPart register={register} />\n\n        <HorizontalGroup justify=\"flex-end\">\n          <Button variant=\"primary\" icon={loading ? 'fa fa-spinner' : 'plus'} type=\"submit\" disabled={loading}>\n            Add\n          </Button>\n        </HorizontalGroup>\n      </form>\n    </PanelContainer>\n  );\n};\n","import React, { useEffect } from 'react';\n\nimport { Button, HorizontalGroup } from '@grafana/ui';\n\nimport { useCorrelations } from '../useCorrelations';\n\nimport { CorrelationDetailsFormPart } from './CorrelationDetailsFormPart';\nimport { EditFormDTO } from './types';\nimport { useCorrelationForm } from './useCorrelationForm';\n\ninterface Props {\n  onUpdated: () => void;\n  defaultValues: EditFormDTO;\n  readOnly?: boolean;\n}\n\nexport const EditCorrelationForm = ({ onUpdated, defaultValues, readOnly = false }: Props) => {\n  const {\n    update: { execute, loading, error, value },\n  } = useCorrelations();\n\n  useEffect(() => {\n    if (!error && !loading && value) {\n      onUpdated();\n    }\n  }, [error, loading, value, onUpdated]);\n\n  const { handleSubmit, register } = useCorrelationForm<EditFormDTO>({ onSubmit: execute, defaultValues });\n\n  return (\n    <form onSubmit={readOnly ? (e) => e.preventDefault() : handleSubmit}>\n      <input type=\"hidden\" {...register('uid')} />\n      <input type=\"hidden\" {...register('sourceUID')} />\n      <CorrelationDetailsFormPart register={register} readOnly={readOnly} correlation={defaultValues} />\n\n      {!readOnly && (\n        <HorizontalGroup justify=\"flex-end\">\n          <Button variant=\"primary\" icon={loading ? 'fa fa-spinner' : 'save'} type=\"submit\" disabled={loading}>\n            Save\n          </Button>\n        </HorizontalGroup>\n      )}\n    </form>\n  );\n};\n","import React from 'react';\n\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\n\ninterface Props {\n  onClick?: () => void;\n}\nexport const EmptyCorrelationsCTA = ({ onClick }: Props) => {\n  // TODO: if there are no datasources show a different message\n\n  return (\n    <EmptyListCTA\n      title=\"You haven't defined any correlation yet.\"\n      buttonIcon=\"gf-glue\"\n      onClick={onClick}\n      buttonTitle=\"Add correlation\"\n      proTip=\"you can also define correlations via datasource provisioning\"\n    />\n  );\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\nimport { CellProps } from 'react-table';\n\nimport { IconButton } from '@grafana/ui';\n\nconst expanderContainerStyles = css`\n  display: flex;\n  align-items: center;\n  height: 100%;\n`;\n\nexport const ExpanderCell = ({ row }: CellProps<object, void>) => (\n  <div className={expanderContainerStyles}>\n    <IconButton\n      // @ts-expect-error react-table doesn't ship with useExpanded types and we can't use declaration merging without affecting the table viz\n      name={row.isExpanded ? 'angle-down' : 'angle-right'}\n      // @ts-expect-error same as the line above\n      {...row.getToggleRowExpandedProps({})}\n    />\n  </div>\n);\n","import { uniqueId } from 'lodash';\nimport { Column as RTColumn } from 'react-table';\n\nimport { ExpanderCell } from './ExpanderCell';\n\nimport { Column } from '.';\n\nexport const EXPANDER_CELL_ID = '__expander';\n\ntype InternalColumn<T extends object> = RTColumn<T> & {\n  visible?: (data: T[]) => boolean;\n};\n\n// Returns the columns in a \"react-table\" acceptable format\nexport function getColumns<K extends object>(columns: Array<Column<K>>): Array<InternalColumn<K>> {\n  return [\n    {\n      id: EXPANDER_CELL_ID,\n      Cell: ExpanderCell,\n      disableSortBy: true,\n      width: 0,\n    },\n    // @ts-expect-error react-table expects each column key(id) to have data associated with it and therefore complains about\n    // column.id being possibly undefined and not keyof T (where T is the data object)\n    // We do not want to be that strict as we simply pass undefined to cells that do not have data associated with them.\n    ...columns.map((column) => ({\n      Header: column.header || (() => null),\n      accessor: column.id || uniqueId(),\n      sortType: column.sortType || 'alphanumeric',\n      disableSortBy: !Boolean(column.sortType),\n      width: column.shrink ? 0 : undefined,\n      visible: column.visible,\n      ...(column.cell && { Cell: column.cell }),\n    })),\n  ];\n}\n","import { cx, css } from '@emotion/css';\nimport React, { useMemo, Fragment, ReactNode } from 'react';\nimport {\n  CellProps,\n  SortByFn,\n  useExpanded,\n  useSortBy,\n  useTable,\n  DefaultSortTypes,\n  TableOptions,\n  IdType,\n} from 'react-table';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, useStyles2 } from '@grafana/ui';\nimport { isTruthy } from 'app/core/utils/types';\n\nimport { EXPANDER_CELL_ID, getColumns } from './utils';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  table: css`\n    border-radius: ${theme.shape.borderRadius()};\n    border: solid 1px ${theme.colors.border.weak};\n    background-color: ${theme.colors.background.secondary};\n    width: 100%;\n    td,\n    th {\n      padding: ${theme.spacing(1)};\n      min-width: ${theme.spacing(3)};\n    }\n  `,\n  evenRow: css`\n    background: ${theme.colors.background.primary};\n  `,\n  shrink: css`\n    width: 0%;\n  `,\n});\n\nexport interface Column<TableData extends object> {\n  /**\n   * ID of the column.\n   * Set this to the matching object key of your data or `undefined` if the column doesn't have any associated data with it.\n   * This must be unique among all other columns.\n   */\n  id?: IdType<TableData>;\n  cell?: (props: CellProps<TableData>) => ReactNode;\n  header?: (() => ReactNode | string) | string;\n  sortType?: DefaultSortTypes | SortByFn<TableData>;\n  shrink?: boolean;\n  visible?: (col: TableData[]) => boolean;\n}\n\ninterface Props<TableData extends object> {\n  columns: Array<Column<TableData>>;\n  data: TableData[];\n  renderExpandedRow?: (row: TableData) => JSX.Element;\n  className?: string;\n  getRowId: TableOptions<TableData>['getRowId'];\n}\n\n/**\n * non-viz table component.\n * Will need most likely to be moved in @grafana/ui\n */\nexport function Table<TableData extends object>({\n  data,\n  className,\n  columns,\n  renderExpandedRow,\n  getRowId,\n}: Props<TableData>) {\n  const styles = useStyles2(getStyles);\n  const tableColumns = useMemo(() => {\n    const cols = getColumns<TableData>(columns);\n    return cols;\n  }, [columns]);\n\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = useTable<TableData>(\n    {\n      columns: tableColumns,\n      data,\n      autoResetExpanded: false,\n      autoResetSortBy: false,\n      getRowId,\n      initialState: {\n        hiddenColumns: [\n          !renderExpandedRow && EXPANDER_CELL_ID,\n          ...tableColumns\n            .filter((col) => !(col.visible?.(data) ?? true))\n            .map((c) => c.id)\n            .filter(isTruthy),\n        ].filter(isTruthy),\n      },\n    },\n    useSortBy,\n    useExpanded\n  );\n  // This should be called only for rows thar we'd want to actually render, which is all at this stage.\n  // We may want to revisit this if we decide to add pagination and/or virtualized tables.\n  rows.forEach(prepareRow);\n\n  return (\n    <table {...getTableProps()} className={cx(styles.table, className)}>\n      <thead>\n        {headerGroups.map((headerGroup) => {\n          const { key, ...headerRowProps } = headerGroup.getHeaderGroupProps();\n\n          return (\n            <tr key={key} {...headerRowProps}>\n              {headerGroup.headers.map((column) => {\n                // TODO: if the column is a function, it should also provide an accessible name as a string to be used a the column title in getSortByToggleProps\n                const { key, ...headerCellProps } = column.getHeaderProps(\n                  column.canSort ? column.getSortByToggleProps() : undefined\n                );\n\n                return (\n                  <th key={key} className={cx(column.width === 0 && styles.shrink)} {...headerCellProps}>\n                    {column.render('Header')}\n\n                    {column.isSorted && <Icon name={column.isSortedDesc ? 'angle-down' : 'angle-up'} />}\n                  </th>\n                );\n              })}\n            </tr>\n          );\n        })}\n      </thead>\n\n      <tbody {...getTableBodyProps()}>\n        {rows.map((row, rowIndex) => {\n          const className = cx(rowIndex % 2 === 0 && styles.evenRow);\n          const { key, ...otherRowProps } = row.getRowProps();\n\n          return (\n            <Fragment key={key}>\n              <tr className={className} {...otherRowProps}>\n                {row.cells.map((cell) => {\n                  const { key, ...otherCellProps } = cell.getCellProps();\n                  return (\n                    <td key={key} {...otherCellProps}>\n                      {cell.render('Cell')}\n                    </td>\n                  );\n                })}\n              </tr>\n              {\n                // @ts-expect-error react-table doesn't ship with useExpanded types and we can't use declaration merging without affecting the table viz\n                row.isExpanded && renderExpandedRow && (\n                  <tr className={className} {...otherRowProps}>\n                    <td colSpan={row.cells.length}>{renderExpandedRow(row.original)}</td>\n                  </tr>\n                )\n              }\n            </Fragment>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n}\n","import { css } from '@emotion/css';\nimport { negate } from 'lodash';\nimport React, { memo, useCallback, useEffect, useMemo, useState } from 'react';\nimport { CellProps, SortByFn } from 'react-table';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { isFetchError } from '@grafana/runtime';\nimport { Badge, Button, DeleteButton, HorizontalGroup, LoadingPlaceholder, useStyles2, Alert } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { contextSrv } from 'app/core/core';\nimport { useNavModel } from 'app/core/hooks/useNavModel';\nimport { AccessControlAction } from 'app/types';\n\nimport { AddCorrelationForm } from './Forms/AddCorrelationForm';\nimport { EditCorrelationForm } from './Forms/EditCorrelationForm';\nimport { EmptyCorrelationsCTA } from './components/EmptyCorrelationsCTA';\nimport { Column, Table } from './components/Table';\nimport { CorrelationData, useCorrelations } from './useCorrelations';\n\nconst sortDatasource: SortByFn<CorrelationData> = (a, b, column) =>\n  a.values[column].name.localeCompare(b.values[column].name);\n\nconst isSourceReadOnly = ({ source }: Pick<CorrelationData, 'source'>) => source.readOnly;\n\nconst loaderWrapper = css`\n  display: flex;\n  justify-content: center;\n`;\n\nexport default function CorrelationsPage() {\n  const navModel = useNavModel('correlations');\n  const [isAdding, setIsAdding] = useState(false);\n  const {\n    remove,\n    get: { execute: fetchCorrelations, ...get },\n  } = useCorrelations();\n\n  useEffect(() => {\n    fetchCorrelations();\n    // we only want to fetch data on first render\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const canWriteCorrelations = contextSrv.hasPermission(AccessControlAction.DataSourcesWrite);\n\n  const handleAdd = useCallback(() => {\n    fetchCorrelations();\n    setIsAdding(false);\n  }, [fetchCorrelations]);\n\n  useEffect(() => {\n    if (!remove.error && !remove.loading && remove.value) {\n      fetchCorrelations();\n    }\n  }, [remove.error, remove.loading, remove.value, fetchCorrelations]);\n\n  const RowActions = useCallback(\n    ({\n      row: {\n        original: {\n          source: { uid: sourceUID, readOnly },\n          uid,\n        },\n      },\n    }: CellProps<CorrelationData, void>) =>\n      !readOnly && (\n        <DeleteButton\n          aria-label=\"delete correlation\"\n          onConfirm={() => remove.execute({ sourceUID, uid })}\n          closeOnConfirm\n        />\n      ),\n    [remove]\n  );\n\n  const columns = useMemo<Array<Column<CorrelationData>>>(\n    () => [\n      {\n        cell: InfoCell,\n        shrink: true,\n        visible: (data) => data.some(isSourceReadOnly),\n      },\n      {\n        id: 'source',\n        header: 'Source',\n        cell: DataSourceCell,\n        sortType: sortDatasource,\n      },\n      {\n        id: 'target',\n        header: 'Target',\n        cell: DataSourceCell,\n        sortType: sortDatasource,\n      },\n      { id: 'label', header: 'Label', sortType: 'alphanumeric' },\n      {\n        cell: RowActions,\n        shrink: true,\n        visible: (data) => canWriteCorrelations && data.some(negate(isSourceReadOnly)),\n      },\n    ],\n    [RowActions, canWriteCorrelations]\n  );\n\n  const data = useMemo(() => get.value, [get.value]);\n\n  const showEmptyListCTA = data?.length === 0 && !isAdding && !get.error;\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>\n        <div>\n          <HorizontalGroup justify=\"space-between\">\n            <div>\n              <h4>Correlations</h4>\n              <p>Define how data living in different data sources relates to each other.</p>\n            </div>\n            {canWriteCorrelations && data?.length !== 0 && data !== undefined && !isAdding && (\n              <Button icon=\"plus\" onClick={() => setIsAdding(true)}>\n                Add new\n              </Button>\n            )}\n          </HorizontalGroup>\n        </div>\n\n        <div>\n          {!data && get.loading && (\n            <div className={loaderWrapper}>\n              <LoadingPlaceholder text=\"loading...\" />\n            </div>\n          )}\n\n          {showEmptyListCTA && <EmptyCorrelationsCTA onClick={() => setIsAdding(true)} />}\n\n          {\n            // This error is not actionable, it'd be nice to have a recovery button\n            get.error && (\n              <Alert severity=\"error\" title=\"Error fetching correlation data\" topSpacing={2}>\n                {(isFetchError(get.error) && get.error.data?.message) ||\n                  'An unknown error occurred while fetching correlation data. Please try again.'}\n              </Alert>\n            )\n          }\n\n          {isAdding && <AddCorrelationForm onClose={() => setIsAdding(false)} onCreated={handleAdd} />}\n\n          {data && data.length >= 1 && (\n            <Table\n              renderExpandedRow={({ target, source, ...correlation }) => (\n                <EditCorrelationForm\n                  defaultValues={{ sourceUID: source.uid, ...correlation }}\n                  onUpdated={fetchCorrelations}\n                  readOnly={isSourceReadOnly({ source }) || !canWriteCorrelations}\n                />\n              )}\n              columns={columns}\n              data={data}\n              getRowId={(correlation) => `${correlation.source.uid}-${correlation.uid}`}\n            />\n          )}\n        </div>\n      </Page.Contents>\n    </Page>\n  );\n}\n\nconst getDatasourceCellStyles = (theme: GrafanaTheme2) => ({\n  root: css`\n    display: flex;\n    align-items: center;\n  `,\n  dsLogo: css`\n    margin-right: ${theme.spacing()};\n    height: 16px;\n    width: 16px;\n  `,\n});\n\nconst DataSourceCell = memo(\n  function DataSourceCell({\n    cell: { value },\n  }: CellProps<CorrelationData, CorrelationData['source'] | CorrelationData['target']>) {\n    const styles = useStyles2(getDatasourceCellStyles);\n\n    return (\n      <span className={styles.root}>\n        <img src={value.meta.info.logos.small} className={styles.dsLogo} />\n        {value.name}\n      </span>\n    );\n  },\n  ({ cell: { value } }, { cell: { value: prevValue } }) => {\n    return value.type === prevValue.type && value.name === prevValue.name;\n  }\n);\n\nconst noWrap = css`\n  white-space: nowrap;\n`;\n\nconst InfoCell = memo(\n  function InfoCell({ ...props }: CellProps<CorrelationData, void>) {\n    const readOnly = props.row.original.source.readOnly;\n\n    if (readOnly) {\n      return <Badge text=\"Read only\" color=\"purple\" className={noWrap} />;\n    } else {\n      return null;\n    }\n  },\n  (props, prevProps) => props.row.original.source.readOnly === prevProps.row.original.source.readOnly\n);\n"],"names":["isTruthy","value","Boolean","toEnrichedCorrelationData","sourceUID","targetUID","correlation","source","getDataSourceSrv","getInstanceSettings","target","toEnrichedCorrelationsData","correlations","map","getData","response","data","useCorrelations","backend","useGrafana","getInfo","get","useAsyncFn","lastValueFrom","fetch","url","method","showErrorAlert","then","createInfo","create","post","removeInfo","remove","uid","delete","updateInfo","update","patch","execute","getInputId","inputName","getStyles","theme","marginless","css","label","spacing","description","CorrelationDetailsFormPart","register","readOnly","styles","useStyles2","Field","className","Input","I","id","placeholder","cx","TextArea","useCorrelationForm","onSubmit","defaultValues","handleSubmit","submit","control","formState","errors","useForm","panelContainer","linksToContainer","horizontalGroup","withDsUID","fn","ds","AddCorrelationForm","onClose","onCreated","loading","error","useEffect","PanelContainer","CloseButton","onClick","name","rules","required","message","validate","writable","getDatasourceSrv","render","field","onChange","htmlFor","invalid","DataSourcePicker","noDefault","current","inputId","width","justify","Button","variant","icon","type","disabled","EditCorrelationForm","onUpdated","e","preventDefault","EmptyCorrelationsCTA","EmptyListCTA","title","buttonIcon","buttonTitle","proTip","expanderContainerStyles","ExpanderCell","row","IconButton","isExpanded","getToggleRowExpandedProps","EXPANDER_CELL_ID","table","shape","borderRadius","colors","border","weak","background","secondary","evenRow","primary","shrink","Table","columns","renderExpandedRow","getRowId","tableColumns","useMemo","cols","Cell","disableSortBy","column","Header","header","accessor","uniqueId","sortType","undefined","visible","cell","getColumns","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","useTable","autoResetExpanded","autoResetSortBy","initialState","hiddenColumns","filter","col","c","useSortBy","useExpanded","forEach","headerGroup","getHeaderGroupProps","key","headerRowProps","headers","getHeaderProps","canSort","getSortByToggleProps","headerCellProps","isSorted","Icon","isSortedDesc","rowIndex","getRowProps","otherRowProps","Fragment","cells","getCellProps","otherCellProps","colSpan","length","original","sortDatasource","a","b","values","localeCompare","isSourceReadOnly","loaderWrapper","CorrelationsPage","navModel","useNavModel","isAdding","setIsAdding","useState","fetchCorrelations","canWriteCorrelations","contextSrv","AccessControlAction","handleAdd","useCallback","RowActions","DeleteButton","onConfirm","closeOnConfirm","InfoCell","some","DataSourceCell","negate","showEmptyListCTA","Page","LoadingPlaceholder","text","Alert","severity","topSpacing","isFetchError","getDatasourceCellStyles","root","dsLogo","memo","src","meta","info","logos","small","prevValue","noWrap","Badge","color","props","prevProps"],"sourceRoot":""}