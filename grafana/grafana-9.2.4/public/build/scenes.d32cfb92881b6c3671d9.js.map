{"version":3,"file":"scenes.d32cfb92881b6c3671d9.js","mappings":"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","sources":["webpack://grafana/./public/app/features/scenes/SceneListPage.tsx","webpack://grafana/./public/app/features/scenes/ScenePage.tsx","webpack://grafana/./public/app/features/scenes/editor/SceneComponentEditWrapper.tsx","webpack://grafana/./public/app/features/scenes/core/SceneComponentWrapper.tsx","webpack://grafana/./public/app/features/scenes/core/events.ts","webpack://grafana/./public/app/features/scenes/core/types.ts","webpack://grafana/./public/app/features/scenes/core/SceneObjectBase.tsx","webpack://grafana/./public/app/features/scenes/services/UrlSyncManager.ts","webpack://grafana/./public/app/features/scenes/components/Scene.tsx","webpack://grafana/./public/app/features/scenes/components/SceneCanvasText.tsx","webpack://grafana/./public/app/features/scenes/components/SceneFlexLayout.tsx","webpack://grafana/./public/app/features/scenes/core/SceneDataNode.ts","webpack://grafana/./public/app/features/scenes/components/ScenePanelRepeater.tsx","webpack://grafana/./public/app/features/scenes/components/SceneTimePicker.tsx","webpack://grafana/./public/app/features/scenes/components/SceneToolbarButton.tsx","webpack://grafana/./public/app/features/scenes/components/VizPanel.tsx","webpack://grafana/./public/app/features/scenes/core/SceneTimeRange.tsx","webpack://grafana/./public/app/features/scenes/editor/SceneObjectEditor.tsx","webpack://grafana/./public/app/features/scenes/editor/SceneObjectTree.tsx","webpack://grafana/./public/app/features/scenes/editor/SceneEditManager.tsx","webpack://grafana/./public/app/features/scenes/querying/SceneQueryRunner.ts","webpack://grafana/./public/app/features/scenes/scenes/demo.tsx","webpack://grafana/./public/app/features/scenes/components/NestedScene.tsx","webpack://grafana/./public/app/features/scenes/scenes/index.tsx","webpack://grafana/./public/app/features/scenes/scenes/nested.tsx","webpack://grafana/./public/app/features/scenes/scenes/sceneWithRows.tsx","webpack://grafana/./public/app/features/scenes/scenes/queries.ts"],"sourcesContent":["// Libraries\nimport React, { FC } from 'react';\n\nimport { Stack } from '@grafana/experimental';\nimport { Card } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\n\n// Types\nimport { getScenes } from './scenes';\n\nexport interface Props {}\n\nexport const SceneListPage: FC<Props> = ({}) => {\n  const scenes = getScenes();\n\n  return (\n    <Page navId=\"scenes\">\n      <Page.Contents>\n        <Stack direction=\"column\">\n          {scenes.map((scene) => (\n            <Card href={`/scenes/${scene.state.title}`} key={scene.state.title}>\n              <Card.Heading>{scene.state.title}</Card.Heading>\n            </Card>\n          ))}\n        </Stack>\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default SceneListPage;\n","// Libraries\nimport React, { FC } from 'react';\n\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\n\nimport { getSceneByTitle } from './scenes';\n\nexport interface Props extends GrafanaRouteComponentProps<{ name: string }> {}\n\nexport const ScenePage: FC<Props> = (props) => {\n  const scene = getSceneByTitle(props.match.params.name);\n\n  if (!scene) {\n    return <h2>Scene not found</h2>;\n  }\n\n  return <scene.Component model={scene} />;\n};\n\nexport default ScenePage;\n","import { css } from '@emotion/css';\nimport React, { CSSProperties } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { SceneObject } from '../core/types';\n\nexport function SceneComponentEditingWrapper<T extends SceneObject>({\n  model,\n  children,\n}: {\n  model: T;\n  children: React.ReactNode;\n}) {\n  const styles = useStyles2(getStyles);\n  const editor = model.getSceneEditor();\n  const { hoverObject, selectedObject } = editor.useState();\n\n  const onMouseEnter = () => editor.onMouseEnterObject(model);\n  const onMouseLeave = () => editor.onMouseLeaveObject(model);\n\n  const onClick = (evt: React.MouseEvent) => {\n    evt.stopPropagation();\n    editor.onSelectObject(model);\n  };\n\n  const style: CSSProperties = {};\n  let className = styles.wrapper;\n\n  if (hoverObject?.ref === model) {\n    className += ' ' + styles.hover;\n  }\n  if (selectedObject?.ref === model) {\n    className += ' ' + styles.selected;\n  }\n\n  return (\n    <div style={style} className={className} onMouseEnter={onMouseEnter} onMouseLeave={onMouseLeave} onClick={onClick}>\n      {children}\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    wrapper: css({\n      display: 'flex',\n      flexGrow: 1,\n      padding: 8,\n      border: `1px dashed ${theme.colors.primary.main}`,\n      cursor: 'pointer',\n    }),\n    hover: css({\n      border: `1px solid ${theme.colors.primary.border}`,\n    }),\n    selected: css({\n      border: `1px solid ${theme.colors.error.border}`,\n    }),\n  };\n};\n","import React, { useEffect } from 'react';\n\nimport { SceneComponentEditingWrapper } from '../editor/SceneComponentEditWrapper';\n\nimport { SceneComponentProps, SceneObject } from './types';\n\nexport function SceneComponentWrapper<T extends SceneObject>({ model, isEditing }: SceneComponentProps<T>) {\n  const Component = (model as any).constructor['Component'] ?? EmptyRenderer;\n  const inner = <Component model={model} isEditing={isEditing} />;\n\n  // Handle component activation state state\n  useEffect(() => {\n    if (!model.isActive) {\n      model.activate();\n    }\n    return () => {\n      if (model.isActive) {\n        model.deactivate();\n      }\n    };\n  }, [model]);\n\n  if (!isEditing) {\n    return inner;\n  }\n\n  return <SceneComponentEditingWrapper model={model}>{inner}</SceneComponentEditingWrapper>;\n}\n\nfunction EmptyRenderer<T>(_: SceneComponentProps<T>): React.ReactElement | null {\n  return null;\n}\n","import { BusEventWithPayload } from '@grafana/data';\n\nimport { SceneObject, SceneObjectState, SceneObjectWithUrlSync } from './types';\n\nexport interface SceneObjectStateChangedPayload {\n  prevState: SceneObjectState;\n  newState: SceneObjectState;\n  partialUpdate: Partial<SceneObjectState>;\n  changedObject: SceneObject | SceneObjectWithUrlSync;\n}\n\nexport class SceneObjectStateChangedEvent extends BusEventWithPayload<SceneObjectStateChangedPayload> {\n  static type = 'scene-object-state-change';\n}\n","import React from 'react';\nimport { Subscribable } from 'rxjs';\n\nimport { EventBus, PanelData, TimeRange, UrlQueryMap } from '@grafana/data';\n\nimport { SceneVariableSet } from '../variables/types';\n\nexport interface SceneObjectStatePlain {\n  key?: string;\n  $timeRange?: SceneTimeRange;\n  $data?: SceneObject<SceneDataState>;\n  $editor?: SceneEditor;\n  $variables?: SceneVariableSet;\n}\n\nexport interface SceneLayoutChildState extends SceneObjectStatePlain {\n  size?: SceneObjectSize;\n}\n\nexport type SceneObjectState = SceneObjectStatePlain | SceneLayoutState | SceneLayoutChildState;\n\nexport interface SceneObjectSize {\n  width?: number | string;\n  height?: number | string;\n  xSizing?: 'fill' | 'content';\n  ySizing?: 'fill' | 'content';\n  x?: number;\n  y?: number;\n  minWidth?: number | string;\n  minHeight?: number | string;\n}\n\nexport interface SceneComponentProps<T> {\n  model: T;\n  isEditing?: boolean;\n}\n\nexport type SceneComponent<TModel> = React.FunctionComponent<SceneComponentProps<TModel>>;\n\nexport interface SceneDataState extends SceneObjectStatePlain {\n  data?: PanelData;\n}\n\nexport interface SceneObject<TState extends SceneObjectState = SceneObjectState> extends Subscribable<TState> {\n  /** The current state */\n  state: TState;\n\n  /** True when there is a React component mounted for this Object */\n  isActive?: boolean;\n\n  /** SceneObject parent */\n  parent?: SceneObject;\n\n  /** Currently only used from root to broadcast events */\n  events: EventBus;\n\n  /** Utility hook that wraps useObservable. Used by React components to subscribes to state changes */\n  useState(): TState;\n\n  /** How to modify state */\n  setState(state: Partial<TState>): void;\n\n  /** Called when the Component is mounted. A place to register event listeners add subscribe to state changes */\n  activate(): void;\n\n  /** Called when component unmounts. Unsubscribe to events */\n  deactivate(): void;\n\n  /** Get the scene editor */\n  getSceneEditor(): SceneEditor;\n\n  /** Returns a deep clone this object and all its children */\n  clone(state?: Partial<TState>): this;\n\n  /** A React component to use for rendering the object */\n  Component(props: SceneComponentProps<SceneObject<TState>>): React.ReactElement | null;\n\n  /** To be replaced by declarative method */\n  Editor(props: SceneComponentProps<SceneObject<TState>>): React.ReactElement | null;\n}\n\nexport type SceneLayoutChild = SceneObject<SceneLayoutChildState | SceneLayoutState>;\n\nexport interface SceneLayoutState extends SceneLayoutChildState {\n  children: SceneLayoutChild[];\n}\n\nexport type SceneLayout<T extends SceneLayoutState = SceneLayoutState> = SceneObject<T>;\n\nexport interface SceneEditorState extends SceneObjectStatePlain {\n  hoverObject?: SceneObjectRef;\n  selectedObject?: SceneObjectRef;\n}\n\nexport interface SceneEditor extends SceneObject<SceneEditorState> {\n  onMouseEnterObject(model: SceneObject): void;\n  onMouseLeaveObject(model: SceneObject): void;\n  onSelectObject(model: SceneObject): void;\n}\n\nexport interface SceneTimeRangeState extends SceneObjectStatePlain, TimeRange {}\nexport interface SceneTimeRange extends SceneObject<SceneTimeRangeState> {\n  onTimeRangeChange(timeRange: TimeRange): void;\n  onIntervalChanged(interval: string): void;\n  onRefresh(): void;\n}\n\nexport interface SceneObjectRef {\n  ref: SceneObject;\n}\n\nexport function isSceneObject(obj: any): obj is SceneObject {\n  return obj.useState !== undefined;\n}\n\n/** These functions are still just temporary until this get's refined */\nexport interface SceneObjectWithUrlSync extends SceneObject {\n  getUrlState(): UrlQueryMap;\n  updateFromUrl(values: UrlQueryMap): void;\n}\n","import { useEffect } from 'react';\nimport { Observer, Subject, Subscription } from 'rxjs';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { EventBusSrv } from '@grafana/data';\nimport { useForceUpdate } from '@grafana/ui';\n\nimport { SceneComponentWrapper } from './SceneComponentWrapper';\nimport { SceneObjectStateChangedEvent } from './events';\nimport {\n  SceneDataState,\n  SceneObject,\n  SceneComponent,\n  SceneEditor,\n  SceneTimeRange,\n  isSceneObject,\n  SceneObjectState,\n  SceneLayoutChild,\n} from './types';\n\nexport abstract class SceneObjectBase<TState extends SceneObjectState = {}> implements SceneObject<TState> {\n  subject = new Subject<TState>();\n  state: TState;\n  parent?: SceneObjectBase<SceneObjectState>;\n  subs = new Subscription();\n  isActive?: boolean;\n  events = new EventBusSrv();\n\n  constructor(state: TState) {\n    if (!state.key) {\n      state.key = uuidv4();\n    }\n\n    this.state = state;\n    this.subject.next(state);\n    this.setParent();\n  }\n\n  /**\n   * Used in render functions when rendering a SceneObject.\n   * Wraps the component in an EditWrapper that handles edit mode\n   */\n  get Component(): SceneComponent<this> {\n    return SceneComponentWrapper;\n  }\n\n  /**\n   * Temporary solution, should be replaced by declarative options\n   */\n  get Editor(): SceneComponent<this> {\n    return ((this as any).constructor['Editor'] ?? (() => null)) as SceneComponent<this>;\n  }\n\n  private setParent() {\n    for (const propValue of Object.values(this.state)) {\n      if (isSceneObject(propValue)) {\n        propValue.parent = this;\n      }\n\n      if (Array.isArray(propValue)) {\n        for (const child of propValue) {\n          if (isSceneObject(child)) {\n            child.parent = this;\n          }\n        }\n      }\n    }\n  }\n\n  /** This function implements the Subscribable<TState> interface */\n  subscribe(observer: Partial<Observer<TState>>) {\n    return this.subject.subscribe(observer);\n  }\n\n  setState(update: Partial<TState>) {\n    const prevState = this.state;\n    this.state = {\n      ...this.state,\n      ...update,\n    };\n    this.setParent();\n    this.subject.next(this.state);\n\n    // broadcast state change. This is event is subscribed to by UrlSyncManager and UndoManager\n    this.getRoot().events.publish(\n      new SceneObjectStateChangedEvent({\n        prevState,\n        newState: this.state,\n        partialUpdate: update,\n        changedObject: this,\n      })\n    );\n  }\n\n  private getRoot(): SceneObject {\n    return !this.parent ? this : this.parent.getRoot();\n  }\n\n  activate() {\n    this.isActive = true;\n\n    const { $data } = this.state;\n    if ($data && !$data.isActive) {\n      $data.activate();\n    }\n  }\n\n  deactivate(): void {\n    this.isActive = false;\n\n    const { $data } = this.state;\n    if ($data && $data.isActive) {\n      $data.deactivate();\n    }\n\n    this.subs.unsubscribe();\n    this.subs = new Subscription();\n  }\n\n  useState() {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    return useSceneObjectState(this);\n  }\n\n  /**\n   * Will walk up the scene object graph to the closest $timeRange scene object\n   */\n  getTimeRange(): SceneTimeRange {\n    const { $timeRange } = this.state;\n    if ($timeRange) {\n      return $timeRange;\n    }\n\n    if (this.parent) {\n      return this.parent.getTimeRange();\n    }\n\n    throw new Error('No time range found in scene tree');\n  }\n\n  /**\n   * Will walk up the scene object graph to the closest $data scene object\n   */\n  getData(): SceneObject<SceneDataState> {\n    const { $data } = this.state;\n    if ($data) {\n      return $data;\n    }\n\n    if (this.parent) {\n      return this.parent.getData();\n    }\n\n    throw new Error('No data found in scene tree');\n  }\n\n  /**\n   * Will walk up the scene object graph to the closest $editor scene object\n   */\n  getSceneEditor(): SceneEditor {\n    const { $editor } = this.state;\n    if ($editor) {\n      return $editor;\n    }\n\n    if (this.parent) {\n      return this.parent.getSceneEditor();\n    }\n\n    throw new Error('No editor found in scene tree');\n  }\n\n  /**\n   * Will create new SceneItem with shalled cloned state, but all states items of type SceneItem are deep cloned\n   */\n  clone(withState?: Partial<TState>): this {\n    const clonedState = { ...this.state };\n\n    // Clone any SceneItems in state\n    for (const key in clonedState) {\n      const propValue = clonedState[key];\n      if (propValue instanceof SceneObjectBase) {\n        clonedState[key] = propValue.clone();\n      }\n    }\n\n    // Clone layout children\n    if ('children' in this.state) {\n      const newChildren: SceneLayoutChild[] = [];\n      for (const child of this.state.children) {\n        newChildren.push(child.clone());\n      }\n      (clonedState as any).children = newChildren;\n    }\n\n    Object.assign(clonedState, withState);\n\n    return new (this.constructor as any)(clonedState);\n  }\n}\n\n/**\n * This hook is always returning model.state instead of a useState that remembers the last state emitted on the subject\n * The reason for this is so that if the model instance change this function will always return the latest state.\n */\nfunction useSceneObjectState<TState extends SceneObjectState>(model: SceneObjectBase<TState>): TState {\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    const s = model.subject.subscribe(forceUpdate);\n    return () => s.unsubscribe();\n  }, [model, forceUpdate]);\n\n  return model.state;\n}\n","import { Location } from 'history';\nimport { Unsubscribable } from 'rxjs';\n\nimport { locationService } from '@grafana/runtime';\n\nimport { SceneObjectStateChangedEvent } from '../core/events';\nimport { SceneObject } from '../core/types';\n\nexport class UrlSyncManager {\n  private locationListenerUnsub: () => void;\n  private stateChangeSub: Unsubscribable;\n\n  constructor(sceneRoot: SceneObject) {\n    this.stateChangeSub = sceneRoot.events.subscribe(SceneObjectStateChangedEvent, this.onStateChanged);\n    this.locationListenerUnsub = locationService.getHistory().listen(this.onLocationUpdate);\n  }\n\n  onLocationUpdate = (location: Location) => {\n    // TODO: find any scene object whose state we need to update\n  };\n\n  onStateChanged = ({ payload }: SceneObjectStateChangedEvent) => {\n    const changedObject = payload.changedObject;\n\n    if ('getUrlState' in changedObject) {\n      const urlUpdate = changedObject.getUrlState();\n      locationService.partial(urlUpdate, true);\n    }\n  };\n\n  cleanUp() {\n    this.stateChangeSub.unsubscribe();\n    this.locationListenerUnsub();\n  }\n}\n","import React from 'react';\n\nimport { PageLayoutType } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { PageToolbar, ToolbarButton } from '@grafana/ui';\nimport { AppChromeUpdate } from 'app/core/components/AppChrome/AppChromeUpdate';\nimport { Page } from 'app/core/components/Page/Page';\n\nimport { SceneObjectBase } from '../core/SceneObjectBase';\nimport { SceneComponentProps, SceneObjectStatePlain, SceneObject } from '../core/types';\nimport { UrlSyncManager } from '../services/UrlSyncManager';\n\ninterface SceneState extends SceneObjectStatePlain {\n  title: string;\n  layout: SceneObject;\n  actions?: SceneObject[];\n  isEditing?: boolean;\n}\n\nexport class Scene extends SceneObjectBase<SceneState> {\n  static Component = SceneRenderer;\n  urlSyncManager?: UrlSyncManager;\n\n  activate() {\n    super.activate();\n    this.urlSyncManager = new UrlSyncManager(this);\n  }\n\n  deactivate() {\n    super.deactivate();\n    this.urlSyncManager!.cleanUp();\n  }\n}\n\nfunction SceneRenderer({ model }: SceneComponentProps<Scene>) {\n  const { title, layout, actions = [], isEditing, $editor } = model.useState();\n\n  const toolbarActions = (actions ?? []).map((action) => <action.Component key={action.state.key} model={action} />);\n\n  if ($editor) {\n    toolbarActions.push(\n      <ToolbarButton\n        icon=\"cog\"\n        variant={isEditing ? 'primary' : 'default'}\n        onClick={() => model.setState({ isEditing: !model.state.isEditing })}\n      />\n    );\n  }\n\n  const pageToolbar = config.featureToggles.topnav ? (\n    <AppChromeUpdate actions={toolbarActions} />\n  ) : (\n    <PageToolbar title={title}>{toolbarActions}</PageToolbar>\n  );\n\n  return (\n    <Page navId=\"scenes\" pageNav={{ text: title }} layout={PageLayoutType.Canvas} toolbar={pageToolbar}>\n      <div style={{ flexGrow: 1, display: 'flex', gap: '8px', overflow: 'auto' }}>\n        <layout.Component model={layout} isEditing={isEditing} />\n        {$editor && <$editor.Component model={$editor} isEditing={isEditing} />}\n      </div>\n    </Page>\n  );\n}\n","import React, { CSSProperties } from 'react';\n\nimport { Field, Input } from '@grafana/ui';\n\nimport { SceneObjectBase } from '../core/SceneObjectBase';\nimport { SceneComponentProps, SceneLayoutChildState } from '../core/types';\n\nexport interface SceneCanvasTextState extends SceneLayoutChildState {\n  text: string;\n  fontSize?: number;\n  align?: 'left' | 'center' | 'right';\n}\n\nexport class SceneCanvasText extends SceneObjectBase<SceneCanvasTextState> {\n  static Editor = Editor;\n  static Component = ({ model }: SceneComponentProps<SceneCanvasText>) => {\n    const { text, fontSize = 20, align = 'left' } = model.useState();\n\n    const style: CSSProperties = {\n      fontSize: fontSize,\n      display: 'flex',\n      flexGrow: 1,\n      alignItems: 'center',\n      padding: 16,\n      justifyContent: align,\n    };\n\n    return <div style={style}>{text}</div>;\n  };\n}\n\nfunction Editor({ model }: SceneComponentProps<SceneCanvasText>) {\n  const { fontSize } = model.useState();\n\n  return (\n    <Field label=\"Font size\">\n      <Input\n        type=\"number\"\n        defaultValue={fontSize}\n        onBlur={(evt) => model.setState({ fontSize: parseInt(evt.currentTarget.value, 10) })}\n      />\n    </Field>\n  );\n}\n","import React, { CSSProperties } from 'react';\n\nimport { Field, RadioButtonGroup } from '@grafana/ui';\n\nimport { SceneObjectBase } from '../core/SceneObjectBase';\nimport { SceneObjectSize, SceneLayoutState, SceneComponentProps, SceneLayoutChild } from '../core/types';\n\nexport type FlexLayoutDirection = 'column' | 'row';\n\ninterface SceneFlexLayoutState extends SceneLayoutState {\n  direction?: FlexLayoutDirection;\n}\n\nexport class SceneFlexLayout extends SceneObjectBase<SceneFlexLayoutState> {\n  static Component = FlexLayoutRenderer;\n  static Editor = FlexLayoutEditor;\n\n  toggleDirection() {\n    this.setState({\n      direction: this.state.direction === 'row' ? 'column' : 'row',\n    });\n  }\n}\n\nfunction FlexLayoutRenderer({ model, isEditing }: SceneComponentProps<SceneFlexLayout>) {\n  const { direction = 'row', children } = model.useState();\n\n  return (\n    <div style={{ flexGrow: 1, flexDirection: direction, display: 'flex', gap: '8px' }}>\n      {children.map((item) => (\n        <FlexLayoutChildComponent key={item.state.key} item={item} direction={direction} isEditing={isEditing} />\n      ))}\n    </div>\n  );\n}\n\nfunction FlexLayoutChildComponent({\n  item,\n  direction,\n  isEditing,\n}: {\n  item: SceneLayoutChild;\n  direction: FlexLayoutDirection;\n  isEditing?: boolean;\n}) {\n  const { size } = item.useState();\n\n  return (\n    <div style={getItemStyles(direction, size)}>\n      <item.Component model={item} isEditing={isEditing} />\n    </div>\n  );\n}\n\nfunction getItemStyles(direction: FlexLayoutDirection, sizing: SceneObjectSize = {}) {\n  const { xSizing = 'fill', ySizing = 'fill' } = sizing;\n\n  const style: CSSProperties = {\n    display: 'flex',\n    flexDirection: direction,\n    minWidth: sizing.minWidth,\n    minHeight: sizing.minHeight,\n  };\n\n  if (direction === 'column') {\n    if (sizing.height) {\n      style.height = sizing.height;\n    } else {\n      style.flexGrow = ySizing === 'fill' ? 1 : 0;\n    }\n\n    if (sizing.width) {\n      style.width = sizing.width;\n    } else {\n      style.alignSelf = xSizing === 'fill' ? 'stretch' : 'flex-start';\n    }\n  } else {\n    if (sizing.height) {\n      style.height = sizing.height;\n    } else {\n      style.alignSelf = ySizing === 'fill' ? 'stretch' : 'flex-start';\n    }\n\n    if (sizing.width) {\n      style.width = sizing.width;\n    } else {\n      style.flexGrow = xSizing === 'fill' ? 1 : 0;\n    }\n  }\n\n  return style;\n}\n\nfunction FlexLayoutEditor({ model }: SceneComponentProps<SceneFlexLayout>) {\n  const { direction = 'row' } = model.useState();\n  const options = [\n    { icon: 'arrow-right', value: 'row' },\n    { icon: 'arrow-down', value: 'column' },\n  ];\n\n  return (\n    <Field label=\"Direction\">\n      <RadioButtonGroup\n        options={options}\n        value={direction}\n        onChange={(value) => model.setState({ direction: value as FlexLayoutDirection })}\n      />\n    </Field>\n  );\n}\n","import { PanelData } from '@grafana/data';\n\nimport { SceneObjectBase } from './SceneObjectBase';\nimport { SceneObjectStatePlain } from './types';\n\nexport interface SceneDataNodeState extends SceneObjectStatePlain {\n  data?: PanelData;\n}\n\nexport class SceneDataNode extends SceneObjectBase<SceneDataNodeState> {}\n","import React from 'react';\n\nimport { LoadingState, PanelData } from '@grafana/data';\n\nimport { SceneDataNode } from '../core/SceneDataNode';\nimport { SceneObjectBase } from '../core/SceneObjectBase';\nimport {\n  SceneComponentProps,\n  SceneObject,\n  SceneObjectStatePlain,\n  SceneLayoutState,\n  SceneLayoutChild,\n} from '../core/types';\n\ninterface RepeatOptions extends SceneObjectStatePlain {\n  layout: SceneObject<SceneLayoutState>;\n}\n\nexport class ScenePanelRepeater extends SceneObjectBase<RepeatOptions> {\n  activate(): void {\n    super.activate();\n\n    this.subs.add(\n      this.getData().subscribe({\n        next: (data) => {\n          if (data.data?.state === LoadingState.Done) {\n            this.performRepeat(data.data);\n          }\n        },\n      })\n    );\n  }\n\n  performRepeat(data: PanelData) {\n    // assume parent is a layout\n    const firstChild = this.state.layout.state.children[0]!;\n    const newChildren: SceneLayoutChild[] = [];\n\n    for (const series of data.series) {\n      const clone = firstChild.clone({\n        key: `${newChildren.length}`,\n        $data: new SceneDataNode({\n          data: {\n            ...data,\n            series: [series],\n          },\n        }),\n      });\n\n      newChildren.push(clone);\n    }\n\n    this.state.layout.setState({ children: newChildren });\n  }\n\n  static Component = ({ model, isEditing }: SceneComponentProps<ScenePanelRepeater>) => {\n    const { layout } = model.useState();\n    return <layout.Component model={layout} isEditing={isEditing} />;\n  };\n}\n","import React from 'react';\n\nimport { RefreshPicker, ToolbarButtonRow } from '@grafana/ui';\nimport { TimePickerWithHistory } from 'app/core/components/TimePicker/TimePickerWithHistory';\n\nimport { SceneObjectBase } from '../core/SceneObjectBase';\nimport { SceneComponentProps, SceneObjectStatePlain } from '../core/types';\n\nexport interface SceneTimePickerState extends SceneObjectStatePlain {\n  hidePicker?: boolean;\n}\n\nexport class SceneTimePicker extends SceneObjectBase<SceneTimePickerState> {\n  static Component = SceneTimePickerRenderer;\n}\n\nfunction SceneTimePickerRenderer({ model }: SceneComponentProps<SceneTimePicker>) {\n  const { hidePicker } = model.useState();\n  const timeRange = model.getTimeRange();\n  const timeRangeState = timeRange.useState();\n\n  if (hidePicker) {\n    return null;\n  }\n\n  return (\n    <ToolbarButtonRow alignment=\"right\">\n      <TimePickerWithHistory\n        value={timeRangeState}\n        onChange={timeRange.onTimeRangeChange}\n        timeZone={'browser'}\n        fiscalYearStartMonth={0}\n        onMoveBackward={() => {}}\n        onMoveForward={() => {}}\n        onZoom={() => {}}\n        onChangeTimeZone={() => {}}\n        onChangeFiscalYearStartMonth={() => {}}\n      />\n\n      <RefreshPicker onRefresh={timeRange.onRefresh} onIntervalChanged={timeRange.onIntervalChanged} />\n    </ToolbarButtonRow>\n  );\n}\n","import React from 'react';\n\nimport { IconName, Input, ToolbarButton } from '@grafana/ui';\n\nimport { SceneObjectBase } from '../core/SceneObjectBase';\nimport { SceneComponentProps, SceneObjectStatePlain } from '../core/types';\n\nexport interface ToolbarButtonState extends SceneObjectStatePlain {\n  icon: IconName;\n  onClick: () => void;\n}\n\nexport class SceneToolbarButton extends SceneObjectBase<ToolbarButtonState> {\n  static Component = ({ model }: SceneComponentProps<SceneToolbarButton>) => {\n    const state = model.useState();\n\n    return <ToolbarButton onClick={state.onClick} icon={state.icon} />;\n  };\n}\n\nexport interface SceneToolbarInputState extends SceneObjectStatePlain {\n  value?: string;\n  onChange: (value: number) => void;\n}\n\nexport class SceneToolbarInput extends SceneObjectBase<SceneToolbarInputState> {\n  static Component = ({ model }: SceneComponentProps<SceneToolbarInput>) => {\n    const state = model.useState();\n\n    return (\n      <Input\n        defaultValue={state.value}\n        width={8}\n        onBlur={(evt) => {\n          model.state.onChange(parseInt(evt.currentTarget.value, 10));\n        }}\n      />\n    );\n  };\n}\n","import React from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { AbsoluteTimeRange, FieldConfigSource, toUtc } from '@grafana/data';\nimport { PanelRenderer } from '@grafana/runtime';\nimport { Field, PanelChrome, Input } from '@grafana/ui';\n\nimport { SceneObjectBase } from '../core/SceneObjectBase';\nimport { SceneComponentProps, SceneLayoutChildState } from '../core/types';\n\nexport interface VizPanelState extends SceneLayoutChildState {\n  title?: string;\n  pluginId: string;\n  options?: object;\n  fieldConfig?: FieldConfigSource;\n}\n\nexport class VizPanel extends SceneObjectBase<VizPanelState> {\n  static Component = ScenePanelRenderer;\n  static Editor = VizPanelEditor;\n\n  onSetTimeRange = (timeRange: AbsoluteTimeRange) => {\n    const sceneTimeRange = this.getTimeRange();\n    sceneTimeRange.setState({\n      raw: {\n        from: toUtc(timeRange.from),\n        to: toUtc(timeRange.to),\n      },\n      from: toUtc(timeRange.from),\n      to: toUtc(timeRange.to),\n    });\n  };\n}\n\nfunction ScenePanelRenderer({ model }: SceneComponentProps<VizPanel>) {\n  const { title, pluginId, options, fieldConfig } = model.useState();\n  const { data } = model.getData().useState();\n\n  return (\n    <AutoSizer>\n      {({ width, height }) => {\n        if (width < 3 || height < 3) {\n          return null;\n        }\n\n        return (\n          <PanelChrome title={title} width={width} height={height}>\n            {(innerWidth, innerHeight) => (\n              <>\n                <PanelRenderer\n                  title=\"Raw data\"\n                  pluginId={pluginId}\n                  width={innerWidth}\n                  height={innerHeight}\n                  data={data}\n                  options={options}\n                  fieldConfig={fieldConfig}\n                  onOptionsChange={() => {}}\n                  onChangeTimeRange={model.onSetTimeRange}\n                />\n              </>\n            )}\n          </PanelChrome>\n        );\n      }}\n    </AutoSizer>\n  );\n}\n\nScenePanelRenderer.displayName = 'ScenePanelRenderer';\n\nfunction VizPanelEditor({ model }: SceneComponentProps<VizPanel>) {\n  const { title } = model.useState();\n\n  return (\n    <Field label=\"Title\">\n      <Input defaultValue={title} onBlur={(evt) => model.setState({ title: evt.currentTarget.value })} />\n    </Field>\n  );\n}\n","import { TimeRange, UrlQueryMap } from '@grafana/data';\n\nimport { SceneObjectBase } from './SceneObjectBase';\nimport { SceneObjectWithUrlSync, SceneTimeRangeState } from './types';\n\nexport class SceneTimeRange extends SceneObjectBase<SceneTimeRangeState> implements SceneObjectWithUrlSync {\n  onTimeRangeChange = (timeRange: TimeRange) => {\n    this.setState(timeRange);\n  };\n\n  onRefresh = () => {\n    // TODO re-eval time range\n    this.setState({ ...this.state });\n  };\n\n  onIntervalChanged = (_: string) => {};\n\n  /** These url sync functions are only placeholders for something more sophisticated  */\n  getUrlState() {\n    return {\n      from: this.state.raw.from,\n      to: this.state.raw.to,\n    } as any;\n  }\n\n  updateFromUrl(values: UrlQueryMap) {\n    // TODO\n  }\n}\n","import React from 'react';\n\nimport { OptionsPaneCategory } from 'app/features/dashboard/components/PanelEditor/OptionsPaneCategory';\n\nimport { SceneObject } from '../core/types';\n\nexport interface Props {\n  model: SceneObject;\n}\n\nexport function SceneObjectEditor({ model }: Props) {\n  return (\n    <OptionsPaneCategory id=\"props\" title=\"Properties\" forceOpen={1}>\n      <model.Editor model={model} key={model.state.key} />\n    </OptionsPaneCategory>\n  );\n}\n","import { css, cx } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, useStyles2 } from '@grafana/ui';\n\nimport { SceneObject, isSceneObject, SceneLayoutChild } from '../core/types';\n\nexport interface Props {\n  node: SceneObject;\n  selectedObject?: SceneObject;\n}\n\nexport function SceneObjectTree({ node, selectedObject }: Props) {\n  const styles = useStyles2(getStyles);\n  const state = node.useState();\n  let children: SceneLayoutChild[] = [];\n\n  for (const propKey of Object.keys(state)) {\n    const propValue = (state as any)[propKey];\n    if (isSceneObject(propValue)) {\n      children.push(propValue);\n    }\n  }\n\n  if ('children' in state) {\n    for (const child of state.children) {\n      children.push(child);\n    }\n  }\n\n  const name = node.constructor.name;\n  const isSelected = selectedObject === node;\n  const onSelectNode = () => node.getSceneEditor().onSelectObject(node);\n\n  return (\n    <div className={styles.node}>\n      <div className={styles.header} onClick={onSelectNode}>\n        <div className={styles.icon}>{children.length > 0 && <Icon name=\"angle-down\" size=\"sm\" />}</div>\n        <div className={cx(styles.name, isSelected && styles.selected)}>{name}</div>\n      </div>\n      {children.length > 0 && (\n        <div className={styles.children}>\n          {children.map((child) => (\n            <SceneObjectTree node={child} selectedObject={selectedObject} key={child.state.key} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    node: css({\n      display: 'flex',\n      flexGrow: 0,\n      cursor: 'pointer',\n      flexDirection: 'column',\n      padding: '2px 4px',\n    }),\n    header: css({\n      display: 'flex',\n      fontWeight: 500,\n    }),\n    name: css({}),\n    selected: css({\n      color: theme.colors.error.text,\n    }),\n    icon: css({\n      width: theme.spacing(3),\n      color: theme.colors.text.secondary,\n    }),\n    children: css({\n      display: 'flex',\n      flexDirection: 'column',\n      paddingLeft: 8,\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { SceneObjectBase } from '../core/SceneObjectBase';\nimport { SceneEditorState, SceneEditor, SceneObject, SceneComponentProps, SceneComponent } from '../core/types';\n\nimport { SceneObjectEditor } from './SceneObjectEditor';\nimport { SceneObjectTree } from './SceneObjectTree';\n\nexport class SceneEditManager extends SceneObjectBase<SceneEditorState> implements SceneEditor {\n  static Component = SceneEditorRenderer;\n\n  get Component(): SceneComponent<this> {\n    return SceneEditorRenderer;\n  }\n\n  onMouseEnterObject(model: SceneObject) {\n    this.setState({ hoverObject: { ref: model } });\n  }\n\n  onMouseLeaveObject(model: SceneObject) {\n    if (model.parent) {\n      this.setState({ hoverObject: { ref: model.parent } });\n    } else {\n      this.setState({ hoverObject: undefined });\n    }\n  }\n\n  onSelectObject(model: SceneObject) {\n    this.setState({ selectedObject: { ref: model } });\n  }\n}\n\nfunction SceneEditorRenderer({ model, isEditing }: SceneComponentProps<SceneEditManager>) {\n  const { selectedObject } = model.useState();\n  const styles = useStyles2(getStyles);\n\n  if (!isEditing) {\n    return null;\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.tree}>\n        <SceneObjectTree node={model.parent!} selectedObject={selectedObject?.ref} />\n      </div>\n      {selectedObject && <SceneObjectEditor model={selectedObject.ref} />}\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css({\n      display: 'flex',\n      flexGrow: 0,\n      border: `1px solid ${theme.colors.border.weak}`,\n      background: theme.colors.background.primary,\n      width: theme.spacing(40),\n      cursor: 'pointer',\n      flexDirection: 'column',\n    }),\n    tree: css({\n      padding: theme.spacing(0.25, 1),\n    }),\n  };\n};\n","import { cloneDeep } from 'lodash';\nimport { Unsubscribable } from 'rxjs';\n\nimport {\n  CoreApp,\n  DataQuery,\n  DataQueryRequest,\n  DataSourceApi,\n  DataSourceRef,\n  PanelData,\n  rangeUtil,\n  ScopedVars,\n  TimeRange,\n} from '@grafana/data';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { getNextRequestId } from 'app/features/query/state/PanelQueryRunner';\nimport { runRequest } from 'app/features/query/state/runRequest';\n\nimport { SceneObjectBase } from '../core/SceneObjectBase';\nimport { SceneObjectStatePlain } from '../core/types';\n\nexport interface QueryRunnerState extends SceneObjectStatePlain {\n  data?: PanelData;\n  queries: DataQueryExtended[];\n}\n\nexport interface DataQueryExtended extends DataQuery {\n  [key: string]: any;\n}\n\nexport class SceneQueryRunner extends SceneObjectBase<QueryRunnerState> {\n  private querySub?: Unsubscribable;\n\n  activate() {\n    super.activate();\n\n    const timeRange = this.getTimeRange();\n\n    this.subs.add(\n      timeRange.subscribe({\n        next: (timeRange) => {\n          this.runWithTimeRange(timeRange);\n        },\n      })\n    );\n\n    if (!this.state.data) {\n      this.runQueries();\n    }\n  }\n\n  deactivate(): void {\n    super.deactivate();\n\n    if (this.querySub) {\n      this.querySub.unsubscribe();\n      this.querySub = undefined;\n    }\n  }\n\n  runQueries() {\n    const timeRange = this.getTimeRange();\n    this.runWithTimeRange(timeRange.state);\n  }\n\n  private async runWithTimeRange(timeRange: TimeRange) {\n    const queries = cloneDeep(this.state.queries);\n\n    const request: DataQueryRequest = {\n      app: CoreApp.Dashboard,\n      requestId: getNextRequestId(),\n      timezone: 'browser',\n      panelId: 1,\n      dashboardId: 1,\n      range: timeRange,\n      interval: '1s',\n      intervalMs: 1000,\n      targets: cloneDeep(this.state.queries),\n      maxDataPoints: 500,\n      scopedVars: {},\n      startTime: Date.now(),\n    };\n\n    try {\n      const ds = await getDataSource(queries[0].datasource!, request.scopedVars);\n\n      // Attach the data source name to each query\n      request.targets = request.targets.map((query) => {\n        if (!query.datasource) {\n          query.datasource = ds.getRef();\n        }\n        return query;\n      });\n\n      const lowerIntervalLimit = ds.interval;\n      const norm = rangeUtil.calculateInterval(timeRange, request.maxDataPoints ?? 1000, lowerIntervalLimit);\n\n      // make shallow copy of scoped vars,\n      // and add built in variables interval and interval_ms\n      request.scopedVars = Object.assign({}, request.scopedVars, {\n        __interval: { text: norm.interval, value: norm.interval },\n        __interval_ms: { text: norm.intervalMs.toString(), value: norm.intervalMs },\n      });\n\n      request.interval = norm.interval;\n      request.intervalMs = norm.intervalMs;\n\n      this.querySub = runRequest(ds, request).subscribe({\n        next: (data) => {\n          console.log('set data', data, data.state);\n          this.setState({ data });\n        },\n      });\n    } catch (err) {\n      console.error('PanelQueryRunner Error', err);\n    }\n  }\n}\n\nasync function getDataSource(\n  datasource: DataSourceRef | string | DataSourceApi | null,\n  scopedVars: ScopedVars\n): Promise<DataSourceApi> {\n  if (datasource && (datasource as any).query) {\n    return datasource as DataSourceApi;\n  }\n  return await getDatasourceSrv().get(datasource as string, scopedVars);\n}\n","import { getDefaultTimeRange } from '@grafana/data';\n\nimport { Scene } from '../components/Scene';\nimport { SceneCanvasText } from '../components/SceneCanvasText';\nimport { SceneFlexLayout } from '../components/SceneFlexLayout';\nimport { ScenePanelRepeater } from '../components/ScenePanelRepeater';\nimport { SceneTimePicker } from '../components/SceneTimePicker';\nimport { SceneToolbarInput } from '../components/SceneToolbarButton';\nimport { VizPanel } from '../components/VizPanel';\nimport { SceneTimeRange } from '../core/SceneTimeRange';\nimport { SceneEditManager } from '../editor/SceneEditManager';\nimport { SceneQueryRunner } from '../querying/SceneQueryRunner';\n\nexport function getFlexLayoutTest(): Scene {\n  const scene = new Scene({\n    title: 'Flex layout test',\n    layout: new SceneFlexLayout({\n      direction: 'row',\n      children: [\n        new VizPanel({\n          pluginId: 'timeseries',\n          title: 'Dynamic height and width',\n          size: { minWidth: '70%' },\n        }),\n        new SceneFlexLayout({\n          // size: { width: 450 },\n          direction: 'column',\n          children: [\n            new VizPanel({\n              pluginId: 'timeseries',\n              title: 'Fill height',\n            }),\n            new VizPanel({\n              pluginId: 'timeseries',\n              title: 'Fill height',\n            }),\n            new SceneCanvasText({\n              text: 'Size to content',\n              fontSize: 20,\n              size: { ySizing: 'content' },\n              align: 'center',\n            }),\n            new VizPanel({\n              pluginId: 'timeseries',\n              title: 'Fixed height',\n              size: { height: 300 },\n            }),\n          ],\n        }),\n      ],\n    }),\n    $editor: new SceneEditManager({}),\n    $timeRange: new SceneTimeRange(getDefaultTimeRange()),\n    $data: new SceneQueryRunner({\n      queries: [\n        {\n          refId: 'A',\n          datasource: {\n            uid: 'gdev-testdata',\n            type: 'testdata',\n          },\n          scenarioId: 'random_walk',\n        },\n      ],\n    }),\n    actions: [new SceneTimePicker({})],\n  });\n\n  return scene;\n}\n\nexport function getScenePanelRepeaterTest(): Scene {\n  const queryRunner = new SceneQueryRunner({\n    queries: [\n      {\n        refId: 'A',\n        datasource: {\n          uid: 'gdev-testdata',\n          type: 'testdata',\n        },\n        seriesCount: 2,\n        alias: '__server_names',\n        scenarioId: 'random_walk',\n      },\n    ],\n  });\n\n  const scene = new Scene({\n    title: 'Panel repeater test',\n    layout: new ScenePanelRepeater({\n      layout: new SceneFlexLayout({\n        direction: 'column',\n        children: [\n          new SceneFlexLayout({\n            size: { minHeight: 200 },\n            children: [\n              new VizPanel({\n                pluginId: 'timeseries',\n                title: 'Title',\n                options: {\n                  legend: { displayMode: 'hidden' },\n                },\n              }),\n              new VizPanel({\n                size: { width: 300 },\n                pluginId: 'stat',\n                fieldConfig: { defaults: { displayName: 'Last' }, overrides: [] },\n                options: {\n                  graphMode: 'none',\n                },\n              }),\n            ],\n          }),\n        ],\n      }),\n    }),\n    $editor: new SceneEditManager({}),\n    $timeRange: new SceneTimeRange(getDefaultTimeRange()),\n    $data: queryRunner,\n    actions: [\n      new SceneToolbarInput({\n        value: '2',\n        onChange: (newValue) => {\n          queryRunner.setState({\n            queries: [\n              {\n                ...queryRunner.state.queries[0],\n                seriesCount: newValue,\n              },\n            ],\n          });\n          queryRunner.runQueries();\n        },\n      }),\n      new SceneTimePicker({}),\n    ],\n  });\n\n  return scene;\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { Button, ToolbarButton, useStyles2 } from '@grafana/ui';\n\nimport { SceneObjectBase } from '../core/SceneObjectBase';\nimport { SceneObject, SceneLayoutChildState, SceneComponentProps, SceneLayout } from '../core/types';\n\ninterface NestedSceneState extends SceneLayoutChildState {\n  title: string;\n  isCollapsed?: boolean;\n  canCollapse?: boolean;\n  canRemove?: boolean;\n  layout: SceneLayout;\n  actions?: SceneObject[];\n}\n\nexport class NestedScene extends SceneObjectBase<NestedSceneState> {\n  static Component = NestedSceneRenderer;\n\n  onToggle = () => {\n    this.setState({\n      isCollapsed: !this.state.isCollapsed,\n      size: {\n        ...this.state.size,\n        ySizing: this.state.isCollapsed ? 'fill' : 'content',\n      },\n    });\n  };\n\n  /** Removes itself from its parent's children array */\n  onRemove = () => {\n    const parent = this.parent!;\n    if ('children' in parent.state) {\n      parent.setState({\n        children: parent.state.children.filter((x) => x !== this),\n      });\n    }\n  };\n}\n\nexport function NestedSceneRenderer({ model, isEditing }: SceneComponentProps<NestedScene>) {\n  const { title, isCollapsed, canCollapse, canRemove, layout, actions } = model.useState();\n  const styles = useStyles2(getStyles);\n\n  const toolbarActions = (actions ?? []).map((action) => <action.Component key={action.state.key} model={action} />);\n\n  if (canRemove) {\n    toolbarActions.push(\n      <ToolbarButton\n        icon=\"times\"\n        variant={'default'}\n        onClick={model.onRemove}\n        key=\"remove-button\"\n        aria-label=\"Remove scene\"\n      />\n    );\n  }\n\n  return (\n    <div className={styles.row}>\n      <div className={styles.rowHeader}>\n        <Stack gap={0}>\n          <div className={styles.title} role=\"heading\">\n            {title}\n          </div>\n          {canCollapse && (\n            <div className={styles.toggle}>\n              <Button\n                size=\"sm\"\n                icon={isCollapsed ? 'angle-down' : 'angle-up'}\n                fill=\"text\"\n                variant=\"secondary\"\n                aria-label={isCollapsed ? 'Expand scene' : 'Collapse scene'}\n                onClick={model.onToggle}\n              />\n            </div>\n          )}\n        </Stack>\n        <div className={styles.actions}>{toolbarActions}</div>\n      </div>\n      {!isCollapsed && <layout.Component model={layout} isEditing={isEditing} />}\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  row: css({\n    display: 'flex',\n    flexDirection: 'column',\n    flexGrow: 1,\n    gap: theme.spacing(1),\n    cursor: 'pointer',\n  }),\n  toggle: css({}),\n  title: css({\n    fontSize: theme.typography.h5.fontSize,\n  }),\n  rowHeader: css({\n    display: 'flex',\n    alignItems: 'center',\n    gap: theme.spacing(2),\n  }),\n  actions: css({\n    display: 'flex',\n    alignItems: 'center',\n    gap: theme.spacing(1),\n    justifyContent: 'flex-end',\n    flexGrow: 1,\n  }),\n});\n","import { Scene } from '../components/Scene';\n\nimport { getFlexLayoutTest, getScenePanelRepeaterTest } from './demo';\nimport { getNestedScene } from './nested';\nimport { getSceneWithRows } from './sceneWithRows';\n\nexport function getScenes(): Scene[] {\n  return [getFlexLayoutTest(), getScenePanelRepeaterTest(), getNestedScene(), getSceneWithRows()];\n}\n\nconst cache: Record<string, Scene> = {};\n\nexport function getSceneByTitle(title: string) {\n  if (cache[title]) {\n    return cache[title];\n  }\n\n  const scene = getScenes().find((x) => x.state.title === title);\n  if (scene) {\n    cache[title] = scene;\n  }\n\n  return scene;\n}\n","import { getDefaultTimeRange } from '@grafana/data';\n\nimport { NestedScene } from '../components/NestedScene';\nimport { Scene } from '../components/Scene';\nimport { SceneFlexLayout } from '../components/SceneFlexLayout';\nimport { SceneTimePicker } from '../components/SceneTimePicker';\nimport { VizPanel } from '../components/VizPanel';\nimport { SceneTimeRange } from '../core/SceneTimeRange';\nimport { SceneQueryRunner } from '../querying/SceneQueryRunner';\n\nexport function getNestedScene(): Scene {\n  const scene = new Scene({\n    title: 'Nested Scene demo',\n    layout: new SceneFlexLayout({\n      direction: 'column',\n      children: [\n        new VizPanel({\n          key: '3',\n          pluginId: 'timeseries',\n          title: 'Panel 3',\n        }),\n        getInnerScene('Inner scene'),\n      ],\n    }),\n    $timeRange: new SceneTimeRange(getDefaultTimeRange()),\n    $data: new SceneQueryRunner({\n      queries: [\n        {\n          refId: 'A',\n          datasource: {\n            uid: 'gdev-testdata',\n            type: 'testdata',\n          },\n          scenarioId: 'random_walk',\n        },\n      ],\n    }),\n    actions: [new SceneTimePicker({})],\n  });\n\n  return scene;\n}\n\nexport function getInnerScene(title: string) {\n  const scene = new NestedScene({\n    title: title,\n    canRemove: true,\n    layout: new SceneFlexLayout({\n      direction: 'row',\n      children: [\n        new VizPanel({\n          key: '3',\n          pluginId: 'timeseries',\n          title: 'Data',\n        }),\n      ],\n    }),\n    $timeRange: new SceneTimeRange(getDefaultTimeRange()),\n    $data: new SceneQueryRunner({\n      queries: [\n        {\n          refId: 'A',\n          datasource: {\n            uid: 'gdev-testdata',\n            type: 'testdata',\n          },\n          scenarioId: 'random_walk',\n        },\n      ],\n    }),\n    actions: [new SceneTimePicker({})],\n  });\n\n  return scene;\n}\n","import { getDefaultTimeRange } from '@grafana/data';\n\nimport { NestedScene } from '../components/NestedScene';\nimport { Scene } from '../components/Scene';\nimport { SceneFlexLayout } from '../components/SceneFlexLayout';\nimport { SceneTimePicker } from '../components/SceneTimePicker';\nimport { VizPanel } from '../components/VizPanel';\nimport { SceneTimeRange } from '../core/SceneTimeRange';\nimport { SceneEditManager } from '../editor/SceneEditManager';\n\nimport { getQueryRunnerWithRandomWalkQuery } from './queries';\n\nexport function getSceneWithRows(): Scene {\n  const scene = new Scene({\n    title: 'Scene with rows',\n    layout: new SceneFlexLayout({\n      direction: 'column',\n      children: [\n        new NestedScene({\n          title: 'Overview',\n          canCollapse: true,\n          layout: new SceneFlexLayout({\n            direction: 'row',\n            children: [\n              new VizPanel({\n                pluginId: 'timeseries',\n                title: 'Fill height',\n              }),\n              new VizPanel({\n                pluginId: 'timeseries',\n                title: 'Fill height',\n              }),\n            ],\n          }),\n        }),\n        new NestedScene({\n          title: 'More server details',\n          canCollapse: true,\n          layout: new SceneFlexLayout({\n            direction: 'row',\n            children: [\n              new VizPanel({\n                pluginId: 'timeseries',\n                title: 'Fill height',\n              }),\n              new VizPanel({\n                pluginId: 'timeseries',\n                title: 'Fill height',\n              }),\n            ],\n          }),\n        }),\n      ],\n    }),\n    $editor: new SceneEditManager({}),\n    $timeRange: new SceneTimeRange(getDefaultTimeRange()),\n    $data: getQueryRunnerWithRandomWalkQuery(),\n    actions: [new SceneTimePicker({})],\n  });\n\n  return scene;\n}\n","import { SceneQueryRunner } from '../querying/SceneQueryRunner';\n\nexport function getQueryRunnerWithRandomWalkQuery() {\n  return new SceneQueryRunner({\n    queries: [\n      {\n        refId: 'A',\n        datasource: {\n          uid: 'gdev-testdata',\n          type: 'testdata',\n        },\n        scenarioId: 'random_walk',\n      },\n    ],\n  });\n}\n"],"names":["SceneListPage","scenes","getScenes","navId","Stack","direction","map","scene","href","state","title","ScenePage","props","getSceneByTitle","match","params","name","Component","model","SceneComponentEditingWrapper","children","styles","useStyles2","getStyles","editor","getSceneEditor","hoverObject","selectedObject","useState","className","wrapper","ref","hover","selected","style","onMouseEnter","onMouseEnterObject","onMouseLeave","onMouseLeaveObject","onClick","evt","stopPropagation","onSelectObject","theme","css","display","flexGrow","padding","border","colors","primary","main","cursor","error","SceneComponentWrapper","isEditing","constructor","EmptyRenderer","inner","useEffect","isActive","activate","deactivate","_","SceneObjectStateChangedEvent","BusEventWithPayload","isSceneObject","obj","undefined","SceneObjectBase","Subject","Subscription","EventBusSrv","key","uuidv4","this","subject","next","setParent","Editor","propValue","Object","values","parent","Array","isArray","child","subscribe","observer","setState","update","prevState","getRoot","events","publish","newState","partialUpdate","changedObject","$data","subs","unsubscribe","forceUpdate","useForceUpdate","s","useSceneObjectState","getTimeRange","$timeRange","Error","getData","$editor","clone","withState","clonedState","newChildren","push","assign","UrlSyncManager","sceneRoot","location","payload","urlUpdate","getUrlState","locationService","stateChangeSub","onStateChanged","locationListenerUnsub","listen","onLocationUpdate","cleanUp","Scene","super","urlSyncManager","layout","actions","toolbarActions","action","ToolbarButton","icon","variant","pageToolbar","config","AppChromeUpdate","A","PageToolbar","Page","pageNav","text","PageLayoutType","toolbar","gap","overflow","SceneCanvasText","fontSize","Field","label","Input","I","type","defaultValue","onBlur","parseInt","currentTarget","value","align","alignItems","justifyContent","SceneFlexLayout","toggleDirection","FlexLayoutChildComponent","item","size","getItemStyles","sizing","xSizing","ySizing","flexDirection","minWidth","minHeight","height","width","alignSelf","RadioButtonGroup","options","onChange","SceneDataNode","ScenePanelRepeater","add","data","LoadingState","performRepeat","firstChild","series","length","SceneTimePicker","hidePicker","timeRange","timeRangeState","ToolbarButtonRow","alignment","TimePickerWithHistory","onTimeRangeChange","timeZone","fiscalYearStartMonth","onMoveBackward","onMoveForward","onZoom","onChangeTimeZone","onChangeFiscalYearStartMonth","RefreshPicker","onRefresh","onIntervalChanged","SceneToolbarButton","SceneToolbarInput","VizPanel","raw","from","toUtc","to","ScenePanelRenderer","pluginId","fieldConfig","PanelChrome","innerWidth","innerHeight","PanelRenderer","onOptionsChange","onChangeTimeRange","onSetTimeRange","displayName","SceneTimeRange","updateFromUrl","SceneObjectEditor","OptionsPaneCategory","id","forceOpen","SceneObjectTree","node","propKey","keys","isSelected","header","Icon","cx","fontWeight","color","spacing","secondary","paddingLeft","SceneEditManager","SceneEditorRenderer","container","tree","weak","background","SceneQueryRunner","runWithTimeRange","runQueries","querySub","queries","cloneDeep","request","app","CoreApp","requestId","getNextRequestId","timezone","panelId","dashboardId","range","interval","intervalMs","targets","maxDataPoints","scopedVars","startTime","Date","now","ds","async","datasource","query","getDatasourceSrv","get","getDataSource","getRef","lowerIntervalLimit","norm","rangeUtil","__interval","__interval_ms","toString","runRequest","console","log","err","getScenePanelRepeaterTest","queryRunner","refId","uid","seriesCount","alias","scenarioId","legend","displayMode","defaults","overrides","graphMode","getDefaultTimeRange","newValue","NestedScene","isCollapsed","filter","x","canCollapse","canRemove","onRemove","row","rowHeader","role","toggle","Button","fill","onToggle","typography","h5","cache","find"],"sourceRoot":""}