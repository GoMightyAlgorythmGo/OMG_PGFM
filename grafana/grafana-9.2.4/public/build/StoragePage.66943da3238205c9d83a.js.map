{"version":3,"file":"StoragePage.66943da3238205c9d83a.js","mappings":"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","sources":["webpack://grafana/./public/app/features/storage/AddRootView.tsx","webpack://grafana/./public/app/features/storage/Breadcrumb.tsx","webpack://grafana/./public/app/features/storage/CreateNewFolderModal.tsx","webpack://grafana/./public/app/features/storage/ExportView.tsx","webpack://grafana/./public/app/features/storage/FileView.tsx","webpack://grafana/./public/app/features/storage/FolderView.tsx","webpack://grafana/./public/app/features/storage/RootView.tsx","webpack://grafana/./public/app/features/storage/UploadButton.tsx","webpack://grafana/./public/app/features/storage/StoragePage.tsx"],"sourcesContent":["import React from 'react';\n\nimport { Button } from '@grafana/ui';\n\nimport { StorageView } from './types';\n\ninterface Props {\n  onPathChange: (p: string, v?: StorageView) => void;\n}\n\nexport function AddRootView({ onPathChange }: Props) {\n  return (\n    <div>\n      <div>TODO... Add ROOT</div>\n      <Button variant=\"secondary\" onClick={() => onPathChange('/')}>\n        Cancel\n      </Button>\n    </div>\n  );\n}\n","import { css } from '@emotion/css';\nimport { uniqueId } from 'lodash';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, IconName, useStyles2 } from '@grafana/ui';\n\ninterface Props {\n  rootIcon?: IconName;\n  pathName: string;\n  onPathChange: (path: string) => void;\n}\n\nexport function Breadcrumb({ pathName, onPathChange, rootIcon }: Props) {\n  const styles = useStyles2(getStyles);\n  const paths = pathName.split('/').filter(Boolean);\n\n  return (\n    <ul className={styles.breadCrumb}>\n      {rootIcon && (\n        <li onClick={() => onPathChange('')}>\n          <Icon name={rootIcon} />\n        </li>\n      )}\n      {paths.map((path, index) => {\n        let url = '/' + paths.slice(0, index + 1).join('/');\n        const onClickBreadcrumb = () => onPathChange(url);\n        const isLastBreadcrumb = index === paths.length - 1;\n        return (\n          <li key={uniqueId(path)} onClick={isLastBreadcrumb ? undefined : onClickBreadcrumb}>\n            {path}\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    breadCrumb: css`\n      list-style: none;\n      padding: ${theme.spacing(2, 1)};\n\n      li {\n        display: inline;\n\n        :not(:last-child) {\n          color: ${theme.colors.text.link};\n          cursor: pointer;\n        }\n        + li:before {\n          content: '>';\n          padding: ${theme.spacing(1)};\n          color: ${theme.colors.text.secondary};\n        }\n      }\n    `,\n  };\n}\n","import React from 'react';\nimport { SubmitHandler, Validate } from 'react-hook-form';\n\nimport { Button, Field, Form, Input, Modal } from '@grafana/ui';\n\ntype FormModel = { folderName: string };\n\ninterface Props {\n  onSubmit: SubmitHandler<FormModel>;\n  onDismiss: () => void;\n  validate: Validate<string>;\n}\n\nconst initialFormModel = { folderName: '' };\n\nexport function CreateNewFolderModal({ validate, onDismiss, onSubmit }: Props) {\n  return (\n    <Modal onDismiss={onDismiss} isOpen={true} title=\"New Folder\">\n      <Form defaultValues={initialFormModel} onSubmit={onSubmit} maxWidth={'none'}>\n        {({ register, errors }) => (\n          <>\n            <Field\n              label=\"Folder name\"\n              invalid={!!errors.folderName}\n              error={errors.folderName && errors.folderName.message}\n            >\n              <Input\n                id=\"folder-name-input\"\n                {...register('folderName', {\n                  required: 'Folder name is required.',\n                  validate: { validate },\n                })}\n              />\n            </Field>\n\n            <Modal.ButtonRow>\n              <Button type=\"submit\">Create</Button>\n            </Modal.ButtonRow>\n          </>\n        )}\n      </Form>\n    </Modal>\n  );\n}\n","import React, { useEffect, useState, useCallback } from 'react';\nimport { useAsync, useLocalStorage } from 'react-use';\n\nimport { isLiveChannelMessageEvent, isLiveChannelStatusEvent, LiveChannelScope, SelectableValue } from '@grafana/data';\nimport { getBackendSrv, getGrafanaLiveSrv } from '@grafana/runtime';\nimport {\n  Button,\n  CodeEditor,\n  Collapse,\n  Field,\n  HorizontalGroup,\n  InlineField,\n  InlineFieldRow,\n  InlineSwitch,\n  Input,\n  LinkButton,\n  Select,\n  Switch,\n} from '@grafana/ui';\n\nimport { StorageView } from './types';\n\nexport const EXPORT_LOCAL_STORAGE_KEY = 'grafana.export.config';\n\ninterface ExportStatusMessage {\n  running: boolean;\n  target: string;\n  started: number;\n  finished: number;\n  update: number;\n  count: number;\n  current: number;\n  last: string;\n  status: string;\n}\n\ninterface ExportJob {\n  format: string; // 'git';\n  generalFolderPath: string;\n  history: boolean;\n  exclude: Record<string, boolean>;\n\n  git?: {};\n}\n\nconst defaultJob: ExportJob = {\n  format: 'git',\n  generalFolderPath: 'general',\n  history: true,\n  exclude: {},\n  git: {},\n};\n\ninterface ExporterInfo {\n  key: string;\n  name: string;\n  description: string;\n  children?: ExporterInfo[];\n}\n\nconst formats: Array<SelectableValue<string>> = [\n  { label: 'GIT', value: 'git', description: 'Exports a fresh git repository' },\n];\n\ninterface Props {\n  onPathChange: (p: string, v?: StorageView) => void;\n}\n\nconst labelWith = 18;\n\nexport const ExportView = ({ onPathChange }: Props) => {\n  const [status, setStatus] = useState<ExportStatusMessage>();\n  const [body, setBody] = useLocalStorage<ExportJob>(EXPORT_LOCAL_STORAGE_KEY, defaultJob);\n  const [details, setDetails] = useState(false);\n\n  const serverOptions = useAsync(() => {\n    return getBackendSrv().get<{ exporters: ExporterInfo[] }>('/api/admin/export/options');\n  }, []);\n\n  const doStart = () => {\n    getBackendSrv()\n      .post('/api/admin/export', body)\n      .then((v) => {\n        if (v.cfg && v.status.running) {\n          setBody(v.cfg); // saves the valid parsed body\n        }\n      });\n  };\n\n  const doStop = () => {\n    getBackendSrv().post('/api/admin/export/stop');\n  };\n\n  const setInclude = useCallback(\n    (k: string, v: boolean) => {\n      if (!serverOptions.value || !body) {\n        return;\n      }\n      const exclude: Record<string, boolean> = {};\n      if (k === '*') {\n        if (!v) {\n          for (let exp of serverOptions.value.exporters) {\n            exclude[exp.key] = true;\n          }\n        }\n        setBody({ ...body, exclude });\n        return;\n      }\n\n      for (let exp of serverOptions.value.exporters) {\n        let val = body.exclude?.[exp.key];\n        if (k === exp.key) {\n          val = !v;\n        }\n        if (val) {\n          exclude[exp.key] = val;\n        }\n      }\n      setBody({ ...body, exclude });\n    },\n    [body, setBody, serverOptions]\n  );\n\n  useEffect(() => {\n    const subscription = getGrafanaLiveSrv()\n      .getStream<ExportStatusMessage>({\n        scope: LiveChannelScope.Grafana,\n        namespace: 'broadcast',\n        path: 'export',\n      })\n      .subscribe({\n        next: (evt) => {\n          if (isLiveChannelMessageEvent(evt)) {\n            setStatus(evt.message);\n          } else if (isLiveChannelStatusEvent(evt)) {\n            setStatus(evt.message);\n          }\n        },\n      });\n\n    return () => {\n      subscription.unsubscribe();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div>\n      {status && (\n        <div>\n          <h3>Status</h3>\n          <pre>{JSON.stringify(status, null, 2)}</pre>\n          {status.running && (\n            <div>\n              <Button variant=\"secondary\" onClick={doStop}>\n                Stop\n              </Button>\n            </div>\n          )}\n        </div>\n      )}\n\n      {!Boolean(status?.running) && (\n        <div>\n          <h3>Export grafana instance</h3>\n          <Field label=\"Format\">\n            <Select\n              options={formats}\n              width={40}\n              value={formats.find((v) => v.value === body?.format)}\n              onChange={(v) => setBody({ ...body!, format: v.value! })}\n            />\n          </Field>\n          <Field label=\"Keep history\">\n            <Switch value={body?.history} onChange={(v) => setBody({ ...body!, history: v.currentTarget.checked })} />\n          </Field>\n\n          <Field label=\"Include\">\n            <>\n              <InlineFieldRow>\n                <InlineField label=\"Toggle all\" labelWidth={labelWith}>\n                  <InlineSwitch\n                    value={Object.keys(body?.exclude ?? {}).length === 0}\n                    onChange={(v) => setInclude('*', v.currentTarget.checked)}\n                  />\n                </InlineField>\n              </InlineFieldRow>\n              {serverOptions.value && (\n                <div>\n                  {serverOptions.value.exporters.map((ex) => (\n                    <InlineFieldRow key={ex.key}>\n                      <InlineField label={ex.name} labelWidth={labelWith} tooltip={ex.description}>\n                        <InlineSwitch\n                          value={body?.exclude?.[ex.key] !== true}\n                          onChange={(v) => setInclude(ex.key, v.currentTarget.checked)}\n                        />\n                      </InlineField>\n                    </InlineFieldRow>\n                  ))}\n                </div>\n              )}\n            </>\n          </Field>\n\n          <Field label=\"General folder\" description=\"Set the folder name for items without a real folder\">\n            <Input\n              width={40}\n              value={body?.generalFolderPath ?? ''}\n              onChange={(v) => setBody({ ...body!, generalFolderPath: v.currentTarget.value })}\n              placeholder=\"root folder path\"\n            />\n          </Field>\n\n          <HorizontalGroup>\n            <Button onClick={doStart} variant=\"primary\">\n              Export\n            </Button>\n            <LinkButton href=\"admin/storage/\" variant=\"secondary\">\n              Cancel\n            </LinkButton>\n          </HorizontalGroup>\n        </div>\n      )}\n      <br />\n      <br />\n\n      <Collapse label=\"Request details\" isOpen={details} onToggle={setDetails} collapsible={true}>\n        <CodeEditor\n          height={275}\n          value={JSON.stringify(body, null, 2) ?? ''}\n          showLineNumbers={false}\n          readOnly={false}\n          language=\"json\"\n          showMiniMap={false}\n          onBlur={(text: string) => {\n            setBody(JSON.parse(text)); // force JSON?\n          }}\n        />\n      </Collapse>\n    </div>\n  );\n};\n","import { css } from '@emotion/css';\nimport { isString } from 'lodash';\nimport React, { useMemo } from 'react';\nimport SVG from 'react-inlinesvg';\nimport { useAsync } from 'react-use';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { DataFrame, GrafanaTheme2 } from '@grafana/data';\nimport { CodeEditor, useStyles2 } from '@grafana/ui';\n\nimport { getGrafanaStorage } from './storage';\nimport { StorageView } from './types';\n\ninterface FileDisplayInfo {\n  category?: 'svg' | 'image' | 'text';\n  language?: string; // match code editor\n}\n\ninterface Props {\n  listing: DataFrame;\n  path: string;\n  onPathChange: (p: string, view?: StorageView) => void;\n  view: StorageView;\n}\n\nexport function FileView({ listing, path, onPathChange, view }: Props) {\n  const styles = useStyles2(getStyles);\n  const info = useMemo(() => getFileDisplayInfo(path), [path]);\n  const body = useAsync(async () => {\n    if (info.category === 'text') {\n      const rsp = await getGrafanaStorage().get(path);\n      if (isString(rsp)) {\n        return rsp;\n      }\n      return JSON.stringify(rsp, null, 2);\n    }\n    return null;\n  }, [info, path]);\n\n  switch (view) {\n    case StorageView.Config:\n      return <div>CONFIGURE?</div>;\n    case StorageView.Perms:\n      return <div>Permissions</div>;\n    case StorageView.History:\n      return <div>TODO... history</div>;\n  }\n\n  let src = `api/storage/read/${path}`;\n  if (src.endsWith('/')) {\n    src = src.substring(0, src.length - 1);\n  }\n\n  switch (info.category) {\n    case 'svg':\n      return (\n        <div>\n          <SVG src={src} className={styles.icon} />\n        </div>\n      );\n    case 'image':\n      return (\n        <div>\n          <a target={'_self'} href={src}>\n            <img src={src} className={styles.img} />\n          </a>\n        </div>\n      );\n    case 'text':\n      return (\n        <div className={styles.tableWrapper}>\n          <AutoSizer>\n            {({ width, height }) => (\n              <CodeEditor\n                width={width}\n                height={height}\n                value={body.value ?? ''}\n                showLineNumbers={false}\n                readOnly={true}\n                language={info.language ?? 'text'}\n                showMiniMap={false}\n                onBlur={(text: string) => {\n                  console.log('CHANGED!', text);\n                }}\n              />\n            )}\n          </AutoSizer>\n        </div>\n      );\n  }\n\n  return (\n    <div>\n      FILE: <a href={src}>{path}</a>\n    </div>\n  );\n}\n\nfunction getFileDisplayInfo(path: string): FileDisplayInfo {\n  const idx = path.lastIndexOf('.');\n  if (idx < 0) {\n    return {};\n  }\n  const suffix = path.substring(idx + 1).toLowerCase();\n  switch (suffix) {\n    case 'svg':\n      return { category: 'svg' };\n    case 'jpg':\n    case 'jpeg':\n    case 'png':\n    case 'webp':\n    case 'gif':\n      return { category: 'image' };\n\n    case 'geojson':\n    case 'json':\n      return { category: 'text', language: 'json' };\n    case 'text':\n    case 'go':\n    case 'md':\n      return { category: 'text' };\n  }\n  return {};\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  // TODO: remove `height: 90%`\n  wrapper: css`\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n  `,\n  tableControlRowWrapper: css`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    margin-bottom: ${theme.spacing(2)};\n  `,\n  // TODO: remove `height: 100%`\n  tableWrapper: css`\n    border: 1px solid ${theme.colors.border.medium};\n    height: 100%;\n  `,\n  uploadSpot: css`\n    margin-left: ${theme.spacing(2)};\n  `,\n  border: css`\n    border: 1px solid ${theme.colors.border.medium};\n    padding: ${theme.spacing(2)};\n  `,\n  img: css`\n    max-width: 100%;\n    // max-height: 147px;\n    // fill: ${theme.colors.text.primary};\n  `,\n  icon: css`\n    // max-width: 100%;\n    // max-height: 147px;\n    // fill: ${theme.colors.text.primary};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { DataFrame, GrafanaTheme2 } from '@grafana/data';\nimport { Table, useStyles2 } from '@grafana/ui';\n\nimport { StorageView } from './types';\n\ninterface Props {\n  listing: DataFrame;\n  view: StorageView;\n}\n\nexport function FolderView({ listing, view }: Props) {\n  const styles = useStyles2(getStyles);\n\n  switch (view) {\n    case StorageView.Config:\n      return <div>CONFIGURE?</div>;\n    case StorageView.Perms:\n      return <div>Permissions</div>;\n  }\n\n  return (\n    <div className={styles.tableWrapper}>\n      <AutoSizer>\n        {({ width, height }) => (\n          <div style={{ width: `${width}px`, height: `${height}px` }}>\n            <Table\n              height={height}\n              width={width}\n              data={listing}\n              noHeader={false}\n              showTypeIcons={false}\n              resizable={false}\n            />\n          </div>\n        )}\n      </AutoSizer>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  // TODO: remove `height: 90%`\n  wrapper: css`\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n  `,\n  tableControlRowWrapper: css`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    margin-bottom: ${theme.spacing(2)};\n  `,\n  // TODO: remove `height: 100%`\n  tableWrapper: css`\n    border: 1px solid ${theme.colors.border.medium};\n    height: 100%;\n  `,\n  uploadSpot: css`\n    margin-left: ${theme.spacing(2)};\n  `,\n  border: css`\n    border: 1px solid ${theme.colors.border.medium};\n    padding: ${theme.spacing(2)};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { useMemo, useState } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { DataFrame, GrafanaTheme2 } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport {\n  Alert,\n  Button,\n  Card,\n  FilterInput,\n  HorizontalGroup,\n  Icon,\n  IconName,\n  TagList,\n  useStyles2,\n  VerticalGroup,\n} from '@grafana/ui';\n\nimport { getGrafanaStorage } from './storage';\nimport { StorageInfo, StorageView } from './types';\n\ninterface Props {\n  root: DataFrame;\n  onPathChange: (p: string, v?: StorageView) => void;\n}\n\nexport function RootView({ root, onPathChange }: Props) {\n  const styles = useStyles2(getStyles);\n  const storage = useAsync(getGrafanaStorage().getConfig);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  let base = location.pathname;\n  if (!base.endsWith('/')) {\n    base += '/';\n  }\n\n  const roots = useMemo(() => {\n    let show = storage.value ?? [];\n    if (searchQuery?.length) {\n      const lower = searchQuery.toLowerCase();\n      show = show.filter((r) => {\n        const v = r.config;\n        const isMatch = v.name.toLowerCase().indexOf(lower) >= 0 || v.description.toLowerCase().indexOf(lower) >= 0;\n        if (isMatch) {\n          return true;\n        }\n        return false;\n      });\n    }\n\n    const base: StorageInfo[] = [];\n    const content: StorageInfo[] = [];\n    for (const r of show ?? []) {\n      if (r.config.underContentRoot) {\n        content.push(r);\n      } else if (r.config.prefix !== 'content') {\n        base.push(r);\n      }\n    }\n    return { base, content };\n  }, [searchQuery, storage]);\n\n  const renderRoots = (pfix: string, roots: StorageInfo[]) => {\n    return (\n      <VerticalGroup>\n        {roots.map((s) => {\n          const ok = s.ready;\n          return (\n            <Card key={s.config.prefix} href={ok ? `admin/storage/${pfix}${s.config.prefix}/` : undefined}>\n              <Card.Heading>{s.config.name}</Card.Heading>\n              <Card.Meta className={styles.clickable}>\n                {s.config.description}\n                {s.config.git?.remote && <a href={s.config.git?.remote}>{s.config.git?.remote}</a>}\n              </Card.Meta>\n              {s.notice?.map((notice) => (\n                <Alert key={notice.text} severity={notice.severity} title={notice.text} />\n              ))}\n\n              <Card.Tags className={styles.clickable}>\n                <HorizontalGroup>\n                  <TagList tags={getTags(s)} />\n                </HorizontalGroup>\n              </Card.Tags>\n              <Card.Figure className={styles.clickable}>\n                <Icon name={getIconName(s.config.type)} size=\"xxxl\" className={styles.secondaryTextColor} />\n              </Card.Figure>\n            </Card>\n          );\n        })}\n      </VerticalGroup>\n    );\n  };\n\n  return (\n    <div>\n      <div className=\"page-action-bar\">\n        <div className=\"gf-form gf-form--grow\">\n          <FilterInput placeholder=\"Search Storage\" value={searchQuery} onChange={setSearchQuery} />\n        </div>\n        <Button className=\"pull-right\" onClick={() => onPathChange('', StorageView.AddRoot)}>\n          Add Root\n        </Button>\n        {config.featureToggles.export && (\n          <Button className=\"pull-right\" onClick={() => onPathChange('', StorageView.Export)}>\n            Export\n          </Button>\n        )}\n      </div>\n\n      <div>{renderRoots('', roots.base)}</div>\n\n      <div>\n        <h3>Content</h3>\n        {renderRoots('content/', roots.content)}\n      </div>\n    </div>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    secondaryTextColor: css`\n      color: ${theme.colors.text.secondary};\n    `,\n    clickable: css`\n      pointer-events: none;\n    `,\n  };\n}\n\nfunction getTags(v: StorageInfo) {\n  const tags: string[] = [];\n  if (v.builtin) {\n    tags.push('Builtin');\n  }\n  if (!v.editable) {\n    tags.push('Read only');\n  }\n\n  // Error\n  if (!v.ready) {\n    tags.push('Not ready');\n  }\n  return tags;\n}\n\nexport function getIconName(type: string): IconName {\n  switch (type) {\n    case 'git':\n      return 'code-branch';\n    case 'disk':\n      return 'folder-open';\n    case 'sql':\n      return 'database';\n    default:\n      return 'folder-open';\n  }\n}\n","import { css } from '@emotion/css';\nimport React, { FormEvent, useEffect, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { ConfirmModal, FileUpload, useStyles2 } from '@grafana/ui';\n\nimport { filenameAlreadyExists, getGrafanaStorage } from './storage';\nimport { StorageView, UploadReponse } from './types';\n\ninterface Props {\n  setErrorMessages: (errors: string[]) => void;\n  setPath: (p: string, view?: StorageView) => void;\n  path: string;\n  fileNames: string[];\n}\n\nconst fileFormats = 'image/jpg, image/jpeg, image/png, image/gif, image/webp';\n\nexport function UploadButton({ setErrorMessages, setPath, path, fileNames }: Props) {\n  const styles = useStyles2(getStyles);\n\n  const [file, setFile] = useState<File | undefined>(undefined);\n  const [filenameExists, setFilenameExists] = useState(false);\n  const [fileUploadKey, setFileUploadKey] = useState(1);\n  const [isConfirmOpen, setIsConfirmOpen] = useState(true);\n\n  useEffect(() => {\n    setFileUploadKey((prev) => prev + 1);\n  }, [file]);\n\n  const onUpload = (rsp: UploadReponse) => {\n    console.log('Uploaded: ' + path);\n    if (rsp.path) {\n      setPath(rsp.path);\n    } else {\n      setPath(path); // back to data\n    }\n  };\n\n  const doUpload = async (fileToUpload: File, overwriteExistingFile: boolean) => {\n    if (!fileToUpload) {\n      setErrorMessages(['Please select a file.']);\n      return;\n    }\n\n    const rsp = await getGrafanaStorage().upload(path, fileToUpload, overwriteExistingFile);\n    if (rsp.status !== 200) {\n      setErrorMessages([rsp.message]);\n    } else {\n      onUpload(rsp);\n    }\n  };\n\n  const onFileUpload = (event: FormEvent<HTMLInputElement>) => {\n    setErrorMessages([]);\n\n    const fileToUpload =\n      event.currentTarget.files && event.currentTarget.files.length > 0 && event.currentTarget.files[0]\n        ? event.currentTarget.files[0]\n        : undefined;\n    if (fileToUpload) {\n      setFile(fileToUpload);\n\n      const fileExists = filenameAlreadyExists(fileToUpload.name, fileNames);\n      if (!fileExists) {\n        setFilenameExists(false);\n        doUpload(fileToUpload, false).then((r) => {});\n      } else {\n        setFilenameExists(true);\n        setIsConfirmOpen(true);\n      }\n    }\n  };\n\n  const onOverwriteConfirm = () => {\n    if (file) {\n      doUpload(file, true).then((r) => {});\n      setIsConfirmOpen(false);\n    }\n  };\n\n  const onOverwriteDismiss = () => {\n    setFile(undefined);\n    setFilenameExists(false);\n    setIsConfirmOpen(false);\n  };\n\n  return (\n    <>\n      <FileUpload accept={fileFormats} onFileUpload={onFileUpload} key={fileUploadKey} className={styles.uploadButton}>\n        Upload\n      </FileUpload>\n\n      {file && filenameExists && (\n        <ConfirmModal\n          isOpen={isConfirmOpen}\n          body={\n            <div>\n              <p>{file?.name}</p>\n              <p>A file with this name already exists.</p>\n              <p>What would you like to do?</p>\n            </div>\n          }\n          title={'This file already exists'}\n          confirmText={'Replace'}\n          onConfirm={onOverwriteConfirm}\n          onDismiss={onOverwriteDismiss}\n        />\n      )}\n    </>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  uploadButton: css`\n    margin-right: ${theme.spacing(2)};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { useMemo, useState } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { DataFrame, GrafanaTheme2, isDataFrame, ValueLinkConfig } from '@grafana/data';\nimport { config, locationService } from '@grafana/runtime';\nimport { useStyles2, Spinner, TabsBar, Tab, Button, HorizontalGroup, LinkButton, Alert, toIconName } from '@grafana/ui';\nimport appEvents from 'app/core/app_events';\nimport { Page } from 'app/core/components/Page/Page';\nimport { useNavModel } from 'app/core/hooks/useNavModel';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { ShowConfirmModalEvent } from 'app/types/events';\n\nimport { AddRootView } from './AddRootView';\nimport { Breadcrumb } from './Breadcrumb';\nimport { CreateNewFolderModal } from './CreateNewFolderModal';\nimport { ExportView } from './ExportView';\nimport { FileView } from './FileView';\nimport { FolderView } from './FolderView';\nimport { RootView } from './RootView';\nimport { UploadButton } from './UploadButton';\nimport { getGrafanaStorage, filenameAlreadyExists } from './storage';\nimport { StorageView } from './types';\n\ninterface RouteParams {\n  path: string;\n}\n\ninterface QueryParams {\n  view: StorageView;\n}\n\nconst folderNameRegex = /^[a-z\\d!\\-_.*'() ]+$/;\nconst folderNameMaxLength = 256;\n\ninterface Props extends GrafanaRouteComponentProps<RouteParams, QueryParams> {}\n\nconst getParentPath = (path: string) => {\n  const lastSlashIdx = path.lastIndexOf('/');\n  if (lastSlashIdx < 1) {\n    return '';\n  }\n\n  return path.substring(0, lastSlashIdx);\n};\n\nexport default function StoragePage(props: Props) {\n  const styles = useStyles2(getStyles);\n  const navModel = useNavModel('storage');\n  const path = props.match.params.path ?? '';\n  const view = props.queryParams.view ?? StorageView.Data;\n  const setPath = (p: string, view?: StorageView) => {\n    let url = ('/admin/storage/' + p).replace('//', '/');\n    if (view && view !== StorageView.Data) {\n      url += '?view=' + view;\n    }\n    locationService.push(url);\n  };\n\n  const [isAddingNewFolder, setIsAddingNewFolder] = useState(false);\n  const [errorMessages, setErrorMessages] = useState<string[]>([]);\n\n  const listing = useAsync((): Promise<DataFrame | undefined> => {\n    return getGrafanaStorage()\n      .list(path)\n      .then((frame) => {\n        if (frame) {\n          const name = frame.fields[0];\n          frame.fields[0] = {\n            ...name,\n            getLinks: (cfg: ValueLinkConfig) => {\n              const n = name.values.get(cfg.valueRowIndex ?? 0);\n              const p = path + '/' + n;\n              return [\n                {\n                  title: `Open ${n}`,\n                  href: `/admin/storage/${p}`,\n                  target: '_self',\n                  origin: name,\n                  onClick: () => {\n                    setPath(p);\n                  },\n                },\n              ];\n            },\n          };\n        }\n        return frame;\n      });\n  }, [path]);\n\n  const isFolder = useMemo(() => {\n    let isFolder = path?.indexOf('/') < 0;\n    if (listing.value) {\n      const length = listing.value.length;\n      if (length === 1) {\n        const first = listing.value.fields[0].values.get(0) as string;\n        isFolder = !path.endsWith(first);\n      } else {\n        // TODO: handle files/folders which do not exist\n        isFolder = true;\n      }\n    }\n    return isFolder;\n  }, [path, listing]);\n\n  const fileNames = useMemo(() => {\n    return (\n      listing.value?.fields\n        ?.find((f) => f.name === 'name')\n        ?.values?.toArray()\n        ?.filter((v) => typeof v === 'string') ?? []\n    );\n  }, [listing]);\n\n  const renderView = () => {\n    const isRoot = !path?.length || path === '/';\n    switch (view) {\n      case StorageView.Export:\n        if (!isRoot) {\n          setPath('');\n          return <Spinner />;\n        }\n        return <ExportView onPathChange={setPath} />;\n\n      case StorageView.AddRoot:\n        if (!isRoot) {\n          setPath('');\n          return <Spinner />;\n        }\n        return <AddRootView onPathChange={setPath} />;\n    }\n\n    const frame = listing.value;\n    if (!isDataFrame(frame)) {\n      return <></>;\n    }\n\n    if (isRoot) {\n      return <RootView root={frame} onPathChange={setPath} />;\n    }\n\n    const opts = [{ what: StorageView.Data, text: 'Data' }];\n\n    // Root folders have a config page\n    if (path.indexOf('/') < 0) {\n      opts.push({ what: StorageView.Config, text: 'Configure' });\n    }\n\n    // Lets only apply permissions to folders (for now)\n    if (isFolder) {\n      opts.push({ what: StorageView.Perms, text: 'Permissions' });\n    } else {\n      // TODO: only if the file exists in a storage engine with\n      opts.push({ what: StorageView.History, text: 'History' });\n    }\n\n    const canAddFolder = isFolder && (path.startsWith('resources') || path.startsWith('content'));\n    const canDelete = path.startsWith('resources/') || path.startsWith('content/');\n    const canViewDashboard = config.featureToggles.dashboardsFromStorage && path.startsWith('content/');\n\n    const getErrorMessages = () => {\n      return (\n        <div className={styles.errorAlert}>\n          <Alert title=\"Upload failed\" severity=\"error\" onRemove={clearAlert}>\n            {errorMessages.map((error) => {\n              return <div key={error}>{error}</div>;\n            })}\n          </Alert>\n        </div>\n      );\n    };\n\n    const clearAlert = () => {\n      setErrorMessages([]);\n    };\n\n    return (\n      <div className={styles.wrapper}>\n        <HorizontalGroup width=\"100%\" justify=\"space-between\" spacing={'md'} height={25}>\n          <Breadcrumb pathName={path} onPathChange={setPath} rootIcon={toIconName(navModel.node.icon ?? '')} />\n          <HorizontalGroup>\n            {canViewDashboard && (\n              <LinkButton icon=\"dashboard\" href={`g/${path}`}>\n                Dashboard\n              </LinkButton>\n            )}\n\n            {canAddFolder && (\n              <>\n                <UploadButton path={path} setErrorMessages={setErrorMessages} fileNames={fileNames} setPath={setPath} />\n                <Button onClick={() => setIsAddingNewFolder(true)}>New Folder</Button>\n              </>\n            )}\n            {canDelete && (\n              <Button\n                variant=\"destructive\"\n                onClick={() => {\n                  const text = isFolder\n                    ? 'Are you sure you want to delete this folder and all its contents?'\n                    : 'Are you sure you want to delete this file?';\n\n                  const parentPath = getParentPath(path);\n                  appEvents.publish(\n                    new ShowConfirmModalEvent({\n                      title: `Delete ${isFolder ? 'folder' : 'file'}`,\n                      text,\n                      icon: 'trash-alt',\n                      yesText: 'Delete',\n                      onConfirm: () =>\n                        getGrafanaStorage()\n                          .delete({ path, isFolder })\n                          .then(() => {\n                            setPath(parentPath);\n                          }),\n                    })\n                  );\n                }}\n              >\n                Delete\n              </Button>\n            )}\n          </HorizontalGroup>\n        </HorizontalGroup>\n\n        {errorMessages.length > 0 && getErrorMessages()}\n\n        <TabsBar>\n          {opts.map((opt) => (\n            <Tab\n              key={opt.what}\n              label={opt.text}\n              active={opt.what === view}\n              onChangeTab={() => setPath(path, opt.what)}\n            />\n          ))}\n        </TabsBar>\n        {isFolder ? (\n          <FolderView listing={frame} view={view} />\n        ) : (\n          <FileView path={path} listing={frame} onPathChange={setPath} view={view} />\n        )}\n\n        {isAddingNewFolder && (\n          <CreateNewFolderModal\n            onSubmit={async ({ folderName }) => {\n              const folderPath = `${path}/${folderName}`;\n              const res = await getGrafanaStorage().createFolder(folderPath);\n              if (typeof res?.error !== 'string') {\n                setPath(folderPath);\n                setIsAddingNewFolder(false);\n              }\n            }}\n            onDismiss={() => {\n              setIsAddingNewFolder(false);\n            }}\n            validate={(folderName) => {\n              const lowerCase = folderName.toLowerCase();\n\n              if (filenameAlreadyExists(folderName, fileNames)) {\n                return 'A file or a folder with the same name already exists';\n              }\n\n              if (!folderNameRegex.test(lowerCase)) {\n                return 'Name contains illegal characters';\n              }\n\n              if (folderName.length > folderNameMaxLength) {\n                return `Name is too long, maximum length: ${folderNameMaxLength} characters`;\n              }\n\n              return true;\n            }}\n          />\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents isLoading={listing.loading}>{renderView()}</Page.Contents>\n    </Page>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  // TODO: remove `height: 90%`\n  wrapper: css`\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n  `,\n  tableControlRowWrapper: css`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    margin-bottom: ${theme.spacing(2)};\n  `,\n  // TODO: remove `height: 100%`\n  tableWrapper: css`\n    border: 1px solid ${theme.colors.border.medium};\n    height: 100%;\n  `,\n  border: css`\n    border: 1px solid ${theme.colors.border.medium};\n    padding: ${theme.spacing(2)};\n  `,\n  errorAlert: css`\n    padding-top: 20px;\n  `,\n  uploadButton: css`\n    margin-right: ${theme.spacing(2)};\n  `,\n});\n"],"names":["AddRootView","onPathChange","Button","variant","onClick","Breadcrumb","pathName","rootIcon","styles","useStyles2","getStyles","paths","split","filter","Boolean","className","breadCrumb","Icon","name","map","path","index","url","slice","join","isLastBreadcrumb","length","undefined","uniqueId","theme","css","spacing","colors","text","link","secondary","initialFormModel","folderName","CreateNewFolderModal","validate","onDismiss","onSubmit","Modal","isOpen","title","Form","defaultValues","maxWidth","register","errors","Field","label","invalid","error","message","Input","I","id","required","type","defaultJob","format","generalFolderPath","history","exclude","git","formats","value","description","ExportView","status","setStatus","useState","body","setBody","useLocalStorage","details","setDetails","serverOptions","useAsync","getBackendSrv","get","setInclude","useCallback","k","v","exp","exporters","val","key","useEffect","subscription","getGrafanaLiveSrv","getStream","scope","LiveChannelScope","namespace","subscribe","next","evt","isLiveChannelMessageEvent","isLiveChannelStatusEvent","unsubscribe","JSON","stringify","running","post","Select","options","width","find","onChange","Switch","currentTarget","checked","InlineFieldRow","InlineField","labelWidth","Object","keys","ex","tooltip","placeholder","then","cfg","href","Collapse","onToggle","collapsible","CodeEditor","height","showLineNumbers","readOnly","language","showMiniMap","onBlur","parse","FileView","listing","view","info","useMemo","idx","lastIndexOf","substring","toLowerCase","category","getFileDisplayInfo","async","rsp","getGrafanaStorage","isString","StorageView","src","endsWith","icon","target","img","tableWrapper","console","log","wrapper","tableControlRowWrapper","border","medium","uploadSpot","primary","FolderView","style","Table","data","noHeader","showTypeIcons","resizable","RootView","root","storage","getConfig","searchQuery","setSearchQuery","base","location","pathname","roots","show","lower","r","config","indexOf","content","underContentRoot","push","prefix","renderRoots","pfix","s","ok","ready","Card","clickable","remote","notice","Alert","severity","TagList","tags","getTags","getIconName","size","secondaryTextColor","FilterInput","builtin","editable","UploadButton","setErrorMessages","setPath","fileNames","file","setFile","filenameExists","setFilenameExists","fileUploadKey","setFileUploadKey","isConfirmOpen","setIsConfirmOpen","prev","doUpload","fileToUpload","overwriteExistingFile","upload","onUpload","FileUpload","accept","onFileUpload","event","files","filenameAlreadyExists","uploadButton","ConfirmModal","confirmText","onConfirm","folderNameRegex","StoragePage","props","navModel","useNavModel","match","params","queryParams","p","replace","locationService","isAddingNewFolder","setIsAddingNewFolder","errorMessages","list","frame","fields","getLinks","n","values","valueRowIndex","origin","isFolder","first","f","toArray","Page","isLoading","loading","isRoot","Spinner","isDataFrame","opts","what","canAddFolder","startsWith","canDelete","canViewDashboard","clearAlert","justify","toIconName","node","parentPath","lastSlashIdx","getParentPath","appEvents","ShowConfirmModalEvent","yesText","delete","errorAlert","onRemove","TabsBar","opt","Tab","active","onChangeTab","folderPath","res","createFolder","lowerCase","test","renderView"],"sourceRoot":""}