{"version":3,"file":"AlertRuleListIndex.1fd721a9c934449aaadc.js","mappings":"kUAQO,SAASA,EAAT,GAA2E,IAAlD,UAAEC,GAAgD,EAChF,OACE,SAACC,EAAA,EAAD,CAAOC,MAAM,kBAAkBC,QAAM,EAACH,UAAWA,EAAWI,gBAAiBJ,EAA7E,gBACE,UAAC,KAAD,CAAeK,QAAQ,KAAvB,WACE,gBAAKC,IAAI,iCAAiCC,IAAI,gCAC9C,4KAIA,oG,8CCJR,MA8CA,EA9CsB,IAA4C,IAA3C,KAAEC,EAAF,OAAQC,EAAR,cAAgBC,GAA2B,EAChE,MAAMC,EAAW,GAAEH,EAAKI,iBAAiBJ,EAAKK,oBACxCC,GAAaC,EAAAA,EAAAA,cAChBC,IACC,SAAC,IAAD,CAEEC,mBAAmB,yBACnBC,gBAAiBF,EACjBG,YAAa,CAACV,IAHTO,IAMT,CAACP,IAGH,OACE,UAACW,EAAA,EAAD,YACE,SAACA,EAAA,UAAD,UAAeN,EAAWN,EAAKa,SAC/B,SAACD,EAAA,SAAD,WACE,SAACE,EAAA,EAAD,CAAMC,KAAK,KAAKF,KAAMb,EAAKgB,UAAWC,UAAY,yBAAwBjB,EAAKkB,kBAEjF,UAACN,EAAA,OAAD,YACE,6BACE,kBAAiBK,UAAY,GAAEjB,EAAKkB,aAApC,UACGZ,EAAWN,EAAKmB,WAAY,MADrB,QADZ,OAIOnB,EAAKoB,WAJF,SAMTpB,EAAKqB,KAAOf,EAAWN,EAAKqB,MAAQ,SAEvC,UAACT,EAAA,UAAD,YACE,SAACU,EAAA,GAAD,CAEEC,QAAQ,YACRC,KAAqB,WAAfxB,EAAKyB,MAAqB,OAAS,QACzCC,QAASxB,EAJX,SAMkB,WAAfF,EAAKyB,MAAqB,SAAW,SALlC,SAON,SAAC,KAAD,CAAuBF,QAAQ,YAAYI,KAAMxB,EAASqB,KAAK,MAA/D,uBAAgB,e,gBC/CjB,MAEDI,EAA4B,IAAM,IAAN,GAChC,UAACC,EAAA,EAAD,CAAOC,SAAS,UAAUpC,MAAM,6CAAhC,WACE,oJAGE,kBAHF,0EAMA,+BACM,KACJ,cAAGiC,KAAK,wFAAR,8CAEK,IAJP,0CAKgD,KAC9C,cAAGA,KAAK,4EAAR,4DANF,W,yBCZG,MAAMI,EAAkBN,GAA2BA,EAAMO,YAEnDC,EAAqBR,IAChC,MAAMS,EAAQ,IAAIC,OAAOV,EAAMW,WAAWJ,YAAa,KAEvD,OAAOP,EAAMW,WAAWC,MAAMC,QAAQC,GAC7BL,EAAMM,KAAKD,EAAK1B,OAASqB,EAAMM,KAAKD,EAAKpB,YAAce,EAAMM,KAAKD,EAAKlB,S,oICsBlF,MAAMoB,EAAqB,CACzBC,mBADyB,KAEzBC,eAFyB,KAGzBC,qBAAoBA,EAAAA,IAGhBC,GAAYC,EAAAA,EAAAA,UAflB,SAAyBrB,GACvB,MAAO,CACLsB,UAAUC,EAAAA,EAAAA,GAAYvB,EAAMwB,SAAU,cACtCb,WAAYH,EAAkBR,GAC9BxB,OAAQ8B,EAAeN,EAAMW,YAC7Bc,UAAWzB,EAAMW,WAAWc,aAUWT,GAMpC,MAAMU,UAAiCC,EAAAA,cAAqB,wDAClD,CACb,CAAEC,MAAO,MAAOC,MAAO,OACvB,CAAED,MAAO,KAAMC,MAAO,MACtB,CAAED,MAAO,SAAUC,MAAO,UAC1B,CAAED,MAAO,WAAYC,MAAO,YAC5B,CAAED,MAAO,UAAWC,MAAO,WAC3B,CAAED,MAAO,SAAUC,MAAO,UAC1B,CAAED,MAAO,UAAWC,MAAO,aARoC,+BA6BzCC,IACtBC,EAAAA,GAAAA,QAAwB,CAAE/B,MAAO8B,EAAOD,WA9BuB,sBAiCnD,KACZG,EAAAA,EAAAA,QAAkB,IAAIC,EAAAA,GAAoB,CAAEC,UAAWpE,QAlCQ,8BAqC1C+D,IACrBM,KAAKC,MAAMlB,eAAeW,MAtCqC,wBAyChDtD,IACf4D,KAAKC,MAAMjB,qBAAqB5C,EAAK8D,GAAI,CAAEC,OAAuB,WAAf/D,EAAKyB,WA1CO,iCA6CxC,IAAsD,IAArD,KAAEjB,EAAF,MAAQ8C,GAA6C,EAC7E,OACE,mBAAoBA,MAAOA,EAA3B,SACG9C,GADU8C,MApCjBU,oBACEJ,KAAKK,aAGPC,mBAAmBC,GACbA,EAAUC,YAAY3C,QAAUmC,KAAKC,MAAMO,YAAY3C,OACzDmC,KAAKK,aAIO,yBACRL,KAAKC,MAAMnB,mBAAmB,CAAEjB,MAAOmC,KAAKS,mBAGpDA,iBAAyB,MACvB,iBAAOT,KAAKC,MAAMO,YAAY3C,aAA9B,QAAuC,MA2BzC6C,SACE,MAAM,SAAEvB,EAAF,WAAYX,EAAZ,OAAwBnC,EAAxB,UAAgCiD,GAAcU,KAAKC,MAEzD,OACE,SAACU,EAAA,EAAD,CAAMxB,SAAUA,EAAhB,UACE,UAACwB,EAAA,WAAD,CAAerB,UAAWA,EAA1B,WACE,iBAAKjC,UAAU,kBAAf,WACE,gBAAKA,UAAU,wBAAf,UACE,SAACuD,EAAA,EAAD,CAAaC,YAAY,gBAAgBnB,MAAOrD,EAAQyE,SAAUd,KAAKe,yBAEzE,iBAAK1D,UAAU,UAAf,iBACE,kBAAOA,UAAU,gBAAgB2D,QAAQ,qBAAzC,sBAIA,gBAAK3D,UAAU,WAAf,UACE,SAAC4D,EAAA,GAAD,CACEC,QAAS,qBACTC,QAASnB,KAAKoB,aACdN,SAAUd,KAAKqB,qBACf3B,MAAOM,KAAKS,wBAdpB,OAkBE,gBAAKpD,UAAU,6BACdiE,EAAAA,EAAAA,yBAAA,OACC,SAAC,KAAD,CAAY3D,QAAQ,UAAUI,KAAK,kBAAnC,6BAIF,SAACL,EAAA,GAAD,CAAQC,QAAQ,YAAYG,QAASkC,KAAKuB,YAA1C,oCAzBJ,OA6BE,SAACvD,EAAD,MACA,SAAC,KAAD,CAAe/B,QAAQ,OAAvB,SACGuC,EAAWgD,KAAKpF,IAEb,SAAC,EAAD,CACEA,KAAMA,EAENC,OAAQA,EACRC,cAAe,IAAM0D,KAAK1D,cAAcF,IAFnCA,EAAK8D,cAa5B,QAAejB,EAAUM,I,iJC7IlB,SAAST,EAAmBqC,GACjC,OAAOM,MAAAA,IACLC,GAASC,EAAAA,EAAAA,OACT,MAAMC,QAA8BC,EAAAA,EAAAA,KAAgBC,IAAI,cAAeX,GACvEO,GAASK,EAAAA,EAAAA,IAAiBH,KAIvB,SAAS5C,EAAqBkB,EAAYiB,GAC/C,OAAOM,MAAAA,UACCI,EAAAA,EAAAA,KAAgBG,KAAM,eAAc9B,UAAYiB,GAEtDO,EAAS5C,EAAmB,CAAEjB,OADV+B,EAAAA,GAAAA,kBAAkC/B,OAAS,OACdoE,eAI9C,SAASC,EAA0BC,GACxC,OAAOV,MAAAA,IACL,UACQI,EAAAA,EAAAA,KAAgBG,KAAM,2BAA2BG,GACvDT,GAASU,EAAAA,EAAAA,KAAUC,EAAAA,EAAAA,IAA0B,0BAC7CzC,EAAAA,GAAAA,KAAqB,2BACrB,MAAO0C,IACHC,EAAAA,EAAAA,IAAaD,IACfZ,GAASU,EAAAA,EAAAA,KAAUI,EAAAA,EAAAA,IAAwBF,EAAMH,KAAKG,WAMvD,SAASG,EAA0BN,GACxC,OAAOV,MAAAA,IACL,UACQI,EAAAA,EAAAA,KAAgBa,IAAK,4BAA2BP,EAAKjC,KAAMiC,GACjET,GAASU,EAAAA,EAAAA,KAAUC,EAAAA,EAAAA,IAA0B,0BAC7C,MAAOC,IACHC,EAAAA,EAAAA,IAAaD,IACfZ,GAASU,EAAAA,EAAAA,KAAUI,EAAAA,EAAAA,IAAwBF,EAAMH,KAAKG,WAMvD,SAASK,EAAwBR,GACtC,OAAOV,MAAOC,EAAUkB,KACtB,MAAMC,EAAUD,IAAWE,oBAAoBA,0BACzCjB,EAAAA,EAAAA,KAAgBG,KAAK,gCAArB,eAAwD9B,GAAI2C,EAAQ3C,IAAOiC,KAI9E,SAASY,IACd,OAAOtB,MAAAA,IACL,MAEMuB,SAFsCnB,EAAAA,EAAAA,KAAgBC,IAAK,yBAExBmB,MAAK,CAACC,EAAIC,IAC7CD,EAAGjG,KAAOkG,EAAGlG,KACR,GAED,IAGVyE,GAAS0B,EAAAA,EAAAA,IAAwBJ,KAI9B,SAASK,EAAwBnD,GACtC,OAAOuB,MAAAA,UACCC,EAASqB,KACf,MAAMD,QAA4BjB,EAAAA,EAAAA,KAAgBC,IAAK,4BAA2B5B,KAClFwB,GAAS4B,EAAAA,EAAAA,GAA0BR,O,qOCrEhC,MAAMS,EAAoB,KAC/B,MAAM,sBAAEC,EAAF,oBAAyBC,IAAwBC,EAAAA,EAAAA,KAEvD,OAAIF,GAAyBC,EACpB,IAAP,GACE,SAACE,EAAA,EAAD,CACE7H,MAAM,0CACN8H,WAAW,OACXC,WAAY,eACZC,YAAY,iBACZC,OAAO,oEACPC,WAAW,4BACXC,gBAAgB,aAChBC,aAAa,YAIZ,IAAP,GAAO,SAACC,EAAA,EAAD,CAAkBC,QAAQ,sBAAsBC,qBAAqB,uB,mGCVvE,SAASC,IACd,MAAOC,EAAUC,IAAeC,EAAAA,EAAAA,WAAS,IAClCC,EAAQC,IAAaC,EAAAA,EAAAA,GAAgB,sCAAsC,GAC5EC,GAA2BC,EAAAA,EAAAA,IAA4BjH,GAAUA,EAAMkH,cACvEC,GAAmBF,EAAAA,EAAAA,IAA4BjH,GAAUA,EAAMoH,YAC/DC,GAAoBJ,EAAAA,EAAAA,IAA4BjH,GAAUA,EAAMsH,aAChEC,GAASC,EAAAA,EAAAA,IAAWC,GAEpBC,GAASC,EAAAA,EAAAA,UAAQ,KAAqB,QAC1C,MAAOC,EAAwBC,EAAmBC,GAAsB,CACtEd,EACAG,EACAE,GACA1D,KAAKoE,IACLC,EAAAA,EAAAA,MAAsBC,QACpB,CAACC,EAAQC,KAAe,MACtB,MAAM1D,EAAK,UAAGsD,EAASI,EAAW/I,aAAvB,aAAG,EAA2BqF,MACzC,OAAIsD,EAASI,EAAW/I,OAASqF,KAAU2D,EAAAA,EAAAA,IAA4BL,EAASI,EAAW/I,OAClF,IAAI8I,EAAQ,CAAEC,WAAAA,EAAY1D,MAAAA,IAE5ByD,IAET,MAGEG,EAAgB,UAAGlB,EAAiBmB,EAAAA,WAApB,aAAG,EAA6C7D,MAChE8D,EAAiB,UAAGlB,EAAkBiB,EAAAA,WAArB,aAAG,EAA8C7D,MAElEyD,EAAwB,GA6C9B,OA3CIG,GACFH,EAAOM,MAAK,uEAAuCH,EAAiB9B,SAAW,qBAE7EgC,GACFL,EAAOM,MAAK,wEAAwCD,EAAkBhC,SAAW,qBAGnFqB,EAAuBa,SAAQ,IAA2B,IAA1B,WAAEN,EAAF,MAAc1D,GAAY,EACxDyD,EAAOM,MACL,mFACmD,KACjD,cAAGtI,MAAMwI,EAAAA,EAAAA,IAAmBP,GAAa3I,UAAW+H,EAAOoB,OAA3D,SACGR,EAAW/I,OAHhB,KAKKqF,EAAM8B,SAAW,wBAK1BsB,EAAkBY,SAAQ,QAAC,WAAEN,EAAF,MAAc1D,GAAf,SACxByD,EAAOM,MACL,kEACkC,KAChC,cAAGtI,MAAMwI,EAAAA,EAAAA,IAAmBP,GAAa3I,UAAW+H,EAAOoB,OAA3D,SACGR,EAAW/I,OAHhB,KAKKqF,EAAM8B,SAAW,wBAK1BuB,EAAmBW,SAAQ,QAAC,WAAEN,EAAF,MAAc1D,GAAf,SACzByD,EAAOM,MACL,mEACmC,KACjC,cAAGtI,MAAMwI,EAAAA,EAAAA,IAAmBP,GAAa3I,UAAW+H,EAAOoB,OAA3D,SACGR,EAAW/I,OAHhB,KAKKqF,EAAM8B,SAAW,wBAKnB2B,IACN,CAAClB,EAA0BG,EAAkBE,EAAmBE,EAAOoB,SAE1E,OACE,kCACKjB,EAAOkB,QAAU/B,IAClB,SAACgC,EAAD,CAAoBC,MAAOpB,EAAOkB,OAAQ3I,QAAS,IAAM6G,GAAWD,IAAYA,QAE/Ea,EAAOkB,SAAW/B,IACnB,UAACzG,EAAA,EAAD,CACE,cAAY,2BACZnC,MAAM,uBACNoC,SAAS,QACT0I,SAAU,IAAMjC,GAAU,GAJ5B,UAMGJ,GAAYgB,EAAO/D,KAAI,CAAC7C,EAAMkI,KAAQ,yBAAgBlI,GAANkI,MAC/CtC,IACA,iCACE,yBAAMgB,EAAO,KACZA,EAAOkB,QAAU,IAChB,UAAC/I,EAAA,GAAD,CACEL,UAAW+H,EAAO0B,WAClBC,KAAK,OACLnJ,KAAK,cACLT,KAAK,KACLW,QAAS,IAAM0G,GAAY,GAL7B,UAOGe,EAAOkB,OAAS,EAPnB,SAO4BO,GAAAA,CAAU,QAASzB,EAAOkB,OAAS,eAgB/E,MAAMC,EAA4C,IAAwB,IAAvB,MAAEC,EAAF,QAAS7I,GAAc,EACxE,MAAMsH,GAASC,EAAAA,EAAAA,IAAWC,GAE1B,OACE,gBAAKjI,UAAW+H,EAAO6B,WAAvB,UACE,SAACC,EAAA,EAAD,CAASC,QAAQ,kBAAkBC,UAAU,SAA7C,UACE,SAAC1J,EAAA,GAAD,CAAQqJ,KAAK,OAAOpJ,QAAQ,cAAcC,KAAK,uBAAuBE,QAASA,EAA/E,SACG6I,EAAQ,GAAI,gCAAGA,EAAH,cAAsB,iDAOvCrB,EAAa+B,IAAD,CAChBP,WAAYQ,EAAAA,GAAI;;IAGhBL,WAAYK,EAAAA,GAAI;;;IAIhBd,OAAQc,EAAAA,GAAI;mBACKD,EAAME,WAAWC;qUC7H7B,SAASC,GAAoBxH,GAAuC,MACzE,MAAM,UAAEyH,EAAF,MAAaC,EAAb,QAAoBC,GAAY3H,EAChCmF,GAASC,EAAAA,EAAAA,IAAWC,IACpB5D,GAAWmG,EAAAA,EAAAA,OACX,QAAEC,EAAF,MAAWxF,EAAX,WAAkByF,GAAlB,WACJjD,EAAAA,EAAAA,IAA4BjH,GAAUA,EAAMmK,sCADxC,QACyEC,EAAAA,GAEzEC,GAAgB1C,EAAAA,EAAAA,UACpB,iBAAmB,CACjB2C,cAAeT,EAAUzK,KACzBmL,UAAWT,EAAM1K,KACjBoL,cAAa,UAAEV,EAAMW,gBAAR,QAAoB,MAEnC,CAACZ,EAAWC,KAIdY,EAAAA,EAAAA,YAAU,MACJR,GAAeD,GAAYxF,GAC7BsF,GAAQ,KAET,CAACG,EAAYD,EAASF,EAAStF,KAElCkG,EAAAA,GAAAA,IAAY3K,GAAWA,EAAM4K,gBAAgBT,6BAA+BC,EAAAA,KAe5E,OACE,SAACpM,GAAA,EAAD,CACEwB,UAAW+H,EAAOsD,MAClB3M,QAAQ,EACRD,MAAM,+BACNF,UAAWgM,EACX5L,gBAAiB4L,EALnB,UAOE,SAACe,GAAA,EAAD,CAAMT,cAAeA,EAAeU,SArBtBC,IAChBnH,GACEoH,EAAAA,EAAAA,IAAmC,CACjCC,iBAAiBC,EAAAA,EAAAA,IAAmBtB,EAAUuB,aAC9Cb,UAAWT,EAAM1K,KACjBiM,aAAcL,EAAOT,UACrBD,cAAeT,EAAUzK,KACzBkM,iBAAkBN,EAAOV,cACzBE,cAAeQ,EAAOR,oBAAiBe,MAazC,SACG,kBAAC,SAAEC,EAAF,OAAY9D,EAAQ+D,WAAW,QAAEC,GAAjC,MAA4CC,GAA7C,SACC,iCACE,SAACC,GAAA,EAAD,CAAOhK,MAAM,YAAYiK,UAAWnE,EAAO4C,cAAe7F,MAAK,UAAEiD,EAAO4C,qBAAT,aAAE,EAAsB/D,QAAvF,UACE,SAACuF,GAAAC,EAAD,eACE1J,GAAG,iBACCmJ,EAAS,gBAAiB,CAC5BQ,SAAU,qCAIhB,SAACJ,GAAA,EAAD,CAAOhK,MAAM,aAAaiK,UAAWnE,EAAO6C,UAAW9F,MAAK,UAAEiD,EAAO6C,iBAAT,aAAE,EAAkBhE,QAAhF,UACE,SAACuF,GAAAC,EAAD,eACE1J,GAAG,aACCmJ,EAAS,YAAa,CACxBQ,SAAU,sCAIhB,SAACJ,GAAA,EAAD,CACEhK,MAAM,iCACNiK,UAAWnE,EAAO8C,cAClB/F,MAAK,UAAEiD,EAAO8C,qBAAT,aAAE,EAAsBjE,QAH/B,UAKE,SAACuF,GAAAC,EAAD,eACE1J,GAAG,gBACHW,YAAY,MACRwI,EAAS,gBAAiBS,GAAAA,SAGjCC,EAAAA,GAAAA,GAAmCP,EAAM,kBAAkBQ,eAA3D,OACC,SAAC,KAAD,OAGF,UAACnO,GAAA,YAAD,YACE,SAAC6B,EAAA,GAAD,CACEC,QAAQ,YACRsM,KAAK,SACLC,SAAUpC,EACVhK,QAAS,IAAM8J,GAAQ,GACvBb,KAAK,UALP,oBASA,SAACrJ,EAAA,GAAD,CAAQuM,KAAK,SAASC,UAAWX,GAAWzB,EAA5C,SACGA,EAAU,YAAc,yBA7C0BqC,KAAKC,UAAUlC,MAuDlF,MAAM5C,GAAY,KAAM,CACtBoD,MAAOpB,EAAAA,GAAI;;yGCjGN,MAAM+C,GAA0CpK,IACrD,MAAM,MAAE0H,EAAF,UAASD,EAAT,QAAoBE,GAAY3H,GAC/BqK,EAASC,IAAc9F,EAAAA,EAAAA,WAAkB,IACzC+F,EAAWC,IAAgBhG,EAAAA,EAAAA,UAAyBkD,EAAM/F,OAE3DwD,GAASC,EAAAA,EAAAA,IAAWC,IAEpBoF,GAAY/N,EAAAA,EAAAA,cACfoJ,IAEC,IAAKA,EAAO4E,YACV,OAIF,GADkB5E,EAAO4E,YAAYC,QAAU7E,EAAO8E,OAAOD,MAE3D,OAGF,MAAME,EA2KL,SAAoBlJ,EAAYmJ,EAAoBC,GACzD,MAAMjF,EAASkF,MAAMC,KAAKtJ,IACnBuJ,GAAWpF,EAAOqF,OAAOL,EAAY,GAG5C,OAFAhF,EAAOqF,OAAOJ,EAAU,EAAGG,GAEpBpF,EAhLqBsF,CAAQb,EAAWzE,EAAO8E,OAAOD,MAAO7E,EAAO4E,YAAYC,OACnFH,EAAaK,GAEb,MAAM/B,GAAkBC,EAAAA,EAAAA,IAAmBtB,EAAUuB,aAC/C9D,GAAamG,EAAAA,GAAAA,SAAQR,EAAgBtJ,KAAKpF,GAASA,EAAKmP,aAE9DhB,GAAW,IACX7I,EAAAA,GAAAA,KACE8J,EAAAA,EAAAA,IAAiB,CACfrD,cAAeT,EAAUzK,KACzBmL,UAAWT,EAAM1K,KACjB8L,gBAAiBA,EACjB0C,SAAUtG,KAGXuG,SACAC,SAAQ,KACPpB,GAAW,QAGjB,CAAC5C,EAAM1K,KAAMyK,EAAUzK,KAAMyK,EAAUuB,YAAauB,IAIhDoB,EAAsCpB,EAAUhJ,KAAKpF,GAAD,iBACrDA,EADqD,CAExDyP,IAAKC,QAAOC,EAAAA,GAAAA,IAAc3P,EAAKmP,gBAGjC,OACE,SAAC1P,GAAA,EAAD,CACEwB,UAAW+H,EAAOsD,MAClB3M,QAAQ,EACRD,OAAO,SAACkQ,GAAD,CAAatE,UAAWA,EAAWC,MAAOA,IACjD/L,UAAWgM,EACX5L,gBAAiB4L,EALnB,UAOE,SAAC,MAAD,CAAiB8C,UAAWA,EAA5B,UACE,SAAC,MAAD,CACEuB,YAAY,aACZC,KAAK,WACLC,YAAa,CAACC,EAAUC,EAAWC,KACjC,SAACC,GAAD,CAAUH,SAAUA,EAAUhQ,KAAMwP,EAAaU,EAAOzB,OAAOD,OAAQ4B,SAAO,IAJlF,SAOIC,IACA,+BACEC,IAAKD,EAAkBE,SACvBtP,UAAWuP,IAAAA,CAAGxH,EAAOyH,cAAevC,GAAWlF,EAAO8E,WAClDuC,EAAkBK,eAHxB,WAKGlB,EAAapK,KAAI,CAACpF,EAAMwO,KACvB,SAAC,MAAD,CAA0BmC,YAAa3Q,EAAKyP,IAAKjB,MAAOA,EAAOoC,eAAgB1C,EAA/E,SACI8B,IAAgC,SAACG,GAAD,CAAyBH,SAAUA,EAAUhQ,KAAMA,GAApCA,EAAKyP,MADxCzP,EAAKyP,OAItBY,EAAkB5L,uBAgB3B0L,GAAW,IAA4E,IAA3E,SAAEH,EAAF,KAAYhQ,EAAZ,QAAkBoQ,GAAU,EAA5B,WAAmCS,GAAa,GAA2B,EAC3F,MAAM7H,GAASC,EAAAA,EAAAA,IAAWC,IAE1B,OACE,+BACEjI,UAAWuP,IAAAA,CAAGxH,EAAO8H,SAAUV,GAAW,UAAWS,GAAc,cACnEP,IAAKN,EAASO,UACVP,EAASe,eACTf,EAASgB,gBAJf,YAMGC,EAAAA,EAAAA,IAAejR,EAAKkR,YAAa,SAACC,GAAA,EAAD,CAAe1P,MAAOzB,EAAKkR,SAASzP,SACrE2P,EAAAA,EAAAA,IAAgBpR,EAAKkR,YAArB,SAAkC,SAACG,EAAA,EAAD,CAAO7Q,KAAM,YAAa8Q,MAAO,YACpE,gBAAKrQ,UAAW+H,EAAOuI,aAAvB,SAAsCvR,EAAKa,OAR7C,SASE,SAACC,EAAA,EAAD,CAAMD,KAAM,wBAUZ+O,GAAoC,IAA0B,IAAzB,UAAEtE,EAAF,MAAaC,GAAY,EAClE,MAAMvC,GAASC,EAAAA,EAAAA,IAAWC,IAE1B,OACE,iBAAKjI,UAAW+H,EAAOwI,OAAvB,mBACE,SAAC1Q,EAAA,EAAD,CAAMD,KAAK,aACV4Q,EAAAA,EAAAA,IAAmBnG,EAAUuB,eAC5B,SAAC/B,EAAA,EAAD,CAASC,QAASO,EAAUuB,YAAYhM,KAAMmK,UAAU,MAAxD,UACE,gBACEjL,IAAKuL,EAAUuB,YAAY6E,KAAK7Q,KAChCI,UAAW+H,EAAO2I,eAClB7R,IAAKwL,EAAUuB,YAAY6E,KAAKrQ,KAAKuQ,MAAMC,WAIjD,0BAAOvG,EAAUzK,OAXnB,SAYE,SAACC,EAAA,EAAD,CAAMD,KAAK,kBACX,0BAAO0K,EAAM1K,WAKbqI,GAAa+B,IAAD,CAChBqB,MAAOpB,EAAAA,GAAI;;;;IAKX4F,SAAU5F,EAAAA,GAAI;;;;;WAKLD,EAAMpL;;kBAECoL,EAAM6G,OAAOC,WAAWC;aAC7B/G,EAAM6G,OAAOtR,KAAKyR;;+BAEAhH,EAAM6G,OAAOI,OAAOC;eACpClH,EAAMpL,QAAQ,MAAMoL,EAAMpL,QAAQ;;;;;;;0BAOvBoL,EAAM6G,OAAOE,QAAQI;;IAG7C3B,cAAevF,EAAAA,GAAI;;wBAEGD,EAAM6G,OAAOI,OAAOC;IAE1CrE,SAAU5C,EAAAA,GAAI;;;IAIdqG,aAAcrG,EAAAA,GAAI;;;;;;IAOlBsG,OAAQtG,EAAAA,GAAI;;;;WAIHD,EAAMpL,QAAQ;IAEvB8R,eAAgBzG,EAAAA,GAAI;aACTD,EAAMpL,QAAQ;cACboL,EAAMpL,QAAQ;sBChNrB,MAAMwS,GAA8B,IAA0B,IAAzB,SAAEC,EAAF,OAAYC,GAAa,EACnE,MAAMvJ,GAASC,EAAAA,EAAAA,IAAWC,IAE1B,OAAO,iBAAMjI,UAAW+H,EAAOuJ,GAAxB,SAAkCD,GAAYC,KAGjDrJ,GAAa+B,IAAD,CAChB,CAACuH,GAAAA,GAAAA,UAAiCtH,EAAAA,GAAI;aAC3BD,EAAM6G,OAAOW,QAAQjS;IAEhC,CAACgS,GAAAA,GAAAA,SAAgCtH,EAAAA,GAAI;aAC1BD,EAAM6G,OAAOY,QAAQlS;IAEhC,CAACgS,GAAAA,GAAAA,QAA+BtH,EAAAA,GAAI;aACzBD,EAAM6G,OAAO5L,MAAM1F;IAE9BmS,QAASzH,EAAAA,GAAI;aACFD,EAAM6G,OAAOtR,KAAKyR;gBCZ/B,MAAMW,GAAa,CACjBC,MAAO,EACPC,UAAW,EACX,CAACN,GAAAA,GAAAA,QAA+B,EAChC,CAACA,GAAAA,GAAAA,SAAgC,EACjC,CAACA,GAAAA,GAAAA,UAAiC,EAClCtM,MAAO,GAGI6M,GAAuB,IAAwD,IAAvD,aAAEC,EAAF,cAAgBC,EAAhB,MAA+B1H,EAA/B,WAAsC2H,GAAiB,EAC1F,MAAMC,GAAa/J,EAAAA,EAAAA,UAAQ,KACzB,MAAMgK,EAAQ,OAAH,UAAQR,IACbS,EAAYrT,IAAuB,QACnCA,EAAKkR,WAAYD,EAAAA,EAAAA,IAAejR,EAAKkR,YACvCkC,EAAMpT,EAAKkR,SAASzP,QAAU,GAEF,SAA1B,UAAAzB,EAAKkR,gBAAL,eAAeoC,SAA8C,WAA1B,UAAAtT,EAAKkR,gBAAL,eAAeoC,UACpDF,EAAMlN,OAAS,IAGdlG,EAAKkR,WAAYE,EAAAA,EAAAA,IAAgBpR,EAAKkR,WACtClR,EAAKmP,YAAaoE,EAAAA,EAAAA,IAAqBvT,EAAKmP,cAE7CiE,EAAMN,WAAa,GAErBM,EAAMP,OAAS,GAQjB,OANItH,GACFA,EAAM/F,MAAM0E,QAAQmJ,GAElBH,GACFA,EAAWhJ,SAASoB,GAAcA,EAAUkI,OAAOtJ,SAASqB,GAAUA,EAAM/F,MAAM0E,QAAQmJ,OAErFD,IACN,CAAC7H,EAAO2H,IAELO,EAAqC,GAqC3C,OApCIN,EAAWX,GAAAA,GAAAA,SACbiB,EAAgBxJ,MACd,UAACoI,GAAD,CAA+BE,OAAQC,GAAAA,GAAAA,OAAvC,UACGW,EAAWX,GAAAA,GAAAA,QADd,YAAsB,WAKtBW,EAAWjN,OACbuN,EAAgBxJ,MACd,UAACoI,GAAD,CAA+BE,OAAQC,GAAAA,GAAAA,OAAvC,UACGW,EAAWjN,MADd,YAAsB,WAKtBiN,EAAWX,GAAAA,GAAAA,UACbiB,EAAgBxJ,MACd,UAACoI,GAAD,CAAgCE,OAAQC,GAAAA,GAAAA,QAAxC,UACGW,EAAWX,GAAAA,GAAAA,SADd,aAAsB,YAKtBQ,GAAgBG,EAAWX,GAAAA,GAAAA,WAC7BiB,EAAgBxJ,MACd,UAACoI,GAAD,CAAiCE,OAAO,UAAxC,UACGY,EAAWX,GAAAA,GAAAA,UADd,YAAsB,aAKtBS,GAAiBE,EAAWL,WAC9BW,EAAgBxJ,MACd,UAACoI,GAAD,CAAkCE,OAAO,UAAzC,UACGY,EAAWL,UADd,eAAsB,eAOxB,4BACE,4BACGK,EAAWN,MADd,IACsBjI,GAAAA,CAAU,OAAQuI,EAAWN,YAEhDY,EAAgBpJ,SACjB,yCACE,kCACCoJ,EAAgB/J,QACf,CAACgK,EAAMC,EAAMlJ,IACXiJ,EAAKrJ,OACD,CACEqJ,GACA,SAAC,EAAAE,SAAD,mBACE,mCADanJ,GAGfkJ,GAEF,CAACA,IACP,W,4BCxEL,MAAME,GAAwBC,EAAAA,MAAW,IAA+C,UAA9C,MAAEvI,EAAF,UAASD,EAAT,UAAoByI,EAApB,SAA+BC,GAAe,EAC7F,MAAM,YAAEnH,GAAgBvB,EAClBhG,GAAWmG,EAAAA,EAAAA,MACXzC,GAASC,EAAAA,EAAAA,IAAWC,KAEnB+K,EAAgBC,IAAqB7L,EAAAA,EAAAA,WAAS,IAC9C8L,EAAiBC,IAAsB/L,EAAAA,EAAAA,WAAS,IAChDgM,EAAmBC,IAAwBjM,EAAAA,EAAAA,WAAS,IACpDkM,EAAaC,IAAkBnM,EAAAA,EAAAA,WAAU0L,IAE1C,aAAEU,IAAiBnN,EAAAA,EAAAA,MAEzB6E,EAAAA,EAAAA,YAAU,KACRqI,GAAgBT,KACf,CAACA,IAEJ,MAAM,SAAEW,EAAF,iBAAYC,IAAqBC,EAAAA,EAAAA,KACjCzF,EAAS,UAAG5D,EAAM/F,MAAM,UAAf,aAAG,EAAgB2J,UAC5B0F,EAAa1F,IAAa2F,EAAAA,EAAAA,IAAmB3F,IAAcA,EAAU4F,cAAcC,oBAAkBhI,GACrG,OAAEiI,IAAWC,EAAAA,EAAAA,GAAUL,GAGvBM,EACJT,EAAS7H,IAAgB8H,EAAiB9H,KAAiBtB,EAAM/F,MAAM4P,MAAMpV,KAAWA,EAAKmP,YACzFkG,GAAcC,EAAAA,EAAAA,IAAqB/J,GAGnCgK,EAAgBhK,EAAM/F,MAAMgQ,MAAMxV,IAC/B8U,EAAAA,EAAAA,IAAmB9U,EAAKmP,YAAcnP,EAAKmP,UAAU4F,cAAcU,aAItEC,EAA0B,SAAb1B,EACb2B,EAA2B,YAAb3B,EAOd4B,EAAiC,GAGvC,GAAIT,EACFS,EAAY3L,KAAZ,SACE,UAAC,KAAD,YACE,SAAC4L,EAAA,EAAD,IADF,aAAqB,sBAKlB,GAAIhJ,IAAgB9C,EAAAA,IACzB,GAAI8K,EAAW,CACb,MAAMiB,GAAUC,EAAAA,EAAAA,IAAelB,GAC3BI,MAAAA,GAAAA,EAAQe,UACNL,IAAgBJ,IAClBK,EAAY3L,MACV,SAACgM,GAAAC,EAAD,CACE,aAAW,kBACX,cAAY,aAEZ1U,KAAK,MACL2U,QAAQ,kBACRzU,QAAS,IAAMwS,GAAkB,IAH7B,SAMR0B,EAAY3L,MACV,SAACgM,GAAAC,EAAD,CACE,aAAW,iBACX,cAAY,gBAEZ1U,KAAK,eACL2U,QAAQ,gBACRlV,UAAW+H,EAAOoN,SAClB1U,QAAS,IAAM4S,GAAqB,IAJhC,aAQNoB,GACFE,EAAY3L,MACV,SAACgM,GAAAC,EAAD,CACE,aAAW,eAEX1U,KAAK,cACL2U,QAAQ,eACRE,GAAIP,EACJQ,OAAO,WAJH,UASRrB,MAAAA,GAAAA,EAAQsB,UAAYb,GACtBE,EAAY3L,MACV,SAACgM,GAAAC,EAAD,CACE,aAAW,qBAEX1U,KAAK,OACL2U,QAAQ,qBACRE,GAAIP,EAAU,eACdQ,OAAO,WAJH,uBASH7B,EAAa5H,EAAYhM,OAAS6T,EAAS7H,KAC/CwI,IACHO,EAAY3L,MACV,SAACgM,GAAAC,EAAD,CACE,aAAW,kBACX,cAAY,aAEZ1U,KAAK,MACL2U,QAAQ,kBACRzU,QAAS,IAAMwS,GAAkB,IAH7B,SAMR0B,EAAY3L,MACV,SAACgM,GAAAC,EAAD,CACE,aAAW,iBACX,cAAY,gBAEZ1U,KAAK,eACL2U,QAAQ,iBACRlV,UAAW+H,EAAOoN,SAClB1U,QAAS,IAAM4S,GAAqB,IAJhC,aASVsB,EAAY3L,MACV,SAACgM,GAAAC,EAAD,CACE,aAAW,oBACX,cAAY,eAEZ1U,KAAK,YACL2U,QAAQ,oBACRzU,QAAS,IAAM0S,GAAmB,IAH9B,kBASV,MAAMpI,EAAY0J,GAChB,SAACc,EAAA,EAAD,CAAclL,UAAWA,EAAUzK,QAEnC,SAAC2V,EAAA,EAAD,CAAclL,UAAWA,EAAUzK,KAAM0K,MAAOA,EAAM1K,OAUxD,OACE,iBAAKI,UAAW+H,EAAOyN,QAAS,cAAY,aAA5C,WACE,iBAAKxV,UAAW+H,EAAOwI,OAAQ,cAAY,oBAA3C,WACE,SAACkF,EAAA,EAAD,CACEzV,UAAW+H,EAAO2N,eAClBpC,YAAaA,EACbqC,SAAUpC,EACV,cAAY,2BAEd,SAAC1T,EAAA,EAAD,CAAMD,KAAM0T,EAAc,SAAW,iBACpC9C,EAAAA,EAAAA,IAAmB5E,KAClB,SAAC/B,EAAA,EAAD,CAASC,QAAS8B,EAAYhM,KAAMmK,UAAU,MAA9C,UACE,gBACEjL,IAAK8M,EAAY6E,KAAK7Q,KACtBI,UAAW+H,EAAO2I,eAClB7R,IAAK+M,EAAY6E,KAAKrQ,KAAKuQ,MAAMC,WAIvC,gBAAI5Q,UAAW+H,EAAO6N,QAAtB,UACGxB,IAAW,SAAI,SAAChE,EAAA,EAAD,CAAOC,MAAM,SAAS9Q,KAAK,gBAD7C,IAC8DwL,MAE9D,gBAAK/K,UAAW+H,EAAO8N,UACvB,gBAAK7V,UAAW+H,EAAO+N,YAAvB,UACE,SAAChE,GAAD,CAAWC,cAAc,EAAOzH,MAAOA,QAEtCqK,EAAYvL,SACb,iCACE,gBAAKpJ,UAAW+H,EAAOgO,iBAAvB,gBACA,gBAAK/V,UAAW+H,EAAO4M,YAAvB,SAAqCA,WAIzCrB,IACA,SAAC0C,GAAA,EAAD,CAAYC,mBAAmB,EAAMjW,UAAW+H,EAAOmO,WAAYC,gBAAgB,EAAM5R,MAAO+F,EAAM/F,QAEvGyO,IAAkB,SAAC5I,GAAD,CAAqBE,MAAOA,EAAOD,UAAWA,EAAWE,QAAS,IA3ClE,WAAmB,0DAEtC6L,EAAAA,EAAAA,IAAQC,EAAAA,EAAAA,sBAEVpD,GAAkB,GAuC2EqD,KAC1FlD,IACC,SAACpG,GAAD,CAAwB1C,MAAOA,EAAOD,UAAWA,EAAWE,QAAS,IAAM8I,GAAqB,MAElG,SAACkD,EAAA,EAAD,CACE7X,OAAQwU,EACRzU,MAAM,eACN+X,MACE,4FAEE,mBAFF,OAGOlM,EAAM/F,MAAM6E,OAHnB,UAGkCO,GAAAA,CAAU,OAAQW,EAAM/F,MAAM6E,QAHhE,6BAIE,mBAJF,iDAQFqN,UA3Kc,KAClBpS,GAASqS,EAAAA,EAAAA,IAAuBrM,EAAWC,IAC3C6I,GAAmB,IA0Kf5U,UAAW,IAAM4U,GAAmB,GACpCwD,YAAY,iBAMpB/D,GAAWgE,YAAc,aAElB,MAAM3O,GAAa+B,IAAD,CACvBwL,QAASvL,EAAAA,GAAI;;oBAEKD,EAAMpL,QAAQ;;IAGhC2R,OAAQtG,EAAAA,GAAI;;;;eAICD,EAAMpL,QAAQ,MAAMoL,EAAMpL,QAAQ,MAAMoL,EAAMpL,QAAQ;wBAC7CoL,EAAM6G,OAAOC,WAAWE;;IAG9C8E,YAAa7L,EAAAA,GAAI;;;;;MAKbD,EAAM6M,YAAYC,KAAK;;;sBAGP9M,EAAMpL,QAAQ;;IAGlCgX,QAAS3L,EAAAA,GAAI;mBACID,EAAMpL,QAAQ;;IAG/BiX,OAAQ5L,EAAAA,GAAI;;IAGZyL,eAAgBzL,EAAAA,GAAI;;;mBAGHD,EAAMpL,QAAQ;sBACXoL,EAAMpL,QAAQ;;;;;IAMlC8R,eAAgBzG,EAAAA,GAAI;aACTD,EAAMpL,QAAQ;cACboL,EAAMpL,QAAQ;mBACToL,EAAMpL,QAAQ;IAE/BmY,iBAAkB9M,EAAAA,GAAI;;aAEXD,EAAM6G,OAAOtR,KAAKsN;IAE7BkJ,iBAAkB9L,EAAAA,GAAI;gBACRD,EAAMpL,QAAQ;IAE5B+V,YAAa1K,EAAAA,GAAI;;qBAEED,EAAMpL,QAAQ;;IAGjCsX,WAAYjM,EAAAA,GAAI;kBACAD,EAAMpL,QAAQ;IAE9BuW,SAAUlL,EAAAA,GAAI;;MCtTT,SAAS+M,GAA0B/E,GACxC,OAAO9J,EAAAA,EAAAA,UACL,IACE8J,EAAWgF,SAASC,GAClBA,EAAG3E,OAAOpO,KAAKgT,IAAD,CACZ9M,UAAW6M,EACX5M,MAAO6M,SAGb,CAAClF,I,gBCUE,MAAMmF,GAAwB,IAA+B,IAA9B,WAAEnF,EAAF,UAAca,GAAgB,EAClE,MAAM/K,GAASC,EAAAA,EAAAA,IAAWC,IAEpBoP,GAAY5P,EAAAA,EAAAA,IAA4BjH,GAAUA,EAAMkH,cACxDE,GAAYH,EAAAA,EAAAA,IAA4BjH,GAAUA,EAAMoH,YACxD0P,GAAmBnP,EAAAA,EAAAA,SAAQK,EAAAA,GAAqB,IAChD+O,EAAuBP,GAA0B/E,GAEjDuF,GAAqBrP,EAAAA,EAAAA,UACzB,IACEmP,EAAiBjW,QACdoW,IAAOC,EAAAA,EAAAA,IAA2B9P,EAAU6P,EAAG7X,SAAU8X,EAAAA,EAAAA,IAA2BL,EAAUI,EAAG7X,UAEtG,CAACgI,EAAWyP,EAAWC,IAGnBK,EAAiBL,EAAiB/C,MAAMkD,IAAD,qCAAQ7P,EAAU6P,EAAG7X,aAArB,iBAAQ,EAAoB8I,cAA5B,aAAQ,EAA4BU,cAApC,YAEvCwO,EAA2BN,EAAiBlO,OAAS,EACrDyO,EAAwBL,EAAmBpO,OAAS,EACpD0O,EAAgB7F,EAAW7I,OAAS,GAEpC,cAAE2O,EAAF,aAAiBC,EAAjB,KAA+BC,EAA/B,UAAqCC,IAAcC,EAAAA,EAAAA,GACvDZ,EACA,EACAa,EAAAA,IAGF,OACE,qBAASpY,UAAW+H,EAAOyN,QAA3B,WACE,iBAAKxV,UAAW+H,EAAOsQ,cAAvB,mBACE,mDACCb,EAAmBpO,QAClB,SAACkP,EAAA,EAAD,CACEtY,UAAW+H,EAAOwQ,OAClBhZ,KAAO,sBAAqBiY,EAAmBpO,UAAUO,GAAAA,CAAU,SAAU6N,EAAmBpO,YAHnG,SAMC,uBAIH8O,EAAU/T,KAAI,IAA0B,IAAzB,MAAEmG,EAAF,UAASD,GAAgB,EACvC,OACE,SAACuI,GAAD,CACEtI,MAAOA,EAEPD,UAAWA,EACXyI,UAAWA,EACXC,SAAU,WAHJ,IAAEyF,EAAAA,EAAAA,IAAkBnO,EAAUuB,gBAAgBvB,EAAUzK,QAAQ0K,EAAM1K,YAQhFgY,IAAD,SAA6B,sFAC7BA,IAA6BC,IAA0BC,IAAvD,SAAwE,8CACvEH,GAAkBE,IAAyB,SAACjD,EAAA,EAAD,CAAS9U,KAAM,GAAIE,UAAW+H,EAAO0Q,WAElF,SAACC,EAAA,EAAD,CACE1Y,UAAW+H,EAAO4Q,WAClBC,YAAaX,EACbF,cAAeA,EACfc,WAAYb,EACZc,oBAAkB,QAMpB7Q,GAAa+B,IAAD,CAChBuO,OAAQtO,EAAAA,GAAI;;IAGZoO,cAAepO,EAAAA,GAAI;;;IAInBuL,QAASvL,EAAAA,GAAI;qBACMD,EAAMpL,QAAQ;IAEjC6Z,QAASxO,EAAAA,GAAI;;eAEAD,EAAMpL,QAAQ;IAE3B+Z,YAAYI,EAAAA,EAAAA,GAAoB/O,K,yBCnF3B,MAAMgP,GAA0B,IAA+B,IAA9B,WAAE/G,EAAF,UAAca,GAAgB,EACpE,MAAM/K,GAASC,EAAAA,EAAAA,IAAWC,KACnB9E,IAAe8V,EAAAA,EAAAA,MAEhB,KAAEC,EAAF,MAAQC,IAAU1R,EAAAA,EAAAA,IAA4BjH,IAAD,CACjD0Y,KAAM1Y,EAAMoH,UAAUkB,EAAAA,KAA8B8B,EAAAA,GACpDuO,MAAO3Y,EAAMsH,WAAWgB,EAAAA,KAA8B8B,EAAAA,OAGlDH,EAAUyO,EAAKzO,SAAW0O,EAAM1O,QAChC2O,IAAcF,EAAKxQ,UAAYyQ,EAAMzQ,OAErC2Q,EAA2C,YAAxBlW,EAAW,KAC9BmW,EAAmBD,EAAmBpH,GAAasH,EAAAA,GAAAA,IAA2BtH,GAE9EsF,EAAuBP,GAA0BsC,IAEjD,cAAEvB,EAAF,aAAiBC,EAAjB,KAA+BC,EAA/B,UAAqCC,IAAcC,EAAAA,EAAAA,GACvDZ,EACA,EACAa,EAAAA,IAGF,OACE,qBAASpY,UAAW+H,EAAOyN,QAA3B,WACE,iBAAKxV,UAAW+H,EAAOsQ,cAAvB,mBACE,qCACC5N,GAAU,SAAC6N,EAAA,EAAD,CAAoBtY,UAAW+H,EAAOwQ,OAAQhZ,KAAK,eAAtD,SAAwE,uBAGjF2Y,EAAU/T,KAAI,QAAC,MAAEmG,EAAF,UAASD,GAAV,SACb,SAACuI,GAAD,CACEtI,MAAOA,EAEPD,UAAWA,EACXyI,UAAWA,EACXC,SAAUsG,EAAmB,UAAY,QAHnC,GAAEhP,EAAUzK,QAAQ0K,EAAM1K,WAMnCwZ,GAA0C,KAA7BE,MAAAA,OAAA,EAAAA,EAAkBlQ,UAA/B,SAA+C,8CAC9CgQ,GAAa3O,IAAW,SAACmK,EAAA,EAAD,CAAS9U,KAAM,GAAIE,UAAW+H,EAAO0Q,WAC/D,SAACC,EAAA,EAAD,CACE1Y,UAAW+H,EAAO4Q,WAClBC,YAAaX,EACbF,cAAeA,EACfc,WAAYb,EACZc,oBAAkB,QAMpB7Q,GAAa+B,IAAD,CAChBuO,OAAQtO,EAAAA,GAAI;;IAGZoO,cAAepO,EAAAA,GAAI;;;IAInBuL,QAASvL,EAAAA,GAAI;qBACMD,EAAMpL,QAAQ;IAEjC6Z,QAASxO,EAAAA,GAAI;;eAEAD,EAAMpL,QAAQ;IAE3B+Z,YAAYI,EAAAA,EAAAA,GAAoB/O,KCxErBwP,GAAkC,IAAgD,IAA/C,MAAEjV,EAAF,MAAS/D,EAAT,iBAAgBiZ,GAAmB,GAAY,EAC7F,MAAOC,EAAWC,IAAgBvS,EAAAA,EAAAA,UAASqS,GACrC1R,GAASC,EAAAA,EAAAA,IAAWC,IAC1B,OACE,iCACE,gBAAIjI,UAAW+H,EAAOwI,OAAtB,WACE,SAACkF,EAAA,EAAD,CACEzV,UAAW+H,EAAO2N,eAClB5V,KAAK,MACLwT,YAAaoG,EACb/D,SAAU,IAAMgE,GAAcD,MAE/BE,EAAAA,EAAAA,IAAqBpZ,GAPxB,KAOkC+D,EAAM6E,OAPxC,QASEsQ,IAAa,SAAC1D,GAAA,EAAD,CAAYhW,UAAW+H,EAAOmO,WAAY3R,MAAOA,EAAOsV,iBAAiB,QAKxF5R,GAAa+B,IAAD,CAChB0L,eAAgBzL,EAAAA,GAAI;;IAGpBsG,OAAQtG,EAAAA,GAAI;kBACID,EAAMpL,QAAQ;IAE9BsX,WAAYjM,EAAAA,GAAI;kBACAD,EAAMpL,QAAQ;wEChChC,MAAMkb,GAAiC,CACrC,CACEvZ,KAAM,UACN6B,MAAO,OACPC,MAAO,QAET,CACE9B,KAAM,SACN6B,MAAO,UACPC,MAAO,WAET,CACE9B,KAAM,aACN6B,MAAO,QACPC,MAAO,UAIL0X,GAAqC,CACzC,CACE3X,MAAO,SACPC,MAAO2X,GAAAA,GAAAA,UAET,CACE5X,MAAO,aACPC,MAAO2X,GAAAA,GAAAA,YA2IL/R,GAAa+B,IACV,CACLiQ,UAAWhQ,EAAAA,GAAI;;;wBAGKD,EAAMpL,QAAQsb;uBACflQ,EAAMpL,QAAQsb;MAEjCC,WAAYlQ,EAAAA,GAAI;;;MAIhBmQ,QAASnQ,EAAAA,GAAI;;;;;;MAOboQ,aAAcpQ,EAAAA,GAAI;;MAGlBqQ,SAAUrQ,EAAAA,GAAI;kBACAD,EAAMpL,QAAQsb;MAE5BK,YAAatQ,EAAAA,GAAI;oBACDD,EAAMpL,QAAQsb;QAKlC,GAtKoB,KAAM,MACxB,MAAO/W,EAAaqX,IAAkBvB,EAAAA,EAAAA,MAE/BwB,EAAWC,IAAgBtT,EAAAA,EAAAA,UAAiBuT,KAAKC,MAAsB,IAAhBD,KAAKE,WAC7DC,EAAiB,cAAaL,IAC9BM,EAAkB,eAAcN,KAEhC,WAAE9R,EAAF,WAAcqS,EAAd,YAA0BC,EAA1B,SAAuCC,IAAaC,EAAAA,EAAAA,IAAwBhY,GAE5E4E,GAASqT,EAAAA,EAAAA,IAAUnT,IACnBoT,EAAeC,OAAOC,QAAQhK,GAAAA,IAAuBpN,KAAI,QAAEqX,EAAKnZ,GAAP,QAAmB,CAChFD,OAAOwX,EAAAA,EAAAA,IAAqBvX,GAC5BA,MAAAA,MAWIoZ,GAA0BC,EAAAA,GAAAA,WAAUC,IACxC,MAAMtG,EAASsG,EAAEtG,OACjBmF,EAAe,CAAES,YAAa5F,EAAOhT,OAAS,SAC7C,KAwBGuZ,EAAa,kBAAC/b,EAAA,EAAD,CAAMD,KAAM,YAC/B,OACE,iBAAKI,UAAW+H,EAAOkS,UAAvB,WACE,SAAC7N,GAAA,EAAD,CAAOpM,UAAW+H,EAAOoS,WAAY/X,MAAM,wBAA3C,UACE,SAACyZ,GAAA,EAAD,CAEEC,UAAQ,EACRC,WAAS,EACTvY,YAAY,mBACZwY,QAASrT,EACTlF,SA7CwBwY,IAC9BzB,EAAe,CAAE7R,WAAYsT,EAAgBrc,QA6CvCsc,QA1CgB,KACtB1B,EAAe,CAAE7R,WAAY,SAmClBmS,MAST,iBAAK9a,WAAWuP,EAAAA,EAAAA,IAAGxH,EAAOqS,QAASrS,EAAOsS,cAA1C,WACE,iBAAKra,UAAW+H,EAAOqS,QAAvB,WACE,SAAChO,GAAA,EAAD,CACEpM,UAAW+H,EAAOuS,SAClBlY,MAAK,SACH,SAAC+Z,GAAA,EAAD,WACE,UAAC,GAAAC,MAAD,CAAOC,IAAK,GAAZ,WACE,+CACA,SAACxS,EAAA,EAAD,CACEC,SACE,gFAEE,0BAAQ,wDAJd,UAQE,SAACjK,EAAA,EAAD,CAAMD,KAAK,cAAcE,KAAK,eAdxC,UAoBE,SAACwM,GAAAC,EAAD,CAEEvM,UAAW+H,EAAOoS,WAClBmC,OAAQV,EACRnY,SAAUgY,EACVc,aAActB,EACdzX,YAAY,SACZ,cAAY,sBANPuX,MAST,iBAAK/a,UAAW+H,EAAOuS,SAAvB,mBACE,SAAC6B,GAAA,EAAD,sBACA,SAACK,GAAA,EAAD,CAAkB1Y,QAASuX,EAAchZ,MAAO2Y,EAAYvX,SAtEtCpB,IAC9BmY,EAAe,CAAEQ,WAAY3Y,WAuEvB,iBAAKrC,UAAW+H,EAAOuS,SAAvB,mBACE,SAAC6B,GAAA,EAAD,0BACA,SAACK,GAAA,EAAD,CACE1Y,QAASiW,GACT1X,MAAO6Y,EACPzX,SArEkByX,IAC5BV,EAAe,CAAEU,SAAAA,WAuEX,iBAAKlb,UAAW+H,EAAOuS,SAAvB,mBACE,SAAC6B,GAAA,EAAD,wBACA,SAACK,GAAA,EAAD,CACE1Y,QAASgW,GACTzX,MAAOoM,OAAM,UAACtL,EAAW,YAAZ,QAAwB2W,GAAY,GAAGzX,OACpDoB,SAjFcgZ,IACxBjC,EAAe,CAAEiC,KAAAA,cAoFX9T,GAAcqS,GAAcC,GAAeC,KAC3C,gBAAKlb,UAAW+H,EAAOqS,QAAvB,UACE,SAAC/Z,EAAA,GAAD,CACEL,UAAW+H,EAAOwS,YAClBmC,WAAW,EACXnc,KAAK,QACLD,QAAQ,YACRG,QApFoB,KAC9B+Z,EAAe,CACbQ,WAAY,KACZC,YAAa,KACbtS,WAAY,KACZuS,SAAU,OAEZyB,YAAW,IAAMjC,EAAaD,EAAY,IAAI,MAwEtC,oC,2BCtJL,MAiBDmC,GAAoBC,GACjB,CAACC,EAAuCzS,KAC7C,MAAMkI,EAASlI,EAAUkI,OAAO9J,OAAOsU,GAAaF,GAAU,IAS9D,OAPItK,EAAOnJ,QACT0T,EAAa9T,KAAb,iBACKqB,EADL,CAEEkI,OAAAA,KAIGuK,GAKLC,GAAgBF,GACb,CAACG,EAA+B1S,KACrC,MAAM/F,EAAQ+F,EAAM/F,MAAMlD,QAAQtC,IAAS,MACzC,GAAI8d,EAAQ3B,UAAY2B,EAAQ3B,YAAR,UAAqBnc,EAAKkR,gBAA1B,aAAqB,EAAerD,MAC1D,OAAO,EAET,GAAIiQ,EAAQlU,aAAckL,EAAAA,EAAAA,IAAmB9U,EAAKmP,aAAe+O,GAAqBle,EAAKmP,UAAW2O,GACpG,OAAO,EAGT,GAAIA,EAAQ5B,YAAa,OACvB,MAAMiC,EAAwBL,EAAQ5B,YAAYkC,oBAC5CC,EAA2B,UAAGre,EAAKa,YAAR,aAAG,EAAWud,oBAAoBE,SAASH,GACtEI,GAAWC,EAAAA,GAAAA,IAAcV,EAAQ5B,aAEjCuC,GAAyBC,EAAAA,GAAAA,IAAoB1e,EAAK2e,OAAQJ,GAC1DK,EACJ5e,EAAKkR,UACLlR,EAAKkR,SAASrD,OAASoN,GAAAA,GAAAA,UACvBjb,EAAKkR,SAAS2N,QACd7e,EAAKkR,SAAS2N,OAAOrJ,MAAMsJ,IAAUJ,EAAAA,GAAAA,IAAoBI,EAAMH,OAAQJ,KAEzE,KAAMF,GAA+BI,GAA0BG,GAC7D,OAAO,EAGX,UACEd,EAAQ7B,YACNjc,EAAKkR,WAAYD,EAAAA,EAAAA,IAAejR,EAAKkR,WAAalR,EAAKkR,SAASzP,QAAUqc,EAAQ7B,eAaxF,OANIzW,EAAM6E,QACR4T,EAAShU,KAAT,iBACKsB,EADL,CAEE/F,MAAAA,KAGGyY,GAILC,GAAuB,CAAC/O,EAAgC7M,KACvDA,EAAOsH,cAIHuF,EAAU4F,cAAchP,KAAKqP,MAAM2J,IAC1C,IAAKA,EAAMC,cACT,OAAO,EAET,MAAMtG,GAAKuG,EAAAA,GAAAA,KAAmBC,oBAAoBH,EAAMC,eACxD,OAAOtG,MAAAA,OAAA,EAAAA,EAAI7X,QAASyB,EAAOsH,c,yBCxE/B,MAAMuV,GAAQ,CACZ3L,OCX0C,IAA+B,IAA9B,WAAEN,EAAF,UAAca,GAAgB,EACzE,MAAOqL,EAAmBC,IAAmBjW,EAAAA,EAAAA,UAAQ,KACnD,MAAMkW,EAASpM,EACZ9N,KAAKkG,GAAD,iBACAA,EADA,CAEHkI,OAAQlI,EAAUkI,OAAO3M,MAAK,CAAC0Y,EAAGC,IAAMD,EAAE1e,KAAK4e,cAAcD,EAAE3e,YAEhEgG,MAAK,CAAC0Y,EAAGC,IAAMD,EAAE1e,KAAK4e,cAAcD,EAAE3e,QACzC,MAAO,CACLye,EAAOhd,QAAQ6V,IAAOuH,EAAAA,EAAAA,IAAqBvH,EAAGtL,eAC9CyS,EAAOhd,QAAQ6V,IAAO1G,EAAAA,EAAAA,IAAmB0G,EAAGtL,kBAE7C,CAACqG,IAMJ,OAJA/G,EAAAA,EAAAA,YAAU,MACRkL,EAAAA,EAAAA,IAAQC,EAAAA,EAAAA,cACP,KAGD,iCACE,SAACqI,EAAA,EAAD,CAAWC,QAAS,CAACC,EAAAA,GAAAA,kBAArB,UACE,SAAC5F,GAAD,CAAc/G,WAAYkM,EAAmBrL,UAAWA,OAE1D,SAAC4L,EAAA,EAAD,CAAWC,QAAS,CAACC,EAAAA,GAAAA,0BAArB,UACE,SAACxH,GAAD,CAAYnF,WAAYmM,EAAiBtL,UAAWA,UDZ1DtS,MEZ0C,IAAoB,IAAnB,WAAEyR,GAAiB,EAC9D,MAAM4K,GAAU1B,EAAAA,EAAAA,KAAwBlC,EAAAA,EAAAA,KAAiB,IAEnD4F,GAAe1W,EAAAA,EAAAA,UAAQ,KAC3B,MAAMO,EAAuB,CAC3B,CAAC6I,GAAAA,GAAAA,QAA+B,GAChC,CAACA,GAAAA,GAAAA,UAAiC,GAClC,CAACA,GAAAA,GAAAA,SAAgC,IAenC,OAZAU,EAAWhJ,SAASoB,GAClBA,EAAUkI,OAAOtJ,SAASqB,GACxBA,EAAM/F,MAAM0E,SAASlK,IACfA,EAAKkR,WAAYD,EAAAA,EAAAA,IAAejR,EAAKkR,WACvCvH,EAAO3J,EAAKkR,SAASzP,OAAOwI,KAAKjK,UAMzCuc,OAAO9P,OAAO9C,GAAQO,SAAS1E,GAAUA,EAAMqB,MAAK,CAAC0Y,EAAGC,IAAMD,EAAE1e,KAAK4e,cAAcD,EAAE3e,UAE9E8I,IACN,CAACuJ,IACJ,OACE,kCACK4K,EAAQ7B,YAAc6B,EAAQ7B,aAAezJ,GAAAA,GAAAA,UAC9C,SAACiI,GAAD,CAAsBhZ,MAAO+Q,GAAAA,GAAAA,OAA8BhN,MAAOsa,EAAatN,GAAAA,GAAAA,YAE9EsL,EAAQ7B,YAAc6B,EAAQ7B,aAAezJ,GAAAA,GAAAA,WAC9C,SAACiI,GAAD,CACEhZ,MAAO+Q,GAAAA,GAAAA,QACPhN,MAAOsa,EAAatN,GAAAA,GAAAA,aAGrBsL,EAAQ7B,YAAc6B,EAAQ7B,aAAezJ,GAAAA,GAAAA,YAC9C,SAACiI,GAAD,CACEC,iBAAkBoD,EAAQ7B,aAAezJ,GAAAA,GAAAA,SACzC/Q,MAAO+Q,GAAAA,GAAAA,SACPhN,MAAOsa,EAAatN,GAAAA,GAAAA,iBFxBxBuN,IAAWC,EAAAA,EAAAA,KACf,KACE,MAAM1a,GAAWmG,EAAAA,EAAAA,MACXzC,GAASC,EAAAA,EAAAA,IAAWC,IACpB+W,GAAuB7W,EAAAA,EAAAA,SAAQ8W,EAAAA,GAAwB,IACvDC,GAAWC,EAAAA,EAAAA,OACVrM,EAAWsM,IAAgBhY,EAAAA,EAAAA,WAAS,IAEpCjE,IAAe8V,EAAAA,EAAAA,KAChB4D,GAAU1B,EAAAA,EAAAA,IAAwBhY,GAClCkc,EAAgB/D,OAAO9P,OAAOqR,GAAStI,MAAMlT,QAAsB0K,IAAX1K,KAExD,sBAAE8E,EAAF,oBAAyBC,IAAwBC,EAAAA,EAAAA,KAEjDoW,EAAOyB,GAAM/a,EAAW,MACzBA,EAAW,KACZ,SAEEmc,EAAgBpB,GAAMzB,GAEtB9U,GAAmBF,EAAAA,EAAAA,IAA4BjH,GAAUA,EAAMoH,YAC/DC,GAAoBJ,EAAAA,EAAAA,IAA4BjH,GAAUA,EAAMsH,aAEhE2C,EAAUuU,EAAqBzK,MAClC3U,IAAD,eAAU,UAAA+H,EAAiB/H,UAAjB,eAAwB6K,WAAxB,UAAmC5C,EAAkBjI,UAArD,aAAmC,EAAyB6K,YAGlE8U,EAAejE,OAAOC,QAAQ5T,GAC9B6X,EAAgBD,EAAaE,OACjC,QAAEC,EAAGlf,GAAL,SAAgBA,EAAMkK,kBAAiCqB,KAAlBvL,MAAAA,OAAA,EAAAA,EAAOkI,cAAyCqD,KAAjBvL,MAAAA,OAAA,EAAAA,EAAOyE,WAEvE0a,EAAeJ,EAAaE,OAAM,cAAEC,EAAGlf,GAAL,SAAgBA,EAAMkK,YAAwC,KAA1BlK,MAAAA,GAAA,UAAAA,EAAOkI,cAAP,eAAeU,YAGpFsW,EAAG1c,IAAc4c,EAAAA,EAAAA,IAAWxb,UAC5BqG,SACGpG,GAASwb,EAAAA,EAAAA,SAEhB,CAACpV,KAGJS,EAAAA,EAAAA,YAAU,KACR7G,GAASwb,EAAAA,EAAAA,SACR,CAACxb,KACJyb,EAAAA,EAAAA,GAAY9c,EAAY+c,GAAAA,IAGxB,MAAMC,EAA4BR,GAAiBG,GAAgBJ,EAAanW,OAAS,EAGnF6W,EDvEuBhO,CAAAA,IAC/B,MAAO9O,IAAe8V,EAAAA,EAAAA,KAChB4D,GAAU1B,EAAAA,EAAAA,IAAwBhY,GAExC,OAAOgF,EAAAA,EAAAA,UAAQ,IACc8J,EAGxB5Q,QAAO,QAAC,YAAEuK,GAAH,SACNiR,EAAQlU,cAAc6H,EAAAA,EAAAA,IAAmB5E,IAAeA,EAAYhM,OAASid,EAAQlU,cAGtFF,OAAOmU,GAAiBC,GAAU,KAEpC,CAAC5K,EAAY4K,KCyDaqD,EADyBC,EAAAA,GAAAA,OAEpD,OAGE,UAACC,EAAA,EAAD,CAAqBC,OAAO,aAAape,WAAW,EAApD,mBACE,SAACgF,EAAD,KADF,SAEE,SAAC,GAAD,MACE+Y,IACA,iCACE,gBAAKhgB,UAAW+H,EAAOuY,SACvB,iBAAKtgB,UAAW+H,EAAOwY,iBAAvB,WACE,iBAAKvgB,UAAW+H,EAAOyY,eAAvB,UACY,WAAT/D,GAAqB4C,IACpB,SAAChf,EAAA,GAAD,CACEL,UAAW+H,EAAO0Y,gBAClBlgB,KAAMuS,EAAY,kBAAoB,oBACtCxS,QAAQ,YACRG,QAAS,IAAM2e,GAActM,GAJ/B,SAMGA,EAAY,eAAiB,gBAGlC,SAAChB,GAAD,CAAWC,cAAc,EAAMC,eAAe,EAAMC,WAAYgO,QAEhE9Z,GAAyBC,KACzB,SAAC,KAAD,CACE1F,KAAMggB,EAAAA,GAAAA,UAAkB,eAAgB,CAAEC,SAAUzB,EAAS0B,SAAW1B,EAASlgB,SACjFuB,KAAK,OAFP,kCAUPyf,IAAyB,SAAI,SAAC9Z,EAAD,OAC5B8Z,IAA6B,SAACV,EAAD,CAAexM,UAAWA,EAAWb,WAAYgO,SAItF,CAAEY,MAAO,SAGL5Y,GAAa+B,IAAD,CAChBsW,MAAOrW,EAAAA,GAAI;;;qBAGQD,EAAMpL,QAAQ;+BACJoL,EAAM6G,OAAOI,OAAOC;IAEjDqP,iBAAkBtW,EAAAA,GAAI;qBACHD,EAAMpL,QAAQ;;;IAIjC4hB,eAAgBvW,EAAAA,GAAI;;;;IAKpBwW,gBAAiBxW,EAAAA,GAAI;oBACHD,EAAMpL,QAAQ;MAIlC,O,oEGzIO,MAAMwhB,EAAiC,IAA8C,IAA7C,SAAE/O,EAAF,OAAYgP,EAAZ,QAAoBS,EAApB,UAA6B7e,GAAgB,EAC1F,OACE,SAAC,IAAD,CAAM6e,QAASA,EAASC,MAAOV,EAA/B,UACE,SAAC,aAAD,CAAepe,UAAWA,EAA1B,SAAsCoP,Q,oECJrC,MAAMqN,EAAuB,IAA4C,IAA3C,QAAEC,EAAF,SAAWtN,EAAX,SAAqB2P,GAAW,GAAW,EAC9E,OAAIrC,EAAQpK,MAAM0M,GAAWC,EAAAA,GAAAA,UAAqBD,EAAQD,MACjD,8BAAG3P,IAEH,O,4HCHJ,MAAM8P,EAA6B,IAGA,IAHmB,sBAC3DC,GAEwC,EADrCxe,E,oIACqC,MACxC,MAAMmF,GAASC,EAAAA,EAAAA,IAAWC,GAC1B,OACE,SAAC,IAAD,eACEmZ,sBACEA,EACI,CAAC9f,EAAMiM,EAAOnM,KACZ,kCACKmM,IAAUnM,EAAMgI,OAAS,KAAM,gBAAKpJ,WAAWuP,EAAAA,EAAAA,IAAGxH,EAAOsZ,iBAAkBtZ,EAAOuZ,aACpFF,EAAsB9f,EAAMiM,EAAOnM,WAGxC2K,EAENwV,mBAAoB,KAClB,gBAAKvhB,UAAW+H,EAAOyZ,SAAvB,UACE,gBAAKxhB,WAAWuP,EAAAA,EAAAA,IAAGxH,EAAO0Z,gBAAiB1Z,EAAOuZ,eAGtDI,iBAAkB,CAAChC,EAAGnS,EAAOnM,KAC3B,iBAAKpB,UAAW+H,EAAOyZ,SAAvB,WACE,gBAAKxhB,WAAWuP,EAAAA,EAAAA,IAAGxH,EAAO4Z,aAAc5Z,EAAOuZ,eAC5C/T,IAAUnM,EAAMgI,OAAS,KAAM,gBAAKpJ,WAAWuP,EAAAA,EAAAA,IAAGxH,EAAO6Z,gBAAiB7Z,EAAOuZ,iBAGpF1e,KAKGqF,EAAa+B,IAAD,CACvBwX,SAAUvX,EAAAA,GAAI;;;IAIdqX,UAAWrX,EAAAA,GAAI;;6BAEYD,EAAM6G,OAAOI,OAAOC;;;MAG3ClH,EAAM6M,YAAYC,KAAK;;;IAI3B6K,aAAc1X,EAAAA,GAAI;;+BAEWD,EAAM6G,OAAOI,OAAOC;;;IAIjD0Q,gBAAiB3X,EAAAA,GAAI;;;IAIrBoX,iBAAkBpX,EAAAA,GAAI;;;;IAKtBwX,gBAAiBxX,EAAAA,GAAI;;;6EChEvB,MAAMsL,EAAsC,IAA0B,IAAzB,UAAElL,EAAF,MAAaC,GAAY,EACpE,OAAKA,GAKH,gCACGD,EADH,WACc,SAAC,IAAD,CAAMzK,KAAK,iBADzB,IAC2C0K,MALpC,8BAAGD,M,+JCKP,MAAM2K,EAAwB,IAS/B,IATgC,QACpCE,EADoC,KAEpC3U,EAFoC,GAGpC6U,EAHoC,OAIpCC,EAJoC,QAKpC5U,EALoC,UAMpCT,EANoC,iBAOpC6hB,EAAmB,OAEf,EADDC,E,oIACC,MACJ,MAAMC,EAA+B,iBAAZ7M,EAAuBA,OAAUnJ,EAE1D,OACE,SAAC,IAAD,CAASjC,QAASoL,EAASnL,UAAW8X,EAAtC,SACGzM,GACC,SAAC,KAAD,eACE9U,QAAQ,YACRoJ,KAAK,OACLnJ,KAAMA,EACNG,KAAM0U,EACNtV,KAAK,KACLuV,OAAQA,GACJyM,EAPN,CAQE,aAAYC,MAGd,SAAC,KAAD,eACE/hB,UAAWA,EACXM,QAAQ,YACRoJ,KAAK,OACL5J,KAAK,KACLS,KAAMA,EACNqM,KAAK,SACLnM,QAASA,GACLqhB,EARN,CASE,aAAYC,S,6NCrCf,SAASC,EAAT,GAA2D,IAAjC,KAAEjjB,GAA+B,EAChE,MAAMgJ,GAASC,EAAAA,EAAAA,IAAWC,IAEpB,aAAE0E,IAAiBxE,EAAAA,EAAAA,UACvB,KAAMuE,EAAAA,EAAAA,GAAmC3N,EAAKuL,MAAMW,WACpD,CAAClM,EAAKuL,MAAMW,WAGd,OAAK0B,GAKH,SAAC9C,EAAA,EAAD,CACEG,MAAM,QACNF,SACE,8DACmC,KACjC,iBAAM9J,UAAW+H,EAAOka,iBAAxB,SAA2Che,EAAAA,EAAAA,gBAAAA,cAF7C,mEAG2ClF,EAAKuL,MAAMW,SAHtD,8CAHJ,UAUE,SAACpL,EAAA,EAAD,CAAMD,KAAK,kBAAkBI,UAAW+H,EAAOxH,SAd1C,KAmBX,SAAS0H,EAAU+B,GACjB,MAAO,CACLiY,iBAAkBhY,EAAAA,GAAI;qBACLD,EAAME,WAAWC;MAElC5J,KAAM0J,EAAAA,GAAI;cACAD,EAAM6G,OAAOY,QAAQlS;wFCxBnC,MAEa2iB,EAAyB,IAAc,IAAb,KAAEnjB,GAAW,EAClD,MAAMgJ,GAASC,EAAAA,EAAAA,IAAWC,IAExBoC,WAAW,YAAEuB,IACX7M,EAEEojB,EAAc7G,OAAOC,QAAQxc,EAAKojB,aAAa9gB,QAAO,QAAEqe,EAAGrd,GAAL,UAAkBA,EAAM+f,UAEpF,OACE,4BACE,SAACC,EAAA,EAAD,CAA0BtjB,KAAMA,EAAM6M,YAAaA,KACnD,iBAAK5L,UAAW+H,EAAOyN,QAAvB,WACE,iBAAKxV,UAAW+H,EAAOua,SAAvB,WACG,SAACC,EAAD,CAA2BxjB,KAAMA,MAC/BA,EAAK2e,UAAYpC,OAAOkH,KAAKzjB,EAAK2e,QAAQtU,SAC3C,SAACqZ,EAAA,EAAD,CAAcrgB,MAAM,SAASsgB,YAAY,EAAzC,UACE,SAACC,EAAA,EAAD,CAAajF,OAAQ3e,EAAK2e,YAG9B,SAACkF,EAAA,EAAD,CAAuBhX,YAAaA,EAAa7M,KAAMA,EAAMojB,YAAaA,KAC1E,SAACU,EAAA,EAAD,CAAwBV,YAAaA,QAEvC,gBAAKniB,UAAW+H,EAAO+a,UAAvB,UACE,SAACC,EAAA,EAAD,CAAwBnX,YAAaA,EAAa7M,KAAMA,UAG5D,SAACikB,EAAA,EAAD,CAA8BjkB,KAAMA,EAAMkkB,kBA5BhB,SAqC1BV,EAA4B,IAA8C,IAC1EW,GAD6B,KAAEnkB,GAA2C,EAE1E0gB,EAAQ1gB,EAAKuL,MAAMW,SAGoB,OAAtCqH,EAAAA,EAAAA,IAAqBvT,EAAKmP,aAC7BgV,EAAW,UAAGnkB,EAAKmP,iBAAR,aAAG,EAAgBiV,KAGhC,OACE,gCACG1D,IACC,UAACgD,EAAA,EAAD,CAAcrgB,MAAM,WAAWsgB,YAAY,EAA3C,mBACSjD,KAGVyD,IACC,SAACT,EAAA,EAAD,CAAcrgB,MAAM,MAAMsgB,YAAY,EAAtC,SACGQ,QAOEjb,EAAa+B,IAAD,CACvBwL,QAASvL,EAAAA,GAAI;;;;MAITD,EAAM6M,YAAYC,KAAK;;;IAI3BwL,SAAUrY,EAAAA,GAAI;;IAGd6Y,UAAW7Y,EAAAA,GAAI;MACXD,EAAM6M,YAAYuM,GAAG;;;;kCCjEpB,MAAMpN,EAAwB,IAO/B,IAPgC,MACpCzR,EADoC,UAEpCvE,EAFoC,eAGpCmW,GAAiB,EAHmB,aAIpCkN,EAAe,kBAJqB,gBAKpCxJ,GAAkB,EALkB,kBAMpC5D,GAAoB,GAChB,EACJ,MAAMlO,GAASC,EAAAA,EAAAA,IAAWC,GAEpBqb,GAAe/T,EAAAA,EAAAA,IAAGxH,EAAOyN,QAASxV,EAAW,CAAE,CAAC+H,EAAOwb,eAAgBpN,IAEvE/U,GAAQ+G,EAAAA,EAAAA,UAAQ,IACb5D,EAAMJ,KAAI,CAACpF,EAAMykB,KACf,CACL3gB,GAAK,GAAE9D,EAAKsL,UAAUzK,QAAQb,EAAKuL,MAAM1K,QAAQb,EAAKa,QAAQ4jB,IAC9D1e,KAAM/F,OAGT,CAACwF,IAEEkf,EAAUC,EAAWzN,EAAmB4D,GAE9C,IAAKtV,EAAM6E,OACT,OAAO,gBAAKpJ,WAAWuP,EAAAA,EAAAA,IAAG+T,EAAcvb,EAAOsb,cAAxC,SAAwDA,IAGjE,MAAMM,EAAiBxN,EAAiBgL,EAAAA,EAA6ByC,EAAAA,EAErE,OACE,gBAAK5jB,UAAWsjB,EAAc,cAAY,cAA1C,UACE,SAACK,EAAD,CACEE,KAAMJ,EACNK,cAAc,EACd1iB,MAAOA,EACPggB,sBAAuB,QAAGtc,KAAM/F,GAAT,SAAoB,SAACmjB,EAAD,CAAanjB,KAAMA,KAC9D4Z,WAAY,CAAEoL,aAAc3L,EAAAA,IAC5B4L,iBAAkBjc,EAAO4Q,gBAMpB1Q,EAAa+B,IAAD,CACvBuZ,cAAetZ,EAAAA,GAAI;MACfD,EAAM6M,YAAYuM,GAAG;;;IAIzBC,aAAcpZ,EAAAA,GAAI;eACLD,EAAMpL,QAAQ;IAE3B4W,QAASvL,EAAAA,GAAI;;qBAEMD,EAAMia,MAAMC;IAE/BvL,WAAY1O,EAAAA,GAAI;;;mBAGCD,EAAMpL,QAAQ;sBACXoL,EAAMpL,QAAQ;;6BAEPoL,EAAM6G,OAAOI,OAAOkT;8BACnBna,EAAM6G,OAAOI,OAAOkT;+BACnBna,EAAM6G,OAAOI,OAAOkT;MAInD,SAAST,EAAWzN,EAA4B4D,GAC9C,MAAM,SAAEpG,EAAF,iBAAYC,IAAqBC,EAAAA,EAAAA,KAEvC,OAAOxL,EAAAA,EAAAA,UAAQ,KACb,MAAMsb,EAAkC,CACtC,CACE5gB,GAAI,QACJT,MAAO,QAEPgiB,WAAY,IAAoB,IAAjBtf,KAAM/F,GAAW,EAC9B,MAAM,UAAEsL,GAActL,GAChB,YAAE6M,GAAgBvB,GAClB,SAAE4F,EAAF,UAAY/B,GAAcnP,EAC1BmV,MAAgBT,EAAS7H,IAAgB8H,EAAiB9H,IAAgBqE,IAAa/B,GACvFmW,MAAgB5Q,EAAS7H,IAAgB8H,EAAiB9H,IAAgBsC,IAAc+B,GAC9F,OAAO,SAACqU,EAAA,EAAD,CAAWvlB,KAAMA,EAAMmV,WAAYA,EAAYmQ,WAAYA,KAEpEvkB,KAAM,SAER,CACE+C,GAAI,OACJT,MAAO,OAEPgiB,WAAY,QAAGtf,KAAM/F,GAAT,SAAoBA,EAAKa,MACrCE,KAAM,GAER,CACE+C,GAAI,cACJT,MAAO,GAEPgiB,WAAY,IAAoB,IAAjBtf,KAAM/F,GAAW,EAC9B,MAAMmP,EAAYnP,EAAKmP,UAGvB,KAF6B2F,EAAAA,EAAAA,IAAmB3F,GAG9C,OAAO,KAIT,OADmBA,EAAU4F,cAAcU,WACvB,IAAH,GAAG,SAAC+P,EAAA,GAAD,KAAwB,MAE9CzkB,KAAM,SAER,CACE+C,GAAI,WACJT,MAAO,GACPgiB,WAAY,QAAGtf,KAAM0f,GAAT,SAA4B,SAACxC,EAAD,CAAkBjjB,KAAMylB,KAChE1kB,KAAM,QAER,CACE+C,GAAI,SACJT,MAAO,SAEPgiB,WAAY,QAAGtf,MAAM,SAAEmL,EAAF,MAAY3F,IAArB,SAAoC2F,GAAW,SAACwU,EAAA,EAAD,CAAY1lB,KAAMkR,IAAe,MAC5FnQ,KAAM,SAkCV,OA/BImW,GACFwN,EAAQza,KAAK,CACXnG,GAAI,UACJT,MAAO,UAEPgiB,WAAY,IAAoB,UAAjBtf,KAAM/F,GAAW,EAC9B,OAAO,SAAC2lB,EAAA,EAAD,CAAUC,MAAK,UAAE5lB,EAAKojB,YAAYyC,EAAAA,GAAAA,gBAAnB,QAA0C,MAElE9kB,KAAM,IAGN+Z,GACF4J,EAAQza,KAAK,CACXnG,GAAI,QACJT,MAAO,QAEPgiB,WAAY,IAAoB,IAAjBtf,KAAM/F,GAAW,EAC9B,MAAM,UAAEsL,EAAF,MAAaC,GAAUvL,EAS7B,MAPmC,YAAfuL,EAAM1K,MAExB,SAAC2V,EAAA,EAAD,CAAclL,UAAWA,EAAUzK,QAEnC,SAAC2V,EAAA,EAAD,CAAclL,UAAWA,EAAUzK,KAAM0K,MAAOA,EAAM1K,QAK1DE,KAAM,IAGH2jB,IACN,CAAChQ,EAAUC,EAAkBuC,EAAmB4D,M,sECtL9C,SAASlG,IACd,MAAM7L,GAAaL,EAAAA,EAAAA,IAA4BjH,GAAUA,EAAMsH,aAoB/D,MAAO,CAAE2L,UAlBQnU,EAAAA,EAAAA,cACdsM,IAAsC,MACrC,MAAMF,EAAyC,iBAAhBE,EAA2BA,EAAcA,EAAYhM,KACpF,OAAO8L,IAAoB5C,EAAAA,MAA8B,UAAChB,EAAW4D,UAAZ,QAAC,EAA6BhD,UAEzF,CAACZ,IAagB4L,kBAVMpU,EAAAA,EAAAA,cACtBsM,IAA6B,MAC5B,MAAMF,GAAkBC,EAAAA,EAAAA,IAAmBC,GACrClD,EAAM,UAAGZ,EAAW4D,UAAd,aAAG,EAA6BhD,OAE5C,OAAOmc,QAAQnc,KAEjB,CAACZ,O,gDCbL,QAbkB,SAAUgd,EAAUC,GAClC,IAAIC,GAAgB,IAAAC,SAAO,gBAC3B,IAAA/Z,YAAU,WACN8Z,EAAchJ,QAAU8I,MAE5B,IAAA5Z,YAAU,WACN,GAAc,OAAV6Z,EAAgB,CAChB,IAAIG,EAAaC,aAAY,WAAc,OAAOH,EAAchJ,YAAc+I,GAAS,GACvF,OAAO,WAAc,OAAOK,cAAcF,OAG/C,CAACH","sources":["webpack://grafana/./public/app/features/alerting/AlertHowToModal.tsx","webpack://grafana/./public/app/features/alerting/AlertRuleItem.tsx","webpack://grafana/./public/app/features/alerting/components/DeprecationNotice.tsx","webpack://grafana/./public/app/features/alerting/state/selectors.ts","webpack://grafana/./public/app/features/alerting/AlertRuleList.tsx","webpack://grafana/./public/app/features/alerting/state/actions.ts","webpack://grafana/./public/app/features/alerting/unified/components/rules/NoRulesCTA.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleListErrors.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/EditRuleGroupModal.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/ReorderRuleGroupModal.tsx","webpack://grafana/./public/app/features/alerting/unified/components/StateColoredText.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleStats.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RulesGroup.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/useCombinedGroupNamespace.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/CloudRules.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/GrafanaRules.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleListStateSection.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RulesFilter.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useFilteredRules.ts","webpack://grafana/./public/app/features/alerting/unified/RuleList.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleListGroupView.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleListStateView.tsx","webpack://grafana/./public/app/features/alerting/unified/components/AlertingPageWrapper.tsx","webpack://grafana/./public/app/features/alerting/unified/components/Authorize.tsx","webpack://grafana/./public/app/features/alerting/unified/components/DynamicTableWithGuidelines.tsx","webpack://grafana/./public/app/features/alerting/unified/components/RuleLocation.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/ActionIcon.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleConfigStatus.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleDetails.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RulesTable.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useHasRuler.ts","webpack://grafana/./.yarn/__virtual__/react-use-virtual-0c21d950b6/3/opt/drone/yarncache/react-use-npm-17.4.0-0ef4521544-0889da919b.zip/node_modules/react-use/esm/useInterval.js"],"sourcesContent":["import React from 'react';\n\nimport { Modal, VerticalGroup } from '@grafana/ui';\n\nexport interface AlertHowToModalProps {\n  onDismiss: () => void;\n}\n\nexport function AlertHowToModal({ onDismiss }: AlertHowToModalProps): JSX.Element {\n  return (\n    <Modal title=\"Adding an Alert\" isOpen onDismiss={onDismiss} onClickBackdrop={onDismiss}>\n      <VerticalGroup spacing=\"sm\">\n        <img src=\"public/img/alert_howto_new.png\" alt=\"link to how to alert image\" />\n        <p>\n          Alerts are added and configured in the Alert tab of any dashboard graph panel, letting you build and visualize\n          an alert using existing queries.\n        </p>\n        <p>Remember to save the dashboard to persist your alert rule changes.</p>\n      </VerticalGroup>\n    </Modal>\n  );\n}\n","import React, { useCallback } from 'react';\nimport Highlighter from 'react-highlight-words';\n\nimport { Icon, Button, LinkButton, Card } from '@grafana/ui';\n\nimport { AlertRule } from '../../types';\n\nexport interface Props {\n  rule: AlertRule;\n  search: string;\n  onTogglePause: () => void;\n}\n\nconst AlertRuleItem = ({ rule, search, onTogglePause }: Props) => {\n  const ruleUrl = `${rule.url}?editPanel=${rule.panelId}&tab=alert`;\n  const renderText = useCallback(\n    (text) => (\n      <Highlighter\n        key={text}\n        highlightClassName=\"highlight-search-match\"\n        textToHighlight={text}\n        searchWords={[search]}\n      />\n    ),\n    [search]\n  );\n\n  return (\n    <Card>\n      <Card.Heading>{renderText(rule.name)}</Card.Heading>\n      <Card.Figure>\n        <Icon size=\"xl\" name={rule.stateIcon} className={`alert-rule-item__icon ${rule.stateClass}`} />\n      </Card.Figure>\n      <Card.Meta>\n        <span key=\"state\">\n          <span key=\"text\" className={`${rule.stateClass}`}>\n            {renderText(rule.stateText)}{' '}\n          </span>\n          for {rule.stateAge}\n        </span>\n        {rule.info ? renderText(rule.info) : null}\n      </Card.Meta>\n      <Card.Actions>\n        <Button\n          key=\"play\"\n          variant=\"secondary\"\n          icon={rule.state === 'paused' ? 'play' : 'pause'}\n          onClick={onTogglePause}\n        >\n          {rule.state === 'paused' ? 'Resume' : 'Pause'}\n        </Button>\n        <LinkButton key=\"edit\" variant=\"secondary\" href={ruleUrl} icon=\"cog\">\n          Edit alert\n        </LinkButton>\n      </Card.Actions>\n    </Card>\n  );\n};\n\nexport default AlertRuleItem;\n","import React, { FC } from 'react';\n\nimport { Alert } from '@grafana/ui';\n\nexport const LOCAL_STORAGE_KEY = 'grafana.legacyalerting.unifiedalertingpromo';\n\nconst DeprecationNotice: FC<{}> = () => (\n  <Alert severity=\"warning\" title=\"Grafana legacy alerting is going away soon\">\n    <p>\n      You are using Grafana legacy alerting, it has been deprecated and will be removed in the next major version of\n      Grafana.\n      <br />\n      We encourage you to upgrade to the new Grafana Alerting experience.\n    </p>\n    <p>\n      See{' '}\n      <a href=\"https://grafana.com/docs/grafana/latest/alerting/unified-alerting/difference-old-new/\">\n        What’s New with Grafana Alerting\n      </a>{' '}\n      to learn more about what&lsquo;s new or learn{' '}\n      <a href=\"https://grafana.com/docs/grafana/latest/alerting/unified-alerting/opt-in/\">\n        how to enable the new Grafana Alerting feature\n      </a>\n      .\n    </p>\n  </Alert>\n);\n\nexport { DeprecationNotice };\n","import { AlertRule, AlertRulesState, NotificationChannelState, StoreState } from 'app/types';\n\nexport const getSearchQuery = (state: AlertRulesState) => state.searchQuery;\n\nexport const getAlertRuleItems = (state: StoreState): AlertRule[] => {\n  const regex = new RegExp(state.alertRules.searchQuery, 'i');\n\n  return state.alertRules.items.filter((item) => {\n    return regex.test(item.name) || regex.test(item.stateText) || regex.test(item.info!);\n  });\n};\n\nexport const getNotificationChannel = (state: NotificationChannelState, channelId: number) => {\n  if (state.notificationChannel.id === channelId) {\n    return state.notificationChannel;\n  }\n\n  return null;\n};\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { SelectableValue } from '@grafana/data';\nimport { config, locationService } from '@grafana/runtime';\nimport { Button, FilterInput, LinkButton, Select, VerticalGroup } from '@grafana/ui';\nimport appEvents from 'app/core/app_events';\nimport { Page } from 'app/core/components/Page/Page';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { AlertRule, StoreState } from 'app/types';\n\nimport { ShowModalReactEvent } from '../../types/events';\n\nimport { AlertHowToModal } from './AlertHowToModal';\nimport AlertRuleItem from './AlertRuleItem';\nimport { DeprecationNotice } from './components/DeprecationNotice';\nimport { getAlertRulesAsync, togglePauseAlertRule } from './state/actions';\nimport { setSearchQuery } from './state/reducers';\nimport { getAlertRuleItems, getSearchQuery } from './state/selectors';\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(state.navIndex, 'alert-list'),\n    alertRules: getAlertRuleItems(state),\n    search: getSearchQuery(state.alertRules),\n    isLoading: state.alertRules.isLoading,\n  };\n}\n\nconst mapDispatchToProps = {\n  getAlertRulesAsync,\n  setSearchQuery,\n  togglePauseAlertRule,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ninterface OwnProps extends GrafanaRouteComponentProps<{}, { state: string }> {}\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport class AlertRuleListUnconnected extends PureComponent<Props> {\n  stateFilters = [\n    { label: 'All', value: 'all' },\n    { label: 'OK', value: 'ok' },\n    { label: 'Not OK', value: 'not_ok' },\n    { label: 'Alerting', value: 'alerting' },\n    { label: 'No data', value: 'no_data' },\n    { label: 'Paused', value: 'paused' },\n    { label: 'Pending', value: 'pending' },\n  ];\n\n  componentDidMount() {\n    this.fetchRules();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.queryParams.state !== this.props.queryParams.state) {\n      this.fetchRules();\n    }\n  }\n\n  async fetchRules() {\n    await this.props.getAlertRulesAsync({ state: this.getStateFilter() });\n  }\n\n  getStateFilter(): string {\n    return this.props.queryParams.state ?? 'all';\n  }\n\n  onStateFilterChanged = (option: SelectableValue) => {\n    locationService.partial({ state: option.value });\n  };\n\n  onOpenHowTo = () => {\n    appEvents.publish(new ShowModalReactEvent({ component: AlertHowToModal }));\n  };\n\n  onSearchQueryChange = (value: string) => {\n    this.props.setSearchQuery(value);\n  };\n\n  onTogglePause = (rule: AlertRule) => {\n    this.props.togglePauseAlertRule(rule.id, { paused: rule.state !== 'paused' });\n  };\n\n  alertStateFilterOption = ({ text, value }: { text: string; value: string }) => {\n    return (\n      <option key={value} value={value}>\n        {text}\n      </option>\n    );\n  };\n\n  render() {\n    const { navModel, alertRules, search, isLoading } = this.props;\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={isLoading}>\n          <div className=\"page-action-bar\">\n            <div className=\"gf-form gf-form--grow\">\n              <FilterInput placeholder=\"Search alerts\" value={search} onChange={this.onSearchQueryChange} />\n            </div>\n            <div className=\"gf-form\">\n              <label className=\"gf-form-label\" htmlFor=\"alert-state-filter\">\n                States\n              </label>\n\n              <div className=\"width-13\">\n                <Select\n                  inputId={'alert-state-filter'}\n                  options={this.stateFilters}\n                  onChange={this.onStateFilterChanged}\n                  value={this.getStateFilter()}\n                />\n              </div>\n            </div>\n            <div className=\"page-action-bar__spacer\" />\n            {config.unifiedAlertingEnabled && (\n              <LinkButton variant=\"primary\" href=\"alerting/ng/new\">\n                Add NG Alert\n              </LinkButton>\n            )}\n            <Button variant=\"secondary\" onClick={this.onOpenHowTo}>\n              How to add an alert\n            </Button>\n          </div>\n          <DeprecationNotice />\n          <VerticalGroup spacing=\"none\">\n            {alertRules.map((rule) => {\n              return (\n                <AlertRuleItem\n                  rule={rule as AlertRule}\n                  key={rule.id}\n                  search={search}\n                  onTogglePause={() => this.onTogglePause(rule as AlertRule)}\n                />\n              );\n            })}\n          </VerticalGroup>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nexport default connector(AlertRuleListUnconnected);\n","import { getBackendSrv, isFetchError, locationService } from '@grafana/runtime';\nimport { notifyApp } from 'app/core/actions';\nimport { createErrorNotification, createSuccessNotification } from 'app/core/copy/appNotification';\nimport { AlertRuleDTO, NotifierDTO, ThunkResult } from 'app/types';\n\nimport { loadAlertRules, loadedAlertRules, notificationChannelLoaded, setNotificationChannels } from './reducers';\n\nexport function getAlertRulesAsync(options: { state: string }): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(loadAlertRules());\n    const rules: AlertRuleDTO[] = await getBackendSrv().get('/api/alerts', options);\n    dispatch(loadedAlertRules(rules));\n  };\n}\n\nexport function togglePauseAlertRule(id: number, options: { paused: boolean }): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().post(`/api/alerts/${id}/pause`, options);\n    const stateFilter = locationService.getSearchObject().state || 'all';\n    dispatch(getAlertRulesAsync({ state: stateFilter.toString() }));\n  };\n}\n\nexport function createNotificationChannel(data: any): ThunkResult<Promise<void>> {\n  return async (dispatch) => {\n    try {\n      await getBackendSrv().post(`/api/alert-notifications`, data);\n      dispatch(notifyApp(createSuccessNotification('Notification created')));\n      locationService.push('/alerting/notifications');\n    } catch (error) {\n      if (isFetchError(error)) {\n        dispatch(notifyApp(createErrorNotification(error.data.error)));\n      }\n    }\n  };\n}\n\nexport function updateNotificationChannel(data: any): ThunkResult<void> {\n  return async (dispatch) => {\n    try {\n      await getBackendSrv().put(`/api/alert-notifications/${data.id}`, data);\n      dispatch(notifyApp(createSuccessNotification('Notification updated')));\n    } catch (error) {\n      if (isFetchError(error)) {\n        dispatch(notifyApp(createErrorNotification(error.data.error)));\n      }\n    }\n  };\n}\n\nexport function testNotificationChannel(data: any): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    const channel = getState().notificationChannel.notificationChannel;\n    await getBackendSrv().post('/api/alert-notifications/test', { id: channel.id, ...data });\n  };\n}\n\nexport function loadNotificationTypes(): ThunkResult<void> {\n  return async (dispatch) => {\n    const alertNotifiers: NotifierDTO[] = await getBackendSrv().get(`/api/alert-notifiers`);\n\n    const notificationTypes = alertNotifiers.sort((o1, o2) => {\n      if (o1.name > o2.name) {\n        return 1;\n      }\n      return -1;\n    });\n\n    dispatch(setNotificationChannels(notificationTypes));\n  };\n}\n\nexport function loadNotificationChannel(id: number): ThunkResult<void> {\n  return async (dispatch) => {\n    await dispatch(loadNotificationTypes());\n    const notificationChannel = await getBackendSrv().get(`/api/alert-notifications/${id}`);\n    dispatch(notificationChannelLoaded(notificationChannel));\n  };\n}\n","import React, { FC } from 'react';\n\nimport { CallToActionCard } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\n\nimport { useRulesAccess } from '../../utils/accessControlHooks';\n\nexport const NoRulesSplash: FC = () => {\n  const { canCreateGrafanaRules, canCreateCloudRules } = useRulesAccess();\n\n  if (canCreateGrafanaRules || canCreateCloudRules) {\n    return (\n      <EmptyListCTA\n        title=\"You haven`t created any alert rules yet\"\n        buttonIcon=\"bell\"\n        buttonLink={'alerting/new'}\n        buttonTitle=\"New alert rule\"\n        proTip=\"you can also create alert rules from existing panels and queries.\"\n        proTipLink=\"https://grafana.com/docs/\"\n        proTipLinkTitle=\"Learn more\"\n        proTipTarget=\"_blank\"\n      />\n    );\n  }\n  return <CallToActionCard message=\"No rules exist yet.\" callToActionElement={<div />} />;\n};\n","import { css } from '@emotion/css';\nimport { SerializedError } from '@reduxjs/toolkit';\nimport pluralize from 'pluralize';\nimport React, { useMemo, ReactElement, useState, FC } from 'react';\nimport { useLocalStorage } from 'react-use';\n\nimport { DataSourceInstanceSettings, GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Button, Tooltip, useStyles2 } from '@grafana/ui';\n\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { getRulesDataSources, GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { makeDataSourceLink } from '../../utils/misc';\nimport { isRulerNotSupportedResponse } from '../../utils/rules';\n\nexport function RuleListErrors(): ReactElement {\n  const [expanded, setExpanded] = useState(false);\n  const [closed, setClosed] = useLocalStorage('grafana.unifiedalerting.hideErrors', false);\n  const dataSourceConfigRequests = useUnifiedAlertingSelector((state) => state.dataSources);\n  const promRuleRequests = useUnifiedAlertingSelector((state) => state.promRules);\n  const rulerRuleRequests = useUnifiedAlertingSelector((state) => state.rulerRules);\n  const styles = useStyles2(getStyles);\n\n  const errors = useMemo((): JSX.Element[] => {\n    const [dataSourceConfigErrors, promRequestErrors, rulerRequestErrors] = [\n      dataSourceConfigRequests,\n      promRuleRequests,\n      rulerRuleRequests,\n    ].map((requests) =>\n      getRulesDataSources().reduce<Array<{ error: SerializedError; dataSource: DataSourceInstanceSettings }>>(\n        (result, dataSource) => {\n          const error = requests[dataSource.name]?.error;\n          if (requests[dataSource.name] && error && !isRulerNotSupportedResponse(requests[dataSource.name])) {\n            return [...result, { dataSource, error }];\n          }\n          return result;\n        },\n        []\n      )\n    );\n    const grafanaPromError = promRuleRequests[GRAFANA_RULES_SOURCE_NAME]?.error;\n    const grafanaRulerError = rulerRuleRequests[GRAFANA_RULES_SOURCE_NAME]?.error;\n\n    const result: JSX.Element[] = [];\n\n    if (grafanaPromError) {\n      result.push(<>Failed to load Grafana rules state: {grafanaPromError.message || 'Unknown error.'}</>);\n    }\n    if (grafanaRulerError) {\n      result.push(<>Failed to load Grafana rules config: {grafanaRulerError.message || 'Unknown error.'}</>);\n    }\n\n    dataSourceConfigErrors.forEach(({ dataSource, error }) => {\n      result.push(\n        <>\n          Failed to load the data source configuration for{' '}\n          <a href={makeDataSourceLink(dataSource)} className={styles.dsLink}>\n            {dataSource.name}\n          </a>\n          : {error.message || 'Unknown error.'}\n        </>\n      );\n    });\n\n    promRequestErrors.forEach(({ dataSource, error }) =>\n      result.push(\n        <>\n          Failed to load rules state from{' '}\n          <a href={makeDataSourceLink(dataSource)} className={styles.dsLink}>\n            {dataSource.name}\n          </a>\n          : {error.message || 'Unknown error.'}\n        </>\n      )\n    );\n\n    rulerRequestErrors.forEach(({ dataSource, error }) =>\n      result.push(\n        <>\n          Failed to load rules config from{' '}\n          <a href={makeDataSourceLink(dataSource)} className={styles.dsLink}>\n            {dataSource.name}\n          </a>\n          : {error.message || 'Unknown error.'}\n        </>\n      )\n    );\n\n    return result;\n  }, [dataSourceConfigRequests, promRuleRequests, rulerRuleRequests, styles.dsLink]);\n\n  return (\n    <>\n      {!!errors.length && closed && (\n        <ErrorSummaryButton count={errors.length} onClick={() => setClosed((closed) => !closed)} />\n      )}\n      {!!errors.length && !closed && (\n        <Alert\n          data-testid=\"cloud-rulessource-errors\"\n          title=\"Errors loading rules\"\n          severity=\"error\"\n          onRemove={() => setClosed(true)}\n        >\n          {expanded && errors.map((item, idx) => <div key={idx}>{item}</div>)}\n          {!expanded && (\n            <>\n              <div>{errors[0]}</div>\n              {errors.length >= 2 && (\n                <Button\n                  className={styles.moreButton}\n                  fill=\"text\"\n                  icon=\"angle-right\"\n                  size=\"sm\"\n                  onClick={() => setExpanded(true)}\n                >\n                  {errors.length - 1} more {pluralize('error', errors.length - 1)}\n                </Button>\n              )}\n            </>\n          )}\n        </Alert>\n      )}\n    </>\n  );\n}\n\ninterface ErrorSummaryProps {\n  count: number;\n  onClick: () => void;\n}\n\nconst ErrorSummaryButton: FC<ErrorSummaryProps> = ({ count, onClick }) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.floatRight}>\n      <Tooltip content=\"Show all errors\" placement=\"bottom\">\n        <Button fill=\"text\" variant=\"destructive\" icon=\"exclamation-triangle\" onClick={onClick}>\n          {count > 1 ? <>{count} errors</> : <>1 error</>}\n        </Button>\n      </Tooltip>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  moreButton: css`\n    padding: 0;\n  `,\n  floatRight: css`\n    display: flex;\n    justify-content: flex-end;\n  `,\n  dsLink: css`\n    font-weight: ${theme.typography.fontWeightBold};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { useEffect, useMemo } from 'react';\n\nimport { Modal, Button, Form, Field, Input, useStyles2 } from '@grafana/ui';\nimport { useCleanup } from 'app/core/hooks/useCleanup';\nimport { useDispatch } from 'app/types';\nimport { CombinedRuleGroup, CombinedRuleNamespace } from 'app/types/unified-alerting';\n\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { updateLotexNamespaceAndGroupAction } from '../../state/actions';\nimport { checkEvaluationIntervalGlobalLimit } from '../../utils/config';\nimport { getRulesSourceName } from '../../utils/datasource';\nimport { initialAsyncRequestState } from '../../utils/redux';\nimport { EvaluationIntervalLimitExceeded } from '../InvalidIntervalWarning';\nimport { evaluateEveryValidationOptions } from '../rule-editor/GrafanaEvaluationBehavior';\n\ninterface ModalProps {\n  namespace: CombinedRuleNamespace;\n  group: CombinedRuleGroup;\n  onClose: (saved?: boolean) => void;\n}\n\ninterface FormValues {\n  namespaceName: string;\n  groupName: string;\n  groupInterval: string;\n}\n\nexport function EditCloudGroupModal(props: ModalProps): React.ReactElement {\n  const { namespace, group, onClose } = props;\n  const styles = useStyles2(getStyles);\n  const dispatch = useDispatch();\n  const { loading, error, dispatched } =\n    useUnifiedAlertingSelector((state) => state.updateLotexNamespaceAndGroup) ?? initialAsyncRequestState;\n\n  const defaultValues = useMemo(\n    (): FormValues => ({\n      namespaceName: namespace.name,\n      groupName: group.name,\n      groupInterval: group.interval ?? '',\n    }),\n    [namespace, group]\n  );\n\n  // close modal if successfully saved\n  useEffect(() => {\n    if (dispatched && !loading && !error) {\n      onClose(true);\n    }\n  }, [dispatched, loading, onClose, error]);\n\n  useCleanup((state) => (state.unifiedAlerting.updateLotexNamespaceAndGroup = initialAsyncRequestState));\n\n  const onSubmit = (values: FormValues) => {\n    dispatch(\n      updateLotexNamespaceAndGroupAction({\n        rulesSourceName: getRulesSourceName(namespace.rulesSource),\n        groupName: group.name,\n        newGroupName: values.groupName,\n        namespaceName: namespace.name,\n        newNamespaceName: values.namespaceName,\n        groupInterval: values.groupInterval || undefined,\n      })\n    );\n  };\n\n  return (\n    <Modal\n      className={styles.modal}\n      isOpen={true}\n      title=\"Edit namespace or rule group\"\n      onDismiss={onClose}\n      onClickBackdrop={onClose}\n    >\n      <Form defaultValues={defaultValues} onSubmit={onSubmit} key={JSON.stringify(defaultValues)}>\n        {({ register, errors, formState: { isDirty }, watch }) => (\n          <>\n            <Field label=\"Namespace\" invalid={!!errors.namespaceName} error={errors.namespaceName?.message}>\n              <Input\n                id=\"namespaceName\"\n                {...register('namespaceName', {\n                  required: 'Namespace name is required.',\n                })}\n              />\n            </Field>\n            <Field label=\"Rule group\" invalid={!!errors.groupName} error={errors.groupName?.message}>\n              <Input\n                id=\"groupName\"\n                {...register('groupName', {\n                  required: 'Rule group name is required.',\n                })}\n              />\n            </Field>\n            <Field\n              label=\"Rule group evaluation interval\"\n              invalid={!!errors.groupInterval}\n              error={errors.groupInterval?.message}\n            >\n              <Input\n                id=\"groupInterval\"\n                placeholder=\"1m\"\n                {...register('groupInterval', evaluateEveryValidationOptions)}\n              />\n            </Field>\n            {checkEvaluationIntervalGlobalLimit(watch('groupInterval')).exceedsLimit && (\n              <EvaluationIntervalLimitExceeded />\n            )}\n\n            <Modal.ButtonRow>\n              <Button\n                variant=\"secondary\"\n                type=\"button\"\n                disabled={loading}\n                onClick={() => onClose(false)}\n                fill=\"outline\"\n              >\n                Close\n              </Button>\n              <Button type=\"submit\" disabled={!isDirty || loading}>\n                {loading ? 'Saving...' : 'Save changes'}\n              </Button>\n            </Modal.ButtonRow>\n          </>\n        )}\n      </Form>\n    </Modal>\n  );\n}\n\nconst getStyles = () => ({\n  modal: css`\n    max-width: 560px;\n  `,\n});\n","import { css } from '@emotion/css';\nimport cx from 'classnames';\nimport { compact } from 'lodash';\nimport React, { FC, useCallback, useState } from 'react';\nimport {\n  DragDropContext,\n  Draggable,\n  DraggableProvided,\n  Droppable,\n  DroppableProvided,\n  DropResult,\n} from 'react-beautiful-dnd';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Badge, Icon, Modal, Tooltip, useStyles2 } from '@grafana/ui';\nimport { dispatch } from 'app/store/store';\nimport { CombinedRule, CombinedRuleGroup, CombinedRuleNamespace } from 'app/types/unified-alerting';\n\nimport { updateRulesOrder } from '../../state/actions';\nimport { getRulesSourceName, isCloudRulesSource } from '../../utils/datasource';\nimport { hashRulerRule } from '../../utils/rule-id';\nimport { isAlertingRule, isRecordingRule } from '../../utils/rules';\n\nimport { AlertStateTag } from './AlertStateTag';\n\ninterface ModalProps {\n  namespace: CombinedRuleNamespace;\n  group: CombinedRuleGroup;\n  onClose: () => void;\n}\n\ntype CombinedRuleWithUID = { uid: string } & CombinedRule;\n\nexport const ReorderCloudGroupModal: FC<ModalProps> = (props) => {\n  const { group, namespace, onClose } = props;\n  const [pending, setPending] = useState<boolean>(false);\n  const [rulesList, setRulesList] = useState<CombinedRule[]>(group.rules);\n\n  const styles = useStyles2(getStyles);\n\n  const onDragEnd = useCallback(\n    (result: DropResult) => {\n      // check for no-ops so we don't update the group unless we have changes\n      if (!result.destination) {\n        return;\n      }\n\n      const sameIndex = result.destination.index === result.source.index;\n      if (sameIndex) {\n        return;\n      }\n\n      const newOrderedRules = reorder(rulesList, result.source.index, result.destination.index);\n      setRulesList(newOrderedRules); // optimistically update the new rules list\n\n      const rulesSourceName = getRulesSourceName(namespace.rulesSource);\n      const rulerRules = compact(newOrderedRules.map((rule) => rule.rulerRule));\n\n      setPending(true);\n      dispatch(\n        updateRulesOrder({\n          namespaceName: namespace.name,\n          groupName: group.name,\n          rulesSourceName: rulesSourceName,\n          newRules: rulerRules,\n        })\n      )\n        .unwrap()\n        .finally(() => {\n          setPending(false);\n        });\n    },\n    [group.name, namespace.name, namespace.rulesSource, rulesList]\n  );\n\n  // assign unique but stable identifiers to each (alerting / recording) rule\n  const rulesWithUID: CombinedRuleWithUID[] = rulesList.map((rule) => ({\n    ...rule,\n    uid: String(hashRulerRule(rule.rulerRule!)), // TODO fix this coercion?\n  }));\n\n  return (\n    <Modal\n      className={styles.modal}\n      isOpen={true}\n      title={<ModalHeader namespace={namespace} group={group} />}\n      onDismiss={onClose}\n      onClickBackdrop={onClose}\n    >\n      <DragDropContext onDragEnd={onDragEnd}>\n        <Droppable\n          droppableId=\"alert-list\"\n          mode=\"standard\"\n          renderClone={(provided, _snapshot, rubric) => (\n            <ListItem provided={provided} rule={rulesWithUID[rubric.source.index]} isClone />\n          )}\n        >\n          {(droppableProvided: DroppableProvided) => (\n            <div\n              ref={droppableProvided.innerRef}\n              className={cx(styles.listContainer, pending && styles.disabled)}\n              {...droppableProvided.droppableProps}\n            >\n              {rulesWithUID.map((rule, index) => (\n                <Draggable key={rule.uid} draggableId={rule.uid} index={index} isDragDisabled={pending}>\n                  {(provided: DraggableProvided) => <ListItem key={rule.uid} provided={provided} rule={rule} />}\n                </Draggable>\n              ))}\n              {droppableProvided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n    </Modal>\n  );\n};\n\ninterface ListItemProps extends React.HTMLAttributes<HTMLDivElement> {\n  provided: DraggableProvided;\n  rule: CombinedRule;\n  isClone?: boolean;\n  isDragging?: boolean;\n}\n\nconst ListItem = ({ provided, rule, isClone = false, isDragging = false }: ListItemProps) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div\n      className={cx(styles.listItem, isClone && 'isClone', isDragging && 'isDragging')}\n      ref={provided.innerRef}\n      {...provided.draggableProps}\n      {...provided.dragHandleProps}\n    >\n      {isAlertingRule(rule.promRule) && <AlertStateTag state={rule.promRule.state} />}\n      {isRecordingRule(rule.promRule) && <Badge text={'Recording'} color={'blue'} />}\n      <div className={styles.listItemName}>{rule.name}</div>\n      <Icon name={'draggabledots'} />\n    </div>\n  );\n};\n\ninterface ModalHeaderProps {\n  namespace: CombinedRuleNamespace;\n  group: CombinedRuleGroup;\n}\n\nconst ModalHeader: FC<ModalHeaderProps> = ({ namespace, group }) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.header}>\n      <Icon name=\"folder\" />\n      {isCloudRulesSource(namespace.rulesSource) && (\n        <Tooltip content={namespace.rulesSource.name} placement=\"top\">\n          <img\n            alt={namespace.rulesSource.meta.name}\n            className={styles.dataSourceIcon}\n            src={namespace.rulesSource.meta.info.logos.small}\n          />\n        </Tooltip>\n      )}\n      <span>{namespace.name}</span>\n      <Icon name=\"angle-right\" />\n      <span>{group.name}</span>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  modal: css`\n    max-width: 640px;\n    max-height: 80%;\n    overflow: hidden;\n  `,\n  listItem: css`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n\n    gap: ${theme.spacing()};\n\n    background: ${theme.colors.background.primary};\n    color: ${theme.colors.text.secondary};\n\n    border-bottom: solid 1px ${theme.colors.border.medium};\n    padding: ${theme.spacing(1)} ${theme.spacing(2)};\n\n    &:last-child {\n      border-bottom: none;\n    }\n\n    &.isClone {\n      border: solid 1px ${theme.colors.primary.shade};\n    }\n  `,\n  listContainer: css`\n    user-select: none;\n    border: solid 1px ${theme.colors.border.medium};\n  `,\n  disabled: css`\n    opacity: 0.5;\n    pointer-events: none;\n  `,\n  listItemName: css`\n    flex: 1;\n\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n  `,\n  header: css`\n    display: flex;\n    align-items: center;\n\n    gap: ${theme.spacing(1)};\n  `,\n  dataSourceIcon: css`\n    width: ${theme.spacing(2)};\n    height: ${theme.spacing(2)};\n  `,\n});\n\nexport function reorder<T>(rules: T[], startIndex: number, endIndex: number): T[] {\n  const result = Array.from(rules);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n}\n","import { css } from '@emotion/css';\nimport React, { FC } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\n\ntype Props = {\n  status: PromAlertingRuleState | 'neutral';\n};\n\nexport const StateColoredText: FC<Props> = ({ children, status }) => {\n  const styles = useStyles2(getStyles);\n\n  return <span className={styles[status]}>{children || status}</span>;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  [PromAlertingRuleState.Inactive]: css`\n    color: ${theme.colors.success.text};\n  `,\n  [PromAlertingRuleState.Pending]: css`\n    color: ${theme.colors.warning.text};\n  `,\n  [PromAlertingRuleState.Firing]: css`\n    color: ${theme.colors.error.text};\n  `,\n  neutral: css`\n    color: ${theme.colors.text.secondary};\n  `,\n});\n","import pluralize from 'pluralize';\nimport React, { FC, Fragment, useMemo } from 'react';\n\nimport { CombinedRule, CombinedRuleGroup, CombinedRuleNamespace } from 'app/types/unified-alerting';\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\n\nimport { isAlertingRule, isRecordingRule, isRecordingRulerRule } from '../../utils/rules';\nimport { StateColoredText } from '../StateColoredText';\n\ninterface Props {\n  showInactive?: boolean;\n  showRecording?: boolean;\n  group?: CombinedRuleGroup;\n  namespaces?: CombinedRuleNamespace[];\n}\n\nconst emptyStats = {\n  total: 0,\n  recording: 0,\n  [PromAlertingRuleState.Firing]: 0,\n  [PromAlertingRuleState.Pending]: 0,\n  [PromAlertingRuleState.Inactive]: 0,\n  error: 0,\n} as const;\n\nexport const RuleStats: FC<Props> = ({ showInactive, showRecording, group, namespaces }) => {\n  const calculated = useMemo(() => {\n    const stats = { ...emptyStats };\n    const calcRule = (rule: CombinedRule) => {\n      if (rule.promRule && isAlertingRule(rule.promRule)) {\n        stats[rule.promRule.state] += 1;\n      }\n      if (rule.promRule?.health === 'err' || rule.promRule?.health === 'error') {\n        stats.error += 1;\n      }\n      if (\n        (rule.promRule && isRecordingRule(rule.promRule)) ||\n        (rule.rulerRule && isRecordingRulerRule(rule.rulerRule))\n      ) {\n        stats.recording += 1;\n      }\n      stats.total += 1;\n    };\n    if (group) {\n      group.rules.forEach(calcRule);\n    }\n    if (namespaces) {\n      namespaces.forEach((namespace) => namespace.groups.forEach((group) => group.rules.forEach(calcRule)));\n    }\n    return stats;\n  }, [group, namespaces]);\n\n  const statsComponents: React.ReactNode[] = [];\n  if (calculated[PromAlertingRuleState.Firing]) {\n    statsComponents.push(\n      <StateColoredText key=\"firing\" status={PromAlertingRuleState.Firing}>\n        {calculated[PromAlertingRuleState.Firing]} firing\n      </StateColoredText>\n    );\n  }\n  if (calculated.error) {\n    statsComponents.push(\n      <StateColoredText key=\"errors\" status={PromAlertingRuleState.Firing}>\n        {calculated.error} errors\n      </StateColoredText>\n    );\n  }\n  if (calculated[PromAlertingRuleState.Pending]) {\n    statsComponents.push(\n      <StateColoredText key=\"pending\" status={PromAlertingRuleState.Pending}>\n        {calculated[PromAlertingRuleState.Pending]} pending\n      </StateColoredText>\n    );\n  }\n  if (showInactive && calculated[PromAlertingRuleState.Inactive]) {\n    statsComponents.push(\n      <StateColoredText key=\"inactive\" status=\"neutral\">\n        {calculated[PromAlertingRuleState.Inactive]} normal\n      </StateColoredText>\n    );\n  }\n  if (showRecording && calculated.recording) {\n    statsComponents.push(\n      <StateColoredText key=\"recording\" status=\"neutral\">\n        {calculated.recording} recording\n      </StateColoredText>\n    );\n  }\n\n  return (\n    <div>\n      <span>\n        {calculated.total} {pluralize('rule', calculated.total)}\n      </span>\n      {!!statsComponents.length && (\n        <>\n          <span>: </span>\n          {statsComponents.reduce<React.ReactNode[]>(\n            (prev, curr, idx) =>\n              prev.length\n                ? [\n                    prev,\n                    <Fragment key={idx}>\n                      <span>, </span>\n                    </Fragment>,\n                    curr,\n                  ]\n                : [curr],\n            []\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n","import { css } from '@emotion/css';\nimport pluralize from 'pluralize';\nimport React, { FC, useEffect, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { logInfo } from '@grafana/runtime';\nimport { Badge, ConfirmModal, HorizontalGroup, Icon, Spinner, Tooltip, useStyles2 } from '@grafana/ui';\nimport { useDispatch } from 'app/types';\nimport { CombinedRuleGroup, CombinedRuleNamespace } from 'app/types/unified-alerting';\n\nimport { LogMessages } from '../../Analytics';\nimport { useFolder } from '../../hooks/useFolder';\nimport { useHasRuler } from '../../hooks/useHasRuler';\nimport { deleteRulesGroupAction } from '../../state/actions';\nimport { useRulesAccess } from '../../utils/accessControlHooks';\nimport { GRAFANA_RULES_SOURCE_NAME, isCloudRulesSource } from '../../utils/datasource';\nimport { makeFolderLink } from '../../utils/misc';\nimport { isFederatedRuleGroup, isGrafanaRulerRule } from '../../utils/rules';\nimport { CollapseToggle } from '../CollapseToggle';\nimport { RuleLocation } from '../RuleLocation';\n\nimport { ActionIcon } from './ActionIcon';\nimport { EditCloudGroupModal } from './EditRuleGroupModal';\nimport { ReorderCloudGroupModal } from './ReorderRuleGroupModal';\nimport { RuleStats } from './RuleStats';\nimport { RulesTable } from './RulesTable';\n\ntype ViewMode = 'grouped' | 'list';\n\ninterface Props {\n  namespace: CombinedRuleNamespace;\n  group: CombinedRuleGroup;\n  expandAll: boolean;\n  viewMode: ViewMode;\n}\n\nexport const RulesGroup: FC<Props> = React.memo(({ group, namespace, expandAll, viewMode }) => {\n  const { rulesSource } = namespace;\n  const dispatch = useDispatch();\n  const styles = useStyles2(getStyles);\n\n  const [isEditingGroup, setIsEditingGroup] = useState(false);\n  const [isDeletingGroup, setIsDeletingGroup] = useState(false);\n  const [isReorderingGroup, setIsReorderingGroup] = useState(false);\n  const [isCollapsed, setIsCollapsed] = useState(!expandAll);\n\n  const { canEditRules } = useRulesAccess();\n\n  useEffect(() => {\n    setIsCollapsed(!expandAll);\n  }, [expandAll]);\n\n  const { hasRuler, rulerRulesLoaded } = useHasRuler();\n  const rulerRule = group.rules[0]?.rulerRule;\n  const folderUID = (rulerRule && isGrafanaRulerRule(rulerRule) && rulerRule.grafana_alert.namespace_uid) || undefined;\n  const { folder } = useFolder(folderUID);\n\n  // group \"is deleting\" if rules source has ruler, but this group has no rules that are in ruler\n  const isDeleting =\n    hasRuler(rulesSource) && rulerRulesLoaded(rulesSource) && !group.rules.find((rule) => !!rule.rulerRule);\n  const isFederated = isFederatedRuleGroup(group);\n\n  // check if group has provisioned items\n  const isProvisioned = group.rules.some((rule) => {\n    return isGrafanaRulerRule(rule.rulerRule) && rule.rulerRule.grafana_alert.provenance;\n  });\n\n  // check what view mode we are in\n  const isListView = viewMode === 'list';\n  const isGroupView = viewMode === 'grouped';\n\n  const deleteGroup = () => {\n    dispatch(deleteRulesGroupAction(namespace, group));\n    setIsDeletingGroup(false);\n  };\n\n  const actionIcons: React.ReactNode[] = [];\n\n  // for grafana, link to folder views\n  if (isDeleting) {\n    actionIcons.push(\n      <HorizontalGroup key=\"is-deleting\">\n        <Spinner />\n        deleting\n      </HorizontalGroup>\n    );\n  } else if (rulesSource === GRAFANA_RULES_SOURCE_NAME) {\n    if (folderUID) {\n      const baseUrl = makeFolderLink(folderUID);\n      if (folder?.canSave) {\n        if (isGroupView && !isProvisioned) {\n          actionIcons.push(\n            <ActionIcon\n              aria-label=\"edit rule group\"\n              data-testid=\"edit-group\"\n              key=\"edit\"\n              icon=\"pen\"\n              tooltip=\"edit rule group\"\n              onClick={() => setIsEditingGroup(true)}\n            />\n          );\n          actionIcons.push(\n            <ActionIcon\n              aria-label=\"re-order rules\"\n              data-testid=\"reorder-group\"\n              key=\"reorder\"\n              icon=\"exchange-alt\"\n              tooltip=\"reorder rules\"\n              className={styles.rotate90}\n              onClick={() => setIsReorderingGroup(true)}\n            />\n          );\n        }\n        if (isListView) {\n          actionIcons.push(\n            <ActionIcon\n              aria-label=\"go to folder\"\n              key=\"goto\"\n              icon=\"folder-open\"\n              tooltip=\"go to folder\"\n              to={baseUrl}\n              target=\"__blank\"\n            />\n          );\n        }\n      }\n      if (folder?.canAdmin && isListView) {\n        actionIcons.push(\n          <ActionIcon\n            aria-label=\"manage permissions\"\n            key=\"manage-perms\"\n            icon=\"lock\"\n            tooltip=\"manage permissions\"\n            to={baseUrl + '/permissions'}\n            target=\"__blank\"\n          />\n        );\n      }\n    }\n  } else if (canEditRules(rulesSource.name) && hasRuler(rulesSource)) {\n    if (!isFederated) {\n      actionIcons.push(\n        <ActionIcon\n          aria-label=\"edit rule group\"\n          data-testid=\"edit-group\"\n          key=\"edit\"\n          icon=\"pen\"\n          tooltip=\"edit rule group\"\n          onClick={() => setIsEditingGroup(true)}\n        />\n      );\n      actionIcons.push(\n        <ActionIcon\n          aria-label=\"re-order rules\"\n          data-testid=\"reorder-group\"\n          key=\"reorder\"\n          icon=\"exchange-alt\"\n          tooltip=\"re-order rules\"\n          className={styles.rotate90}\n          onClick={() => setIsReorderingGroup(true)}\n        />\n      );\n    }\n\n    actionIcons.push(\n      <ActionIcon\n        aria-label=\"delete rule group\"\n        data-testid=\"delete-group\"\n        key=\"delete-group\"\n        icon=\"trash-alt\"\n        tooltip=\"delete rule group\"\n        onClick={() => setIsDeletingGroup(true)}\n      />\n    );\n  }\n\n  // ungrouped rules are rules that are in the \"default\" group name\n  const groupName = isListView ? (\n    <RuleLocation namespace={namespace.name} />\n  ) : (\n    <RuleLocation namespace={namespace.name} group={group.name} />\n  );\n\n  const closeEditModal = (saved = false) => {\n    if (!saved) {\n      logInfo(LogMessages.leavingRuleGroupEdit);\n    }\n    setIsEditingGroup(false);\n  };\n\n  return (\n    <div className={styles.wrapper} data-testid=\"rule-group\">\n      <div className={styles.header} data-testid=\"rule-group-header\">\n        <CollapseToggle\n          className={styles.collapseToggle}\n          isCollapsed={isCollapsed}\n          onToggle={setIsCollapsed}\n          data-testid=\"group-collapse-toggle\"\n        />\n        <Icon name={isCollapsed ? 'folder' : 'folder-open'} />\n        {isCloudRulesSource(rulesSource) && (\n          <Tooltip content={rulesSource.name} placement=\"top\">\n            <img\n              alt={rulesSource.meta.name}\n              className={styles.dataSourceIcon}\n              src={rulesSource.meta.info.logos.small}\n            />\n          </Tooltip>\n        )}\n        <h6 className={styles.heading}>\n          {isFederated && <Badge color=\"purple\" text=\"Federated\" />} {groupName}\n        </h6>\n        <div className={styles.spacer} />\n        <div className={styles.headerStats}>\n          <RuleStats showInactive={false} group={group} />\n        </div>\n        {!!actionIcons.length && (\n          <>\n            <div className={styles.actionsSeparator}>|</div>\n            <div className={styles.actionIcons}>{actionIcons}</div>\n          </>\n        )}\n      </div>\n      {!isCollapsed && (\n        <RulesTable showSummaryColumn={true} className={styles.rulesTable} showGuidelines={true} rules={group.rules} />\n      )}\n      {isEditingGroup && <EditCloudGroupModal group={group} namespace={namespace} onClose={() => closeEditModal()} />}\n      {isReorderingGroup && (\n        <ReorderCloudGroupModal group={group} namespace={namespace} onClose={() => setIsReorderingGroup(false)} />\n      )}\n      <ConfirmModal\n        isOpen={isDeletingGroup}\n        title=\"Delete group\"\n        body={\n          <div>\n            Deleting this group will permanently remove the group\n            <br />\n            and {group.rules.length} alert {pluralize('rule', group.rules.length)} belonging to it.\n            <br />\n            Are you sure you want to delete this group?\n          </div>\n        }\n        onConfirm={deleteGroup}\n        onDismiss={() => setIsDeletingGroup(false)}\n        confirmText=\"Delete\"\n      />\n    </div>\n  );\n});\n\nRulesGroup.displayName = 'RulesGroup';\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    & + & {\n      margin-top: ${theme.spacing(2)};\n    }\n  `,\n  header: css`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    padding: ${theme.spacing(1)} ${theme.spacing(1)} ${theme.spacing(1)} 0;\n    background-color: ${theme.colors.background.secondary};\n    flex-wrap: wrap;\n  `,\n  headerStats: css`\n    span {\n      vertical-align: middle;\n    }\n\n    ${theme.breakpoints.down('sm')} {\n      order: 2;\n      width: 100%;\n      padding-left: ${theme.spacing(1)};\n    }\n  `,\n  heading: css`\n    margin-left: ${theme.spacing(1)};\n    margin-bottom: 0;\n  `,\n  spacer: css`\n    flex: 1;\n  `,\n  collapseToggle: css`\n    background: none;\n    border: none;\n    margin-top: -${theme.spacing(1)};\n    margin-bottom: -${theme.spacing(1)};\n\n    svg {\n      margin-bottom: 0;\n    }\n  `,\n  dataSourceIcon: css`\n    width: ${theme.spacing(2)};\n    height: ${theme.spacing(2)};\n    margin-left: ${theme.spacing(2)};\n  `,\n  dataSourceOrigin: css`\n    margin-right: 1em;\n    color: ${theme.colors.text.disabled};\n  `,\n  actionsSeparator: css`\n    margin: 0 ${theme.spacing(2)};\n  `,\n  actionIcons: css`\n    & > * + * {\n      margin-left: ${theme.spacing(0.5)};\n    }\n  `,\n  rulesTable: css`\n    margin-top: ${theme.spacing(3)};\n  `,\n  rotate90: css`\n    transform: rotate(90deg);\n  `,\n});\n","import { useMemo } from 'react';\n\nimport { CombinedRuleNamespace } from '../../../../../types/unified-alerting';\n\nexport function useCombinedGroupNamespace(namespaces: CombinedRuleNamespace[]) {\n  return useMemo(\n    () =>\n      namespaces.flatMap((ns) =>\n        ns.groups.map((g) => ({\n          namespace: ns,\n          group: g,\n        }))\n      ),\n    [namespaces]\n  );\n}\n","import { css } from '@emotion/css';\nimport pluralize from 'pluralize';\nimport React, { FC, useMemo } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { LoadingPlaceholder, Pagination, Spinner, useStyles2 } from '@grafana/ui';\nimport { CombinedRuleNamespace } from 'app/types/unified-alerting';\n\nimport { DEFAULT_PER_PAGE_PAGINATION } from '../../../../../core/constants';\nimport { usePagination } from '../../hooks/usePagination';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { getPaginationStyles } from '../../styles/pagination';\nimport { getRulesDataSources, getRulesSourceUid } from '../../utils/datasource';\nimport { isAsyncRequestStatePending } from '../../utils/redux';\n\nimport { RulesGroup } from './RulesGroup';\nimport { useCombinedGroupNamespace } from './useCombinedGroupNamespace';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n  expandAll: boolean;\n}\n\nexport const CloudRules: FC<Props> = ({ namespaces, expandAll }) => {\n  const styles = useStyles2(getStyles);\n\n  const dsConfigs = useUnifiedAlertingSelector((state) => state.dataSources);\n  const promRules = useUnifiedAlertingSelector((state) => state.promRules);\n  const rulesDataSources = useMemo(getRulesDataSources, []);\n  const groupsWithNamespaces = useCombinedGroupNamespace(namespaces);\n\n  const dataSourcesLoading = useMemo(\n    () =>\n      rulesDataSources.filter(\n        (ds) => isAsyncRequestStatePending(promRules[ds.name]) || isAsyncRequestStatePending(dsConfigs[ds.name])\n      ),\n    [promRules, dsConfigs, rulesDataSources]\n  );\n\n  const hasSomeResults = rulesDataSources.some((ds) => promRules[ds.name]?.result?.length ?? 0 > 0);\n\n  const hasDataSourcesConfigured = rulesDataSources.length > 0;\n  const hasDataSourcesLoading = dataSourcesLoading.length > 0;\n  const hasNamespaces = namespaces.length > 0;\n\n  const { numberOfPages, onPageChange, page, pageItems } = usePagination(\n    groupsWithNamespaces,\n    1,\n    DEFAULT_PER_PAGE_PAGINATION\n  );\n\n  return (\n    <section className={styles.wrapper}>\n      <div className={styles.sectionHeader}>\n        <h5>Mimir / Cortex / Loki</h5>\n        {dataSourcesLoading.length ? (\n          <LoadingPlaceholder\n            className={styles.loader}\n            text={`Loading rules from ${dataSourcesLoading.length} ${pluralize('source', dataSourcesLoading.length)}`}\n          />\n        ) : (\n          <div />\n        )}\n      </div>\n\n      {pageItems.map(({ group, namespace }) => {\n        return (\n          <RulesGroup\n            group={group}\n            key={`${getRulesSourceUid(namespace.rulesSource)}-${namespace.name}-${group.name}`}\n            namespace={namespace}\n            expandAll={expandAll}\n            viewMode={'grouped'}\n          />\n        );\n      })}\n\n      {!hasDataSourcesConfigured && <p>There are no Prometheus or Loki data sources configured.</p>}\n      {hasDataSourcesConfigured && !hasDataSourcesLoading && !hasNamespaces && <p>No rules found.</p>}\n      {!hasSomeResults && hasDataSourcesLoading && <Spinner size={24} className={styles.spinner} />}\n\n      <Pagination\n        className={styles.pagination}\n        currentPage={page}\n        numberOfPages={numberOfPages}\n        onNavigate={onPageChange}\n        hideWhenSinglePage\n      />\n    </section>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  loader: css`\n    margin-bottom: 0;\n  `,\n  sectionHeader: css`\n    display: flex;\n    justify-content: space-between;\n  `,\n  wrapper: css`\n    margin-bottom: ${theme.spacing(4)};\n  `,\n  spinner: css`\n    text-align: center;\n    padding: ${theme.spacing(2)};\n  `,\n  pagination: getPaginationStyles(theme),\n});\n","import { css } from '@emotion/css';\nimport React, { FC } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { LoadingPlaceholder, Pagination, Spinner, useStyles2 } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { CombinedRuleNamespace } from 'app/types/unified-alerting';\n\nimport { DEFAULT_PER_PAGE_PAGINATION } from '../../../../../core/constants';\nimport { flattenGrafanaManagedRules } from '../../hooks/useCombinedRuleNamespaces';\nimport { usePagination } from '../../hooks/usePagination';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { getPaginationStyles } from '../../styles/pagination';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { initialAsyncRequestState } from '../../utils/redux';\n\nimport { RulesGroup } from './RulesGroup';\nimport { useCombinedGroupNamespace } from './useCombinedGroupNamespace';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n  expandAll: boolean;\n}\n\nexport const GrafanaRules: FC<Props> = ({ namespaces, expandAll }) => {\n  const styles = useStyles2(getStyles);\n  const [queryParams] = useQueryParams();\n\n  const { prom, ruler } = useUnifiedAlertingSelector((state) => ({\n    prom: state.promRules[GRAFANA_RULES_SOURCE_NAME] || initialAsyncRequestState,\n    ruler: state.rulerRules[GRAFANA_RULES_SOURCE_NAME] || initialAsyncRequestState,\n  }));\n\n  const loading = prom.loading || ruler.loading;\n  const hasResult = !!prom.result || !!ruler.result;\n\n  const wantsGroupedView = queryParams['view'] === 'grouped';\n  const namespacesFormat = wantsGroupedView ? namespaces : flattenGrafanaManagedRules(namespaces);\n\n  const groupsWithNamespaces = useCombinedGroupNamespace(namespacesFormat);\n\n  const { numberOfPages, onPageChange, page, pageItems } = usePagination(\n    groupsWithNamespaces,\n    1,\n    DEFAULT_PER_PAGE_PAGINATION\n  );\n\n  return (\n    <section className={styles.wrapper}>\n      <div className={styles.sectionHeader}>\n        <h5>Grafana</h5>\n        {loading ? <LoadingPlaceholder className={styles.loader} text=\"Loading...\" /> : <div />}\n      </div>\n\n      {pageItems.map(({ group, namespace }) => (\n        <RulesGroup\n          group={group}\n          key={`${namespace.name}-${group.name}`}\n          namespace={namespace}\n          expandAll={expandAll}\n          viewMode={wantsGroupedView ? 'grouped' : 'list'}\n        />\n      ))}\n      {hasResult && namespacesFormat?.length === 0 && <p>No rules found.</p>}\n      {!hasResult && loading && <Spinner size={24} className={styles.spinner} />}\n      <Pagination\n        className={styles.pagination}\n        currentPage={page}\n        numberOfPages={numberOfPages}\n        onNavigate={onPageChange}\n        hideWhenSinglePage\n      />\n    </section>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  loader: css`\n    margin-bottom: 0;\n  `,\n  sectionHeader: css`\n    display: flex;\n    justify-content: space-between;\n  `,\n  wrapper: css`\n    margin-bottom: ${theme.spacing(4)};\n  `,\n  spinner: css`\n    text-align: center;\n    padding: ${theme.spacing(2)};\n  `,\n  pagination: getPaginationStyles(theme),\n});\n","import { css } from '@emotion/css';\nimport React, { FC, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { CombinedRule } from 'app/types/unified-alerting';\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\n\nimport { alertStateToReadable } from '../../utils/rules';\nimport { CollapseToggle } from '../CollapseToggle';\n\nimport { RulesTable } from './RulesTable';\n\ninterface Props {\n  rules: CombinedRule[];\n  state: PromAlertingRuleState;\n  defaultCollapsed?: boolean;\n}\n\nexport const RuleListStateSection: FC<Props> = ({ rules, state, defaultCollapsed = false }) => {\n  const [collapsed, setCollapsed] = useState(defaultCollapsed);\n  const styles = useStyles2(getStyles);\n  return (\n    <>\n      <h4 className={styles.header}>\n        <CollapseToggle\n          className={styles.collapseToggle}\n          size=\"xxl\"\n          isCollapsed={collapsed}\n          onToggle={() => setCollapsed(!collapsed)}\n        />\n        {alertStateToReadable(state)} ({rules.length})\n      </h4>\n      {!collapsed && <RulesTable className={styles.rulesTable} rules={rules} showGroupColumn={true} />}\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  collapseToggle: css`\n    vertical-align: middle;\n  `,\n  header: css`\n    margin-top: ${theme.spacing(2)};\n  `,\n  rulesTable: css`\n    margin-top: ${theme.spacing(3)};\n  `,\n});\n","import { css, cx } from '@emotion/css';\nimport { debounce } from 'lodash';\nimport React, { FormEvent, useState } from 'react';\n\nimport { DataSourceInstanceSettings, GrafanaTheme, SelectableValue } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { Button, Field, Icon, Input, Label, RadioButtonGroup, Tooltip, useStyles } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { PromAlertingRuleState, PromRuleType } from 'app/types/unified-alerting-dto';\n\nimport { getFiltersFromUrlParams } from '../../utils/misc';\nimport { alertStateToReadable } from '../../utils/rules';\n\nconst ViewOptions: SelectableValue[] = [\n  {\n    icon: 'list-ul',\n    label: 'List',\n    value: 'list',\n  },\n  {\n    icon: 'folder',\n    label: 'Grouped',\n    value: 'grouped',\n  },\n  {\n    icon: 'heart-rate',\n    label: 'State',\n    value: 'state',\n  },\n];\n\nconst RuleTypeOptions: SelectableValue[] = [\n  {\n    label: 'Alert ',\n    value: PromRuleType.Alerting,\n  },\n  {\n    label: 'Recording ',\n    value: PromRuleType.Recording,\n  },\n];\n\nconst RulesFilter = () => {\n  const [queryParams, setQueryParams] = useQueryParams();\n  // This key is used to force a rerender on the inputs when the filters are cleared\n  const [filterKey, setFilterKey] = useState<number>(Math.floor(Math.random() * 100));\n  const dataSourceKey = `dataSource-${filterKey}`;\n  const queryStringKey = `queryString-${filterKey}`;\n\n  const { dataSource, alertState, queryString, ruleType } = getFiltersFromUrlParams(queryParams);\n\n  const styles = useStyles(getStyles);\n  const stateOptions = Object.entries(PromAlertingRuleState).map(([key, value]) => ({\n    label: alertStateToReadable(value),\n    value,\n  }));\n\n  const handleDataSourceChange = (dataSourceValue: DataSourceInstanceSettings) => {\n    setQueryParams({ dataSource: dataSourceValue.name });\n  };\n\n  const clearDataSource = () => {\n    setQueryParams({ dataSource: null });\n  };\n\n  const handleQueryStringChange = debounce((e: FormEvent<HTMLInputElement>) => {\n    const target = e.target as HTMLInputElement;\n    setQueryParams({ queryString: target.value || null });\n  }, 600);\n\n  const handleAlertStateChange = (value: string) => {\n    setQueryParams({ alertState: value });\n  };\n\n  const handleViewChange = (view: string) => {\n    setQueryParams({ view });\n  };\n\n  const handleRuleTypeChange = (ruleType: PromRuleType) => {\n    setQueryParams({ ruleType });\n  };\n\n  const handleClearFiltersClick = () => {\n    setQueryParams({\n      alertState: null,\n      queryString: null,\n      dataSource: null,\n      ruleType: null,\n    });\n    setTimeout(() => setFilterKey(filterKey + 1), 100);\n  };\n\n  const searchIcon = <Icon name={'search'} />;\n  return (\n    <div className={styles.container}>\n      <Field className={styles.inputWidth} label=\"Search by data source\">\n        <DataSourcePicker\n          key={dataSourceKey}\n          alerting\n          noDefault\n          placeholder=\"All data sources\"\n          current={dataSource}\n          onChange={handleDataSourceChange}\n          onClear={clearDataSource}\n        />\n      </Field>\n      <div className={cx(styles.flexRow, styles.spaceBetween)}>\n        <div className={styles.flexRow}>\n          <Field\n            className={styles.rowChild}\n            label={\n              <Label>\n                <Stack gap={0.5}>\n                  <span>Search by label</span>\n                  <Tooltip\n                    content={\n                      <div>\n                        Filter rules and alerts using label querying, ex:\n                        <code>{`{severity=\"critical\", instance=~\"cluster-us-.+\"}`}</code>\n                      </div>\n                    }\n                  >\n                    <Icon name=\"info-circle\" size=\"sm\" />\n                  </Tooltip>\n                </Stack>\n              </Label>\n            }\n          >\n            <Input\n              key={queryStringKey}\n              className={styles.inputWidth}\n              prefix={searchIcon}\n              onChange={handleQueryStringChange}\n              defaultValue={queryString}\n              placeholder=\"Search\"\n              data-testid=\"search-query-input\"\n            />\n          </Field>\n          <div className={styles.rowChild}>\n            <Label>State</Label>\n            <RadioButtonGroup options={stateOptions} value={alertState} onChange={handleAlertStateChange} />\n          </div>\n          <div className={styles.rowChild}>\n            <Label>Rule type</Label>\n            <RadioButtonGroup\n              options={RuleTypeOptions}\n              value={ruleType as PromRuleType}\n              onChange={handleRuleTypeChange}\n            />\n          </div>\n          <div className={styles.rowChild}>\n            <Label>View as</Label>\n            <RadioButtonGroup\n              options={ViewOptions}\n              value={String(queryParams['view'] ?? ViewOptions[0].value)}\n              onChange={handleViewChange}\n            />\n          </div>\n        </div>\n        {(dataSource || alertState || queryString || ruleType) && (\n          <div className={styles.flexRow}>\n            <Button\n              className={styles.clearButton}\n              fullWidth={false}\n              icon=\"times\"\n              variant=\"secondary\"\n              onClick={handleClearFiltersClick}\n            >\n              Clear filters\n            </Button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => {\n  return {\n    container: css`\n      display: flex;\n      flex-direction: column;\n      padding-bottom: ${theme.spacing.sm};\n      margin-bottom: ${theme.spacing.sm};\n    `,\n    inputWidth: css`\n      width: 340px;\n      flex-grow: 0;\n    `,\n    flexRow: css`\n      display: flex;\n      flex-direction: row;\n      align-items: flex-end;\n      width: 100%;\n      flex-wrap: wrap;\n    `,\n    spaceBetween: css`\n      justify-content: space-between;\n    `,\n    rowChild: css`\n      margin: 0 ${theme.spacing.sm} 0 0;\n    `,\n    clearButton: css`\n      margin-top: ${theme.spacing.sm};\n    `,\n  };\n};\n\nexport default RulesFilter;\n","import { useMemo } from 'react';\n\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { CombinedRuleGroup, CombinedRuleNamespace, FilterState } from 'app/types/unified-alerting';\nimport { PromRuleType, RulerGrafanaRuleDTO } from 'app/types/unified-alerting-dto';\n\nimport { labelsMatchMatchers, parseMatchers } from '../utils/alertmanager';\nimport { isCloudRulesSource } from '../utils/datasource';\nimport { getFiltersFromUrlParams } from '../utils/misc';\nimport { isAlertingRule, isGrafanaRulerRule } from '../utils/rules';\n\nexport const useFilteredRules = (namespaces: CombinedRuleNamespace[]) => {\n  const [queryParams] = useQueryParams();\n  const filters = getFiltersFromUrlParams(queryParams);\n\n  return useMemo(() => {\n    const filteredNamespaces = namespaces\n      // Filter by data source\n      // TODO: filter by multiple data sources for grafana-managed alerts\n      .filter(({ rulesSource }) =>\n        filters.dataSource && isCloudRulesSource(rulesSource) ? rulesSource.name === filters.dataSource : true\n      )\n      // If a namespace and group have rules that match the rules filters then keep them.\n      .reduce(reduceNamespaces(filters), [] as CombinedRuleNamespace[]);\n    return filteredNamespaces;\n  }, [namespaces, filters]);\n};\n\nconst reduceNamespaces = (filters: FilterState) => {\n  return (namespaceAcc: CombinedRuleNamespace[], namespace: CombinedRuleNamespace) => {\n    const groups = namespace.groups.reduce(reduceGroups(filters), [] as CombinedRuleGroup[]);\n\n    if (groups.length) {\n      namespaceAcc.push({\n        ...namespace,\n        groups,\n      });\n    }\n\n    return namespaceAcc;\n  };\n};\n\n// Reduces groups to only groups that have rules matching the filters\nconst reduceGroups = (filters: FilterState) => {\n  return (groupAcc: CombinedRuleGroup[], group: CombinedRuleGroup) => {\n    const rules = group.rules.filter((rule) => {\n      if (filters.ruleType && filters.ruleType !== rule.promRule?.type) {\n        return false;\n      }\n      if (filters.dataSource && isGrafanaRulerRule(rule.rulerRule) && !isQueryingDataSource(rule.rulerRule, filters)) {\n        return false;\n      }\n      // Query strings can match alert name, label keys, and label values\n      if (filters.queryString) {\n        const normalizedQueryString = filters.queryString.toLocaleLowerCase();\n        const doesNameContainsQueryString = rule.name?.toLocaleLowerCase().includes(normalizedQueryString);\n        const matchers = parseMatchers(filters.queryString);\n\n        const doRuleLabelsMatchQuery = labelsMatchMatchers(rule.labels, matchers);\n        const doAlertsContainMatchingLabels =\n          rule.promRule &&\n          rule.promRule.type === PromRuleType.Alerting &&\n          rule.promRule.alerts &&\n          rule.promRule.alerts.some((alert) => labelsMatchMatchers(alert.labels, matchers));\n\n        if (!(doesNameContainsQueryString || doRuleLabelsMatchQuery || doAlertsContainMatchingLabels)) {\n          return false;\n        }\n      }\n      if (\n        filters.alertState &&\n        !(rule.promRule && isAlertingRule(rule.promRule) && rule.promRule.state === filters.alertState)\n      ) {\n        return false;\n      }\n      return true;\n    });\n    // Add rules to the group that match the rule list filters\n    if (rules.length) {\n      groupAcc.push({\n        ...group,\n        rules,\n      });\n    }\n    return groupAcc;\n  };\n};\n\nconst isQueryingDataSource = (rulerRule: RulerGrafanaRuleDTO, filter: FilterState): boolean => {\n  if (!filter.dataSource) {\n    return true;\n  }\n\n  return !!rulerRule.grafana_alert.data.find((query) => {\n    if (!query.datasourceUid) {\n      return false;\n    }\n    const ds = getDataSourceSrv().getInstanceSettings(query.datasourceUid);\n    return ds?.name === filter.dataSource;\n  });\n};\n","import { css } from '@emotion/css';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useAsyncFn, useInterval } from 'react-use';\n\nimport { GrafanaTheme2, urlUtil } from '@grafana/data';\nimport { Button, LinkButton, useStyles2, withErrorBoundary } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { useDispatch } from 'app/types';\n\nimport { CombinedRuleNamespace } from '../../../types/unified-alerting';\n\nimport { AlertingPageWrapper } from './components/AlertingPageWrapper';\nimport { NoRulesSplash } from './components/rules/NoRulesCTA';\nimport { RuleListErrors } from './components/rules/RuleListErrors';\nimport { RuleListGroupView } from './components/rules/RuleListGroupView';\nimport { RuleListStateView } from './components/rules/RuleListStateView';\nimport { RuleStats } from './components/rules/RuleStats';\nimport RulesFilter from './components/rules/RulesFilter';\nimport { useCombinedRuleNamespaces } from './hooks/useCombinedRuleNamespaces';\nimport { useFilteredRules } from './hooks/useFilteredRules';\nimport { useUnifiedAlertingSelector } from './hooks/useUnifiedAlertingSelector';\nimport { fetchAllPromAndRulerRulesAction } from './state/actions';\nimport { useRulesAccess } from './utils/accessControlHooks';\nimport { RULE_LIST_POLL_INTERVAL_MS } from './utils/constants';\nimport { getAllRulesSourceNames } from './utils/datasource';\nimport { getFiltersFromUrlParams } from './utils/misc';\n\nconst VIEWS = {\n  groups: RuleListGroupView,\n  state: RuleListStateView,\n};\n\nconst RuleList = withErrorBoundary(\n  () => {\n    const dispatch = useDispatch();\n    const styles = useStyles2(getStyles);\n    const rulesDataSourceNames = useMemo(getAllRulesSourceNames, []);\n    const location = useLocation();\n    const [expandAll, setExpandAll] = useState(false);\n\n    const [queryParams] = useQueryParams();\n    const filters = getFiltersFromUrlParams(queryParams);\n    const filtersActive = Object.values(filters).some((filter) => filter !== undefined);\n\n    const { canCreateGrafanaRules, canCreateCloudRules } = useRulesAccess();\n\n    const view = VIEWS[queryParams['view'] as keyof typeof VIEWS]\n      ? (queryParams['view'] as keyof typeof VIEWS)\n      : 'groups';\n\n    const ViewComponent = VIEWS[view];\n\n    const promRuleRequests = useUnifiedAlertingSelector((state) => state.promRules);\n    const rulerRuleRequests = useUnifiedAlertingSelector((state) => state.rulerRules);\n\n    const loading = rulesDataSourceNames.some(\n      (name) => promRuleRequests[name]?.loading || rulerRuleRequests[name]?.loading\n    );\n\n    const promRequests = Object.entries(promRuleRequests);\n    const allPromLoaded = promRequests.every(\n      ([_, state]) => state.dispatched && (state?.result !== undefined || state?.error !== undefined)\n    );\n    const allPromEmpty = promRequests.every(([_, state]) => state.dispatched && state?.result?.length === 0);\n\n    // Trigger data refresh only when the RULE_LIST_POLL_INTERVAL_MS elapsed since the previous load FINISHED\n    const [_, fetchRules] = useAsyncFn(async () => {\n      if (!loading) {\n        await dispatch(fetchAllPromAndRulerRulesAction());\n      }\n    }, [loading]);\n\n    // fetch rules, then poll every RULE_LIST_POLL_INTERVAL_MS\n    useEffect(() => {\n      dispatch(fetchAllPromAndRulerRulesAction());\n    }, [dispatch]);\n    useInterval(fetchRules, RULE_LIST_POLL_INTERVAL_MS);\n\n    // Show splash only when we loaded all of the data sources and none of them has alerts\n    const hasNoAlertRulesCreatedYet = allPromLoaded && allPromEmpty && promRequests.length > 0;\n\n    const combinedNamespaces: CombinedRuleNamespace[] = useCombinedRuleNamespaces();\n    const filteredNamespaces = useFilteredRules(combinedNamespaces);\n    return (\n      // We don't want to show the Loading... indicator for the whole page.\n      // We show separate indicators for Grafana-managed and Cloud rules\n      <AlertingPageWrapper pageId=\"alert-list\" isLoading={false}>\n        <RuleListErrors />\n        <RulesFilter />\n        {!hasNoAlertRulesCreatedYet && (\n          <>\n            <div className={styles.break} />\n            <div className={styles.buttonsContainer}>\n              <div className={styles.statsContainer}>\n                {view === 'groups' && filtersActive && (\n                  <Button\n                    className={styles.expandAllButton}\n                    icon={expandAll ? 'angle-double-up' : 'angle-double-down'}\n                    variant=\"secondary\"\n                    onClick={() => setExpandAll(!expandAll)}\n                  >\n                    {expandAll ? 'Collapse all' : 'Expand all'}\n                  </Button>\n                )}\n                <RuleStats showInactive={true} showRecording={true} namespaces={filteredNamespaces} />\n              </div>\n              {(canCreateGrafanaRules || canCreateCloudRules) && (\n                <LinkButton\n                  href={urlUtil.renderUrl('alerting/new', { returnTo: location.pathname + location.search })}\n                  icon=\"plus\"\n                >\n                  New alert rule\n                </LinkButton>\n              )}\n            </div>\n          </>\n        )}\n        {hasNoAlertRulesCreatedYet && <NoRulesSplash />}\n        {!hasNoAlertRulesCreatedYet && <ViewComponent expandAll={expandAll} namespaces={filteredNamespaces} />}\n      </AlertingPageWrapper>\n    );\n  },\n  { style: 'page' }\n);\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  break: css`\n    width: 100%;\n    height: 0;\n    margin-bottom: ${theme.spacing(2)};\n    border-bottom: solid 1px ${theme.colors.border.medium};\n  `,\n  buttonsContainer: css`\n    margin-bottom: ${theme.spacing(2)};\n    display: flex;\n    justify-content: space-between;\n  `,\n  statsContainer: css`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n  `,\n  expandAllButton: css`\n    margin-right: ${theme.spacing(1)};\n  `,\n});\n\nexport default RuleList;\n","import React, { FC, useEffect, useMemo } from 'react';\n\nimport { logInfo } from '@grafana/runtime';\nimport { AccessControlAction } from 'app/types';\nimport { CombinedRuleNamespace } from 'app/types/unified-alerting';\n\nimport { LogMessages } from '../../Analytics';\nimport { isCloudRulesSource, isGrafanaRulesSource } from '../../utils/datasource';\nimport { Authorize } from '../Authorize';\n\nimport { CloudRules } from './CloudRules';\nimport { GrafanaRules } from './GrafanaRules';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n  expandAll: boolean;\n}\n\nexport const RuleListGroupView: FC<Props> = ({ namespaces, expandAll }) => {\n  const [grafanaNamespaces, cloudNamespaces] = useMemo(() => {\n    const sorted = namespaces\n      .map((namespace) => ({\n        ...namespace,\n        groups: namespace.groups.sort((a, b) => a.name.localeCompare(b.name)),\n      }))\n      .sort((a, b) => a.name.localeCompare(b.name));\n    return [\n      sorted.filter((ns) => isGrafanaRulesSource(ns.rulesSource)),\n      sorted.filter((ns) => isCloudRulesSource(ns.rulesSource)),\n    ];\n  }, [namespaces]);\n\n  useEffect(() => {\n    logInfo(LogMessages.loadedList);\n  }, []);\n\n  return (\n    <>\n      <Authorize actions={[AccessControlAction.AlertingRuleRead]}>\n        <GrafanaRules namespaces={grafanaNamespaces} expandAll={expandAll} />\n      </Authorize>\n      <Authorize actions={[AccessControlAction.AlertingRuleExternalRead]}>\n        <CloudRules namespaces={cloudNamespaces} expandAll={expandAll} />\n      </Authorize>\n    </>\n  );\n};\n","import React, { FC, useMemo } from 'react';\n\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { CombinedRule, CombinedRuleNamespace } from 'app/types/unified-alerting';\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\n\nimport { getFiltersFromUrlParams } from '../../utils/misc';\nimport { isAlertingRule } from '../../utils/rules';\n\nimport { RuleListStateSection } from './RuleListStateSection';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n  expandAll?: boolean;\n}\n\ntype GroupedRules = Record<PromAlertingRuleState, CombinedRule[]>;\n\nexport const RuleListStateView: FC<Props> = ({ namespaces }) => {\n  const filters = getFiltersFromUrlParams(useQueryParams()[0]);\n\n  const groupedRules = useMemo(() => {\n    const result: GroupedRules = {\n      [PromAlertingRuleState.Firing]: [],\n      [PromAlertingRuleState.Inactive]: [],\n      [PromAlertingRuleState.Pending]: [],\n    };\n\n    namespaces.forEach((namespace) =>\n      namespace.groups.forEach((group) =>\n        group.rules.forEach((rule) => {\n          if (rule.promRule && isAlertingRule(rule.promRule)) {\n            result[rule.promRule.state].push(rule);\n          }\n        })\n      )\n    );\n\n    Object.values(result).forEach((rules) => rules.sort((a, b) => a.name.localeCompare(b.name)));\n\n    return result;\n  }, [namespaces]);\n  return (\n    <>\n      {(!filters.alertState || filters.alertState === PromAlertingRuleState.Firing) && (\n        <RuleListStateSection state={PromAlertingRuleState.Firing} rules={groupedRules[PromAlertingRuleState.Firing]} />\n      )}\n      {(!filters.alertState || filters.alertState === PromAlertingRuleState.Pending) && (\n        <RuleListStateSection\n          state={PromAlertingRuleState.Pending}\n          rules={groupedRules[PromAlertingRuleState.Pending]}\n        />\n      )}\n      {(!filters.alertState || filters.alertState === PromAlertingRuleState.Inactive) && (\n        <RuleListStateSection\n          defaultCollapsed={filters.alertState !== PromAlertingRuleState.Inactive}\n          state={PromAlertingRuleState.Inactive}\n          rules={groupedRules[PromAlertingRuleState.Inactive]}\n        />\n      )}\n    </>\n  );\n};\n","import React, { FC } from 'react';\n\nimport { NavModelItem } from '@grafana/data';\nimport { Page } from 'app/core/components/Page/Page';\n\ninterface Props {\n  pageId: string;\n  isLoading?: boolean;\n  pageNav?: NavModelItem;\n}\n\nexport const AlertingPageWrapper: FC<Props> = ({ children, pageId, pageNav, isLoading }) => {\n  return (\n    <Page pageNav={pageNav} navId={pageId}>\n      <Page.Contents isLoading={isLoading}>{children}</Page.Contents>\n    </Page>\n  );\n};\n","import React, { FC } from 'react';\n\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AccessControlAction } from 'app/types';\n\ntype Props = {\n  actions: AccessControlAction[];\n  fallback?: boolean;\n};\n\nexport const Authorize: FC<Props> = ({ actions, children, fallback = true }) => {\n  if (actions.some((action) => contextSrv.hasAccess(action, fallback))) {\n    return <>{children}</>;\n  } else {\n    return null;\n  }\n};\n","import { css, cx } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { DynamicTable, DynamicTableProps } from './DynamicTable';\n\nexport type DynamicTableWithGuidelinesProps<T> = Omit<DynamicTableProps<T>, 'renderPrefixHeader, renderPrefixCell'>;\n\n// DynamicTable, but renders visual guidelines on the left, for larger screen widths\nexport const DynamicTableWithGuidelines = <T extends object>({\n  renderExpandedContent,\n  ...props\n}: DynamicTableWithGuidelinesProps<T>) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <DynamicTable\n      renderExpandedContent={\n        renderExpandedContent\n          ? (item, index, items) => (\n              <>\n                {!(index === items.length - 1) && <div className={cx(styles.contentGuideline, styles.guideline)} />}\n                {renderExpandedContent(item, index, items)}\n              </>\n            )\n          : undefined\n      }\n      renderPrefixHeader={() => (\n        <div className={styles.relative}>\n          <div className={cx(styles.headerGuideline, styles.guideline)} />\n        </div>\n      )}\n      renderPrefixCell={(_, index, items) => (\n        <div className={styles.relative}>\n          <div className={cx(styles.topGuideline, styles.guideline)} />\n          {!(index === items.length - 1) && <div className={cx(styles.bottomGuideline, styles.guideline)} />}\n        </div>\n      )}\n      {...props}\n    />\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  relative: css`\n    position: relative;\n    height: 100%;\n  `,\n  guideline: css`\n    left: -19px;\n    border-left: 1px solid ${theme.colors.border.medium};\n    position: absolute;\n\n    ${theme.breakpoints.down('md')} {\n      display: none;\n    }\n  `,\n  topGuideline: css`\n    width: 18px;\n    border-bottom: 1px solid ${theme.colors.border.medium};\n    top: 0;\n    bottom: 50%;\n  `,\n  bottomGuideline: css`\n    top: 50%;\n    bottom: 0;\n  `,\n  contentGuideline: css`\n    top: 0;\n    bottom: 0;\n    left: -49px !important;\n  `,\n  headerGuideline: css`\n    top: -25px;\n    bottom: 0;\n  `,\n});\n","import React, { FC } from 'react';\n\nimport { Icon } from '@grafana/ui';\n\ninterface RuleLocationProps {\n  namespace: string;\n  group?: string;\n}\n\nconst RuleLocation: FC<RuleLocationProps> = ({ namespace, group }) => {\n  if (!group) {\n    return <>{namespace}</>;\n  }\n\n  return (\n    <>\n      {namespace} <Icon name=\"angle-right\" /> {group}\n    </>\n  );\n};\n\nexport { RuleLocation };\n","import React, { FC } from 'react';\n\nimport { IconName, Tooltip, LinkButton, Button } from '@grafana/ui';\nimport { PopoverContent, TooltipPlacement } from '@grafana/ui/src/components/Tooltip';\n\ninterface Props {\n  tooltip: PopoverContent;\n  icon: IconName;\n  className?: string;\n  tooltipPlacement?: TooltipPlacement;\n  to?: string;\n  target?: string;\n  onClick?: () => void;\n  'data-testid'?: string;\n}\n\nexport const ActionIcon: FC<Props> = ({\n  tooltip,\n  icon,\n  to,\n  target,\n  onClick,\n  className,\n  tooltipPlacement = 'top',\n  ...rest\n}) => {\n  const ariaLabel = typeof tooltip === 'string' ? tooltip : undefined;\n\n  return (\n    <Tooltip content={tooltip} placement={tooltipPlacement}>\n      {to ? (\n        <LinkButton\n          variant=\"secondary\"\n          fill=\"text\"\n          icon={icon}\n          href={to}\n          size=\"sm\"\n          target={target}\n          {...rest}\n          aria-label={ariaLabel}\n        />\n      ) : (\n        <Button\n          className={className}\n          variant=\"secondary\"\n          fill=\"text\"\n          size=\"sm\"\n          icon={icon}\n          type=\"button\"\n          onClick={onClick}\n          {...rest}\n          aria-label={ariaLabel}\n        />\n      )}\n    </Tooltip>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { useMemo } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data/src';\nimport { config } from '@grafana/runtime/src';\nimport { Icon, Tooltip, useStyles2 } from '@grafana/ui/src';\n\nimport { CombinedRule } from '../../../../../types/unified-alerting';\nimport { checkEvaluationIntervalGlobalLimit } from '../../utils/config';\n\ninterface RuleConfigStatusProps {\n  rule: CombinedRule;\n}\n\nexport function RuleConfigStatus({ rule }: RuleConfigStatusProps) {\n  const styles = useStyles2(getStyles);\n\n  const { exceedsLimit } = useMemo(\n    () => checkEvaluationIntervalGlobalLimit(rule.group.interval),\n    [rule.group.interval]\n  );\n\n  if (!exceedsLimit) {\n    return null;\n  }\n\n  return (\n    <Tooltip\n      theme=\"error\"\n      content={\n        <div>\n          A minimum evaluation interval of{' '}\n          <span className={styles.globalLimitValue}>{config.unifiedAlerting.minInterval}</span> has been configured in\n          Grafana and will be used instead of the {rule.group.interval} interval configured for the Rule Group.\n        </div>\n      }\n    >\n      <Icon name=\"stopwatch-slash\" className={styles.icon} />\n    </Tooltip>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    globalLimitValue: css`\n      font-weight: ${theme.typography.fontWeightBold};\n    `,\n    icon: css`\n      fill: ${theme.colors.warning.text};\n    `,\n  };\n}\n","import { css } from '@emotion/css';\nimport React, { FC } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { CombinedRule } from 'app/types/unified-alerting';\n\nimport { isRecordingRulerRule } from '../../utils/rules';\nimport { AlertLabels } from '../AlertLabels';\nimport { DetailsField } from '../DetailsField';\n\nimport { RuleDetailsActionButtons } from './RuleDetailsActionButtons';\nimport { RuleDetailsAnnotations } from './RuleDetailsAnnotations';\nimport { RuleDetailsDataSources } from './RuleDetailsDataSources';\nimport { RuleDetailsExpression } from './RuleDetailsExpression';\nimport { RuleDetailsMatchingInstances } from './RuleDetailsMatchingInstances';\n\ninterface Props {\n  rule: CombinedRule;\n}\n\n// The limit is set to 15 in order to upkeep the good performance\n// and to encourage users to go to the rule details page to see the rest of the instances\n// We don't want to paginate the instances list on the alert list page\nconst INSTANCES_DISPLAY_LIMIT = 15;\n\nexport const RuleDetails: FC<Props> = ({ rule }) => {\n  const styles = useStyles2(getStyles);\n  const {\n    namespace: { rulesSource },\n  } = rule;\n\n  const annotations = Object.entries(rule.annotations).filter(([_, value]) => !!value.trim());\n\n  return (\n    <div>\n      <RuleDetailsActionButtons rule={rule} rulesSource={rulesSource} />\n      <div className={styles.wrapper}>\n        <div className={styles.leftSide}>\n          {<EvaluationBehaviorSummary rule={rule} />}\n          {!!rule.labels && !!Object.keys(rule.labels).length && (\n            <DetailsField label=\"Labels\" horizontal={true}>\n              <AlertLabels labels={rule.labels} />\n            </DetailsField>\n          )}\n          <RuleDetailsExpression rulesSource={rulesSource} rule={rule} annotations={annotations} />\n          <RuleDetailsAnnotations annotations={annotations} />\n        </div>\n        <div className={styles.rightSide}>\n          <RuleDetailsDataSources rulesSource={rulesSource} rule={rule} />\n        </div>\n      </div>\n      <RuleDetailsMatchingInstances rule={rule} itemsDisplayLimit={INSTANCES_DISPLAY_LIMIT} />\n    </div>\n  );\n};\n\ninterface EvaluationBehaviorSummaryProps {\n  rule: CombinedRule;\n}\n\nconst EvaluationBehaviorSummary = ({ rule }: EvaluationBehaviorSummaryProps) => {\n  let forDuration: string | undefined;\n  let every = rule.group.interval;\n\n  // recording rules don't have a for duration\n  if (!isRecordingRulerRule(rule.rulerRule)) {\n    forDuration = rule.rulerRule?.for;\n  }\n\n  return (\n    <>\n      {every && (\n        <DetailsField label=\"Evaluate\" horizontal={true}>\n          Every {every}\n        </DetailsField>\n      )}\n      {forDuration && (\n        <DetailsField label=\"For\" horizontal={true}>\n          {forDuration}\n        </DetailsField>\n      )}\n    </>\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    display: flex;\n    flex-direction: row;\n\n    ${theme.breakpoints.down('md')} {\n      flex-direction: column;\n    }\n  `,\n  leftSide: css`\n    flex: 1;\n  `,\n  rightSide: css`\n    ${theme.breakpoints.up('md')} {\n      padding-left: 90px;\n      width: 300px;\n    }\n  `,\n});\n","import { css, cx } from '@emotion/css';\nimport React, { FC, useMemo } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { CombinedRule } from 'app/types/unified-alerting';\n\nimport { DEFAULT_PER_PAGE_PAGINATION } from '../../../../../core/constants';\nimport { useHasRuler } from '../../hooks/useHasRuler';\nimport { Annotation } from '../../utils/constants';\nimport { isGrafanaRulerRule } from '../../utils/rules';\nimport { DynamicTable, DynamicTableColumnProps, DynamicTableItemProps } from '../DynamicTable';\nimport { DynamicTableWithGuidelines } from '../DynamicTableWithGuidelines';\nimport { ProvisioningBadge } from '../Provisioning';\nimport { RuleLocation } from '../RuleLocation';\nimport { Tokenize } from '../Tokenize';\n\nimport { RuleConfigStatus } from './RuleConfigStatus';\nimport { RuleDetails } from './RuleDetails';\nimport { RuleHealth } from './RuleHealth';\nimport { RuleState } from './RuleState';\n\ntype RuleTableColumnProps = DynamicTableColumnProps<CombinedRule>;\ntype RuleTableItemProps = DynamicTableItemProps<CombinedRule>;\n\ninterface Props {\n  rules: CombinedRule[];\n  showGuidelines?: boolean;\n  showGroupColumn?: boolean;\n  showSummaryColumn?: boolean;\n  emptyMessage?: string;\n  className?: string;\n}\n\nexport const RulesTable: FC<Props> = ({\n  rules,\n  className,\n  showGuidelines = false,\n  emptyMessage = 'No rules found.',\n  showGroupColumn = false,\n  showSummaryColumn = false,\n}) => {\n  const styles = useStyles2(getStyles);\n\n  const wrapperClass = cx(styles.wrapper, className, { [styles.wrapperMargin]: showGuidelines });\n\n  const items = useMemo((): RuleTableItemProps[] => {\n    return rules.map((rule, ruleIdx) => {\n      return {\n        id: `${rule.namespace.name}-${rule.group.name}-${rule.name}-${ruleIdx}`,\n        data: rule,\n      };\n    });\n  }, [rules]);\n\n  const columns = useColumns(showSummaryColumn, showGroupColumn);\n\n  if (!rules.length) {\n    return <div className={cx(wrapperClass, styles.emptyMessage)}>{emptyMessage}</div>;\n  }\n\n  const TableComponent = showGuidelines ? DynamicTableWithGuidelines : DynamicTable;\n\n  return (\n    <div className={wrapperClass} data-testid=\"rules-table\">\n      <TableComponent\n        cols={columns}\n        isExpandable={true}\n        items={items}\n        renderExpandedContent={({ data: rule }) => <RuleDetails rule={rule} />}\n        pagination={{ itemsPerPage: DEFAULT_PER_PAGE_PAGINATION }}\n        paginationStyles={styles.pagination}\n      />\n    </div>\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  wrapperMargin: css`\n    ${theme.breakpoints.up('md')} {\n      margin-left: 36px;\n    }\n  `,\n  emptyMessage: css`\n    padding: ${theme.spacing(1)};\n  `,\n  wrapper: css`\n    width: auto;\n    border-radius: ${theme.shape.borderRadius()};\n  `,\n  pagination: css`\n    display: flex;\n    margin: 0;\n    padding-top: ${theme.spacing(1)};\n    padding-bottom: ${theme.spacing(0.25)};\n    justify-content: center;\n    border-left: 1px solid ${theme.colors.border.strong};\n    border-right: 1px solid ${theme.colors.border.strong};\n    border-bottom: 1px solid ${theme.colors.border.strong};\n  `,\n});\n\nfunction useColumns(showSummaryColumn: boolean, showGroupColumn: boolean) {\n  const { hasRuler, rulerRulesLoaded } = useHasRuler();\n\n  return useMemo((): RuleTableColumnProps[] => {\n    const columns: RuleTableColumnProps[] = [\n      {\n        id: 'state',\n        label: 'State',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: rule }) => {\n          const { namespace } = rule;\n          const { rulesSource } = namespace;\n          const { promRule, rulerRule } = rule;\n          const isDeleting = !!(hasRuler(rulesSource) && rulerRulesLoaded(rulesSource) && promRule && !rulerRule);\n          const isCreating = !!(hasRuler(rulesSource) && rulerRulesLoaded(rulesSource) && rulerRule && !promRule);\n          return <RuleState rule={rule} isDeleting={isDeleting} isCreating={isCreating} />;\n        },\n        size: '165px',\n      },\n      {\n        id: 'name',\n        label: 'Name',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: rule }) => rule.name,\n        size: 5,\n      },\n      {\n        id: 'provisioned',\n        label: '',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: rule }) => {\n          const rulerRule = rule.rulerRule;\n          const isGrafanaManagedRule = isGrafanaRulerRule(rulerRule);\n\n          if (!isGrafanaManagedRule) {\n            return null;\n          }\n\n          const provenance = rulerRule.grafana_alert.provenance;\n          return provenance ? <ProvisioningBadge /> : null;\n        },\n        size: '100px',\n      },\n      {\n        id: 'warnings',\n        label: '',\n        renderCell: ({ data: combinedRule }) => <RuleConfigStatus rule={combinedRule} />,\n        size: '45px',\n      },\n      {\n        id: 'health',\n        label: 'Health',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: { promRule, group } }) => (promRule ? <RuleHealth rule={promRule} /> : null),\n        size: '75px',\n      },\n    ];\n    if (showSummaryColumn) {\n      columns.push({\n        id: 'summary',\n        label: 'Summary',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: rule }) => {\n          return <Tokenize input={rule.annotations[Annotation.summary] ?? ''} />;\n        },\n        size: 5,\n      });\n    }\n    if (showGroupColumn) {\n      columns.push({\n        id: 'group',\n        label: 'Group',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: rule }) => {\n          const { namespace, group } = rule;\n          // ungrouped rules are rules that are in the \"default\" group name\n          const isUngrouped = group.name === 'default';\n          const groupName = isUngrouped ? (\n            <RuleLocation namespace={namespace.name} />\n          ) : (\n            <RuleLocation namespace={namespace.name} group={group.name} />\n          );\n\n          return groupName;\n        },\n        size: 5,\n      });\n    }\n    return columns;\n  }, [hasRuler, rulerRulesLoaded, showSummaryColumn, showGroupColumn]);\n}\n","import { useCallback } from 'react';\n\nimport { RulesSource } from 'app/types/unified-alerting';\n\nimport { getRulesSourceName, GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\nimport { useUnifiedAlertingSelector } from './useUnifiedAlertingSelector';\n\n// datasource has ruler if it's grafana managed or if we're able to load rules from it\nexport function useHasRuler() {\n  const rulerRules = useUnifiedAlertingSelector((state) => state.rulerRules);\n\n  const hasRuler = useCallback(\n    (rulesSource: string | RulesSource) => {\n      const rulesSourceName = typeof rulesSource === 'string' ? rulesSource : rulesSource.name;\n      return rulesSourceName === GRAFANA_RULES_SOURCE_NAME || !!rulerRules[rulesSourceName]?.result;\n    },\n    [rulerRules]\n  );\n\n  const rulerRulesLoaded = useCallback(\n    (rulesSource: RulesSource) => {\n      const rulesSourceName = getRulesSourceName(rulesSource);\n      const result = rulerRules[rulesSourceName]?.result;\n\n      return Boolean(result);\n    },\n    [rulerRules]\n  );\n\n  return { hasRuler, rulerRulesLoaded };\n}\n","import { useEffect, useRef } from 'react';\nvar useInterval = function (callback, delay) {\n    var savedCallback = useRef(function () { });\n    useEffect(function () {\n        savedCallback.current = callback;\n    });\n    useEffect(function () {\n        if (delay !== null) {\n            var interval_1 = setInterval(function () { return savedCallback.current(); }, delay || 0);\n            return function () { return clearInterval(interval_1); };\n        }\n        return undefined;\n    }, [delay]);\n};\nexport default useInterval;\n"],"names":["AlertHowToModal","onDismiss","Modal","title","isOpen","onClickBackdrop","spacing","src","alt","rule","search","onTogglePause","ruleUrl","url","panelId","renderText","useCallback","text","highlightClassName","textToHighlight","searchWords","Card","name","Icon","size","stateIcon","className","stateClass","stateText","stateAge","info","Button","variant","icon","state","onClick","href","DeprecationNotice","Alert","severity","getSearchQuery","searchQuery","getAlertRuleItems","regex","RegExp","alertRules","items","filter","item","test","mapDispatchToProps","getAlertRulesAsync","setSearchQuery","togglePauseAlertRule","connector","connect","navModel","getNavModel","navIndex","isLoading","AlertRuleListUnconnected","PureComponent","label","value","option","locationService","appEvents","ShowModalReactEvent","component","this","props","id","paused","componentDidMount","fetchRules","componentDidUpdate","prevProps","queryParams","getStateFilter","render","Page","FilterInput","placeholder","onChange","onSearchQueryChange","htmlFor","Select","inputId","options","stateFilters","onStateFilterChanged","config","onOpenHowTo","map","async","dispatch","loadAlertRules","rules","getBackendSrv","get","loadedAlertRules","post","toString","createNotificationChannel","data","notifyApp","createSuccessNotification","error","isFetchError","createErrorNotification","updateNotificationChannel","put","testNotificationChannel","getState","channel","notificationChannel","loadNotificationTypes","notificationTypes","sort","o1","o2","setNotificationChannels","loadNotificationChannel","notificationChannelLoaded","NoRulesSplash","canCreateGrafanaRules","canCreateCloudRules","useRulesAccess","EmptyListCTA","buttonIcon","buttonLink","buttonTitle","proTip","proTipLink","proTipLinkTitle","proTipTarget","CallToActionCard","message","callToActionElement","RuleListErrors","expanded","setExpanded","useState","closed","setClosed","useLocalStorage","dataSourceConfigRequests","useUnifiedAlertingSelector","dataSources","promRuleRequests","promRules","rulerRuleRequests","rulerRules","styles","useStyles2","getStyles","errors","useMemo","dataSourceConfigErrors","promRequestErrors","rulerRequestErrors","requests","getRulesDataSources","reduce","result","dataSource","isRulerNotSupportedResponse","grafanaPromError","GRAFANA_RULES_SOURCE_NAME","grafanaRulerError","push","forEach","makeDataSourceLink","dsLink","length","ErrorSummaryButton","count","onRemove","idx","moreButton","fill","pluralize","floatRight","Tooltip","content","placement","theme","css","typography","fontWeightBold","EditCloudGroupModal","namespace","group","onClose","useDispatch","loading","dispatched","updateLotexNamespaceAndGroup","initialAsyncRequestState","defaultValues","namespaceName","groupName","groupInterval","interval","useEffect","useCleanup","unifiedAlerting","modal","Form","onSubmit","values","updateLotexNamespaceAndGroupAction","rulesSourceName","getRulesSourceName","rulesSource","newGroupName","newNamespaceName","undefined","register","formState","isDirty","watch","Field","invalid","Input","I","required","evaluateEveryValidationOptions","checkEvaluationIntervalGlobalLimit","exceedsLimit","type","disabled","JSON","stringify","ReorderCloudGroupModal","pending","setPending","rulesList","setRulesList","onDragEnd","destination","index","source","newOrderedRules","startIndex","endIndex","Array","from","removed","splice","reorder","compact","rulerRule","updateRulesOrder","newRules","unwrap","finally","rulesWithUID","uid","String","hashRulerRule","ModalHeader","droppableId","mode","renderClone","provided","_snapshot","rubric","ListItem","isClone","droppableProvided","ref","innerRef","cx","listContainer","droppableProps","draggableId","isDragDisabled","isDragging","listItem","draggableProps","dragHandleProps","isAlertingRule","promRule","AlertStateTag","isRecordingRule","Badge","color","listItemName","header","isCloudRulesSource","meta","dataSourceIcon","logos","small","colors","background","primary","secondary","border","medium","shade","StateColoredText","children","status","PromAlertingRuleState","success","warning","neutral","emptyStats","total","recording","RuleStats","showInactive","showRecording","namespaces","calculated","stats","calcRule","health","isRecordingRulerRule","groups","statsComponents","prev","curr","Fragment","RulesGroup","React","expandAll","viewMode","isEditingGroup","setIsEditingGroup","isDeletingGroup","setIsDeletingGroup","isReorderingGroup","setIsReorderingGroup","isCollapsed","setIsCollapsed","canEditRules","hasRuler","rulerRulesLoaded","useHasRuler","folderUID","isGrafanaRulerRule","grafana_alert","namespace_uid","folder","useFolder","isDeleting","find","isFederated","isFederatedRuleGroup","isProvisioned","some","provenance","isListView","isGroupView","actionIcons","Spinner","baseUrl","makeFolderLink","canSave","ActionIcon","A","tooltip","rotate90","to","target","canAdmin","RuleLocation","wrapper","CollapseToggle","collapseToggle","onToggle","heading","spacer","headerStats","actionsSeparator","RulesTable","showSummaryColumn","rulesTable","showGuidelines","logInfo","LogMessages","closeEditModal","ConfirmModal","body","onConfirm","deleteRulesGroupAction","confirmText","displayName","breakpoints","down","dataSourceOrigin","useCombinedGroupNamespace","flatMap","ns","g","CloudRules","dsConfigs","rulesDataSources","groupsWithNamespaces","dataSourcesLoading","ds","isAsyncRequestStatePending","hasSomeResults","hasDataSourcesConfigured","hasDataSourcesLoading","hasNamespaces","numberOfPages","onPageChange","page","pageItems","usePagination","DEFAULT_PER_PAGE_PAGINATION","sectionHeader","LoadingPlaceholder","loader","getRulesSourceUid","spinner","Pagination","pagination","currentPage","onNavigate","hideWhenSinglePage","getPaginationStyles","GrafanaRules","useQueryParams","prom","ruler","hasResult","wantsGroupedView","namespacesFormat","flattenGrafanaManagedRules","RuleListStateSection","defaultCollapsed","collapsed","setCollapsed","alertStateToReadable","showGroupColumn","ViewOptions","RuleTypeOptions","PromRuleType","container","sm","inputWidth","flexRow","spaceBetween","rowChild","clearButton","setQueryParams","filterKey","setFilterKey","Math","floor","random","dataSourceKey","queryStringKey","alertState","queryString","ruleType","getFiltersFromUrlParams","useStyles","stateOptions","Object","entries","key","handleQueryStringChange","debounce","e","searchIcon","DataSourcePicker","alerting","noDefault","current","dataSourceValue","onClear","Label","Stack","gap","prefix","defaultValue","RadioButtonGroup","view","fullWidth","setTimeout","reduceNamespaces","filters","namespaceAcc","reduceGroups","groupAcc","isQueryingDataSource","normalizedQueryString","toLocaleLowerCase","doesNameContainsQueryString","includes","matchers","parseMatchers","doRuleLabelsMatchQuery","labelsMatchMatchers","labels","doAlertsContainMatchingLabels","alerts","alert","query","datasourceUid","getDataSourceSrv","getInstanceSettings","VIEWS","grafanaNamespaces","cloudNamespaces","sorted","a","b","localeCompare","isGrafanaRulesSource","Authorize","actions","AccessControlAction","groupedRules","RuleList","withErrorBoundary","rulesDataSourceNames","getAllRulesSourceNames","location","useLocation","setExpandAll","filtersActive","ViewComponent","promRequests","allPromLoaded","every","_","allPromEmpty","useAsyncFn","fetchAllPromAndRulerRulesAction","useInterval","RULE_LIST_POLL_INTERVAL_MS","hasNoAlertRulesCreatedYet","filteredNamespaces","useFilteredRules","useCombinedRuleNamespaces","AlertingPageWrapper","pageId","break","buttonsContainer","statsContainer","expandAllButton","urlUtil","returnTo","pathname","style","pageNav","navId","fallback","action","contextSrv","DynamicTableWithGuidelines","renderExpandedContent","contentGuideline","guideline","renderPrefixHeader","relative","headerGuideline","renderPrefixCell","topGuideline","bottomGuideline","tooltipPlacement","rest","ariaLabel","RuleConfigStatus","globalLimitValue","RuleDetails","annotations","trim","RuleDetailsActionButtons","leftSide","EvaluationBehaviorSummary","keys","DetailsField","horizontal","AlertLabels","RuleDetailsExpression","RuleDetailsAnnotations","rightSide","RuleDetailsDataSources","RuleDetailsMatchingInstances","itemsDisplayLimit","forDuration","for","up","emptyMessage","wrapperClass","wrapperMargin","ruleIdx","columns","useColumns","TableComponent","DynamicTable","cols","isExpandable","itemsPerPage","paginationStyles","shape","borderRadius","strong","renderCell","isCreating","RuleState","Provisioning","combinedRule","RuleHealth","Tokenize","input","Annotation","Boolean","callback","delay","savedCallback","useRef","interval_1","setInterval","clearInterval"],"sourceRoot":""}