{"version":3,"file":"8250.4d38b3d3a4f4d0cd5427.js","mappings":"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","sources":["webpack://grafana/./public/app/plugins/datasource/cloudwatch/cloudwatch-sql/language.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/dynamic-labels/language.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/metric-math/language.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/utils/utils.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/LogGroupSelector.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/XrayLinkConfig.tsx","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/TemplateTag/TemplateTag.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/inlineArrayTransformer/inlineArrayTransformer.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/stripIndentTransformer/stripIndentTransformer.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/trimResultTransformer/trimResultTransformer.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/commaLists/commaLists.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/commaListsAnd/commaListsAnd.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/commaListsOr/commaListsOr.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/splitStringTransformer/splitStringTransformer.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/removeNonPrintingValuesTransformer/removeNonPrintingValuesTransformer.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/html/html.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/replaceSubstitutionTransformer/replaceSubstitutionTransformer.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/safeHtml/safeHtml.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/replaceResultTransformer/replaceResultTransformer.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/oneLine/oneLine.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/oneLineTrim/oneLineTrim.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/oneLineCommaLists/oneLineCommaLists.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/oneLineCommaListsOr/oneLineCommaListsOr.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/oneLineCommaListsAnd/oneLineCommaListsAnd.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/inlineLists/inlineLists.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/oneLineInlineLists/oneLineInlineLists.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/stripIndent/stripIndent.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/stripIndents/stripIndents.js","webpack://grafana/./public/app/plugins/datasource/cloudwatch/syntax.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/LogsCheatSheet.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/guards.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/Dimensions/FilterItem.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/Dimensions/Dimensions.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/aws_url.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/CloudWatchLink.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/utils/query/getStatsGroups.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/hooks.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/MetricsQueryEditor/MetricsQueryHeader.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/QueryHeader.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/LogsQueryField.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/LogsQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/standardStatistics.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/MetricStatEditor/MetricStatEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/expressions.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/cloudwatch-sql/SQLGenerator.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/SQLBuilderEditor/utils.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/SQLBuilderEditor/SQLBuilderSelectRow.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/SQLBuilderEditor/SQLFilter.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/SQLBuilderEditor/SQLGroupBy.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/SQLBuilderEditor/SQLOrderByGroup.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/SQLBuilderEditor/SQLBuilderEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/metric-math/definition.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/monarch/commands.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/monarch/register.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/MathExpressionQueryField.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/cloudwatch-sql/definition.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/SQLCodeEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/monarch/LinkedToken.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/monarch/linkedTokenBuilder.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/monarch/types.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/dynamic-labels/definition.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/DynamicLabelsField.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/dynamic-labels/CompletionItemProvider.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/MetricsQueryEditor/Alias.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/migrations/metricQueryMigrations.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/MetricsQueryEditor/usePreparedMetricsQuery.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/MetricsQueryEditor/MetricsQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/PanelQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/AnnotationQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/annotationSupport.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/memoizedDebounce.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/query-runner/CloudWatchRequest.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/api.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/monarch/CompletionItemProvider.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/cloudwatch-sql/completion/types.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/cloudwatch-sql/completion/statementPosition.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/cloudwatch-sql/completion/suggestionKind.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/cloudwatch-sql/completion/tokenUtils.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/cloudwatch-sql/completion/CompletionItemProvider.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language_provider.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/metric-math/completion/types.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/metric-math/completion/statementPosition.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/metric-math/completion/suggestionKind.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/metric-math/completion/CompletionItemProvider.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/query-runner/CloudWatchAnnotationQueryRunner.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/utils/datalinks.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/utils/logsRetry.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/utils/rxjs/increasingInterval.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/query-runner/CloudWatchLogsQueryRunner.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/ThrottlingErrorMessage.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/query-runner/CloudWatchMetricsQueryRunner.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/migrations/variableQueryMigrations.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/VariableQueryEditor/MultiFilterItem.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/VariableQueryEditor/MultiFilter.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/VariableQueryEditor/VariableQueryField.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/VariableQueryEditor/VariableTextField.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/VariableQueryEditor/VariableQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/variables.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/datasource.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/tracking.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/module.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/ConfigEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/MetaInspector.tsx","webpack://grafana/./.yarn/__virtual__/react-use-virtual-0c21d950b6/3/opt/drone/yarncache/react-use-npm-17.4.0-0ef4521544-0889da919b.zip/node_modules/react-use/esm/useCustomCompareEffect.js","webpack://grafana/./.yarn/__virtual__/react-use-virtual-0c21d950b6/3/opt/drone/yarncache/react-use-npm-17.4.0-0ef4521544-0889da919b.zip/node_modules/react-use/esm/misc/isDeepEqual.js","webpack://grafana/./.yarn/__virtual__/react-use-virtual-0c21d950b6/3/opt/drone/yarncache/react-use-npm-17.4.0-0ef4521544-0889da919b.zip/node_modules/react-use/esm/useDeepCompareEffect.js","webpack://grafana/../../opt/drone/yarncache/@grafana-aws-sdk-npm-0.0.37-8e06caf3f3-3994e78182.zip/node_modules/@grafana/aws-sdk/dist/index.production.js","webpack://grafana/../../opt/drone/yarncache/@grafana-aws-sdk-npm-0.0.37-8e06caf3f3-3994e78182.zip/node_modules/@grafana/aws-sdk/index.js","webpack://grafana/../../opt/drone/yarncache/fast-deep-equal-npm-3.1.3-790edcfcf5-e21a9d8d84.zip/node_modules/fast-deep-equal/react.js","webpack://grafana/../../opt/drone/yarncache/jsurl-npm-0.1.5-9e17f93783-50b614908d.zip/node_modules/jsurl/index.js","webpack://grafana/../../opt/drone/yarncache/jsurl-npm-0.1.5-9e17f93783-50b614908d.zip/node_modules/jsurl/lib/jsurl.js"],"sourcesContent":["import type * as monacoType from 'monaco-editor/esm/vs/editor/editor.api';\n\ninterface CloudWatchLanguage extends monacoType.languages.IMonarchLanguage {\n  keywords: string[];\n  operators: string[];\n  builtinFunctions: string[];\n}\n\nexport const SELECT = 'SELECT';\nexport const FROM = 'FROM';\nexport const WHERE = 'WHERE';\nexport const GROUP = 'GROUP';\nexport const ORDER = 'ORDER';\nexport const BY = 'BY';\nexport const DESC = 'DESC';\nexport const ASC = 'ASC';\nexport const LIMIT = 'LIMIT';\nexport const WITH = 'WITH';\nexport const SCHEMA = 'SCHEMA';\n\nexport const KEYWORDS = [SELECT, FROM, WHERE, GROUP, ORDER, BY, DESC, ASC, LIMIT, WITH, SCHEMA];\nexport const STATISTICS = ['AVG', 'COUNT', 'MAX', 'MIN', 'SUM'];\n\nexport const AND = 'AND';\nexport const LOGICAL_OPERATORS = [AND];\n\nexport const EQUALS = '=';\nexport const NOT_EQUALS = '!=';\nexport const COMPARISON_OPERATORS = [EQUALS, NOT_EQUALS];\n\nexport const language: CloudWatchLanguage = {\n  defaultToken: '',\n  tokenPostfix: '.sql',\n  ignoreCase: true,\n  brackets: [\n    { open: '[', close: ']', token: 'delimiter.square' },\n    { open: '(', close: ')', token: 'delimiter.parenthesis' },\n  ],\n  keywords: KEYWORDS,\n  operators: LOGICAL_OPERATORS,\n  builtinFunctions: STATISTICS,\n  tokenizer: {\n    root: [\n      [/\\$[a-zA-Z0-9-_]+/, 'variable'],\n      { include: '@comments' },\n      { include: '@whitespace' },\n      { include: '@numbers' },\n      { include: '@strings' },\n      { include: '@complexIdentifiers' },\n      [/[;,.]/, 'delimiter'],\n      [/[()]/, '@brackets'],\n      [\n        /[\\w@#$]+/,\n        {\n          cases: {\n            '@keywords': 'keyword',\n            '@operators': 'operator',\n            '@builtinFunctions': 'predefined',\n            '@default': 'identifier',\n          },\n        },\n      ],\n      [/[=!%&+\\-*/|~^]/, 'operator'], // TODO: strip these options\n    ],\n    whitespace: [[/\\s+/, 'white']],\n    comments: [[/--+.*/, 'comment']],\n    comment: [\n      [/[^*/]+/, 'comment'],\n      [/./, 'comment'],\n    ],\n    numbers: [\n      [/0[xX][0-9a-fA-F]*/, 'number'],\n      [/[$][+-]*\\d*(\\.\\d*)?/, 'number'],\n      [/((\\d+(\\.\\d*)?)|(\\.\\d+))([eE][\\-+]?\\d+)?/, 'number'],\n    ],\n    strings: [\n      [/N'/, { token: 'string', next: '@string' }],\n      [/'/, { token: 'string', next: '@string' }],\n      [/\"/, { token: 'type', next: '@string_double' }],\n    ],\n    string: [\n      [/[^']+/, 'string'],\n      [/''/, 'string'],\n      [/'/, { token: 'string', next: '@pop' }],\n    ],\n    string_double: [\n      [/[^\\\\\"]+/, 'type'],\n      [/\"/, 'type', '@pop'],\n    ],\n    complexIdentifiers: [\n      [/\\[/, { token: 'identifier.quote', next: '@bracketedIdentifier' }],\n      [/\"/, { token: 'identifier.quote', next: '@quotedIdentifier' }],\n    ],\n    bracketedIdentifier: [\n      [/[^\\]]+/, 'identifier'],\n      [/]]/, 'identifier'],\n      [/]/, { token: 'identifier.quote', next: '@pop' }],\n    ],\n    quotedIdentifier: [\n      [/[^\"]+/, 'identifier'],\n      [/\"\"/, 'identifier'],\n      [/\"/, { token: 'identifier.quote', next: '@pop' }],\n    ],\n  },\n};\n\nexport const conf: monacoType.languages.LanguageConfiguration = {\n  comments: {\n    lineComment: '--',\n    blockComment: ['/*', '*/'],\n  },\n  brackets: [\n    ['{', '}'],\n    ['[', ']'],\n    ['(', ')'],\n  ],\n  autoClosingPairs: [\n    { open: '{', close: '}' },\n    { open: '[', close: ']' },\n    { open: '(', close: ')' },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n  ],\n  surroundingPairs: [\n    { open: '{', close: '}' },\n    { open: '[', close: ']' },\n    { open: '(', close: ')' },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n  ],\n};\n","import type * as monacoType from 'monaco-editor/esm/vs/editor/editor.api';\n\n// Dynamic labels: https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/graph-dynamic-labels.html\nexport const DYNAMIC_LABEL_PATTERNS = [\n  '${DATAPOINT_COUNT}',\n  '${FIRST}',\n  '${FIRST_LAST_RANGE}',\n  '${FIRST_LAST_TIME_RANGE}',\n  '${FIRST_TIME}',\n  '${FIRST_TIME_RELATIVE}',\n  '${LABEL}',\n  '${LAST}',\n  '${LAST_TIME}',\n  '${LAST_TIME_RELATIVE}',\n  '${MAX}',\n  '${MAX_TIME}',\n  '${MAX_TIME_RELATIVE}',\n  '${MIN}',\n  '${MIN_MAX_RANGE}',\n  '${MIN_MAX_TIME_RANGE}',\n  '${MIN_TIME}',\n  '${MIN_TIME_RELATIVE}',\n  \"${PROP('AccountId')}\",\n  \"${PROP('MetricName')}\",\n  \"${PROP('Namespace')}\",\n  \"${PROP('Period')}\",\n  \"${PROP('Region')}\",\n  \"${PROP('Stat')}\",\n  '${SUM}',\n];\n\nexport const language: monacoType.languages.IMonarchLanguage = {\n  id: 'dynamicLabels',\n  ignoreCase: false,\n  tokenizer: {\n    root: [\n      { include: '@whitespace' },\n      { include: '@builtInFunctions' },\n      { include: '@string' },\n      [/\\$\\{PROP\\('Dim.[a-zA-Z0-9-_]?.*'\\)\\}+/, 'predefined'], //custom handling for dimension patterns\n    ],\n    builtInFunctions: [[DYNAMIC_LABEL_PATTERNS.map(escapeRegExp).join('|'), 'predefined']],\n    whitespace: [[/\\s+/, 'white']],\n    string: [],\n  },\n};\n\nexport const conf: monacoType.languages.LanguageConfiguration = {};\n\nfunction escapeRegExp(string: string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\n","import type * as monacoType from 'monaco-editor/esm/vs/editor/editor.api';\n\n// Metric Math: https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html\nexport const METRIC_MATH_FNS = [\n  'ABS',\n  'ANOMALY_DETECTION_BAND',\n  'AVG',\n  'CEIL',\n  'DATAPOINT_COUNT',\n  'DIFF',\n  'DIFF_TIME',\n  'FILL',\n  'FIRST',\n  'LAST',\n  'FLOOR',\n  'IF',\n  'INSIGHT_RULE_METRIC',\n  'LOG',\n  'LOG10',\n  'MAX',\n  'METRIC_COUNT',\n  'METRICS',\n  'MIN',\n  'MINUTE',\n  'HOUR',\n  'DAY',\n  'DATE',\n  'MONTH',\n  'YEAR',\n  'EPOCH',\n  'PERIOD',\n  'RATE',\n  'REMOVE_EMPTY',\n  'RUNNING_SUM',\n  'SEARCH',\n  'SERVICE_QUOTA',\n  'SLICE',\n  'SORT',\n  'STDDEV',\n  'SUM',\n  'TIME_SERIES',\n];\n\nexport const METRIC_MATH_STATISTIC_KEYWORD_STRINGS = ['Average', 'Maximum', 'Minimum', 'Sum', 'SampleCount']; // second arguments to SEARCH function\n\nexport const METRIC_MATH_KEYWORDS = ['REPEAT', 'LINEAR', 'ASC', 'DSC']; // standalone magic arguments to functions\n\nexport const METRIC_MATH_OPERATORS = [\n  '+',\n  '-',\n  '*',\n  '/',\n  '^',\n  '==',\n  '!=',\n  '<=',\n  '>=',\n  '<',\n  '>',\n  'AND',\n  '&&',\n  'OR',\n  '||',\n];\n\nexport const METRIC_MATH_PERIODS = [10, 60, 300, 900, 3000, 21600, 86400];\n\nexport const language: monacoType.languages.IMonarchLanguage = {\n  id: 'metricMath',\n  ignoreCase: false,\n  brackets: [\n    { open: '[', close: ']', token: 'delimiter.square' },\n    { open: '(', close: ')', token: 'delimiter.parenthesis' },\n    { open: '{', close: '}', token: 'delimiter.curly' },\n  ],\n  tokenizer: {\n    root: [{ include: '@nonNestableStates' }, { include: '@strings' }],\n    nonNestableStates: [\n      { include: '@variables' },\n      { include: '@whitespace' },\n      { include: '@numbers' },\n      { include: '@assignment' },\n      { include: '@keywords' },\n      { include: '@operators' },\n      { include: '@builtInFunctions' },\n      [/[;,.]/, 'delimiter'],\n      [/[(){}\\[\\]]/, '@brackets'], // [], (), {} are all brackets\n    ],\n    keywords: [[METRIC_MATH_KEYWORDS.map(escapeRegExp).join('|'), 'keyword']],\n    operators: [[METRIC_MATH_OPERATORS.map(escapeRegExp).join('|'), 'operator']],\n    builtInFunctions: [[METRIC_MATH_FNS.map(escapeRegExp).join('|'), 'predefined']],\n    variables: [\n      [/\\$[a-zA-Z0-9-_]+/, 'variable'], // $ followed by any letter/number we assume could be grafana template variable\n    ],\n    whitespace: [[/\\s+/, 'white']],\n    assignment: [[/=/, 'tag']],\n    numbers: [\n      [/0[xX][0-9a-fA-F]*/, 'number'],\n      [/[$][+-]*\\d*(\\.\\d*)?/, 'number'],\n      [/((\\d+(\\.\\d*)?)|(\\.\\d+))([eE][\\-+]?\\d+)?/, 'number'],\n    ],\n    // states that start other states (aka nested states):\n    strings: [\n      [/'/, { token: 'string', next: '@string' }],\n      [/\"/, { token: 'type', next: '@string_double' }],\n    ],\n    string: [\n      [/{/, { token: 'delimiter.curly', next: '@nestedCurly' }], // escape out of string and into nestedCurly\n      [/\\(/, { token: 'delimiter.parenthesis', next: '@nestedParens' }], // escape out of string and into nestedCurly\n      [/\"/, { token: 'type', next: '@string_double' }], // jump into double string\n      [/'/, { token: 'string', next: '@pop' }], // stop being a string\n      { include: '@nonNestableStates' },\n      [/[^']/, 'string'], // anything that is not a quote, is marked as string\n    ],\n    string_double: [\n      [/[^\"]/, 'type'], // mark anything not a quote as a \"type\" (different type of string for visual difference)\n      [/\"/, { token: 'type', next: '@pop' }], // mark also as a type and stop being in the double string state\n    ],\n    nestedCurly: [\n      [/}/, { token: 'delimiter.curly', next: '@pop' }], // escape out of string and into braces\n      [/'/, { token: 'string', next: '@string' }], // go to string if see start of string\n      [/\"/, { token: 'type', next: '@string_double' }], // go to string_double if see start of double string\n    ],\n    nestedParens: [\n      [/\\)/, { token: 'delimiter.parenthesis', next: '@pop' }], // escape out of string and into braces\n      [/'/, { token: 'string', next: '@string' }], // go to string if see start of string\n      [/\"/, { token: 'type', next: '@string_double' }], // go to string_double if see start of double string\n    ],\n  },\n};\n\nexport const conf: monacoType.languages.LanguageConfiguration = {\n  brackets: [\n    ['{', '}'],\n    ['[', ']'],\n    ['(', ')'],\n  ],\n  autoClosingPairs: [\n    { open: '{', close: '}' },\n    { open: '[', close: ']' },\n    { open: '(', close: ')' },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n  ],\n  surroundingPairs: [\n    { open: '{', close: '}' },\n    { open: '[', close: ']' },\n    { open: '(', close: ')' },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n  ],\n};\n\nfunction escapeRegExp(string: string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\n","import { SelectableValue } from '@grafana/data';\n\nimport { CloudWatchMetricsQuery, MetricQueryType, MetricEditorMode } from '../types';\n\nimport { CloudWatchDatasource } from './../datasource';\n\nexport const toOption = (value: string) => ({ label: value, value });\n\nexport const appendTemplateVariables = (datasource: CloudWatchDatasource, values: SelectableValue[]) => [\n  ...values,\n  { label: 'Template Variables', options: datasource.getVariables().map(toOption) },\n];\n\nexport const filterMetricsQuery = (query: CloudWatchMetricsQuery): boolean => {\n  const { region, metricQueryType, metricEditorMode, expression, metricName, namespace, sqlExpression, statistic } =\n    query;\n  if (!region) {\n    return false;\n  }\n  if (metricQueryType === MetricQueryType.Search && metricEditorMode === MetricEditorMode.Builder) {\n    return !!namespace && !!metricName && !!statistic;\n  } else if (metricQueryType === MetricQueryType.Search && metricEditorMode === MetricEditorMode.Code) {\n    return !!expression;\n  } else if (metricQueryType === MetricQueryType.Query) {\n    // still TBD how to validate the visual query builder for SQL\n    return !!sqlExpression;\n  }\n\n  return false;\n};\n","import { debounce, unionBy } from 'lodash';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { MultiSelect } from '@grafana/ui';\nimport { InputActionMeta } from '@grafana/ui/src/components/Select/types';\nimport { notifyApp } from 'app/core/actions';\nimport { createErrorNotification } from 'app/core/copy/appNotification';\nimport { dispatch } from 'app/store/store';\n\nimport { CloudWatchDatasource } from '../datasource';\nimport { appendTemplateVariables } from '../utils/utils';\n\nconst MAX_LOG_GROUPS = 20;\nconst MAX_VISIBLE_LOG_GROUPS = 4;\nconst DEBOUNCE_TIMER = 300;\n\nexport interface LogGroupSelectorProps {\n  region: string;\n  selectedLogGroups: string[];\n  onChange: (logGroups: string[]) => void;\n\n  datasource?: CloudWatchDatasource;\n  onRunQuery?: () => void;\n  onOpenMenu?: () => Promise<void>;\n  refId?: string;\n  width?: number | 'auto';\n  saved?: boolean; // is only used in the config editor\n}\n\nexport const LogGroupSelector: React.FC<LogGroupSelectorProps> = ({\n  region,\n  selectedLogGroups,\n  onChange,\n  datasource,\n  onRunQuery,\n  onOpenMenu,\n  refId,\n  width,\n  saved = true,\n}) => {\n  const [loadingLogGroups, setLoadingLogGroups] = useState(false);\n  const [availableLogGroups, setAvailableLogGroups] = useState<Array<SelectableValue<string>>>([]);\n  const logGroupOptions = useMemo(\n    () => unionBy(availableLogGroups, selectedLogGroups?.map(toOption), 'value'),\n    [availableLogGroups, selectedLogGroups]\n  );\n\n  const fetchLogGroupOptions = useCallback(\n    async (region: string, logGroupNamePrefix?: string) => {\n      if (!datasource) {\n        return [];\n      }\n      try {\n        const logGroups = await datasource.api.describeLogGroups({\n          refId,\n          region,\n          logGroupNamePrefix,\n        });\n        return logGroups;\n      } catch (err) {\n        dispatch(notifyApp(createErrorNotification(typeof err === 'string' ? err : JSON.stringify(err))));\n        return [];\n      }\n    },\n    [datasource, refId]\n  );\n\n  const onLogGroupSearch = async (searchTerm: string, region: string, actionMeta: InputActionMeta) => {\n    if (actionMeta.action !== 'input-change' || !datasource) {\n      return;\n    }\n\n    // No need to fetch matching log groups if the search term isn't valid\n    // This is also useful for preventing searches when a user is typing out a log group with template vars\n    // See https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_LogGroup.html for the source of the pattern below\n    const logGroupNamePattern = /^[\\.\\-_/#A-Za-z0-9]+$/;\n    if (!logGroupNamePattern.test(searchTerm)) {\n      if (searchTerm !== '') {\n        dispatch(notifyApp(createErrorNotification('Invalid Log Group name: ' + searchTerm)));\n      }\n      return;\n    }\n\n    setLoadingLogGroups(true);\n    const matchingLogGroups = await fetchLogGroupOptions(region, searchTerm);\n    setAvailableLogGroups(unionBy(availableLogGroups, matchingLogGroups, 'value'));\n    setLoadingLogGroups(false);\n  };\n\n  // Reset the log group options if the datasource or region change and are saved\n  useEffect(() => {\n    async function getAvailableLogGroupOptions() {\n      // Don't call describeLogGroups if datasource or region is undefined\n      if (!datasource || !datasource.getActualRegion(region)) {\n        setAvailableLogGroups([]);\n        return;\n      }\n\n      setLoadingLogGroups(true);\n      return fetchLogGroupOptions(datasource.getActualRegion(region))\n        .then((logGroups) => {\n          setAvailableLogGroups(logGroups);\n        })\n        .finally(() => {\n          setLoadingLogGroups(false);\n        });\n    }\n\n    // Config editor does not fetch new log group options unless changes have been saved\n    saved && getAvailableLogGroupOptions();\n    // this hook shouldn't get called every time selectedLogGroups or onChange updates\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [datasource, region, saved]);\n\n  const onOpenLogGroupMenu = async () => {\n    if (onOpenMenu) {\n      await onOpenMenu();\n    }\n  };\n\n  const onLogGroupSearchDebounced = debounce(onLogGroupSearch, DEBOUNCE_TIMER);\n\n  return (\n    <MultiSelect\n      inputId=\"default-log-groups\"\n      aria-label=\"Log Groups\"\n      allowCustomValue\n      options={datasource ? appendTemplateVariables(datasource, logGroupOptions) : logGroupOptions}\n      value={selectedLogGroups}\n      onChange={(v) => onChange(v.filter(({ value }) => value).map(({ value }) => value))}\n      onBlur={onRunQuery}\n      closeMenuOnSelect={false}\n      isClearable\n      isOptionDisabled={() => selectedLogGroups.length >= MAX_LOG_GROUPS}\n      placeholder=\"Choose Log Groups\"\n      maxVisibleValues={MAX_VISIBLE_LOG_GROUPS}\n      noOptionsMessage=\"No log groups available\"\n      isLoading={loadingLogGroups}\n      onOpenMenu={onOpenLogGroupMenu}\n      onInputChange={(value, actionMeta) => {\n        onLogGroupSearchDebounced(value, region, actionMeta);\n      }}\n      width={width}\n    />\n  );\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { Alert, InlineField, useStyles2 } from '@grafana/ui';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  infoText: css`\n    padding-bottom: ${theme.spacing(2)};\n    color: ${theme.colors.text.secondary};\n  `,\n});\n\ninterface Props {\n  datasourceUid?: string;\n  onChange: (uid: string) => void;\n}\n\nconst xRayDsId = 'grafana-x-ray-datasource';\n\nexport function XrayLinkConfig({ datasourceUid, onChange }: Props) {\n  const hasXrayDatasource = Boolean(getDatasourceSrv().getList({ pluginId: xRayDsId }).length);\n\n  const styles = useStyles2(getStyles);\n\n  return (\n    <>\n      <h3 className=\"page-heading\">X-ray trace link</h3>\n\n      <div className={styles.infoText}>\n        Grafana will automatically create a link to a trace in X-ray data source if logs contain @xrayTraceId field\n      </div>\n\n      {!hasXrayDatasource && (\n        <Alert\n          title={\n            'There is no X-ray datasource to link to. First add an X-ray data source and then link it to Cloud Watch. '\n          }\n          severity=\"info\"\n        />\n      )}\n\n      <div className=\"gf-form-group\">\n        <InlineField\n          htmlFor=\"data-source-picker\"\n          label=\"Data source\"\n          labelWidth={28}\n          tooltip=\"X-ray data source containing traces\"\n        >\n          <DataSourcePicker\n            pluginId={xRayDsId}\n            onChange={(ds) => onChange(ds.uid)}\n            current={datasourceUid}\n            noDefault={true}\n          />\n        </InlineField>\n      </div>\n    </>\n  );\n}\n","var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _templateObject = _taggedTemplateLiteral(['', ''], ['', '']);\n\nfunction _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * @class TemplateTag\n * @classdesc Consumes a pipeline of composable transformer plugins and produces a template tag.\n */\nvar TemplateTag = function () {\n  /**\n   * constructs a template tag\n   * @constructs TemplateTag\n   * @param  {...Object} [...transformers] - an array or arguments list of transformers\n   * @return {Function}                    - a template tag\n   */\n  function TemplateTag() {\n    var _this = this;\n\n    for (var _len = arguments.length, transformers = Array(_len), _key = 0; _key < _len; _key++) {\n      transformers[_key] = arguments[_key];\n    }\n\n    _classCallCheck(this, TemplateTag);\n\n    this.tag = function (strings) {\n      for (var _len2 = arguments.length, expressions = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        expressions[_key2 - 1] = arguments[_key2];\n      }\n\n      if (typeof strings === 'function') {\n        // if the first argument passed is a function, assume it is a template tag and return\n        // an intermediary tag that processes the template using the aforementioned tag, passing the\n        // result to our tag\n        return _this.interimTag.bind(_this, strings);\n      }\n\n      if (typeof strings === 'string') {\n        // if the first argument passed is a string, just transform it\n        return _this.transformEndResult(strings);\n      }\n\n      // else, return a transformed end result of processing the template with our tag\n      strings = strings.map(_this.transformString.bind(_this));\n      return _this.transformEndResult(strings.reduce(_this.processSubstitutions.bind(_this, expressions)));\n    };\n\n    // if first argument is an array, extrude it as a list of transformers\n    if (transformers.length > 0 && Array.isArray(transformers[0])) {\n      transformers = transformers[0];\n    }\n\n    // if any transformers are functions, this means they are not initiated - automatically initiate them\n    this.transformers = transformers.map(function (transformer) {\n      return typeof transformer === 'function' ? transformer() : transformer;\n    });\n\n    // return an ES2015 template tag\n    return this.tag;\n  }\n\n  /**\n   * Applies all transformers to a template literal tagged with this method.\n   * If a function is passed as the first argument, assumes the function is a template tag\n   * and applies it to the template, returning a template tag.\n   * @param  {(Function|String|Array<String>)} strings        - Either a template tag or an array containing template strings separated by identifier\n   * @param  {...*}                            ...expressions - Optional list of substitution values.\n   * @return {(String|Function)}                              - Either an intermediary tag function or the results of processing the template.\n   */\n\n\n  _createClass(TemplateTag, [{\n    key: 'interimTag',\n\n\n    /**\n     * An intermediary template tag that receives a template tag and passes the result of calling the template with the received\n     * template tag to our own template tag.\n     * @param  {Function}        nextTag          - the received template tag\n     * @param  {Array<String>}   template         - the template to process\n     * @param  {...*}            ...substitutions - `substitutions` is an array of all substitutions in the template\n     * @return {*}                                - the final processed value\n     */\n    value: function interimTag(previousTag, template) {\n      for (var _len3 = arguments.length, substitutions = Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n        substitutions[_key3 - 2] = arguments[_key3];\n      }\n\n      return this.tag(_templateObject, previousTag.apply(undefined, [template].concat(substitutions)));\n    }\n\n    /**\n     * Performs bulk processing on the tagged template, transforming each substitution and then\n     * concatenating the resulting values into a string.\n     * @param  {Array<*>} substitutions - an array of all remaining substitutions present in this template\n     * @param  {String}   resultSoFar   - this iteration's result string so far\n     * @param  {String}   remainingPart - the template chunk after the current substitution\n     * @return {String}                 - the result of joining this iteration's processed substitution with the result\n     */\n\n  }, {\n    key: 'processSubstitutions',\n    value: function processSubstitutions(substitutions, resultSoFar, remainingPart) {\n      var substitution = this.transformSubstitution(substitutions.shift(), resultSoFar);\n      return ''.concat(resultSoFar, substitution, remainingPart);\n    }\n\n    /**\n     * Iterate through each transformer, applying the transformer's `onString` method to the template\n     * strings before all substitutions are processed.\n     * @param {String}  str - The input string\n     * @return {String}     - The final results of processing each transformer\n     */\n\n  }, {\n    key: 'transformString',\n    value: function transformString(str) {\n      var cb = function cb(res, transform) {\n        return transform.onString ? transform.onString(res) : res;\n      };\n      return this.transformers.reduce(cb, str);\n    }\n\n    /**\n     * When a substitution is encountered, iterates through each transformer and applies the transformer's\n     * `onSubstitution` method to the substitution.\n     * @param  {*}      substitution - The current substitution\n     * @param  {String} resultSoFar  - The result up to and excluding this substitution.\n     * @return {*}                   - The final result of applying all substitution transformations.\n     */\n\n  }, {\n    key: 'transformSubstitution',\n    value: function transformSubstitution(substitution, resultSoFar) {\n      var cb = function cb(res, transform) {\n        return transform.onSubstitution ? transform.onSubstitution(res, resultSoFar) : res;\n      };\n      return this.transformers.reduce(cb, substitution);\n    }\n\n    /**\n     * Iterates through each transformer, applying the transformer's `onEndResult` method to the\n     * template literal after all substitutions have finished processing.\n     * @param  {String} endResult - The processed template, just before it is returned from the tag\n     * @return {String}           - The final results of processing each transformer\n     */\n\n  }, {\n    key: 'transformEndResult',\n    value: function transformEndResult(endResult) {\n      var cb = function cb(res, transform) {\n        return transform.onEndResult ? transform.onEndResult(res) : res;\n      };\n      return this.transformers.reduce(cb, endResult);\n    }\n  }]);\n\n  return TemplateTag;\n}();\n\nexport default TemplateTag;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","var defaults = {\n  separator: '',\n  conjunction: '',\n  serial: false\n};\n\n/**\n * Converts an array substitution to a string containing a list\n * @param  {String} [opts.separator = ''] - the character that separates each item\n * @param  {String} [opts.conjunction = '']  - replace the last separator with this\n * @param  {Boolean} [opts.serial = false] - include the separator before the conjunction? (Oxford comma use-case)\n *\n * @return {Object}                     - a TemplateTag transformer\n */\nvar inlineArrayTransformer = function inlineArrayTransformer() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaults;\n  return {\n    onSubstitution: function onSubstitution(substitution, resultSoFar) {\n      // only operate on arrays\n      if (Array.isArray(substitution)) {\n        var arrayLength = substitution.length;\n        var separator = opts.separator;\n        var conjunction = opts.conjunction;\n        var serial = opts.serial;\n        // join each item in the array into a string where each item is separated by separator\n        // be sure to maintain indentation\n        var indent = resultSoFar.match(/(\\n?[^\\S\\n]+)$/);\n        if (indent) {\n          substitution = substitution.join(separator + indent[1]);\n        } else {\n          substitution = substitution.join(separator + ' ');\n        }\n        // if conjunction is set, replace the last separator with conjunction, but only if there is more than one substitution\n        if (conjunction && arrayLength > 1) {\n          var separatorIndex = substitution.lastIndexOf(separator);\n          substitution = substitution.slice(0, separatorIndex) + (serial ? separator : '') + ' ' + conjunction + substitution.slice(separatorIndex + 1);\n        }\n      }\n      return substitution;\n    }\n  };\n};\n\nexport default inlineArrayTransformer;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbmxpbmVBcnJheVRyYW5zZm9ybWVyL2lubGluZUFycmF5VHJhbnNmb3JtZXIuanMiXSwibmFtZXMiOlsiZGVmYXVsdHMiLCJzZXBhcmF0b3IiLCJjb25qdW5jdGlvbiIsInNlcmlhbCIsImlubGluZUFycmF5VHJhbnNmb3JtZXIiLCJvcHRzIiwib25TdWJzdGl0dXRpb24iLCJzdWJzdGl0dXRpb24iLCJyZXN1bHRTb0ZhciIsIkFycmF5IiwiaXNBcnJheSIsImFycmF5TGVuZ3RoIiwibGVuZ3RoIiwiaW5kZW50IiwibWF0Y2giLCJqb2luIiwic2VwYXJhdG9ySW5kZXgiLCJsYXN0SW5kZXhPZiIsInNsaWNlIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFNQSxXQUFXO0FBQ2ZDLGFBQVcsRUFESTtBQUVmQyxlQUFhLEVBRkU7QUFHZkMsVUFBUTtBQUhPLENBQWpCOztBQU1BOzs7Ozs7OztBQVFBLElBQU1DLHlCQUF5QixTQUF6QkEsc0JBQXlCO0FBQUEsTUFBQ0MsSUFBRCx1RUFBUUwsUUFBUjtBQUFBLFNBQXNCO0FBQ25ETSxrQkFEbUQsMEJBQ3BDQyxZQURvQyxFQUN0QkMsV0FEc0IsRUFDVDtBQUN4QztBQUNBLFVBQUlDLE1BQU1DLE9BQU4sQ0FBY0gsWUFBZCxDQUFKLEVBQWlDO0FBQy9CLFlBQU1JLGNBQWNKLGFBQWFLLE1BQWpDO0FBQ0EsWUFBTVgsWUFBWUksS0FBS0osU0FBdkI7QUFDQSxZQUFNQyxjQUFjRyxLQUFLSCxXQUF6QjtBQUNBLFlBQU1DLFNBQVNFLEtBQUtGLE1BQXBCO0FBQ0E7QUFDQTtBQUNBLFlBQU1VLFNBQVNMLFlBQVlNLEtBQVosQ0FBa0IsZ0JBQWxCLENBQWY7QUFDQSxZQUFJRCxNQUFKLEVBQVk7QUFDVk4seUJBQWVBLGFBQWFRLElBQWIsQ0FBa0JkLFlBQVlZLE9BQU8sQ0FBUCxDQUE5QixDQUFmO0FBQ0QsU0FGRCxNQUVPO0FBQ0xOLHlCQUFlQSxhQUFhUSxJQUFiLENBQWtCZCxZQUFZLEdBQTlCLENBQWY7QUFDRDtBQUNEO0FBQ0EsWUFBSUMsZUFBZVMsY0FBYyxDQUFqQyxFQUFvQztBQUNsQyxjQUFNSyxpQkFBaUJULGFBQWFVLFdBQWIsQ0FBeUJoQixTQUF6QixDQUF2QjtBQUNBTSx5QkFDRUEsYUFBYVcsS0FBYixDQUFtQixDQUFuQixFQUFzQkYsY0FBdEIsS0FDQ2IsU0FBU0YsU0FBVCxHQUFxQixFQUR0QixJQUVBLEdBRkEsR0FHQUMsV0FIQSxHQUlBSyxhQUFhVyxLQUFiLENBQW1CRixpQkFBaUIsQ0FBcEMsQ0FMRjtBQU1EO0FBQ0Y7QUFDRCxhQUFPVCxZQUFQO0FBQ0Q7QUE1QmtELEdBQXRCO0FBQUEsQ0FBL0I7O0FBK0JBLGVBQWVILHNCQUFmIiwiZmlsZSI6ImlubGluZUFycmF5VHJhbnNmb3JtZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBkZWZhdWx0cyA9IHtcbiAgc2VwYXJhdG9yOiAnJyxcbiAgY29uanVuY3Rpb246ICcnLFxuICBzZXJpYWw6IGZhbHNlLFxufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhbiBhcnJheSBzdWJzdGl0dXRpb24gdG8gYSBzdHJpbmcgY29udGFpbmluZyBhIGxpc3RcbiAqIEBwYXJhbSAge1N0cmluZ30gW29wdHMuc2VwYXJhdG9yID0gJyddIC0gdGhlIGNoYXJhY3RlciB0aGF0IHNlcGFyYXRlcyBlYWNoIGl0ZW1cbiAqIEBwYXJhbSAge1N0cmluZ30gW29wdHMuY29uanVuY3Rpb24gPSAnJ10gIC0gcmVwbGFjZSB0aGUgbGFzdCBzZXBhcmF0b3Igd2l0aCB0aGlzXG4gKiBAcGFyYW0gIHtCb29sZWFufSBbb3B0cy5zZXJpYWwgPSBmYWxzZV0gLSBpbmNsdWRlIHRoZSBzZXBhcmF0b3IgYmVmb3JlIHRoZSBjb25qdW5jdGlvbj8gKE94Zm9yZCBjb21tYSB1c2UtY2FzZSlcbiAqXG4gKiBAcmV0dXJuIHtPYmplY3R9ICAgICAgICAgICAgICAgICAgICAgLSBhIFRlbXBsYXRlVGFnIHRyYW5zZm9ybWVyXG4gKi9cbmNvbnN0IGlubGluZUFycmF5VHJhbnNmb3JtZXIgPSAob3B0cyA9IGRlZmF1bHRzKSA9PiAoe1xuICBvblN1YnN0aXR1dGlvbihzdWJzdGl0dXRpb24sIHJlc3VsdFNvRmFyKSB7XG4gICAgLy8gb25seSBvcGVyYXRlIG9uIGFycmF5c1xuICAgIGlmIChBcnJheS5pc0FycmF5KHN1YnN0aXR1dGlvbikpIHtcbiAgICAgIGNvbnN0IGFycmF5TGVuZ3RoID0gc3Vic3RpdHV0aW9uLmxlbmd0aDtcbiAgICAgIGNvbnN0IHNlcGFyYXRvciA9IG9wdHMuc2VwYXJhdG9yO1xuICAgICAgY29uc3QgY29uanVuY3Rpb24gPSBvcHRzLmNvbmp1bmN0aW9uO1xuICAgICAgY29uc3Qgc2VyaWFsID0gb3B0cy5zZXJpYWw7XG4gICAgICAvLyBqb2luIGVhY2ggaXRlbSBpbiB0aGUgYXJyYXkgaW50byBhIHN0cmluZyB3aGVyZSBlYWNoIGl0ZW0gaXMgc2VwYXJhdGVkIGJ5IHNlcGFyYXRvclxuICAgICAgLy8gYmUgc3VyZSB0byBtYWludGFpbiBpbmRlbnRhdGlvblxuICAgICAgY29uc3QgaW5kZW50ID0gcmVzdWx0U29GYXIubWF0Y2goLyhcXG4/W15cXFNcXG5dKykkLyk7XG4gICAgICBpZiAoaW5kZW50KSB7XG4gICAgICAgIHN1YnN0aXR1dGlvbiA9IHN1YnN0aXR1dGlvbi5qb2luKHNlcGFyYXRvciArIGluZGVudFsxXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdWJzdGl0dXRpb24gPSBzdWJzdGl0dXRpb24uam9pbihzZXBhcmF0b3IgKyAnICcpO1xuICAgICAgfVxuICAgICAgLy8gaWYgY29uanVuY3Rpb24gaXMgc2V0LCByZXBsYWNlIHRoZSBsYXN0IHNlcGFyYXRvciB3aXRoIGNvbmp1bmN0aW9uLCBidXQgb25seSBpZiB0aGVyZSBpcyBtb3JlIHRoYW4gb25lIHN1YnN0aXR1dGlvblxuICAgICAgaWYgKGNvbmp1bmN0aW9uICYmIGFycmF5TGVuZ3RoID4gMSkge1xuICAgICAgICBjb25zdCBzZXBhcmF0b3JJbmRleCA9IHN1YnN0aXR1dGlvbi5sYXN0SW5kZXhPZihzZXBhcmF0b3IpO1xuICAgICAgICBzdWJzdGl0dXRpb24gPVxuICAgICAgICAgIHN1YnN0aXR1dGlvbi5zbGljZSgwLCBzZXBhcmF0b3JJbmRleCkgK1xuICAgICAgICAgIChzZXJpYWwgPyBzZXBhcmF0b3IgOiAnJykgK1xuICAgICAgICAgICcgJyArXG4gICAgICAgICAgY29uanVuY3Rpb24gK1xuICAgICAgICAgIHN1YnN0aXR1dGlvbi5zbGljZShzZXBhcmF0b3JJbmRleCArIDEpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3Vic3RpdHV0aW9uO1xuICB9LFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGlubGluZUFycmF5VHJhbnNmb3JtZXI7XG4iXX0=","function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n/**\n * strips indentation from a template literal\n * @param  {String} type = 'initial' - whether to remove all indentation or just leading indentation. can be 'all' or 'initial'\n * @return {Object}                  - a TemplateTag transformer\n */\nvar stripIndentTransformer = function stripIndentTransformer() {\n  var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'initial';\n  return {\n    onEndResult: function onEndResult(endResult) {\n      if (type === 'initial') {\n        // remove the shortest leading indentation from each line\n        var match = endResult.match(/^[^\\S\\n]*(?=\\S)/gm);\n        var indent = match && Math.min.apply(Math, _toConsumableArray(match.map(function (el) {\n          return el.length;\n        })));\n        if (indent) {\n          var regexp = new RegExp('^.{' + indent + '}', 'gm');\n          return endResult.replace(regexp, '');\n        }\n        return endResult;\n      }\n      if (type === 'all') {\n        // remove all indentation from each line\n        return endResult.replace(/^[^\\S\\n]+/gm, '');\n      }\n      throw new Error('Unknown type: ' + type);\n    }\n  };\n};\n\nexport default stripIndentTransformer;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdHJpcEluZGVudFRyYW5zZm9ybWVyL3N0cmlwSW5kZW50VHJhbnNmb3JtZXIuanMiXSwibmFtZXMiOlsic3RyaXBJbmRlbnRUcmFuc2Zvcm1lciIsInR5cGUiLCJvbkVuZFJlc3VsdCIsImVuZFJlc3VsdCIsIm1hdGNoIiwiaW5kZW50IiwiTWF0aCIsIm1pbiIsIm1hcCIsImVsIiwibGVuZ3RoIiwicmVnZXhwIiwiUmVnRXhwIiwicmVwbGFjZSIsIkVycm9yIl0sIm1hcHBpbmdzIjoiOztBQUFBOzs7OztBQUtBLElBQU1BLHlCQUF5QixTQUF6QkEsc0JBQXlCO0FBQUEsTUFBQ0MsSUFBRCx1RUFBUSxTQUFSO0FBQUEsU0FBdUI7QUFDcERDLGVBRG9ELHVCQUN4Q0MsU0FEd0MsRUFDN0I7QUFDckIsVUFBSUYsU0FBUyxTQUFiLEVBQXdCO0FBQ3RCO0FBQ0EsWUFBTUcsUUFBUUQsVUFBVUMsS0FBVixDQUFnQixtQkFBaEIsQ0FBZDtBQUNBLFlBQU1DLFNBQVNELFNBQVNFLEtBQUtDLEdBQUwsZ0NBQVlILE1BQU1JLEdBQU4sQ0FBVTtBQUFBLGlCQUFNQyxHQUFHQyxNQUFUO0FBQUEsU0FBVixDQUFaLEVBQXhCO0FBQ0EsWUFBSUwsTUFBSixFQUFZO0FBQ1YsY0FBTU0sU0FBUyxJQUFJQyxNQUFKLFNBQWlCUCxNQUFqQixRQUE0QixJQUE1QixDQUFmO0FBQ0EsaUJBQU9GLFVBQVVVLE9BQVYsQ0FBa0JGLE1BQWxCLEVBQTBCLEVBQTFCLENBQVA7QUFDRDtBQUNELGVBQU9SLFNBQVA7QUFDRDtBQUNELFVBQUlGLFNBQVMsS0FBYixFQUFvQjtBQUNsQjtBQUNBLGVBQU9FLFVBQVVVLE9BQVYsQ0FBa0IsYUFBbEIsRUFBaUMsRUFBakMsQ0FBUDtBQUNEO0FBQ0QsWUFBTSxJQUFJQyxLQUFKLG9CQUEyQmIsSUFBM0IsQ0FBTjtBQUNEO0FBakJtRCxHQUF2QjtBQUFBLENBQS9COztBQW9CQSxlQUFlRCxzQkFBZiIsImZpbGUiOiJzdHJpcEluZGVudFRyYW5zZm9ybWVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBzdHJpcHMgaW5kZW50YXRpb24gZnJvbSBhIHRlbXBsYXRlIGxpdGVyYWxcbiAqIEBwYXJhbSAge1N0cmluZ30gdHlwZSA9ICdpbml0aWFsJyAtIHdoZXRoZXIgdG8gcmVtb3ZlIGFsbCBpbmRlbnRhdGlvbiBvciBqdXN0IGxlYWRpbmcgaW5kZW50YXRpb24uIGNhbiBiZSAnYWxsJyBvciAnaW5pdGlhbCdcbiAqIEByZXR1cm4ge09iamVjdH0gICAgICAgICAgICAgICAgICAtIGEgVGVtcGxhdGVUYWcgdHJhbnNmb3JtZXJcbiAqL1xuY29uc3Qgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lciA9ICh0eXBlID0gJ2luaXRpYWwnKSA9PiAoe1xuICBvbkVuZFJlc3VsdChlbmRSZXN1bHQpIHtcbiAgICBpZiAodHlwZSA9PT0gJ2luaXRpYWwnKSB7XG4gICAgICAvLyByZW1vdmUgdGhlIHNob3J0ZXN0IGxlYWRpbmcgaW5kZW50YXRpb24gZnJvbSBlYWNoIGxpbmVcbiAgICAgIGNvbnN0IG1hdGNoID0gZW5kUmVzdWx0Lm1hdGNoKC9eW15cXFNcXG5dKig/PVxcUykvZ20pO1xuICAgICAgY29uc3QgaW5kZW50ID0gbWF0Y2ggJiYgTWF0aC5taW4oLi4ubWF0Y2gubWFwKGVsID0+IGVsLmxlbmd0aCkpO1xuICAgICAgaWYgKGluZGVudCkge1xuICAgICAgICBjb25zdCByZWdleHAgPSBuZXcgUmVnRXhwKGBeLnske2luZGVudH19YCwgJ2dtJyk7XG4gICAgICAgIHJldHVybiBlbmRSZXN1bHQucmVwbGFjZShyZWdleHAsICcnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBlbmRSZXN1bHQ7XG4gICAgfVxuICAgIGlmICh0eXBlID09PSAnYWxsJykge1xuICAgICAgLy8gcmVtb3ZlIGFsbCBpbmRlbnRhdGlvbiBmcm9tIGVhY2ggbGluZVxuICAgICAgcmV0dXJuIGVuZFJlc3VsdC5yZXBsYWNlKC9eW15cXFNcXG5dKy9nbSwgJycpO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gdHlwZTogJHt0eXBlfWApO1xuICB9LFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHN0cmlwSW5kZW50VHJhbnNmb3JtZXI7XG4iXX0=","/**\n * TemplateTag transformer that trims whitespace on the end result of a tagged template\n * @param  {String} side = '' - The side of the string to trim. Can be 'start' or 'end' (alternatively 'left' or 'right')\n * @return {Object}           - a TemplateTag transformer\n */\nvar trimResultTransformer = function trimResultTransformer() {\n  var side = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return {\n    onEndResult: function onEndResult(endResult) {\n      if (side === '') {\n        return endResult.trim();\n      }\n\n      side = side.toLowerCase();\n\n      if (side === 'start' || side === 'left') {\n        return endResult.replace(/^\\s*/, '');\n      }\n\n      if (side === 'end' || side === 'right') {\n        return endResult.replace(/\\s*$/, '');\n      }\n\n      throw new Error('Side not supported: ' + side);\n    }\n  };\n};\n\nexport default trimResultTransformer;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90cmltUmVzdWx0VHJhbnNmb3JtZXIvdHJpbVJlc3VsdFRyYW5zZm9ybWVyLmpzIl0sIm5hbWVzIjpbInRyaW1SZXN1bHRUcmFuc2Zvcm1lciIsInNpZGUiLCJvbkVuZFJlc3VsdCIsImVuZFJlc3VsdCIsInRyaW0iLCJ0b0xvd2VyQ2FzZSIsInJlcGxhY2UiLCJFcnJvciJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0FBS0EsSUFBTUEsd0JBQXdCLFNBQXhCQSxxQkFBd0I7QUFBQSxNQUFDQyxJQUFELHVFQUFRLEVBQVI7QUFBQSxTQUFnQjtBQUM1Q0MsZUFENEMsdUJBQ2hDQyxTQURnQyxFQUNyQjtBQUNyQixVQUFJRixTQUFTLEVBQWIsRUFBaUI7QUFDZixlQUFPRSxVQUFVQyxJQUFWLEVBQVA7QUFDRDs7QUFFREgsYUFBT0EsS0FBS0ksV0FBTCxFQUFQOztBQUVBLFVBQUlKLFNBQVMsT0FBVCxJQUFvQkEsU0FBUyxNQUFqQyxFQUF5QztBQUN2QyxlQUFPRSxVQUFVRyxPQUFWLENBQWtCLE1BQWxCLEVBQTBCLEVBQTFCLENBQVA7QUFDRDs7QUFFRCxVQUFJTCxTQUFTLEtBQVQsSUFBa0JBLFNBQVMsT0FBL0IsRUFBd0M7QUFDdEMsZUFBT0UsVUFBVUcsT0FBVixDQUFrQixNQUFsQixFQUEwQixFQUExQixDQUFQO0FBQ0Q7O0FBRUQsWUFBTSxJQUFJQyxLQUFKLDBCQUFpQ04sSUFBakMsQ0FBTjtBQUNEO0FBakIyQyxHQUFoQjtBQUFBLENBQTlCOztBQW9CQSxlQUFlRCxxQkFBZiIsImZpbGUiOiJ0cmltUmVzdWx0VHJhbnNmb3JtZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRlbXBsYXRlVGFnIHRyYW5zZm9ybWVyIHRoYXQgdHJpbXMgd2hpdGVzcGFjZSBvbiB0aGUgZW5kIHJlc3VsdCBvZiBhIHRhZ2dlZCB0ZW1wbGF0ZVxuICogQHBhcmFtICB7U3RyaW5nfSBzaWRlID0gJycgLSBUaGUgc2lkZSBvZiB0aGUgc3RyaW5nIHRvIHRyaW0uIENhbiBiZSAnc3RhcnQnIG9yICdlbmQnIChhbHRlcm5hdGl2ZWx5ICdsZWZ0JyBvciAncmlnaHQnKVxuICogQHJldHVybiB7T2JqZWN0fSAgICAgICAgICAgLSBhIFRlbXBsYXRlVGFnIHRyYW5zZm9ybWVyXG4gKi9cbmNvbnN0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciA9IChzaWRlID0gJycpID0+ICh7XG4gIG9uRW5kUmVzdWx0KGVuZFJlc3VsdCkge1xuICAgIGlmIChzaWRlID09PSAnJykge1xuICAgICAgcmV0dXJuIGVuZFJlc3VsdC50cmltKCk7XG4gICAgfVxuXG4gICAgc2lkZSA9IHNpZGUudG9Mb3dlckNhc2UoKTtcblxuICAgIGlmIChzaWRlID09PSAnc3RhcnQnIHx8IHNpZGUgPT09ICdsZWZ0Jykge1xuICAgICAgcmV0dXJuIGVuZFJlc3VsdC5yZXBsYWNlKC9eXFxzKi8sICcnKTtcbiAgICB9XG5cbiAgICBpZiAoc2lkZSA9PT0gJ2VuZCcgfHwgc2lkZSA9PT0gJ3JpZ2h0Jykge1xuICAgICAgcmV0dXJuIGVuZFJlc3VsdC5yZXBsYWNlKC9cXHMqJC8sICcnKTtcbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgRXJyb3IoYFNpZGUgbm90IHN1cHBvcnRlZDogJHtzaWRlfWApO1xuICB9LFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lcjtcbiJdfQ==","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\n\nvar commaLists = new TemplateTag(inlineArrayTransformer({ separator: ',' }), stripIndentTransformer, trimResultTransformer);\n\nexport default commaLists;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYUxpc3RzL2NvbW1hTGlzdHMuanMiXSwibmFtZXMiOlsiVGVtcGxhdGVUYWciLCJzdHJpcEluZGVudFRyYW5zZm9ybWVyIiwiaW5saW5lQXJyYXlUcmFuc2Zvcm1lciIsInRyaW1SZXN1bHRUcmFuc2Zvcm1lciIsImNvbW1hTGlzdHMiLCJzZXBhcmF0b3IiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLFdBQVAsTUFBd0IsZ0JBQXhCO0FBQ0EsT0FBT0Msc0JBQVAsTUFBbUMsMkJBQW5DO0FBQ0EsT0FBT0Msc0JBQVAsTUFBbUMsMkJBQW5DO0FBQ0EsT0FBT0MscUJBQVAsTUFBa0MsMEJBQWxDOztBQUVBLElBQU1DLGFBQWEsSUFBSUosV0FBSixDQUNqQkUsdUJBQXVCLEVBQUVHLFdBQVcsR0FBYixFQUF2QixDQURpQixFQUVqQkosc0JBRmlCLEVBR2pCRSxxQkFIaUIsQ0FBbkI7O0FBTUEsZUFBZUMsVUFBZiIsImZpbGUiOiJjb21tYUxpc3RzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRlbXBsYXRlVGFnIGZyb20gJy4uL1RlbXBsYXRlVGFnJztcbmltcG9ydCBzdHJpcEluZGVudFRyYW5zZm9ybWVyIGZyb20gJy4uL3N0cmlwSW5kZW50VHJhbnNmb3JtZXInO1xuaW1wb3J0IGlubGluZUFycmF5VHJhbnNmb3JtZXIgZnJvbSAnLi4vaW5saW5lQXJyYXlUcmFuc2Zvcm1lcic7XG5pbXBvcnQgdHJpbVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3RyaW1SZXN1bHRUcmFuc2Zvcm1lcic7XG5cbmNvbnN0IGNvbW1hTGlzdHMgPSBuZXcgVGVtcGxhdGVUYWcoXG4gIGlubGluZUFycmF5VHJhbnNmb3JtZXIoeyBzZXBhcmF0b3I6ICcsJyB9KSxcbiAgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lcixcbiAgdHJpbVJlc3VsdFRyYW5zZm9ybWVyLFxuKTtcblxuZXhwb3J0IGRlZmF1bHQgY29tbWFMaXN0cztcbiJdfQ==","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\n\nvar commaListsAnd = new TemplateTag(inlineArrayTransformer({ separator: ',', conjunction: 'and' }), stripIndentTransformer, trimResultTransformer);\n\nexport default commaListsAnd;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYUxpc3RzQW5kL2NvbW1hTGlzdHNBbmQuanMiXSwibmFtZXMiOlsiVGVtcGxhdGVUYWciLCJzdHJpcEluZGVudFRyYW5zZm9ybWVyIiwiaW5saW5lQXJyYXlUcmFuc2Zvcm1lciIsInRyaW1SZXN1bHRUcmFuc2Zvcm1lciIsImNvbW1hTGlzdHNBbmQiLCJzZXBhcmF0b3IiLCJjb25qdW5jdGlvbiJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsV0FBUCxNQUF3QixnQkFBeEI7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxxQkFBUCxNQUFrQywwQkFBbEM7O0FBRUEsSUFBTUMsZ0JBQWdCLElBQUlKLFdBQUosQ0FDcEJFLHVCQUF1QixFQUFFRyxXQUFXLEdBQWIsRUFBa0JDLGFBQWEsS0FBL0IsRUFBdkIsQ0FEb0IsRUFFcEJMLHNCQUZvQixFQUdwQkUscUJBSG9CLENBQXRCOztBQU1BLGVBQWVDLGFBQWYiLCJmaWxlIjoiY29tbWFMaXN0c0FuZC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUZW1wbGF0ZVRhZyBmcm9tICcuLi9UZW1wbGF0ZVRhZyc7XG5pbXBvcnQgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lciBmcm9tICcuLi9zdHJpcEluZGVudFRyYW5zZm9ybWVyJztcbmltcG9ydCBpbmxpbmVBcnJheVRyYW5zZm9ybWVyIGZyb20gJy4uL2lubGluZUFycmF5VHJhbnNmb3JtZXInO1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInO1xuXG5jb25zdCBjb21tYUxpc3RzQW5kID0gbmV3IFRlbXBsYXRlVGFnKFxuICBpbmxpbmVBcnJheVRyYW5zZm9ybWVyKHsgc2VwYXJhdG9yOiAnLCcsIGNvbmp1bmN0aW9uOiAnYW5kJyB9KSxcbiAgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lcixcbiAgdHJpbVJlc3VsdFRyYW5zZm9ybWVyLFxuKTtcblxuZXhwb3J0IGRlZmF1bHQgY29tbWFMaXN0c0FuZDtcbiJdfQ==","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\n\nvar commaListsOr = new TemplateTag(inlineArrayTransformer({ separator: ',', conjunction: 'or' }), stripIndentTransformer, trimResultTransformer);\n\nexport default commaListsOr;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYUxpc3RzT3IvY29tbWFMaXN0c09yLmpzIl0sIm5hbWVzIjpbIlRlbXBsYXRlVGFnIiwic3RyaXBJbmRlbnRUcmFuc2Zvcm1lciIsImlubGluZUFycmF5VHJhbnNmb3JtZXIiLCJ0cmltUmVzdWx0VHJhbnNmb3JtZXIiLCJjb21tYUxpc3RzT3IiLCJzZXBhcmF0b3IiLCJjb25qdW5jdGlvbiJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsV0FBUCxNQUF3QixnQkFBeEI7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxxQkFBUCxNQUFrQywwQkFBbEM7O0FBRUEsSUFBTUMsZUFBZSxJQUFJSixXQUFKLENBQ25CRSx1QkFBdUIsRUFBRUcsV0FBVyxHQUFiLEVBQWtCQyxhQUFhLElBQS9CLEVBQXZCLENBRG1CLEVBRW5CTCxzQkFGbUIsRUFHbkJFLHFCQUhtQixDQUFyQjs7QUFNQSxlQUFlQyxZQUFmIiwiZmlsZSI6ImNvbW1hTGlzdHNPci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUZW1wbGF0ZVRhZyBmcm9tICcuLi9UZW1wbGF0ZVRhZyc7XG5pbXBvcnQgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lciBmcm9tICcuLi9zdHJpcEluZGVudFRyYW5zZm9ybWVyJztcbmltcG9ydCBpbmxpbmVBcnJheVRyYW5zZm9ybWVyIGZyb20gJy4uL2lubGluZUFycmF5VHJhbnNmb3JtZXInO1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInO1xuXG5jb25zdCBjb21tYUxpc3RzT3IgPSBuZXcgVGVtcGxhdGVUYWcoXG4gIGlubGluZUFycmF5VHJhbnNmb3JtZXIoeyBzZXBhcmF0b3I6ICcsJywgY29uanVuY3Rpb246ICdvcicgfSksXG4gIHN0cmlwSW5kZW50VHJhbnNmb3JtZXIsXG4gIHRyaW1SZXN1bHRUcmFuc2Zvcm1lcixcbik7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbW1hTGlzdHNPcjtcbiJdfQ==","var splitStringTransformer = function splitStringTransformer(splitBy) {\n  return {\n    onSubstitution: function onSubstitution(substitution, resultSoFar) {\n      if (splitBy != null && typeof splitBy === 'string') {\n        if (typeof substitution === 'string' && substitution.includes(splitBy)) {\n          substitution = substitution.split(splitBy);\n        }\n      } else {\n        throw new Error('You need to specify a string character to split by.');\n      }\n      return substitution;\n    }\n  };\n};\n\nexport default splitStringTransformer;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zcGxpdFN0cmluZ1RyYW5zZm9ybWVyL3NwbGl0U3RyaW5nVHJhbnNmb3JtZXIuanMiXSwibmFtZXMiOlsic3BsaXRTdHJpbmdUcmFuc2Zvcm1lciIsIm9uU3Vic3RpdHV0aW9uIiwic3Vic3RpdHV0aW9uIiwicmVzdWx0U29GYXIiLCJzcGxpdEJ5IiwiaW5jbHVkZXMiLCJzcGxpdCIsIkVycm9yIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFNQSx5QkFBeUIsU0FBekJBLHNCQUF5QjtBQUFBLFNBQVk7QUFDekNDLGtCQUR5QywwQkFDMUJDLFlBRDBCLEVBQ1pDLFdBRFksRUFDQztBQUN4QyxVQUFJQyxXQUFXLElBQVgsSUFBbUIsT0FBT0EsT0FBUCxLQUFtQixRQUExQyxFQUFvRDtBQUNsRCxZQUFJLE9BQU9GLFlBQVAsS0FBd0IsUUFBeEIsSUFBb0NBLGFBQWFHLFFBQWIsQ0FBc0JELE9BQXRCLENBQXhDLEVBQXdFO0FBQ3RFRix5QkFBZUEsYUFBYUksS0FBYixDQUFtQkYsT0FBbkIsQ0FBZjtBQUNEO0FBQ0YsT0FKRCxNQUlPO0FBQ0wsY0FBTSxJQUFJRyxLQUFKLENBQVUscURBQVYsQ0FBTjtBQUNEO0FBQ0QsYUFBT0wsWUFBUDtBQUNEO0FBVndDLEdBQVo7QUFBQSxDQUEvQjs7QUFhQSxlQUFlRixzQkFBZiIsImZpbGUiOiJzcGxpdFN0cmluZ1RyYW5zZm9ybWVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qgc3BsaXRTdHJpbmdUcmFuc2Zvcm1lciA9IHNwbGl0QnkgPT4gKHtcbiAgb25TdWJzdGl0dXRpb24oc3Vic3RpdHV0aW9uLCByZXN1bHRTb0Zhcikge1xuICAgIGlmIChzcGxpdEJ5ICE9IG51bGwgJiYgdHlwZW9mIHNwbGl0QnkgPT09ICdzdHJpbmcnKSB7XG4gICAgICBpZiAodHlwZW9mIHN1YnN0aXR1dGlvbiA9PT0gJ3N0cmluZycgJiYgc3Vic3RpdHV0aW9uLmluY2x1ZGVzKHNwbGl0QnkpKSB7XG4gICAgICAgIHN1YnN0aXR1dGlvbiA9IHN1YnN0aXR1dGlvbi5zcGxpdChzcGxpdEJ5KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbmVlZCB0byBzcGVjaWZ5IGEgc3RyaW5nIGNoYXJhY3RlciB0byBzcGxpdCBieS4nKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1YnN0aXR1dGlvbjtcbiAgfSxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBzcGxpdFN0cmluZ1RyYW5zZm9ybWVyO1xuIl19","var isValidValue = function isValidValue(x) {\n  return x != null && !Number.isNaN(x) && typeof x !== 'boolean';\n};\n\nvar removeNonPrintingValuesTransformer = function removeNonPrintingValuesTransformer() {\n  return {\n    onSubstitution: function onSubstitution(substitution) {\n      if (Array.isArray(substitution)) {\n        return substitution.filter(isValidValue);\n      }\n      if (isValidValue(substitution)) {\n        return substitution;\n      }\n      return '';\n    }\n  };\n};\n\nexport default removeNonPrintingValuesTransformer;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZW1vdmVOb25QcmludGluZ1ZhbHVlc1RyYW5zZm9ybWVyL3JlbW92ZU5vblByaW50aW5nVmFsdWVzVHJhbnNmb3JtZXIuanMiXSwibmFtZXMiOlsiaXNWYWxpZFZhbHVlIiwieCIsIk51bWJlciIsImlzTmFOIiwicmVtb3ZlTm9uUHJpbnRpbmdWYWx1ZXNUcmFuc2Zvcm1lciIsIm9uU3Vic3RpdHV0aW9uIiwic3Vic3RpdHV0aW9uIiwiQXJyYXkiLCJpc0FycmF5IiwiZmlsdGVyIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFNQSxlQUFlLFNBQWZBLFlBQWU7QUFBQSxTQUNuQkMsS0FBSyxJQUFMLElBQWEsQ0FBQ0MsT0FBT0MsS0FBUCxDQUFhRixDQUFiLENBQWQsSUFBaUMsT0FBT0EsQ0FBUCxLQUFhLFNBRDNCO0FBQUEsQ0FBckI7O0FBR0EsSUFBTUcscUNBQXFDLFNBQXJDQSxrQ0FBcUM7QUFBQSxTQUFPO0FBQ2hEQyxrQkFEZ0QsMEJBQ2pDQyxZQURpQyxFQUNuQjtBQUMzQixVQUFJQyxNQUFNQyxPQUFOLENBQWNGLFlBQWQsQ0FBSixFQUFpQztBQUMvQixlQUFPQSxhQUFhRyxNQUFiLENBQW9CVCxZQUFwQixDQUFQO0FBQ0Q7QUFDRCxVQUFJQSxhQUFhTSxZQUFiLENBQUosRUFBZ0M7QUFDOUIsZUFBT0EsWUFBUDtBQUNEO0FBQ0QsYUFBTyxFQUFQO0FBQ0Q7QUFUK0MsR0FBUDtBQUFBLENBQTNDOztBQVlBLGVBQWVGLGtDQUFmIiwiZmlsZSI6InJlbW92ZU5vblByaW50aW5nVmFsdWVzVHJhbnNmb3JtZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBpc1ZhbGlkVmFsdWUgPSB4ID0+XG4gIHggIT0gbnVsbCAmJiAhTnVtYmVyLmlzTmFOKHgpICYmIHR5cGVvZiB4ICE9PSAnYm9vbGVhbic7XG5cbmNvbnN0IHJlbW92ZU5vblByaW50aW5nVmFsdWVzVHJhbnNmb3JtZXIgPSAoKSA9PiAoe1xuICBvblN1YnN0aXR1dGlvbihzdWJzdGl0dXRpb24pIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShzdWJzdGl0dXRpb24pKSB7XG4gICAgICByZXR1cm4gc3Vic3RpdHV0aW9uLmZpbHRlcihpc1ZhbGlkVmFsdWUpO1xuICAgIH1cbiAgICBpZiAoaXNWYWxpZFZhbHVlKHN1YnN0aXR1dGlvbikpIHtcbiAgICAgIHJldHVybiBzdWJzdGl0dXRpb247XG4gICAgfVxuICAgIHJldHVybiAnJztcbiAgfSxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCByZW1vdmVOb25QcmludGluZ1ZhbHVlc1RyYW5zZm9ybWVyO1xuIl19","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport splitStringTransformer from '../splitStringTransformer';\nimport removeNonPrintingValuesTransformer from '../removeNonPrintingValuesTransformer';\n\nvar html = new TemplateTag(splitStringTransformer('\\n'), removeNonPrintingValuesTransformer, inlineArrayTransformer, stripIndentTransformer, trimResultTransformer);\n\nexport default html;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9odG1sL2h0bWwuanMiXSwibmFtZXMiOlsiVGVtcGxhdGVUYWciLCJzdHJpcEluZGVudFRyYW5zZm9ybWVyIiwiaW5saW5lQXJyYXlUcmFuc2Zvcm1lciIsInRyaW1SZXN1bHRUcmFuc2Zvcm1lciIsInNwbGl0U3RyaW5nVHJhbnNmb3JtZXIiLCJyZW1vdmVOb25QcmludGluZ1ZhbHVlc1RyYW5zZm9ybWVyIiwiaHRtbCJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsV0FBUCxNQUF3QixnQkFBeEI7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxxQkFBUCxNQUFrQywwQkFBbEM7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxrQ0FBUCxNQUErQyx1Q0FBL0M7O0FBRUEsSUFBTUMsT0FBTyxJQUFJTixXQUFKLENBQ1hJLHVCQUF1QixJQUF2QixDQURXLEVBRVhDLGtDQUZXLEVBR1hILHNCQUhXLEVBSVhELHNCQUpXLEVBS1hFLHFCQUxXLENBQWI7O0FBUUEsZUFBZUcsSUFBZiIsImZpbGUiOiJodG1sLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRlbXBsYXRlVGFnIGZyb20gJy4uL1RlbXBsYXRlVGFnJztcbmltcG9ydCBzdHJpcEluZGVudFRyYW5zZm9ybWVyIGZyb20gJy4uL3N0cmlwSW5kZW50VHJhbnNmb3JtZXInO1xuaW1wb3J0IGlubGluZUFycmF5VHJhbnNmb3JtZXIgZnJvbSAnLi4vaW5saW5lQXJyYXlUcmFuc2Zvcm1lcic7XG5pbXBvcnQgdHJpbVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3RyaW1SZXN1bHRUcmFuc2Zvcm1lcic7XG5pbXBvcnQgc3BsaXRTdHJpbmdUcmFuc2Zvcm1lciBmcm9tICcuLi9zcGxpdFN0cmluZ1RyYW5zZm9ybWVyJztcbmltcG9ydCByZW1vdmVOb25QcmludGluZ1ZhbHVlc1RyYW5zZm9ybWVyIGZyb20gJy4uL3JlbW92ZU5vblByaW50aW5nVmFsdWVzVHJhbnNmb3JtZXInO1xuXG5jb25zdCBodG1sID0gbmV3IFRlbXBsYXRlVGFnKFxuICBzcGxpdFN0cmluZ1RyYW5zZm9ybWVyKCdcXG4nKSxcbiAgcmVtb3ZlTm9uUHJpbnRpbmdWYWx1ZXNUcmFuc2Zvcm1lcixcbiAgaW5saW5lQXJyYXlUcmFuc2Zvcm1lcixcbiAgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lcixcbiAgdHJpbVJlc3VsdFRyYW5zZm9ybWVyLFxuKTtcblxuZXhwb3J0IGRlZmF1bHQgaHRtbDtcbiJdfQ==","var replaceSubstitutionTransformer = function replaceSubstitutionTransformer(replaceWhat, replaceWith) {\n  return {\n    onSubstitution: function onSubstitution(substitution, resultSoFar) {\n      if (replaceWhat == null || replaceWith == null) {\n        throw new Error('replaceSubstitutionTransformer requires at least 2 arguments.');\n      }\n\n      // Do not touch if null or undefined\n      if (substitution == null) {\n        return substitution;\n      } else {\n        return substitution.toString().replace(replaceWhat, replaceWith);\n      }\n    }\n  };\n};\n\nexport default replaceSubstitutionTransformer;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZXBsYWNlU3Vic3RpdHV0aW9uVHJhbnNmb3JtZXIvcmVwbGFjZVN1YnN0aXR1dGlvblRyYW5zZm9ybWVyLmpzIl0sIm5hbWVzIjpbInJlcGxhY2VTdWJzdGl0dXRpb25UcmFuc2Zvcm1lciIsInJlcGxhY2VXaGF0IiwicmVwbGFjZVdpdGgiLCJvblN1YnN0aXR1dGlvbiIsInN1YnN0aXR1dGlvbiIsInJlc3VsdFNvRmFyIiwiRXJyb3IiLCJ0b1N0cmluZyIsInJlcGxhY2UiXSwibWFwcGluZ3MiOiJBQUFBLElBQU1BLGlDQUFpQyxTQUFqQ0EsOEJBQWlDLENBQUNDLFdBQUQsRUFBY0MsV0FBZDtBQUFBLFNBQStCO0FBQ3BFQyxrQkFEb0UsMEJBQ3JEQyxZQURxRCxFQUN2Q0MsV0FEdUMsRUFDMUI7QUFDeEMsVUFBSUosZUFBZSxJQUFmLElBQXVCQyxlQUFlLElBQTFDLEVBQWdEO0FBQzlDLGNBQU0sSUFBSUksS0FBSixDQUNKLCtEQURJLENBQU47QUFHRDs7QUFFRDtBQUNBLFVBQUlGLGdCQUFnQixJQUFwQixFQUEwQjtBQUN4QixlQUFPQSxZQUFQO0FBQ0QsT0FGRCxNQUVPO0FBQ0wsZUFBT0EsYUFBYUcsUUFBYixHQUF3QkMsT0FBeEIsQ0FBZ0NQLFdBQWhDLEVBQTZDQyxXQUE3QyxDQUFQO0FBQ0Q7QUFDRjtBQWRtRSxHQUEvQjtBQUFBLENBQXZDOztBQWlCQSxlQUFlRiw4QkFBZiIsImZpbGUiOiJyZXBsYWNlU3Vic3RpdHV0aW9uVHJhbnNmb3JtZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCByZXBsYWNlU3Vic3RpdHV0aW9uVHJhbnNmb3JtZXIgPSAocmVwbGFjZVdoYXQsIHJlcGxhY2VXaXRoKSA9PiAoe1xuICBvblN1YnN0aXR1dGlvbihzdWJzdGl0dXRpb24sIHJlc3VsdFNvRmFyKSB7XG4gICAgaWYgKHJlcGxhY2VXaGF0ID09IG51bGwgfHwgcmVwbGFjZVdpdGggPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAncmVwbGFjZVN1YnN0aXR1dGlvblRyYW5zZm9ybWVyIHJlcXVpcmVzIGF0IGxlYXN0IDIgYXJndW1lbnRzLicsXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIERvIG5vdCB0b3VjaCBpZiBudWxsIG9yIHVuZGVmaW5lZFxuICAgIGlmIChzdWJzdGl0dXRpb24gPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHN1YnN0aXR1dGlvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHN1YnN0aXR1dGlvbi50b1N0cmluZygpLnJlcGxhY2UocmVwbGFjZVdoYXQsIHJlcGxhY2VXaXRoKTtcbiAgICB9XG4gIH0sXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgcmVwbGFjZVN1YnN0aXR1dGlvblRyYW5zZm9ybWVyO1xuIl19","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport splitStringTransformer from '../splitStringTransformer';\nimport replaceSubstitutionTransformer from '../replaceSubstitutionTransformer';\n\nvar safeHtml = new TemplateTag(splitStringTransformer('\\n'), inlineArrayTransformer, stripIndentTransformer, trimResultTransformer, replaceSubstitutionTransformer(/&/g, '&amp;'), replaceSubstitutionTransformer(/</g, '&lt;'), replaceSubstitutionTransformer(/>/g, '&gt;'), replaceSubstitutionTransformer(/\"/g, '&quot;'), replaceSubstitutionTransformer(/'/g, '&#x27;'), replaceSubstitutionTransformer(/`/g, '&#x60;'));\n\nexport default safeHtml;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zYWZlSHRtbC9zYWZlSHRtbC5qcyJdLCJuYW1lcyI6WyJUZW1wbGF0ZVRhZyIsInN0cmlwSW5kZW50VHJhbnNmb3JtZXIiLCJpbmxpbmVBcnJheVRyYW5zZm9ybWVyIiwidHJpbVJlc3VsdFRyYW5zZm9ybWVyIiwic3BsaXRTdHJpbmdUcmFuc2Zvcm1lciIsInJlcGxhY2VTdWJzdGl0dXRpb25UcmFuc2Zvcm1lciIsInNhZmVIdG1sIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxXQUFQLE1BQXdCLGdCQUF4QjtBQUNBLE9BQU9DLHNCQUFQLE1BQW1DLDJCQUFuQztBQUNBLE9BQU9DLHNCQUFQLE1BQW1DLDJCQUFuQztBQUNBLE9BQU9DLHFCQUFQLE1BQWtDLDBCQUFsQztBQUNBLE9BQU9DLHNCQUFQLE1BQW1DLDJCQUFuQztBQUNBLE9BQU9DLDhCQUFQLE1BQTJDLG1DQUEzQzs7QUFFQSxJQUFNQyxXQUFXLElBQUlOLFdBQUosQ0FDZkksdUJBQXVCLElBQXZCLENBRGUsRUFFZkYsc0JBRmUsRUFHZkQsc0JBSGUsRUFJZkUscUJBSmUsRUFLZkUsK0JBQStCLElBQS9CLEVBQXFDLE9BQXJDLENBTGUsRUFNZkEsK0JBQStCLElBQS9CLEVBQXFDLE1BQXJDLENBTmUsRUFPZkEsK0JBQStCLElBQS9CLEVBQXFDLE1BQXJDLENBUGUsRUFRZkEsK0JBQStCLElBQS9CLEVBQXFDLFFBQXJDLENBUmUsRUFTZkEsK0JBQStCLElBQS9CLEVBQXFDLFFBQXJDLENBVGUsRUFVZkEsK0JBQStCLElBQS9CLEVBQXFDLFFBQXJDLENBVmUsQ0FBakI7O0FBYUEsZUFBZUMsUUFBZiIsImZpbGUiOiJzYWZlSHRtbC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUZW1wbGF0ZVRhZyBmcm9tICcuLi9UZW1wbGF0ZVRhZyc7XG5pbXBvcnQgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lciBmcm9tICcuLi9zdHJpcEluZGVudFRyYW5zZm9ybWVyJztcbmltcG9ydCBpbmxpbmVBcnJheVRyYW5zZm9ybWVyIGZyb20gJy4uL2lubGluZUFycmF5VHJhbnNmb3JtZXInO1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInO1xuaW1wb3J0IHNwbGl0U3RyaW5nVHJhbnNmb3JtZXIgZnJvbSAnLi4vc3BsaXRTdHJpbmdUcmFuc2Zvcm1lcic7XG5pbXBvcnQgcmVwbGFjZVN1YnN0aXR1dGlvblRyYW5zZm9ybWVyIGZyb20gJy4uL3JlcGxhY2VTdWJzdGl0dXRpb25UcmFuc2Zvcm1lcic7XG5cbmNvbnN0IHNhZmVIdG1sID0gbmV3IFRlbXBsYXRlVGFnKFxuICBzcGxpdFN0cmluZ1RyYW5zZm9ybWVyKCdcXG4nKSxcbiAgaW5saW5lQXJyYXlUcmFuc2Zvcm1lcixcbiAgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lcixcbiAgdHJpbVJlc3VsdFRyYW5zZm9ybWVyLFxuICByZXBsYWNlU3Vic3RpdHV0aW9uVHJhbnNmb3JtZXIoLyYvZywgJyZhbXA7JyksXG4gIHJlcGxhY2VTdWJzdGl0dXRpb25UcmFuc2Zvcm1lcigvPC9nLCAnJmx0OycpLFxuICByZXBsYWNlU3Vic3RpdHV0aW9uVHJhbnNmb3JtZXIoLz4vZywgJyZndDsnKSxcbiAgcmVwbGFjZVN1YnN0aXR1dGlvblRyYW5zZm9ybWVyKC9cIi9nLCAnJnF1b3Q7JyksXG4gIHJlcGxhY2VTdWJzdGl0dXRpb25UcmFuc2Zvcm1lcigvJy9nLCAnJiN4Mjc7JyksXG4gIHJlcGxhY2VTdWJzdGl0dXRpb25UcmFuc2Zvcm1lcigvYC9nLCAnJiN4NjA7JyksXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBzYWZlSHRtbDtcbiJdfQ==","/**\n * Replaces tabs, newlines and spaces with the chosen value when they occur in sequences\n * @param  {(String|RegExp)} replaceWhat - the value or pattern that should be replaced\n * @param  {*}               replaceWith - the replacement value\n * @return {Object}                      - a TemplateTag transformer\n */\nvar replaceResultTransformer = function replaceResultTransformer(replaceWhat, replaceWith) {\n  return {\n    onEndResult: function onEndResult(endResult) {\n      if (replaceWhat == null || replaceWith == null) {\n        throw new Error('replaceResultTransformer requires at least 2 arguments.');\n      }\n      return endResult.replace(replaceWhat, replaceWith);\n    }\n  };\n};\n\nexport default replaceResultTransformer;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIvcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyLmpzIl0sIm5hbWVzIjpbInJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciIsInJlcGxhY2VXaGF0IiwicmVwbGFjZVdpdGgiLCJvbkVuZFJlc3VsdCIsImVuZFJlc3VsdCIsIkVycm9yIiwicmVwbGFjZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQU1BLElBQU1BLDJCQUEyQixTQUEzQkEsd0JBQTJCLENBQUNDLFdBQUQsRUFBY0MsV0FBZDtBQUFBLFNBQStCO0FBQzlEQyxlQUQ4RCx1QkFDbERDLFNBRGtELEVBQ3ZDO0FBQ3JCLFVBQUlILGVBQWUsSUFBZixJQUF1QkMsZUFBZSxJQUExQyxFQUFnRDtBQUM5QyxjQUFNLElBQUlHLEtBQUosQ0FDSix5REFESSxDQUFOO0FBR0Q7QUFDRCxhQUFPRCxVQUFVRSxPQUFWLENBQWtCTCxXQUFsQixFQUErQkMsV0FBL0IsQ0FBUDtBQUNEO0FBUjZELEdBQS9CO0FBQUEsQ0FBakM7O0FBV0EsZUFBZUYsd0JBQWYiLCJmaWxlIjoicmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBSZXBsYWNlcyB0YWJzLCBuZXdsaW5lcyBhbmQgc3BhY2VzIHdpdGggdGhlIGNob3NlbiB2YWx1ZSB3aGVuIHRoZXkgb2NjdXIgaW4gc2VxdWVuY2VzXG4gKiBAcGFyYW0gIHsoU3RyaW5nfFJlZ0V4cCl9IHJlcGxhY2VXaGF0IC0gdGhlIHZhbHVlIG9yIHBhdHRlcm4gdGhhdCBzaG91bGQgYmUgcmVwbGFjZWRcbiAqIEBwYXJhbSAgeyp9ICAgICAgICAgICAgICAgcmVwbGFjZVdpdGggLSB0aGUgcmVwbGFjZW1lbnQgdmFsdWVcbiAqIEByZXR1cm4ge09iamVjdH0gICAgICAgICAgICAgICAgICAgICAgLSBhIFRlbXBsYXRlVGFnIHRyYW5zZm9ybWVyXG4gKi9cbmNvbnN0IHJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciA9IChyZXBsYWNlV2hhdCwgcmVwbGFjZVdpdGgpID0+ICh7XG4gIG9uRW5kUmVzdWx0KGVuZFJlc3VsdCkge1xuICAgIGlmIChyZXBsYWNlV2hhdCA9PSBudWxsIHx8IHJlcGxhY2VXaXRoID09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ3JlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciByZXF1aXJlcyBhdCBsZWFzdCAyIGFyZ3VtZW50cy4nLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIGVuZFJlc3VsdC5yZXBsYWNlKHJlcGxhY2VXaGF0LCByZXBsYWNlV2l0aCk7XG4gIH0sXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyO1xuIl19","import TemplateTag from '../TemplateTag';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\n\nvar oneLine = new TemplateTag(replaceResultTransformer(/(?:\\n(?:\\s*))+/g, ' '), trimResultTransformer);\n\nexport default oneLine;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vbmVMaW5lL29uZUxpbmUuanMiXSwibmFtZXMiOlsiVGVtcGxhdGVUYWciLCJ0cmltUmVzdWx0VHJhbnNmb3JtZXIiLCJyZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIiLCJvbmVMaW5lIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxXQUFQLE1BQXdCLGdCQUF4QjtBQUNBLE9BQU9DLHFCQUFQLE1BQWtDLDBCQUFsQztBQUNBLE9BQU9DLHdCQUFQLE1BQXFDLDZCQUFyQzs7QUFFQSxJQUFNQyxVQUFVLElBQUlILFdBQUosQ0FDZEUseUJBQXlCLGlCQUF6QixFQUE0QyxHQUE1QyxDQURjLEVBRWRELHFCQUZjLENBQWhCOztBQUtBLGVBQWVFLE9BQWYiLCJmaWxlIjoib25lTGluZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUZW1wbGF0ZVRhZyBmcm9tICcuLi9UZW1wbGF0ZVRhZyc7XG5pbXBvcnQgdHJpbVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3RyaW1SZXN1bHRUcmFuc2Zvcm1lcic7XG5pbXBvcnQgcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3JlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lcic7XG5cbmNvbnN0IG9uZUxpbmUgPSBuZXcgVGVtcGxhdGVUYWcoXG4gIHJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lcigvKD86XFxuKD86XFxzKikpKy9nLCAnICcpLFxuICB0cmltUmVzdWx0VHJhbnNmb3JtZXIsXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBvbmVMaW5lO1xuIl19","import TemplateTag from '../TemplateTag';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\n\nvar oneLineTrim = new TemplateTag(replaceResultTransformer(/(?:\\n\\s*)/g, ''), trimResultTransformer);\n\nexport default oneLineTrim;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vbmVMaW5lVHJpbS9vbmVMaW5lVHJpbS5qcyJdLCJuYW1lcyI6WyJUZW1wbGF0ZVRhZyIsInRyaW1SZXN1bHRUcmFuc2Zvcm1lciIsInJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciIsIm9uZUxpbmVUcmltIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxXQUFQLE1BQXdCLGdCQUF4QjtBQUNBLE9BQU9DLHFCQUFQLE1BQWtDLDBCQUFsQztBQUNBLE9BQU9DLHdCQUFQLE1BQXFDLDZCQUFyQzs7QUFFQSxJQUFNQyxjQUFjLElBQUlILFdBQUosQ0FDbEJFLHlCQUF5QixZQUF6QixFQUF1QyxFQUF2QyxDQURrQixFQUVsQkQscUJBRmtCLENBQXBCOztBQUtBLGVBQWVFLFdBQWYiLCJmaWxlIjoib25lTGluZVRyaW0uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVGVtcGxhdGVUYWcgZnJvbSAnLi4vVGVtcGxhdGVUYWcnO1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInO1xuaW1wb3J0IHJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi9yZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXInO1xuXG5jb25zdCBvbmVMaW5lVHJpbSA9IG5ldyBUZW1wbGF0ZVRhZyhcbiAgcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyKC8oPzpcXG5cXHMqKS9nLCAnJyksXG4gIHRyaW1SZXN1bHRUcmFuc2Zvcm1lcixcbik7XG5cbmV4cG9ydCBkZWZhdWx0IG9uZUxpbmVUcmltO1xuIl19","import TemplateTag from '../TemplateTag';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\n\nvar oneLineCommaLists = new TemplateTag(inlineArrayTransformer({ separator: ',' }), replaceResultTransformer(/(?:\\s+)/g, ' '), trimResultTransformer);\n\nexport default oneLineCommaLists;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vbmVMaW5lQ29tbWFMaXN0cy9vbmVMaW5lQ29tbWFMaXN0cy5qcyJdLCJuYW1lcyI6WyJUZW1wbGF0ZVRhZyIsImlubGluZUFycmF5VHJhbnNmb3JtZXIiLCJ0cmltUmVzdWx0VHJhbnNmb3JtZXIiLCJyZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIiLCJvbmVMaW5lQ29tbWFMaXN0cyIsInNlcGFyYXRvciJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsV0FBUCxNQUF3QixnQkFBeEI7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxxQkFBUCxNQUFrQywwQkFBbEM7QUFDQSxPQUFPQyx3QkFBUCxNQUFxQyw2QkFBckM7O0FBRUEsSUFBTUMsb0JBQW9CLElBQUlKLFdBQUosQ0FDeEJDLHVCQUF1QixFQUFFSSxXQUFXLEdBQWIsRUFBdkIsQ0FEd0IsRUFFeEJGLHlCQUF5QixVQUF6QixFQUFxQyxHQUFyQyxDQUZ3QixFQUd4QkQscUJBSHdCLENBQTFCOztBQU1BLGVBQWVFLGlCQUFmIiwiZmlsZSI6Im9uZUxpbmVDb21tYUxpc3RzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRlbXBsYXRlVGFnIGZyb20gJy4uL1RlbXBsYXRlVGFnJztcbmltcG9ydCBpbmxpbmVBcnJheVRyYW5zZm9ybWVyIGZyb20gJy4uL2lubGluZUFycmF5VHJhbnNmb3JtZXInO1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInO1xuaW1wb3J0IHJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi9yZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXInO1xuXG5jb25zdCBvbmVMaW5lQ29tbWFMaXN0cyA9IG5ldyBUZW1wbGF0ZVRhZyhcbiAgaW5saW5lQXJyYXlUcmFuc2Zvcm1lcih7IHNlcGFyYXRvcjogJywnIH0pLFxuICByZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIoLyg/OlxccyspL2csICcgJyksXG4gIHRyaW1SZXN1bHRUcmFuc2Zvcm1lcixcbik7XG5cbmV4cG9ydCBkZWZhdWx0IG9uZUxpbmVDb21tYUxpc3RzO1xuIl19","import TemplateTag from '../TemplateTag';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\n\nvar oneLineCommaListsOr = new TemplateTag(inlineArrayTransformer({ separator: ',', conjunction: 'or' }), replaceResultTransformer(/(?:\\s+)/g, ' '), trimResultTransformer);\n\nexport default oneLineCommaListsOr;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vbmVMaW5lQ29tbWFMaXN0c09yL29uZUxpbmVDb21tYUxpc3RzT3IuanMiXSwibmFtZXMiOlsiVGVtcGxhdGVUYWciLCJpbmxpbmVBcnJheVRyYW5zZm9ybWVyIiwidHJpbVJlc3VsdFRyYW5zZm9ybWVyIiwicmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyIiwib25lTGluZUNvbW1hTGlzdHNPciIsInNlcGFyYXRvciIsImNvbmp1bmN0aW9uIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxXQUFQLE1BQXdCLGdCQUF4QjtBQUNBLE9BQU9DLHNCQUFQLE1BQW1DLDJCQUFuQztBQUNBLE9BQU9DLHFCQUFQLE1BQWtDLDBCQUFsQztBQUNBLE9BQU9DLHdCQUFQLE1BQXFDLDZCQUFyQzs7QUFFQSxJQUFNQyxzQkFBc0IsSUFBSUosV0FBSixDQUMxQkMsdUJBQXVCLEVBQUVJLFdBQVcsR0FBYixFQUFrQkMsYUFBYSxJQUEvQixFQUF2QixDQUQwQixFQUUxQkgseUJBQXlCLFVBQXpCLEVBQXFDLEdBQXJDLENBRjBCLEVBRzFCRCxxQkFIMEIsQ0FBNUI7O0FBTUEsZUFBZUUsbUJBQWYiLCJmaWxlIjoib25lTGluZUNvbW1hTGlzdHNPci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUZW1wbGF0ZVRhZyBmcm9tICcuLi9UZW1wbGF0ZVRhZyc7XG5pbXBvcnQgaW5saW5lQXJyYXlUcmFuc2Zvcm1lciBmcm9tICcuLi9pbmxpbmVBcnJheVRyYW5zZm9ybWVyJztcbmltcG9ydCB0cmltUmVzdWx0VHJhbnNmb3JtZXIgZnJvbSAnLi4vdHJpbVJlc3VsdFRyYW5zZm9ybWVyJztcbmltcG9ydCByZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIgZnJvbSAnLi4vcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyJztcblxuY29uc3Qgb25lTGluZUNvbW1hTGlzdHNPciA9IG5ldyBUZW1wbGF0ZVRhZyhcbiAgaW5saW5lQXJyYXlUcmFuc2Zvcm1lcih7IHNlcGFyYXRvcjogJywnLCBjb25qdW5jdGlvbjogJ29yJyB9KSxcbiAgcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyKC8oPzpcXHMrKS9nLCAnICcpLFxuICB0cmltUmVzdWx0VHJhbnNmb3JtZXIsXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBvbmVMaW5lQ29tbWFMaXN0c09yO1xuIl19","import TemplateTag from '../TemplateTag';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\n\nvar oneLineCommaListsAnd = new TemplateTag(inlineArrayTransformer({ separator: ',', conjunction: 'and' }), replaceResultTransformer(/(?:\\s+)/g, ' '), trimResultTransformer);\n\nexport default oneLineCommaListsAnd;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vbmVMaW5lQ29tbWFMaXN0c0FuZC9vbmVMaW5lQ29tbWFMaXN0c0FuZC5qcyJdLCJuYW1lcyI6WyJUZW1wbGF0ZVRhZyIsImlubGluZUFycmF5VHJhbnNmb3JtZXIiLCJ0cmltUmVzdWx0VHJhbnNmb3JtZXIiLCJyZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIiLCJvbmVMaW5lQ29tbWFMaXN0c0FuZCIsInNlcGFyYXRvciIsImNvbmp1bmN0aW9uIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxXQUFQLE1BQXdCLGdCQUF4QjtBQUNBLE9BQU9DLHNCQUFQLE1BQW1DLDJCQUFuQztBQUNBLE9BQU9DLHFCQUFQLE1BQWtDLDBCQUFsQztBQUNBLE9BQU9DLHdCQUFQLE1BQXFDLDZCQUFyQzs7QUFFQSxJQUFNQyx1QkFBdUIsSUFBSUosV0FBSixDQUMzQkMsdUJBQXVCLEVBQUVJLFdBQVcsR0FBYixFQUFrQkMsYUFBYSxLQUEvQixFQUF2QixDQUQyQixFQUUzQkgseUJBQXlCLFVBQXpCLEVBQXFDLEdBQXJDLENBRjJCLEVBRzNCRCxxQkFIMkIsQ0FBN0I7O0FBTUEsZUFBZUUsb0JBQWYiLCJmaWxlIjoib25lTGluZUNvbW1hTGlzdHNBbmQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVGVtcGxhdGVUYWcgZnJvbSAnLi4vVGVtcGxhdGVUYWcnO1xuaW1wb3J0IGlubGluZUFycmF5VHJhbnNmb3JtZXIgZnJvbSAnLi4vaW5saW5lQXJyYXlUcmFuc2Zvcm1lcic7XG5pbXBvcnQgdHJpbVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3RyaW1SZXN1bHRUcmFuc2Zvcm1lcic7XG5pbXBvcnQgcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3JlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lcic7XG5cbmNvbnN0IG9uZUxpbmVDb21tYUxpc3RzQW5kID0gbmV3IFRlbXBsYXRlVGFnKFxuICBpbmxpbmVBcnJheVRyYW5zZm9ybWVyKHsgc2VwYXJhdG9yOiAnLCcsIGNvbmp1bmN0aW9uOiAnYW5kJyB9KSxcbiAgcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyKC8oPzpcXHMrKS9nLCAnICcpLFxuICB0cmltUmVzdWx0VHJhbnNmb3JtZXIsXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBvbmVMaW5lQ29tbWFMaXN0c0FuZDtcbiJdfQ==","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\n\nvar inlineLists = new TemplateTag(inlineArrayTransformer, stripIndentTransformer, trimResultTransformer);\n\nexport default inlineLists;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbmxpbmVMaXN0cy9pbmxpbmVMaXN0cy5qcyJdLCJuYW1lcyI6WyJUZW1wbGF0ZVRhZyIsInN0cmlwSW5kZW50VHJhbnNmb3JtZXIiLCJpbmxpbmVBcnJheVRyYW5zZm9ybWVyIiwidHJpbVJlc3VsdFRyYW5zZm9ybWVyIiwiaW5saW5lTGlzdHMiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLFdBQVAsTUFBd0IsZ0JBQXhCO0FBQ0EsT0FBT0Msc0JBQVAsTUFBbUMsMkJBQW5DO0FBQ0EsT0FBT0Msc0JBQVAsTUFBbUMsMkJBQW5DO0FBQ0EsT0FBT0MscUJBQVAsTUFBa0MsMEJBQWxDOztBQUVBLElBQU1DLGNBQWMsSUFBSUosV0FBSixDQUNsQkUsc0JBRGtCLEVBRWxCRCxzQkFGa0IsRUFHbEJFLHFCQUhrQixDQUFwQjs7QUFNQSxlQUFlQyxXQUFmIiwiZmlsZSI6ImlubGluZUxpc3RzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRlbXBsYXRlVGFnIGZyb20gJy4uL1RlbXBsYXRlVGFnJztcbmltcG9ydCBzdHJpcEluZGVudFRyYW5zZm9ybWVyIGZyb20gJy4uL3N0cmlwSW5kZW50VHJhbnNmb3JtZXInO1xuaW1wb3J0IGlubGluZUFycmF5VHJhbnNmb3JtZXIgZnJvbSAnLi4vaW5saW5lQXJyYXlUcmFuc2Zvcm1lcic7XG5pbXBvcnQgdHJpbVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3RyaW1SZXN1bHRUcmFuc2Zvcm1lcic7XG5cbmNvbnN0IGlubGluZUxpc3RzID0gbmV3IFRlbXBsYXRlVGFnKFxuICBpbmxpbmVBcnJheVRyYW5zZm9ybWVyLFxuICBzdHJpcEluZGVudFRyYW5zZm9ybWVyLFxuICB0cmltUmVzdWx0VHJhbnNmb3JtZXIsXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBpbmxpbmVMaXN0cztcbiJdfQ==","import TemplateTag from '../TemplateTag';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\n\nvar oneLineInlineLists = new TemplateTag(inlineArrayTransformer, replaceResultTransformer(/(?:\\s+)/g, ' '), trimResultTransformer);\n\nexport default oneLineInlineLists;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vbmVMaW5lSW5saW5lTGlzdHMvb25lTGluZUlubGluZUxpc3RzLmpzIl0sIm5hbWVzIjpbIlRlbXBsYXRlVGFnIiwiaW5saW5lQXJyYXlUcmFuc2Zvcm1lciIsInRyaW1SZXN1bHRUcmFuc2Zvcm1lciIsInJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciIsIm9uZUxpbmVJbmxpbmVMaXN0cyJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsV0FBUCxNQUF3QixnQkFBeEI7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxxQkFBUCxNQUFrQywwQkFBbEM7QUFDQSxPQUFPQyx3QkFBUCxNQUFxQyw2QkFBckM7O0FBRUEsSUFBTUMscUJBQXFCLElBQUlKLFdBQUosQ0FDekJDLHNCQUR5QixFQUV6QkUseUJBQXlCLFVBQXpCLEVBQXFDLEdBQXJDLENBRnlCLEVBR3pCRCxxQkFIeUIsQ0FBM0I7O0FBTUEsZUFBZUUsa0JBQWYiLCJmaWxlIjoib25lTGluZUlubGluZUxpc3RzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRlbXBsYXRlVGFnIGZyb20gJy4uL1RlbXBsYXRlVGFnJztcbmltcG9ydCBpbmxpbmVBcnJheVRyYW5zZm9ybWVyIGZyb20gJy4uL2lubGluZUFycmF5VHJhbnNmb3JtZXInO1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInO1xuaW1wb3J0IHJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi9yZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXInO1xuXG5jb25zdCBvbmVMaW5lSW5saW5lTGlzdHMgPSBuZXcgVGVtcGxhdGVUYWcoXG4gIGlubGluZUFycmF5VHJhbnNmb3JtZXIsXG4gIHJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lcigvKD86XFxzKykvZywgJyAnKSxcbiAgdHJpbVJlc3VsdFRyYW5zZm9ybWVyLFxuKTtcblxuZXhwb3J0IGRlZmF1bHQgb25lTGluZUlubGluZUxpc3RzO1xuIl19","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\n\nvar stripIndent = new TemplateTag(stripIndentTransformer, trimResultTransformer);\n\nexport default stripIndent;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdHJpcEluZGVudC9zdHJpcEluZGVudC5qcyJdLCJuYW1lcyI6WyJUZW1wbGF0ZVRhZyIsInN0cmlwSW5kZW50VHJhbnNmb3JtZXIiLCJ0cmltUmVzdWx0VHJhbnNmb3JtZXIiLCJzdHJpcEluZGVudCJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsV0FBUCxNQUF3QixnQkFBeEI7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxxQkFBUCxNQUFrQywwQkFBbEM7O0FBRUEsSUFBTUMsY0FBYyxJQUFJSCxXQUFKLENBQ2xCQyxzQkFEa0IsRUFFbEJDLHFCQUZrQixDQUFwQjs7QUFLQSxlQUFlQyxXQUFmIiwiZmlsZSI6InN0cmlwSW5kZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRlbXBsYXRlVGFnIGZyb20gJy4uL1RlbXBsYXRlVGFnJztcbmltcG9ydCBzdHJpcEluZGVudFRyYW5zZm9ybWVyIGZyb20gJy4uL3N0cmlwSW5kZW50VHJhbnNmb3JtZXInO1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInO1xuXG5jb25zdCBzdHJpcEluZGVudCA9IG5ldyBUZW1wbGF0ZVRhZyhcbiAgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lcixcbiAgdHJpbVJlc3VsdFRyYW5zZm9ybWVyLFxuKTtcblxuZXhwb3J0IGRlZmF1bHQgc3RyaXBJbmRlbnQ7XG4iXX0=","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\n\nvar stripIndents = new TemplateTag(stripIndentTransformer('all'), trimResultTransformer);\n\nexport default stripIndents;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdHJpcEluZGVudHMvc3RyaXBJbmRlbnRzLmpzIl0sIm5hbWVzIjpbIlRlbXBsYXRlVGFnIiwic3RyaXBJbmRlbnRUcmFuc2Zvcm1lciIsInRyaW1SZXN1bHRUcmFuc2Zvcm1lciIsInN0cmlwSW5kZW50cyJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsV0FBUCxNQUF3QixnQkFBeEI7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxxQkFBUCxNQUFrQywwQkFBbEM7O0FBRUEsSUFBTUMsZUFBZSxJQUFJSCxXQUFKLENBQ25CQyx1QkFBdUIsS0FBdkIsQ0FEbUIsRUFFbkJDLHFCQUZtQixDQUFyQjs7QUFLQSxlQUFlQyxZQUFmIiwiZmlsZSI6InN0cmlwSW5kZW50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUZW1wbGF0ZVRhZyBmcm9tICcuLi9UZW1wbGF0ZVRhZyc7XG5pbXBvcnQgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lciBmcm9tICcuLi9zdHJpcEluZGVudFRyYW5zZm9ybWVyJztcbmltcG9ydCB0cmltUmVzdWx0VHJhbnNmb3JtZXIgZnJvbSAnLi4vdHJpbVJlc3VsdFRyYW5zZm9ybWVyJztcblxuY29uc3Qgc3RyaXBJbmRlbnRzID0gbmV3IFRlbXBsYXRlVGFnKFxuICBzdHJpcEluZGVudFRyYW5zZm9ybWVyKCdhbGwnKSxcbiAgdHJpbVJlc3VsdFRyYW5zZm9ybWVyLFxuKTtcblxuZXhwb3J0IGRlZmF1bHQgc3RyaXBJbmRlbnRzO1xuIl19","import { Grammar } from 'prismjs';\n\nimport { CompletionItem } from '@grafana/ui';\n\nexport const QUERY_COMMANDS: CompletionItem[] = [\n  {\n    label: 'fields',\n    documentation: 'Retrieves the specified fields from log events',\n  },\n  { label: 'display', documentation: 'Specifies which fields to display in the query results' },\n  {\n    label: 'filter',\n    documentation: 'Filters the results of a query based on one or more conditions',\n  },\n  {\n    label: 'stats',\n    documentation: 'Calculates aggregate statistics based on the values of log fields',\n  },\n  { label: 'sort', documentation: 'Sorts the retrieved log events' },\n  { label: 'limit', documentation: 'Specifies the number of log events returned by the query' },\n  {\n    label: 'parse',\n    documentation:\n      'Extracts data from a log field, creating one or more ephemeral fields that you can process further in the query',\n  },\n];\n\nexport const COMPARISON_OPERATORS = ['=', '!=', '<', '<=', '>', '>='];\nexport const ARITHMETIC_OPERATORS = ['+', '-', '*', '/', '^', '%'];\n\nexport const NUMERIC_OPERATORS = [\n  {\n    label: 'abs',\n    detail: 'abs(a)',\n    documentation: 'Absolute value.',\n  },\n  {\n    label: 'ceil',\n    detail: 'ceil(a)',\n    documentation: 'Round to ceiling (the smallest integer that is greater than the value of a).',\n  },\n  {\n    label: 'floor',\n    detail: 'floor(a)',\n    documentation: 'Round to floor (the largest integer that is smaller than the value of a).',\n  },\n  {\n    label: 'greatest',\n    detail: 'greatest(a,b, ... z)',\n    documentation: 'Returns the largest value.',\n  },\n  {\n    label: 'least',\n    detail: 'least(a, b, ... z)',\n    documentation: 'Returns the smallest value.',\n  },\n  {\n    label: 'log',\n    detail: 'log(a)',\n    documentation: 'Natural logarithm.',\n  },\n  {\n    label: 'sqrt',\n    detail: 'sqrt(a)',\n    documentation: 'Square root.',\n  },\n];\n\nexport const GENERAL_FUNCTIONS = [\n  {\n    label: 'ispresent',\n    detail: 'ispresent(fieldname)',\n    documentation: 'Returns true if the field exists.',\n  },\n  {\n    label: 'coalesce',\n    detail: 'coalesce(fieldname1, fieldname2, ... fieldnamex)',\n    documentation: 'Returns the first non-null value from the list.',\n  },\n];\n\nexport const STRING_FUNCTIONS = [\n  {\n    label: 'isempty',\n    detail: 'isempty(fieldname)',\n    documentation: 'Returns true if the field is missing or is an empty string.',\n  },\n  {\n    label: 'isblank',\n    detail: 'isblank(fieldname)',\n    documentation: 'Returns true if the field is missing, an empty string, or contains only white space.',\n  },\n  {\n    label: 'concat',\n    detail: 'concat(string1, string2, ... stringz)',\n    documentation: 'Concatenates the strings.',\n  },\n  {\n    label: 'ltrim',\n    detail: 'ltrim(string) or ltrim(string1, string2)',\n    documentation:\n      'Remove white space from the left of the string. If the function has a second string argument, it removes the characters of string2 from the left of string1.',\n  },\n  {\n    label: 'rtrim',\n    detail: 'rtrim(string) or rtrim(string1, string2)',\n    documentation:\n      'Remove white space from the right of the string. If the function has a second string argument, it removes the characters of string2 from the right of string1.',\n  },\n  {\n    label: 'trim',\n    detail: 'trim(string) or trim(string1, string2)',\n    documentation:\n      'Remove white space from both ends of the string. If the function has a second string argument, it removes the characters of string2 from both sides of string1.',\n  },\n  {\n    label: 'strlen',\n    detail: 'strlen(string)',\n    documentation: 'Returns the length of the string in Unicode code points.',\n  },\n  {\n    label: 'toupper',\n    detail: 'toupper(string)',\n    documentation: 'Converts the string to uppercase.',\n  },\n  {\n    label: 'tolower',\n    detail: 'tolower(string)',\n    documentation: 'Converts the string to lowercase.',\n  },\n  {\n    label: 'substr',\n    detail: 'substr(string1, x), or substr(string1, x, y)',\n    documentation:\n      'Returns a substring from the index specified by the number argument to the end of the string. If the function has a second number argument, it contains the length of the substring to be retrieved.',\n  },\n  {\n    label: 'replace',\n    detail: 'replace(string1, string2, string3)',\n    documentation: 'Replaces all instances of string2 in string1 with string3.',\n  },\n  {\n    label: 'strcontains',\n    detail: 'strcontains(string1, string2)',\n    documentation: 'Returns 1 if string1 contains string2 and 0 otherwise.',\n  },\n];\n\nexport const DATETIME_FUNCTIONS = [\n  {\n    label: 'bin',\n    detail: 'bin(period)',\n    documentation: 'Rounds the value of @timestamp to the given period and then truncates.',\n  },\n  {\n    label: 'datefloor',\n    detail: 'datefloor(a, period)',\n    documentation: 'Truncates the timestamp to the given period.',\n  },\n  {\n    label: 'dateceil',\n    detail: 'dateceil(a, period)',\n    documentation: 'Rounds up the timestamp to the given period and then truncates.',\n  },\n  {\n    label: 'fromMillis',\n    detail: 'fromMillis(fieldname)',\n    documentation:\n      'Interprets the input field as the number of milliseconds since the Unix epoch and converts it to a timestamp.',\n  },\n  {\n    label: 'toMillis',\n    detail: 'toMillis(fieldname)',\n    documentation:\n      'Converts the timestamp found in the named field into a number representing the milliseconds since the Unix epoch.',\n  },\n];\n\nexport const IP_FUNCTIONS = [\n  {\n    label: 'isValidIp',\n    detail: 'isValidIp(fieldname)',\n    documentation: 'Returns true if the field is a valid v4 or v6 IP address.',\n  },\n  {\n    label: 'isValidIpV4',\n    detail: 'isValidIpV4(fieldname)',\n    documentation: 'Returns true if the field is a valid v4 IP address.',\n  },\n  {\n    label: 'isValidIpV6',\n    detail: 'isValidIpV6(fieldname)',\n    documentation: 'Returns true if the field is a valid v6 IP address.',\n  },\n  {\n    label: 'isIpInSubnet',\n    detail: 'isIpInSubnet(fieldname, string)',\n    documentation: 'Returns true if the field is a valid v4 or v6 IP address within the specified v4 or v6 subnet.',\n  },\n  {\n    label: 'isIpv4InSubnet',\n    detail: 'isIpv4InSubnet(fieldname, string)',\n    documentation: 'Returns true if the field is a valid v4 IP address within the specified v4 subnet.',\n  },\n  {\n    label: 'isIpv6InSubnet',\n    detail: 'isIpv6InSubnet(fieldname, string)',\n    documentation: 'Returns true if the field is a valid v6 IP address within the specified v6 subnet.',\n  },\n];\n\nexport const BOOLEAN_FUNCTIONS = [\n  {\n    label: 'ispresent',\n    detail: 'ispresent(fieldname)',\n    documentation: 'Returns true if the field exists.',\n  },\n  {\n    label: 'isempty',\n    detail: 'isempty(fieldname)',\n    documentation: 'Returns true if the field is missing or is an empty string.',\n  },\n  {\n    label: 'isblank',\n    detail: 'isblank(fieldname)',\n    documentation: 'Returns true if the field is missing, an empty string, or contains only white space.',\n  },\n  {\n    label: 'strcontains',\n    detail: 'strcontains(string1, string2)',\n    documentation: 'Returns 1 if string1 contains string2 and 0 otherwise.',\n  },\n  ...IP_FUNCTIONS,\n];\n\nexport const AGGREGATION_FUNCTIONS_STATS = [\n  {\n    label: 'avg',\n    detail: 'avg(NumericFieldname)',\n    documentation: 'The average of the values in the specified field.',\n  },\n  {\n    label: 'count',\n    detail: 'count(fieldname) or count(*)',\n    documentation: 'Counts the log records.',\n  },\n  {\n    label: 'count_distinct',\n    detail: 'count_distinct(fieldname)',\n    documentation: 'Returns the number of unique values for the field.',\n  },\n  {\n    label: 'max',\n    detail: 'max(fieldname)',\n    documentation: 'The maximum of the values for this log field in the queried logs.',\n  },\n  {\n    label: 'min',\n    detail: 'min(fieldname)',\n    documentation: 'The minimum of the values for this log field in the queried logs.',\n  },\n  {\n    label: 'pct',\n    detail: 'pct(fieldname, value)',\n    documentation: 'A percentile indicates the relative standing of a value in a datas.',\n  },\n  {\n    label: 'stddev',\n    detail: 'stddev(NumericFieldname)',\n    documentation: 'The standard deviation of the values in the specified field.',\n  },\n  {\n    label: 'sum',\n    detail: 'sum(NumericFieldname)',\n    documentation: 'The sum of the values in the specified field.',\n  },\n];\n\nexport const NON_AGGREGATION_FUNCS_STATS = [\n  {\n    label: 'earliest',\n    detail: 'earliest(fieldname)',\n    documentation:\n      'Returns the value of fieldName from the log event that has the earliest time stamp in the queried logs.',\n  },\n  {\n    label: 'latest',\n    detail: 'latest(fieldname)',\n    documentation:\n      'Returns the value of fieldName from the log event that has the latest time stamp in the queried logs.',\n  },\n  {\n    label: 'sortsFirst',\n    detail: 'sortsFirst(fieldname)',\n    documentation: 'Returns the value of fieldName that sorts first in the queried logs.',\n  },\n  {\n    label: 'sortsLast',\n    detail: 'sortsLast(fieldname)',\n    documentation: 'Returns the value of fieldName that sorts last in the queried logs.',\n  },\n];\n\nexport const STATS_FUNCS = [...AGGREGATION_FUNCTIONS_STATS, ...NON_AGGREGATION_FUNCS_STATS];\n\nexport const KEYWORDS = ['as', 'like', 'by', 'in', 'desc', 'asc'];\nexport const FIELD_AND_FILTER_FUNCTIONS = [\n  ...NUMERIC_OPERATORS,\n  ...GENERAL_FUNCTIONS,\n  ...STRING_FUNCTIONS,\n  ...DATETIME_FUNCTIONS,\n  ...IP_FUNCTIONS,\n];\n\nexport const FUNCTIONS = [...FIELD_AND_FILTER_FUNCTIONS, ...STATS_FUNCS];\n\nconst tokenizer: Grammar = {\n  comment: {\n    pattern: /^#.*/,\n    greedy: true,\n  },\n  backticks: {\n    pattern: /`.*?`/,\n    alias: 'string',\n    greedy: true,\n  },\n  quote: {\n    pattern: /\".*?\"/,\n    alias: 'string',\n    greedy: true,\n  },\n  regex: {\n    pattern: /\\/.*?\\/(?=\\||\\s*$|,)/,\n    greedy: true,\n  },\n  'query-command': {\n    pattern: new RegExp(`\\\\b(?:${QUERY_COMMANDS.map((command) => command.label).join('|')})\\\\b`, 'i'),\n    alias: 'function',\n  },\n  function: {\n    pattern: new RegExp(`\\\\b(?:${FUNCTIONS.map((f) => f.label).join('|')})\\\\b`, 'i'),\n  },\n  keyword: {\n    pattern: new RegExp(`(\\\\s+)(${KEYWORDS.join('|')})(?=\\\\s+)`, 'i'),\n    lookbehind: true,\n  },\n  // 'log-group-name': {\n  //   pattern: /[\\.\\-_/#A-Za-z0-9]+/,\n  // },\n  'field-name': {\n    pattern: /(@?[_a-zA-Z]+[_.0-9a-zA-Z]*)|(`((\\\\`)|([^`]))*?`)/,\n    greedy: true,\n  },\n  number: /\\b-?\\d+((\\.\\d*)?([eE][+-]?\\d+)?)?\\b/,\n  'command-separator': {\n    pattern: /\\|/,\n    alias: 'punctuation',\n  },\n  'comparison-operator': {\n    pattern: /([<>]=?)|(!?=)/,\n  },\n  punctuation: /[{}()`,.]/,\n  whitespace: /\\s+/,\n};\n\nexport default tokenizer;\n","import { css, cx } from '@emotion/css';\nimport { stripIndent, stripIndents } from 'common-tags';\nimport Prism from 'prismjs';\nimport React, { PureComponent } from 'react';\n\nimport { QueryEditorHelpProps } from '@grafana/data';\nimport { flattenTokens } from '@grafana/ui/src/slate-plugins/slate-prism';\n\nimport tokenizer from '../syntax';\nimport { CloudWatchQuery } from '../types';\n\ninterface QueryExample {\n  category: string;\n  examples: Array<{\n    title: string;\n    expr: string;\n  }>;\n}\n\nconst CLIQ_EXAMPLES: QueryExample[] = [\n  {\n    category: 'Lambda',\n    examples: [\n      {\n        title: 'View latency statistics for 5-minute intervals',\n        expr: stripIndents`filter @type = \"REPORT\" |\n                           stats avg(@duration), max(@duration), min(@duration) by bin(5m)`,\n      },\n      {\n        title: 'Determine the amount of overprovisioned memory',\n        expr: stripIndent`\n        filter @type = \"REPORT\" |\n        stats max(@memorySize / 1024 / 1024) as provisonedMemoryMB,\n              min(@maxMemoryUsed / 1024 / 1024) as smallestMemoryRequestMB,\n              avg(@maxMemoryUsed / 1024 / 1024) as avgMemoryUsedMB,\n              max(@maxMemoryUsed / 1024 / 1024) as maxMemoryUsedMB,\n              provisonedMemoryMB - maxMemoryUsedMB as overProvisionedMB`,\n      },\n      {\n        title: 'Find the most expensive requests',\n        expr: stripIndents`filter @type = \"REPORT\" |\n                           fields @requestId, @billedDuration |\n                           sort by @billedDuration desc`,\n      },\n    ],\n  },\n\n  {\n    category: 'VPC Flow Logs',\n    examples: [\n      {\n        title: 'Average, min, and max byte transfers by source and destination IP addresses',\n        expr: `stats avg(bytes), min(bytes), max(bytes) by srcAddr, dstAddr`,\n      },\n      {\n        title: 'IP addresses using UDP transfer protocol',\n        expr: 'filter protocol=17 | stats count(*) by srcAddr',\n      },\n      {\n        title: 'Top 10 byte transfers by source and destination IP addresses',\n        expr: stripIndents`stats sum(bytes) as bytesTransferred by srcAddr, dstAddr |\n                           sort bytesTransferred desc |\n                           limit 10`,\n      },\n      {\n        title: 'Top 20 source IP addresses with highest number of rejected requests',\n        expr: stripIndents`filter action=\"REJECT\" |\n                           stats count(*) as numRejections by srcAddr |\n                           sort numRejections desc |\n                           limit 20`,\n      },\n    ],\n  },\n  {\n    category: 'CloudTrail',\n    examples: [\n      {\n        title: 'Number of log entries by service, event type, and region',\n        expr: 'stats count(*) by eventSource, eventName, awsRegion',\n      },\n\n      {\n        title: 'Number of log entries by region and EC2 event type',\n        expr: stripIndents`filter eventSource=\"ec2.amazonaws.com\" |\n                           stats count(*) as eventCount by eventName, awsRegion |\n                           sort eventCount desc`,\n      },\n\n      {\n        title: 'Regions, usernames, and ARNs of newly created IAM users',\n        expr: stripIndents`filter eventName=\"CreateUser\" |\n                           fields awsRegion, requestParameters.userName, responseElements.user.arn`,\n      },\n    ],\n  },\n  {\n    category: 'Common Queries',\n    examples: [\n      {\n        title: '25 most recently added log events',\n        expr: stripIndents`fields @timestamp, @message |\n                           sort @timestamp desc |\n                           limit 25`,\n      },\n      {\n        title: 'Number of exceptions logged every 5 minutes',\n        expr: stripIndents`filter @message like /Exception/ |\n                           stats count(*) as exceptionCount by bin(5m) |\n                           sort exceptionCount desc`,\n      },\n      {\n        title: 'List of log events that are not exceptions',\n        expr: 'fields @message | filter @message not like /Exception/',\n      },\n    ],\n  },\n  {\n    category: 'Route 53',\n    examples: [\n      {\n        title: 'Number of requests received every 10  minutes by edge location',\n        expr: 'stats count(*) by queryType, bin(10m)',\n      },\n      {\n        title: 'Number of unsuccessful requests by domain',\n        expr: 'filter responseCode=\"SERVFAIL\" | stats count(*) by queryName',\n      },\n      {\n        title: 'Number of requests received every 10  minutes by edge location',\n        expr: 'stats count(*) as numRequests by resolverIp | sort numRequests desc | limit 10',\n      },\n    ],\n  },\n  {\n    category: 'AWS AppSync',\n    examples: [\n      {\n        title: 'Number of unique HTTP status codes',\n        expr: stripIndents`fields ispresent(graphQLAPIId) as isApi |\n                           filter isApi |\n                           filter logType = \"RequestSummary\" |\n                           stats count() as statusCount by statusCode |\n                           sort statusCount desc`,\n      },\n      {\n        title: 'Top 10 resolvers with maximum latency',\n        expr: stripIndents`fields resolverArn, duration |\n                           filter logType = \"Tracing\" |\n                           sort duration desc |\n                           limit 10`,\n      },\n      {\n        title: 'Most frequently invoked resolvers',\n        expr: stripIndents`fields ispresent(resolverArn) as isRes |\n                           stats count() as invocationCount by resolverArn |\n                           filter isRes |\n                           filter logType = \"Tracing\" |\n                           sort invocationCount desc |\n                           limit 10`,\n      },\n      {\n        title: 'Resolvers with most errors in mapping templates',\n        expr: stripIndents`fields ispresent(resolverArn) as isRes |\n                           stats count() as errorCount by resolverArn, logType |\n                           filter isRes and (logType = \"RequestMapping\" or logType = \"ResponseMapping\") and fieldInError |\n                           sort errorCount desc |\n                           limit 10`,\n      },\n      {\n        title: 'Field latency statistics',\n        expr: stripIndents`fields requestId, latency |\n                           filter logType = \"RequestSummary\" |\n                           sort latency desc |\n                           limit 10`,\n      },\n      {\n        title: 'Resolver latency statistics',\n        expr: stripIndents`fields ispresent(resolverArn) as isRes |\n                           filter isRes |\n                           filter logType = \"Tracing\" |\n                           stats min(duration), max(duration), avg(duration) as avgDur by resolverArn |\n                           sort avgDur desc |\n                           limit 10`,\n      },\n      {\n        title: 'Top 10 requests with maximum latency',\n        expr: stripIndents`fields requestId, latency |\n                           filter logType = \"RequestSummary\" |\n                           sort latency desc |\n                           limit 10`,\n      },\n    ],\n  },\n];\n\nfunction renderHighlightedMarkup(code: string, keyPrefix: string) {\n  const grammar = tokenizer;\n  const tokens = flattenTokens(Prism.tokenize(code, grammar));\n  const spans = tokens\n    .filter((token) => typeof token !== 'string')\n    .map((token, i) => {\n      return (\n        <span\n          className={`prism-token token ${token.types.join(' ')} ${token.aliases.join(' ')}`}\n          key={`${keyPrefix}-token-${i}`}\n        >\n          {token.content}\n        </span>\n      );\n    });\n\n  return <div className=\"slate-query-field\">{spans}</div>;\n}\n\nconst exampleCategory = css`\n  margin-top: 5px;\n`;\n\nexport default class LogsCheatSheet extends PureComponent<\n  QueryEditorHelpProps<CloudWatchQuery>,\n  { userExamples: string[] }\n> {\n  onClickExample(query: CloudWatchQuery) {\n    this.props.onClickExample(query);\n  }\n\n  renderExpression(expr: string, keyPrefix: string) {\n    return (\n      <div\n        className=\"cheat-sheet-item__example\"\n        key={expr}\n        onClick={() =>\n          this.onClickExample({\n            refId: this.props.query.refId ?? 'A',\n            expression: expr,\n            queryMode: 'Logs',\n            region: this.props.query.region,\n            id: this.props.query.refId ?? 'A',\n            logGroupNames: 'logGroupNames' in this.props.query ? this.props.query.logGroupNames : [],\n          })\n        }\n      >\n        <pre>{renderHighlightedMarkup(expr, keyPrefix)}</pre>\n      </div>\n    );\n  }\n\n  renderLogsCheatSheet() {\n    return (\n      <div>\n        <h2>CloudWatch Logs Cheat Sheet</h2>\n        {CLIQ_EXAMPLES.map((cat, i) => (\n          <div key={`${cat.category}-${i}`}>\n            <div className={`cheat-sheet-item__title ${cx(exampleCategory)}`}>{cat.category}</div>\n            {cat.examples.map((item, j) => (\n              <div className=\"cheat-sheet-item\" key={`item-${j}`}>\n                <h4>{item.title}</h4>\n                {this.renderExpression(item.expr, `item-${j}`)}\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>CloudWatch Logs cheat sheet</h3>\n        {CLIQ_EXAMPLES.map((cat, i) => (\n          <div key={`cat-${i}`}>\n            <div className={`cheat-sheet-item__title ${cx(exampleCategory)}`}>{cat.category}</div>\n            {cat.examples.map((item, j) => (\n              <div className=\"cheat-sheet-item\" key={`item-${j}`}>\n                <h4>{item.title}</h4>\n                {this.renderExpression(item.expr, `item-${j}`)}\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n","import { AnnotationQuery } from '@grafana/data';\n\nimport { CloudWatchAnnotationQuery, CloudWatchLogsQuery, CloudWatchMetricsQuery, CloudWatchQuery } from './types';\n\nexport const isCloudWatchLogsQuery = (cloudwatchQuery: CloudWatchQuery): cloudwatchQuery is CloudWatchLogsQuery =>\n  cloudwatchQuery.queryMode === 'Logs';\n\nexport const isCloudWatchMetricsQuery = (cloudwatchQuery: CloudWatchQuery): cloudwatchQuery is CloudWatchMetricsQuery =>\n  cloudwatchQuery.queryMode === 'Metrics' || !cloudwatchQuery.hasOwnProperty('queryMode'); // in early versions of this plugin, queryMode wasn't defined in a CloudWatchMetricsQuery\n\nexport const isCloudWatchAnnotationQuery = (\n  cloudwatchQuery: CloudWatchQuery\n): cloudwatchQuery is CloudWatchAnnotationQuery => cloudwatchQuery.queryMode === 'Annotations';\n\nexport const isCloudWatchAnnotation = (query: unknown): query is AnnotationQuery<CloudWatchAnnotationQuery> =>\n  (query as AnnotationQuery<CloudWatchAnnotationQuery>).target?.queryMode === 'Annotations';\n","import { css, cx } from '@emotion/css';\nimport React, { FunctionComponent, useMemo } from 'react';\nimport { useAsyncFn } from 'react-use';\n\nimport { GrafanaTheme2, SelectableValue, toOption } from '@grafana/data';\nimport { AccessoryButton, InputGroup } from '@grafana/experimental';\nimport { Select, stylesFactory, useTheme2 } from '@grafana/ui';\n\nimport { CloudWatchDatasource } from '../../datasource';\nimport { Dimensions, MetricStat } from '../../types';\nimport { appendTemplateVariables } from '../../utils/utils';\n\nimport { DimensionFilterCondition } from './Dimensions';\n\nexport interface Props {\n  metricStat: MetricStat;\n  datasource: CloudWatchDatasource;\n  filter: DimensionFilterCondition;\n  dimensionKeys: Array<SelectableValue<string>>;\n  disableExpressions: boolean;\n  onChange: (value: DimensionFilterCondition) => void;\n  onDelete: () => void;\n}\n\nconst wildcardOption = { value: '*', label: '*' };\n\nconst excludeCurrentKey = (dimensions: Dimensions, currentKey: string | undefined) =>\n  Object.entries(dimensions ?? {}).reduce<Dimensions>((acc, [key, value]) => {\n    if (key !== currentKey) {\n      return { ...acc, [key]: value };\n    }\n    return acc;\n  }, {});\n\nexport const FilterItem: FunctionComponent<Props> = ({\n  filter,\n  metricStat: { region, namespace, metricName, dimensions },\n  datasource,\n  dimensionKeys,\n  disableExpressions,\n  onChange,\n  onDelete,\n}) => {\n  const dimensionsExcludingCurrentKey = useMemo(\n    () => excludeCurrentKey(dimensions ?? {}, filter.key),\n    [dimensions, filter]\n  );\n\n  const loadDimensionValues = async () => {\n    if (!filter.key) {\n      return [];\n    }\n\n    return datasource.api\n      .getDimensionValues(region, namespace, metricName, filter.key, dimensionsExcludingCurrentKey)\n      .then((result: Array<SelectableValue<string>>) => {\n        if (result.length && !disableExpressions) {\n          result.unshift(wildcardOption);\n        }\n        return appendTemplateVariables(datasource, result);\n      });\n  };\n\n  const [state, loadOptions] = useAsyncFn(loadDimensionValues, [filter.key, dimensions]);\n  const theme = useTheme2();\n  const styles = getOperatorStyles(theme);\n\n  return (\n    <div data-testid=\"cloudwatch-dimensions-filter-item\">\n      <InputGroup>\n        <Select\n          aria-label=\"Dimensions filter key\"\n          inputId=\"cloudwatch-dimensions-filter-item-key\"\n          width=\"auto\"\n          value={filter.key ? toOption(filter.key) : null}\n          allowCustomValue\n          options={dimensionKeys}\n          onChange={(change) => {\n            if (change.label) {\n              onChange({ key: change.label, value: undefined });\n            }\n          }}\n        />\n\n        <span className={cx(styles.root)}>=</span>\n\n        <Select\n          aria-label=\"Dimensions filter value\"\n          inputId=\"cloudwatch-dimensions-filter-item-value\"\n          onOpenMenu={loadOptions}\n          width=\"auto\"\n          value={filter.value ? toOption(filter.value) : null}\n          allowCustomValue\n          isLoading={state.loading}\n          options={state.value}\n          onChange={(change) => {\n            if (change.value) {\n              onChange({ ...filter, value: change.value });\n            }\n          }}\n        />\n        <AccessoryButton aria-label=\"remove\" icon=\"times\" variant=\"secondary\" onClick={onDelete} type=\"button\" />\n      </InputGroup>\n    </div>\n  );\n};\n\nconst getOperatorStyles = stylesFactory((theme: GrafanaTheme2) => ({\n  root: css({\n    padding: theme.spacing(0, 1),\n    alignSelf: 'center',\n  }),\n}));\n","import { isEqual } from 'lodash';\nimport React, { useMemo, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorList } from '@grafana/experimental';\n\nimport { CloudWatchDatasource } from '../../datasource';\nimport { Dimensions as DimensionsType, MetricStat } from '../../types';\n\nimport { FilterItem } from './FilterItem';\n\nexport interface Props {\n  metricStat: MetricStat;\n  onChange: (dimensions: DimensionsType) => void;\n  datasource: CloudWatchDatasource;\n  dimensionKeys: Array<SelectableValue<string>>;\n  disableExpressions: boolean;\n}\n\nexport interface DimensionFilterCondition {\n  key?: string;\n  operator?: string;\n  value?: string;\n}\n\nconst dimensionsToFilterConditions = (dimensions: DimensionsType | undefined) =>\n  Object.entries(dimensions ?? {}).reduce<DimensionFilterCondition[]>((acc, [key, value]) => {\n    if (value && typeof value === 'string') {\n      const filter = {\n        key,\n        value,\n        operator: '=',\n      };\n      return [...acc, filter];\n    }\n    return acc;\n  }, []);\n\nconst filterConditionsToDimensions = (filters: DimensionFilterCondition[]) => {\n  return filters.reduce<DimensionsType>((acc, { key, value }) => {\n    if (key && value) {\n      return { ...acc, [key]: value };\n    }\n    return acc;\n  }, {});\n};\n\nexport const Dimensions = ({ metricStat, datasource, dimensionKeys, disableExpressions, onChange }: Props) => {\n  const dimensionFilters = useMemo(() => dimensionsToFilterConditions(metricStat.dimensions), [metricStat.dimensions]);\n  const [items, setItems] = useState<DimensionFilterCondition[]>(dimensionFilters);\n  const onDimensionsChange = (newItems: Array<Partial<DimensionFilterCondition>>) => {\n    setItems(newItems);\n\n    // The onChange event should only be triggered in the case there is a complete dimension object.\n    // So when a new key is added that does not yet have a value, it should not trigger an onChange event.\n    const newDimensions = filterConditionsToDimensions(newItems);\n    if (!isEqual(newDimensions, metricStat.dimensions)) {\n      onChange(newDimensions);\n    }\n  };\n\n  return (\n    <EditorList\n      items={items}\n      onChange={onDimensionsChange}\n      renderItem={makeRenderFilter(datasource, metricStat, dimensionKeys, disableExpressions)}\n    />\n  );\n};\n\nfunction makeRenderFilter(\n  datasource: CloudWatchDatasource,\n  metricStat: MetricStat,\n  dimensionKeys: Array<SelectableValue<string>>,\n  disableExpressions: boolean\n) {\n  function renderFilter(\n    item: DimensionFilterCondition,\n    onChange: (item: DimensionFilterCondition) => void,\n    onDelete: () => void\n  ) {\n    return (\n      <FilterItem\n        filter={item}\n        onChange={(item) => onChange(item)}\n        datasource={datasource}\n        metricStat={metricStat}\n        disableExpressions={disableExpressions}\n        dimensionKeys={dimensionKeys}\n        onDelete={onDelete}\n      />\n    );\n  }\n\n  return renderFilter;\n}\n","const JSURL = require('jsurl');\n\nexport interface AwsUrl {\n  end: string;\n  start: string;\n  timeType?: 'ABSOLUTE' | 'RELATIVE';\n  tz?: 'local' | 'UTC';\n  unit?: string;\n  editorString: string;\n  isLiveTail: boolean;\n  source: string[];\n}\n\nexport function encodeUrl(obj: AwsUrl, region: string): string {\n  return `https://${region}.console.aws.amazon.com/cloudwatch/home?region=${region}#logs-insights:queryDetail=${JSURL.stringify(\n    obj\n  )}`;\n}\n","import React, { Component } from 'react';\n\nimport { PanelData } from '@grafana/data';\nimport { Icon } from '@grafana/ui';\n\nimport { encodeUrl, AwsUrl } from '../aws_url';\nimport { CloudWatchDatasource } from '../datasource';\nimport { CloudWatchLogsQuery } from '../types';\n\ninterface Props {\n  query: CloudWatchLogsQuery;\n  panelData?: PanelData;\n  datasource: CloudWatchDatasource;\n}\n\ninterface State {\n  href: string;\n}\n\nexport default class CloudWatchLink extends Component<Props, State> {\n  state: State = { href: '' };\n\n  async componentDidUpdate(prevProps: Props) {\n    const { panelData: panelDataNew } = this.props;\n    const { panelData: panelDataOld } = prevProps;\n\n    if (panelDataOld !== panelDataNew && panelDataNew?.request) {\n      const href = this.getExternalLink();\n      this.setState({ href });\n    }\n  }\n\n  getExternalLink(): string {\n    const { query, panelData, datasource } = this.props;\n\n    const range = panelData?.request?.range;\n\n    if (!range) {\n      return '';\n    }\n\n    const start = range.from.toISOString();\n    const end = range.to.toISOString();\n\n    const urlProps: AwsUrl = {\n      end,\n      start,\n      timeType: 'ABSOLUTE',\n      tz: 'UTC',\n      editorString: query.expression ?? '',\n      isLiveTail: false,\n      source: query.logGroupNames ?? [],\n    };\n\n    return encodeUrl(urlProps, datasource.api.getActualRegion(query.region));\n  }\n\n  render() {\n    const { href } = this.state;\n    return (\n      <a href={href} target=\"_blank\" rel=\"noopener noreferrer\">\n        <Icon name=\"share-alt\" /> CloudWatch Logs Insights\n      </a>\n    );\n  }\n}\n","const byRE = /\\s+by\\s+/im;\n\n/**\n * groups look like this: (@a.foo)( as )(bar),\n * group 1 is the field, group 2 is \" as \" and group 3 is the alias\n * this regex will not advance past any non-identifier or whitespace characters, e.g. |\n */\nconst groupsRE = /([\\w$@().]+)(?:(\\s+as\\s+)([\\w$]+))?\\s*,?\\s*/iy;\n\nexport function getStatsGroups(query: string): string[] {\n  let groups = [];\n\n  // find \" by \"\n  let b;\n  if ((b = query.match(byRE))) {\n    // continue incremental scanning from there for groups & aliases\n    groupsRE.lastIndex = b.index! + b[0].length;\n\n    let g;\n    while ((g = groupsRE.exec(query))) {\n      groups.push(g[2] ? g[3] : g[1]);\n      groupsRE.lastIndex = g.index + g[0].length;\n    }\n  }\n\n  return groups;\n}\n","import { useEffect, useState } from 'react';\nimport { useDeepCompareEffect } from 'react-use';\n\nimport { SelectableValue, toOption } from '@grafana/data';\n\nimport { CloudWatchDatasource } from './datasource';\nimport { Dimensions } from './types';\nimport { appendTemplateVariables } from './utils/utils';\n\nexport const useRegions = (datasource: CloudWatchDatasource): [Array<SelectableValue<string>>, boolean] => {\n  const [regionsIsLoading, setRegionsIsLoading] = useState<boolean>(false);\n  const [regions, setRegions] = useState<Array<SelectableValue<string>>>([{ label: 'default', value: 'default' }]);\n\n  useEffect(() => {\n    setRegionsIsLoading(true);\n\n    const variableOptionGroup = {\n      label: 'Template Variables',\n      options: datasource.getVariables().map(toOption),\n    };\n\n    datasource.api\n      .getRegions()\n      .then((regions: Array<SelectableValue<string>>) => setRegions([...regions, variableOptionGroup]))\n      .finally(() => setRegionsIsLoading(false));\n  }, [datasource]);\n\n  return [regions, regionsIsLoading];\n};\n\nexport const useNamespaces = (datasource: CloudWatchDatasource) => {\n  const [namespaces, setNamespaces] = useState<Array<SelectableValue<string>>>([]);\n  useEffect(() => {\n    datasource.api.getNamespaces().then((namespaces) => {\n      setNamespaces(appendTemplateVariables(datasource, namespaces));\n    });\n  }, [datasource]);\n\n  return namespaces;\n};\n\nexport const useMetrics = (datasource: CloudWatchDatasource, region: string, namespace: string | undefined) => {\n  const [metrics, setMetrics] = useState<Array<SelectableValue<string>>>([]);\n  useEffect(() => {\n    datasource.api.getMetrics(namespace, region).then((result: Array<SelectableValue<string>>) => {\n      setMetrics(appendTemplateVariables(datasource, result));\n    });\n  }, [datasource, region, namespace]);\n\n  return metrics;\n};\n\nexport const useDimensionKeys = (\n  datasource: CloudWatchDatasource,\n  region: string,\n  namespace: string | undefined,\n  metricName: string | undefined,\n  dimensionFilter?: Dimensions\n) => {\n  const [dimensionKeys, setDimensionKeys] = useState<Array<SelectableValue<string>>>([]);\n\n  // doing deep comparison to avoid making new api calls to list metrics unless dimension filter object props changes\n  useDeepCompareEffect(() => {\n    datasource.api\n      .getDimensionKeys(namespace, region, dimensionFilter, metricName)\n      .then((result: Array<SelectableValue<string>>) => {\n        setDimensionKeys(appendTemplateVariables(datasource, result));\n      });\n  }, [datasource, region, namespace, metricName, dimensionFilter]);\n\n  return dimensionKeys;\n};\n","import React, { useCallback, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { FlexItem, InlineSelect } from '@grafana/experimental';\nimport { Button, ConfirmModal, RadioButtonGroup } from '@grafana/ui';\n\nimport { CloudWatchDatasource } from '../../datasource';\nimport { CloudWatchMetricsQuery, CloudWatchQuery, MetricEditorMode, MetricQueryType } from '../../types';\n\ninterface MetricsQueryHeaderProps {\n  query: CloudWatchMetricsQuery;\n  datasource: CloudWatchDatasource;\n  onChange: (query: CloudWatchQuery) => void;\n  onRunQuery: () => void;\n  sqlCodeEditorIsDirty: boolean;\n}\n\nconst metricEditorModes: Array<SelectableValue<MetricQueryType>> = [\n  { label: 'Metric Search', value: MetricQueryType.Search },\n  { label: 'Metric Query', value: MetricQueryType.Query },\n];\n\nconst editorModes = [\n  { label: 'Builder', value: MetricEditorMode.Builder },\n  { label: 'Code', value: MetricEditorMode.Code },\n];\n\nconst MetricsQueryHeader: React.FC<MetricsQueryHeaderProps> = ({\n  query,\n  sqlCodeEditorIsDirty,\n  onChange,\n  onRunQuery,\n}) => {\n  const { metricEditorMode, metricQueryType } = query;\n  const [showConfirm, setShowConfirm] = useState(false);\n\n  const onEditorModeChange = useCallback(\n    (newMetricEditorMode: MetricEditorMode) => {\n      if (\n        sqlCodeEditorIsDirty &&\n        metricQueryType === MetricQueryType.Query &&\n        metricEditorMode === MetricEditorMode.Code\n      ) {\n        setShowConfirm(true);\n        return;\n      }\n      onChange({ ...query, metricEditorMode: newMetricEditorMode });\n    },\n    [setShowConfirm, onChange, sqlCodeEditorIsDirty, query, metricEditorMode, metricQueryType]\n  );\n\n  return (\n    <>\n      <InlineSelect\n        aria-label=\"Metric editor mode\"\n        value={metricEditorModes.find((m) => m.value === metricQueryType)}\n        options={metricEditorModes}\n        onChange={({ value }) => {\n          onChange({ ...query, metricQueryType: value });\n        }}\n      />\n      <FlexItem grow={1} />\n\n      <RadioButtonGroup options={editorModes} size=\"sm\" value={metricEditorMode} onChange={onEditorModeChange} />\n\n      {query.metricQueryType === MetricQueryType.Query && query.metricEditorMode === MetricEditorMode.Code && (\n        <Button variant=\"secondary\" size=\"sm\" onClick={() => onRunQuery()}>\n          Run query\n        </Button>\n      )}\n\n      <ConfirmModal\n        isOpen={showConfirm}\n        title=\"Are you sure?\"\n        body=\"You will lose manual changes done to the query if you go back to the visual builder.\"\n        confirmText=\"Yes, I am sure.\"\n        dismissText=\"No, continue editing the query manually.\"\n        icon=\"exclamation-triangle\"\n        onConfirm={() => {\n          setShowConfirm(false);\n          onChange({ ...query, metricEditorMode: MetricEditorMode.Builder });\n        }}\n        onDismiss={() => setShowConfirm(false)}\n      />\n    </>\n  );\n};\n\nexport default MetricsQueryHeader;\n","import { pick } from 'lodash';\nimport React from 'react';\n\nimport { SelectableValue, ExploreMode } from '@grafana/data';\nimport { EditorHeader, InlineSelect } from '@grafana/experimental';\n\nimport { CloudWatchDatasource } from '../datasource';\nimport { useRegions } from '../hooks';\nimport { CloudWatchQuery, CloudWatchQueryMode } from '../types';\n\nimport MetricsQueryHeader from './MetricsQueryEditor/MetricsQueryHeader';\n\ninterface QueryHeaderProps {\n  query: CloudWatchQuery;\n  datasource: CloudWatchDatasource;\n  onChange: (query: CloudWatchQuery) => void;\n  onRunQuery: () => void;\n  sqlCodeEditorIsDirty: boolean;\n  onRegionChange?: (region: string) => Promise<void>;\n}\n\nconst apiModes: Array<SelectableValue<CloudWatchQueryMode>> = [\n  { label: 'CloudWatch Metrics', value: 'Metrics' },\n  { label: 'CloudWatch Logs', value: 'Logs' },\n];\n\nconst QueryHeader: React.FC<QueryHeaderProps> = ({ query, sqlCodeEditorIsDirty, datasource, onChange, onRunQuery }) => {\n  const { queryMode, region } = query;\n\n  const [regions, regionIsLoading] = useRegions(datasource);\n\n  const onQueryModeChange = ({ value }: SelectableValue<CloudWatchQueryMode>) => {\n    if (value !== queryMode) {\n      const commonProps = pick(query, 'id', 'region', 'namespace', 'refId', 'hide', 'key', 'queryType', 'datasource');\n      onChange({\n        ...commonProps,\n        queryMode: value,\n      } as CloudWatchQuery);\n    }\n  };\n\n  const onRegion = async ({ value }: SelectableValue<string>) => {\n    onChange({\n      ...query,\n      region: value,\n    } as CloudWatchQuery);\n  };\n\n  return (\n    <EditorHeader>\n      <InlineSelect\n        label=\"Region\"\n        value={region}\n        placeholder=\"Select region\"\n        allowCustomValue\n        onChange={({ value: region }) => region && onRegion({ value: region })}\n        options={regions}\n        isLoading={regionIsLoading}\n      />\n\n      <InlineSelect aria-label=\"Query mode\" value={queryMode} options={apiModes} onChange={onQueryModeChange} />\n\n      {queryMode === ExploreMode.Metrics && (\n        <MetricsQueryHeader\n          query={query}\n          datasource={datasource}\n          onChange={onChange}\n          onRunQuery={onRunQuery}\n          sqlCodeEditorIsDirty={sqlCodeEditorIsDirty}\n        />\n      )}\n    </EditorHeader>\n  );\n};\n\nexport default QueryHeader;\n","import { css } from '@emotion/css';\nimport { LanguageMap, languages as prismLanguages } from 'prismjs';\nimport React, { ReactNode } from 'react';\nimport { Node, Plugin } from 'slate';\nimport { Editor } from 'slate-react';\n\nimport { AbsoluteTimeRange, QueryEditorProps } from '@grafana/data';\nimport { BracesPlugin, LegacyForms, QueryField, SlatePrism, TypeaheadInput, TypeaheadOutput } from '@grafana/ui';\nimport { ExploreId } from 'app/types';\n// Utils & Services\n// dom also includes Element polyfills\n\nimport { CloudWatchDatasource } from '../datasource';\nimport { CloudWatchLanguageProvider } from '../language_provider';\nimport syntax from '../syntax';\nimport { CloudWatchJsonData, CloudWatchLogsQuery, CloudWatchQuery } from '../types';\nimport { getStatsGroups } from '../utils/query/getStatsGroups';\n\nimport { LogGroupSelector } from './LogGroupSelector';\nimport QueryHeader from './QueryHeader';\n\nexport interface CloudWatchLogsQueryFieldProps\n  extends QueryEditorProps<CloudWatchDatasource, CloudWatchQuery, CloudWatchJsonData> {\n  absoluteRange: AbsoluteTimeRange;\n  onLabelsRefresh?: () => void;\n  ExtraFieldElement?: ReactNode;\n  exploreId: ExploreId;\n  query: CloudWatchLogsQuery;\n}\n\nconst rowGap = css`\n  gap: 3px;\n`;\n\ninterface State {\n  hint:\n    | {\n        message: string;\n        fix: {\n          label: string;\n          action: () => void;\n        };\n      }\n    | undefined;\n}\n\nexport class CloudWatchLogsQueryField extends React.PureComponent<CloudWatchLogsQueryFieldProps, State> {\n  state: State = {\n    hint: undefined,\n  };\n\n  plugins: Array<Plugin<Editor>>;\n\n  constructor(props: CloudWatchLogsQueryFieldProps, context: React.Context<any>) {\n    super(props, context);\n\n    this.plugins = [\n      BracesPlugin(),\n      SlatePrism(\n        {\n          onlyIn: (node: Node) => node.object === 'block' && node.type === 'code_block',\n          getSyntax: (node: Node) => 'cloudwatch',\n        },\n        { ...(prismLanguages as LanguageMap), cloudwatch: syntax }\n      ),\n    ];\n  }\n\n  componentDidMount = () => {\n    const { query, datasource, onChange } = this.props;\n\n    if (onChange) {\n      onChange({ ...query, logGroupNames: query.logGroupNames ?? datasource.logsQueryRunner.defaultLogGroups });\n    }\n  };\n\n  onChangeQuery = (value: string) => {\n    // Send text change to parent\n    const { query, onChange } = this.props;\n\n    if (onChange) {\n      const nextQuery = {\n        ...query,\n        expression: value,\n        statsGroups: getStatsGroups(value),\n      };\n      onChange(nextQuery);\n    }\n  };\n\n  onTypeahead = async (typeahead: TypeaheadInput): Promise<TypeaheadOutput> => {\n    const { datasource, query } = this.props;\n    const { logGroupNames } = query;\n\n    if (!datasource.languageProvider) {\n      return { suggestions: [] };\n    }\n\n    const cloudwatchLanguageProvider = datasource.languageProvider as CloudWatchLanguageProvider;\n    const { history, absoluteRange } = this.props;\n    const { prefix, text, value, wrapperClasses, labelKey, editor } = typeahead;\n\n    return await cloudwatchLanguageProvider.provideCompletionItems(\n      { text, value, prefix, wrapperClasses, labelKey, editor },\n      {\n        history,\n        absoluteRange,\n        logGroupNames,\n        region: query.region,\n      }\n    );\n  };\n\n  render() {\n    const { onRunQuery, onChange, ExtraFieldElement, data, query, datasource } = this.props;\n    const { region, refId, expression, logGroupNames } = query;\n    const { hint } = this.state;\n\n    const showError = data && data.error && data.error.refId === query.refId;\n    const cleanText = datasource.languageProvider ? datasource.languageProvider.cleanText : undefined;\n\n    return (\n      <>\n        <QueryHeader\n          query={query}\n          onRunQuery={onRunQuery}\n          datasource={datasource}\n          onChange={onChange}\n          sqlCodeEditorIsDirty={false}\n        />\n        <div className={`gf-form gf-form--grow flex-grow-1 ${rowGap}`}>\n          <LegacyForms.FormField\n            label=\"Log Groups\"\n            labelWidth={6}\n            className=\"flex-grow-1\"\n            inputEl={\n              <LogGroupSelector\n                region={region}\n                selectedLogGroups={logGroupNames ?? datasource.logsQueryRunner.defaultLogGroups}\n                datasource={datasource}\n                onChange={function (logGroups: string[]): void {\n                  onChange({ ...query, logGroupNames: logGroups });\n                }}\n                onRunQuery={onRunQuery}\n                refId={refId}\n              />\n            }\n          />\n        </div>\n        <div className=\"gf-form-inline gf-form-inline--nowrap flex-grow-1\">\n          <div className=\"gf-form gf-form--grow flex-shrink-1\">\n            <QueryField\n              additionalPlugins={this.plugins}\n              query={expression ?? ''}\n              onChange={this.onChangeQuery}\n              onRunQuery={this.props.onRunQuery}\n              onTypeahead={this.onTypeahead}\n              cleanText={cleanText}\n              placeholder=\"Enter a CloudWatch Logs Insights query (run with Shift+Enter)\"\n              portalOrigin=\"cloudwatch\"\n              disabled={!logGroupNames || logGroupNames.length === 0}\n            />\n          </div>\n          {ExtraFieldElement}\n        </div>\n        {hint && (\n          <div className=\"query-row-break\">\n            <div className=\"text-warning\">\n              {hint.message}\n              <a className=\"text-link muted\" onClick={hint.fix.action}>\n                {hint.fix.label}\n              </a>\n            </div>\n          </div>\n        )}\n        {showError ? (\n          <div className=\"query-row-break\">\n            <div className=\"prom-query-field-info text-error\">{data?.error?.message}</div>\n          </div>\n        ) : null}\n      </>\n    );\n  }\n}\n","// Libraries\nimport { css } from '@emotion/css';\nimport React, { memo } from 'react';\n\n// Types\nimport { AbsoluteTimeRange, QueryEditorProps } from '@grafana/data';\nimport { InlineFormLabel } from '@grafana/ui';\n\nimport { CloudWatchDatasource } from '../datasource';\nimport { CloudWatchJsonData, CloudWatchLogsQuery, CloudWatchQuery } from '../types';\n\nimport CloudWatchLink from './CloudWatchLink';\nimport { CloudWatchLogsQueryField } from './LogsQueryField';\n\ntype Props = QueryEditorProps<CloudWatchDatasource, CloudWatchQuery, CloudWatchJsonData> & {\n  query: CloudWatchLogsQuery;\n};\n\nconst labelClass = css`\n  margin-left: 3px;\n  flex-grow: 0;\n`;\n\nexport const CloudWatchLogsQueryEditor = memo(function CloudWatchLogsQueryEditor(props: Props) {\n  const { query, data, datasource, onRunQuery, onChange, exploreId } = props;\n\n  let absolute: AbsoluteTimeRange;\n  if (data?.request?.range?.from) {\n    const { range } = data.request;\n    absolute = {\n      from: range.from.valueOf(),\n      to: range.to.valueOf(),\n    };\n  } else {\n    absolute = {\n      from: Date.now() - 10000,\n      to: Date.now(),\n    };\n  }\n\n  return (\n    <CloudWatchLogsQueryField\n      exploreId={exploreId}\n      datasource={datasource}\n      query={query}\n      onChange={onChange}\n      onRunQuery={onRunQuery}\n      history={[]}\n      data={data}\n      absoluteRange={absolute}\n      ExtraFieldElement={\n        <InlineFormLabel className={`gf-form-label--btn ${labelClass}`} width=\"auto\" tooltip=\"Link to Graph in AWS\">\n          <CloudWatchLink query={query as CloudWatchLogsQuery} panelData={data} datasource={datasource} />\n        </InlineFormLabel>\n      }\n    />\n  );\n});\n\nexport default CloudWatchLogsQueryEditor;\n","export const standardStatistics = ['Average', 'Maximum', 'Minimum', 'Sum', 'SampleCount'];\n","import React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField, EditorFieldGroup, EditorRow, EditorRows, EditorSwitch } from '@grafana/experimental';\nimport { Select } from '@grafana/ui';\n\nimport { Dimensions } from '..';\nimport { CloudWatchDatasource } from '../../datasource';\nimport { useDimensionKeys, useMetrics, useNamespaces } from '../../hooks';\nimport { standardStatistics } from '../../standardStatistics';\nimport { MetricStat } from '../../types';\nimport { appendTemplateVariables, toOption } from '../../utils/utils';\n\nexport type Props = {\n  refId: string;\n  metricStat: MetricStat;\n  datasource: CloudWatchDatasource;\n  disableExpressions?: boolean;\n  onChange: (value: MetricStat) => void;\n  onRunQuery: () => void;\n};\n\nexport function MetricStatEditor({\n  refId,\n  metricStat,\n  datasource,\n  disableExpressions = false,\n  onChange,\n  onRunQuery,\n}: React.PropsWithChildren<Props>) {\n  const { region, namespace, metricName, dimensions } = metricStat;\n  const namespaces = useNamespaces(datasource);\n  const metrics = useMetrics(datasource, region, namespace);\n  const dimensionKeys = useDimensionKeys(datasource, region, namespace, metricName, dimensions ?? {});\n\n  const onMetricStatChange = (metricStat: MetricStat) => {\n    onChange(metricStat);\n    onRunQuery();\n  };\n\n  const onNamespaceChange = async (metricStat: MetricStat) => {\n    const validatedQuery = await validateMetricName(metricStat);\n    onMetricStatChange(validatedQuery);\n  };\n\n  const validateMetricName = async (metricStat: MetricStat) => {\n    let { metricName, namespace, region } = metricStat;\n    if (!metricName) {\n      return metricStat;\n    }\n    await datasource.api.getMetrics(namespace, region).then((result: Array<SelectableValue<string>>) => {\n      if (!result.find((metric) => metric.value === metricName)) {\n        metricName = '';\n      }\n    });\n    return { ...metricStat, metricName };\n  };\n\n  return (\n    <EditorRows>\n      <EditorRow>\n        <EditorFieldGroup>\n          <EditorField label=\"Namespace\" width={26}>\n            <Select\n              aria-label=\"Namespace\"\n              value={metricStat?.namespace && toOption(metricStat.namespace)}\n              allowCustomValue\n              options={namespaces}\n              onChange={({ value: namespace }) => {\n                if (namespace) {\n                  onNamespaceChange({ ...metricStat, namespace });\n                }\n              }}\n            />\n          </EditorField>\n          <EditorField label=\"Metric name\" width={16}>\n            <Select\n              aria-label=\"Metric name\"\n              value={metricStat?.metricName && toOption(metricStat.metricName)}\n              allowCustomValue\n              options={metrics}\n              onChange={({ value: metricName }) => {\n                if (metricName) {\n                  onMetricStatChange({ ...metricStat, metricName });\n                }\n              }}\n            />\n          </EditorField>\n\n          <EditorField label=\"Statistic\" width={16}>\n            <Select\n              inputId={`${refId}-metric-stat-editor-select-statistic`}\n              allowCustomValue\n              value={toOption(metricStat.statistic ?? standardStatistics[0])}\n              options={appendTemplateVariables(\n                datasource,\n                standardStatistics.filter((s) => s !== metricStat.statistic).map(toOption)\n              )}\n              onChange={({ value: statistic }) => {\n                if (\n                  !statistic ||\n                  (!standardStatistics.includes(statistic) &&\n                    !/^p\\d{2}(?:\\.\\d{1,2})?$/.test(statistic) &&\n                    !statistic.startsWith('$'))\n                ) {\n                  return;\n                }\n\n                onMetricStatChange({ ...metricStat, statistic });\n              }}\n            />\n          </EditorField>\n        </EditorFieldGroup>\n      </EditorRow>\n\n      <EditorRow>\n        <EditorField label=\"Dimensions\">\n          <Dimensions\n            metricStat={metricStat}\n            onChange={(dimensions) => onMetricStatChange({ ...metricStat, dimensions })}\n            dimensionKeys={dimensionKeys}\n            disableExpressions={disableExpressions}\n            datasource={datasource}\n          />\n        </EditorField>\n      </EditorRow>\n      {!disableExpressions && (\n        <EditorRow>\n          <EditorField\n            label=\"Match exact\"\n            optional={true}\n            tooltip=\"Only show metrics that exactly match all defined dimension names.\"\n          >\n            <EditorSwitch\n              id={`${refId}-cloudwatch-match-exact`}\n              value={!!metricStat.matchExact}\n              onChange={(e) => {\n                onMetricStatChange({\n                  ...metricStat,\n                  matchExact: e.currentTarget.checked,\n                });\n              }}\n            />\n          </EditorField>\n        </EditorRow>\n      )}\n    </EditorRows>\n  );\n}\n","export enum QueryEditorPropertyType {\n  String = 'string',\n}\n\nexport interface QueryEditorProperty {\n  type: QueryEditorPropertyType;\n  name?: string;\n}\n\nexport type QueryEditorOperatorType = string | boolean | number;\ntype QueryEditorOperatorValueType = QueryEditorOperatorType | QueryEditorOperatorType[];\n\nexport interface QueryEditorOperator<T extends QueryEditorOperatorValueType> {\n  name?: string;\n  value?: T;\n}\n\nexport interface QueryEditorOperatorExpression {\n  type: QueryEditorExpressionType.Operator;\n  property: QueryEditorProperty;\n  operator: QueryEditorOperator<QueryEditorOperatorValueType>;\n}\n\nexport interface QueryEditorArrayExpression {\n  type: QueryEditorExpressionType.And | QueryEditorExpressionType.Or;\n  expressions: QueryEditorExpression[] | QueryEditorArrayExpression[];\n}\n\nexport interface QueryEditorPropertyExpression {\n  type: QueryEditorExpressionType.Property;\n  property: QueryEditorProperty;\n}\n\nexport enum QueryEditorExpressionType {\n  Property = 'property',\n  Operator = 'operator',\n  Or = 'or',\n  And = 'and',\n  GroupBy = 'groupBy',\n  Function = 'function',\n  FunctionParameter = 'functionParameter',\n}\n\nexport type QueryEditorExpression =\n  | QueryEditorArrayExpression\n  | QueryEditorPropertyExpression\n  | QueryEditorGroupByExpression\n  | QueryEditorFunctionExpression\n  | QueryEditorFunctionParameterExpression\n  | QueryEditorOperatorExpression;\n\nexport interface QueryEditorGroupByExpression {\n  type: QueryEditorExpressionType.GroupBy;\n  property: QueryEditorProperty;\n}\n\nexport interface QueryEditorFunctionExpression {\n  type: QueryEditorExpressionType.Function;\n  name?: string;\n  parameters?: QueryEditorFunctionParameterExpression[];\n}\n\nexport interface QueryEditorFunctionParameterExpression {\n  type: QueryEditorExpressionType.FunctionParameter;\n  name?: string;\n}\n","import { getTemplateSrv, TemplateSrv } from 'app/features/templating/template_srv';\n\nimport {\n  QueryEditorArrayExpression,\n  QueryEditorExpression,\n  QueryEditorExpressionType,\n  QueryEditorFunctionExpression,\n  QueryEditorOperatorExpression,\n  QueryEditorPropertyExpression,\n} from '../expressions';\nimport { SQLExpression } from '../types';\n\nexport default class SQLGenerator {\n  constructor(private templateSrv: TemplateSrv = getTemplateSrv()) {}\n\n  expressionToSqlQuery({\n    select,\n    from,\n    where,\n    groupBy,\n    orderBy,\n    orderByDirection,\n    limit,\n  }: SQLExpression): string | undefined {\n    if (!from || !select?.name || !select?.parameters?.length) {\n      return undefined;\n    }\n\n    let parts: string[] = [];\n    this.appendSelect(select, parts);\n    this.appendFrom(from, parts);\n    this.appendWhere(where, parts, true, where?.expressions?.length ?? 0);\n    this.appendGroupBy(groupBy, parts);\n    this.appendOrderBy(orderBy, orderByDirection, parts);\n    this.appendLimit(limit, parts);\n\n    return parts.join(' ');\n  }\n\n  private appendSelect(select: QueryEditorFunctionExpression | undefined, parts: string[]) {\n    parts.push('SELECT');\n    this.appendFunction(select, parts);\n  }\n\n  private appendFrom(from: QueryEditorPropertyExpression | QueryEditorFunctionExpression | undefined, parts: string[]) {\n    parts.push('FROM');\n    from?.type === QueryEditorExpressionType.Function\n      ? this.appendFunction(from, parts)\n      : parts.push(this.formatValue(from?.property?.name ?? ''));\n  }\n\n  private appendWhere(\n    filter: QueryEditorExpression | undefined,\n    parts: string[],\n    isTopLevelExpression: boolean,\n    topLevelExpressionsCount: number\n  ) {\n    if (!filter) {\n      return;\n    }\n\n    const hasChildExpressions = 'expressions' in filter && filter.expressions.length > 0;\n    if (isTopLevelExpression && hasChildExpressions) {\n      parts.push('WHERE');\n    }\n\n    if (filter.type === QueryEditorExpressionType.And) {\n      const andParts: string[] = [];\n      filter.expressions.map((exp) => this.appendWhere(exp, andParts, false, topLevelExpressionsCount));\n      if (andParts.length === 0) {\n        return;\n      }\n      const andCombined = andParts.join(' AND ');\n      const wrapInParentheses = !isTopLevelExpression && topLevelExpressionsCount > 1 && andParts.length > 1;\n      return parts.push(wrapInParentheses ? `(${andCombined})` : andCombined);\n    }\n\n    if (filter.type === QueryEditorExpressionType.Or) {\n      const orParts: string[] = [];\n      filter.expressions.map((exp) => this.appendWhere(exp, orParts, false, topLevelExpressionsCount));\n      if (orParts.length === 0) {\n        return;\n      }\n      const orCombined = orParts.join(' OR ');\n      const wrapInParentheses = !isTopLevelExpression && topLevelExpressionsCount > 1 && orParts.length > 1;\n      parts.push(wrapInParentheses ? `(${orCombined})` : orCombined);\n      return;\n    }\n\n    if (filter.type === QueryEditorExpressionType.Operator) {\n      return this.appendOperator(filter, parts);\n    }\n  }\n\n  private appendGroupBy(groupBy: QueryEditorArrayExpression | undefined, parts: string[]) {\n    const groupByParts: string[] = [];\n    for (const expression of groupBy?.expressions ?? []) {\n      if (expression?.type !== QueryEditorExpressionType.GroupBy || !expression.property.name) {\n        continue;\n      }\n      groupByParts.push(this.formatValue(expression.property.name));\n    }\n\n    if (groupByParts.length > 0) {\n      parts.push(`GROUP BY ${groupByParts.join(', ')}`);\n    }\n  }\n\n  private appendOrderBy(\n    orderBy: QueryEditorFunctionExpression | undefined,\n    orderByDirection: string | undefined,\n    parts: string[]\n  ) {\n    if (orderBy) {\n      parts.push('ORDER BY');\n      this.appendFunction(orderBy, parts);\n      parts.push(orderByDirection ?? 'ASC');\n    }\n  }\n\n  private appendLimit(limit: number | undefined, parts: string[]) {\n    limit && parts.push(`LIMIT ${limit}`);\n  }\n\n  private appendOperator(expression: QueryEditorOperatorExpression, parts: string[], prefix?: string) {\n    const { property, operator } = expression;\n\n    if (!property.name || !operator.name || !operator.value) {\n      return;\n    }\n\n    parts.push(`${this.formatValue(property.name)} ${operator.name} '${operator.value}'`);\n  }\n\n  private appendFunction(select: QueryEditorFunctionExpression | undefined, parts: string[]) {\n    if (!select?.name) {\n      return;\n    }\n\n    const params = (select.parameters ?? [])\n      .map((p) => p.name && this.formatValue(p.name))\n      .filter(Boolean)\n      .join(', ');\n\n    parts.push(`${select.name}(${params})`);\n  }\n\n  private formatValue(label: string): string {\n    const specialCharacters = /[/\\s\\.-]/; // slash, space, dot or dash\n\n    const interpolated = this.templateSrv.replace(label, {}, 'raw');\n    if (specialCharacters.test(interpolated)) {\n      return `\"${label}\"`;\n    }\n\n    return label;\n  }\n}\n","import { SelectableValue } from '@grafana/data';\n\nimport { SCHEMA } from '../../cloudwatch-sql/language';\nimport {\n  QueryEditorExpressionType,\n  QueryEditorPropertyType,\n  QueryEditorFunctionParameterExpression,\n  QueryEditorArrayExpression,\n  QueryEditorOperatorExpression,\n  QueryEditorGroupByExpression,\n} from '../../expressions';\nimport { SQLExpression, CloudWatchMetricsQuery, Dimensions } from '../../types';\n\nexport function getMetricNameFromExpression(selectExpression: SQLExpression['select']): string | undefined {\n  return selectExpression?.parameters?.[0].name;\n}\n\nexport function getNamespaceFromExpression(fromExpression: SQLExpression['from']): string | undefined {\n  // It's just a simple `FROM \"AWS/EC2\"` expression\n  if (fromExpression?.type === QueryEditorExpressionType.Property) {\n    return fromExpression.property.name; // PR TODO: do we need to test the type here? It can only be string?\n  }\n\n  // It's a more complicated `FROM SCHEMA(\"AWS/EC2\", ...)` expression\n  if (fromExpression?.type === QueryEditorExpressionType.Function) {\n    // TODO: do we need to test the name of the function?\n    return fromExpression.parameters?.[0].name;\n  }\n\n  return undefined;\n}\n\nexport function getSchemaLabelKeys(fromExpression: SQLExpression['from']): string[] | undefined {\n  // Schema label keys are second to n arguments in the from expression function\n  if (fromExpression?.type === QueryEditorExpressionType.Function && fromExpression?.parameters?.length) {\n    if (fromExpression?.parameters?.length <= 1) {\n      return [];\n    }\n\n    // ignore the first arg (the namespace)\n    const paramExpressions = fromExpression?.parameters.slice(1);\n    return paramExpressions.reduce<string[]>((acc, curr) => (curr.name ? [...acc, curr.name] : acc), []);\n  }\n\n  return undefined;\n}\n\nexport function isUsingWithSchema(fromExpression: SQLExpression['from']): boolean {\n  return fromExpression?.type === QueryEditorExpressionType.Function && fromExpression.name === SCHEMA;\n}\n\n/** Given a partial operator expression, return a non-partial if it's valid, or undefined */\nexport function sanitizeOperator(\n  expression: Partial<QueryEditorOperatorExpression>\n): QueryEditorOperatorExpression | undefined {\n  const key = expression.property?.name;\n  const value = expression.operator?.value;\n  const operator = expression.operator?.name;\n\n  if (key && value && operator) {\n    return {\n      type: QueryEditorExpressionType.Operator,\n      property: {\n        type: QueryEditorPropertyType.String,\n        name: key,\n      },\n      operator: {\n        value,\n        name: operator,\n      },\n    };\n  }\n\n  return undefined;\n}\n\n/**\n * Given an array of Expressions, flattens them to the leaf Operator expressions.\n * Note, this loses context of any nested ANDs or ORs, so will not be useful once we support nested conditions */\nfunction flattenOperatorExpressions(\n  expressions: QueryEditorArrayExpression['expressions']\n): QueryEditorOperatorExpression[] {\n  return expressions.flatMap((expression) => {\n    if (expression.type === QueryEditorExpressionType.Operator) {\n      return expression;\n    }\n\n    if (expression.type === QueryEditorExpressionType.And || expression.type === QueryEditorExpressionType.Or) {\n      return flattenOperatorExpressions(expression.expressions);\n    }\n\n    // Expressions that we don't expect to find in the WHERE filter will be ignored\n    return [];\n  });\n}\n\n/** Returns a flattened list of WHERE filters, losing all context of nested filters or AND vs OR. Not suitable\n * if the UI supports nested conditions\n */\nexport function getFlattenedFilters(sql: SQLExpression): QueryEditorOperatorExpression[] {\n  const where = sql.where;\n  return flattenOperatorExpressions(where?.expressions ?? []);\n}\n\n/**\n * Given an array of Expressions, flattens them to the leaf Operator expressions.\n * Note, this loses context of any nested ANDs or ORs, so will not be useful once we support nested conditions */\nfunction flattenGroupByExpressions(\n  expressions: QueryEditorArrayExpression['expressions']\n): QueryEditorGroupByExpression[] {\n  return expressions.flatMap((expression) => {\n    if (expression.type === QueryEditorExpressionType.GroupBy) {\n      return expression;\n    }\n\n    // Expressions that we don't expect to find in the GROUP BY will be ignored\n    return [];\n  });\n}\n\n/** Returns a flattened list of GROUP BY expressions, losing all context of nested filters or AND vs OR.\n */\nexport function getFlattenedGroupBys(sql: SQLExpression): QueryEditorGroupByExpression[] {\n  const groupBy = sql.groupBy;\n  return flattenGroupByExpressions(groupBy?.expressions ?? []);\n}\n\n/** Converts a string array to a Dimensions object with null values  **/\nexport function stringArrayToDimensions(arr: string[]): Dimensions {\n  return arr.reduce((acc, curr) => {\n    if (curr) {\n      return { ...acc, [curr]: null };\n    }\n    return acc;\n  }, {});\n}\n\nexport function setSql(query: CloudWatchMetricsQuery, sql: SQLExpression): CloudWatchMetricsQuery {\n  return {\n    ...query,\n    sql: {\n      ...(query.sql ?? {}),\n      ...sql,\n    },\n  };\n}\n\nexport function setNamespace(query: CloudWatchMetricsQuery, namespace: string | undefined): CloudWatchMetricsQuery {\n  const sql = query.sql ?? {};\n  //updating `namespace` props for CloudWatchMetricsQuery\n  query.namespace = namespace ? namespace : '';\n\n  if (namespace === undefined) {\n    return setSql(query, {\n      from: undefined,\n    });\n  }\n\n  // It's just a simple `FROM \"AWS/EC2\"` expression\n  if (!sql.from || sql.from.type === QueryEditorExpressionType.Property) {\n    return setSql(query, {\n      from: {\n        type: QueryEditorExpressionType.Property,\n        property: {\n          type: QueryEditorPropertyType.String,\n          name: namespace,\n        },\n      },\n    });\n  }\n\n  // It's a more complicated `FROM SCHEMA(\"AWS/EC2\", ...)` expression\n  if (sql.from.type === QueryEditorExpressionType.Function) {\n    const namespaceParam: QueryEditorFunctionParameterExpression = {\n      type: QueryEditorExpressionType.FunctionParameter,\n      name: namespace,\n    };\n\n    const labelKeys = (sql.from.parameters ?? []).slice(1);\n\n    return setSql(query, {\n      from: {\n        type: QueryEditorExpressionType.Function,\n        name: SCHEMA,\n        parameters: [namespaceParam, ...labelKeys],\n      },\n    });\n  }\n\n  // TODO: do the with schema bit\n  return query;\n}\n\nexport function setSchemaLabels(\n  query: CloudWatchMetricsQuery,\n  schemaLabels: Array<SelectableValue<string>> | SelectableValue<string>\n): CloudWatchMetricsQuery {\n  const sql = query.sql ?? {};\n  schemaLabels = Array.isArray(schemaLabels) ? schemaLabels.map((l) => l.value) : [schemaLabels.value];\n\n  // schema labels are the second parameter in the schema function. `... FROM SCHEMA(\"AWS/EC2\", label1, label2 ...)`\n  if (sql.from?.type === QueryEditorExpressionType.Function && sql.from.parameters?.length) {\n    const parameters: QueryEditorFunctionParameterExpression[] = (schemaLabels ?? []).map((label: string) => ({\n      type: QueryEditorExpressionType.FunctionParameter,\n      name: label,\n    }));\n    const namespaceParam = (sql.from.parameters ?? [])[0];\n\n    return setSql(query, {\n      from: {\n        type: QueryEditorExpressionType.Function,\n        name: SCHEMA,\n        parameters: [namespaceParam, ...parameters],\n      },\n    });\n  }\n\n  return query;\n}\n\nexport function setMetricName(query: CloudWatchMetricsQuery, metricName: string): CloudWatchMetricsQuery {\n  const param: QueryEditorFunctionParameterExpression = {\n    type: QueryEditorExpressionType.FunctionParameter,\n    name: metricName,\n  };\n\n  return setSql(query, {\n    select: {\n      type: QueryEditorExpressionType.Function,\n      ...(query.sql?.select ?? {}),\n      parameters: [param],\n    },\n  });\n}\n\nexport function removeMetricName(query: CloudWatchMetricsQuery): CloudWatchMetricsQuery {\n  const queryWithNoParams = { ...query };\n  delete queryWithNoParams.sql?.select?.parameters;\n\n  return queryWithNoParams;\n}\n\nexport function setAggregation(query: CloudWatchMetricsQuery, aggregation: string): CloudWatchMetricsQuery {\n  return setSql(query, {\n    select: {\n      type: QueryEditorExpressionType.Function,\n      ...(query.sql?.select ?? {}),\n      name: aggregation,\n    },\n  });\n}\n\nexport function setOrderBy(query: CloudWatchMetricsQuery, aggregation: string): CloudWatchMetricsQuery {\n  return setSql(query, {\n    orderBy: {\n      type: QueryEditorExpressionType.Function,\n      name: aggregation,\n    },\n  });\n}\n\nexport function setWithSchema(query: CloudWatchMetricsQuery, withSchema: boolean): CloudWatchMetricsQuery {\n  const namespace = getNamespaceFromExpression((query.sql ?? {}).from);\n\n  if (withSchema) {\n    const namespaceParam: QueryEditorFunctionParameterExpression = {\n      type: QueryEditorExpressionType.FunctionParameter,\n      name: namespace,\n    };\n\n    return setSql(query, {\n      from: {\n        type: QueryEditorExpressionType.Function,\n        name: SCHEMA,\n        parameters: [namespaceParam],\n      },\n    });\n  }\n\n  return setSql(query, {\n    from: {\n      type: QueryEditorExpressionType.Property,\n      property: {\n        type: QueryEditorPropertyType.String,\n        name: namespace,\n      },\n    },\n  });\n}\n\n/** Sets the left hand side (InstanceId) in an OperatorExpression\n * Accepts a partial expression to use in an editor\n */\nexport function setOperatorExpressionProperty(\n  expression: Partial<QueryEditorOperatorExpression>,\n  property: string\n): QueryEditorOperatorExpression {\n  return {\n    type: QueryEditorExpressionType.Operator,\n    property: {\n      type: QueryEditorPropertyType.String,\n      name: property,\n    },\n    operator: expression.operator ?? {},\n  };\n}\n\n/** Sets the operator (\"==\") in an OperatorExpression\n * Accepts a partial expression to use in an editor\n */\nexport function setOperatorExpressionName(\n  expression: Partial<QueryEditorOperatorExpression>,\n  name: string\n): QueryEditorOperatorExpression {\n  return {\n    type: QueryEditorExpressionType.Operator,\n    property: expression.property ?? {\n      type: QueryEditorPropertyType.String,\n    },\n    operator: {\n      ...expression.operator,\n      name,\n    },\n  };\n}\n\n/** Sets the right hand side (\"i-abc123445\") in an OperatorExpression\n * Accepts a partial expression to use in an editor\n */\nexport function setOperatorExpressionValue(\n  expression: Partial<QueryEditorOperatorExpression>,\n  value: string\n): QueryEditorOperatorExpression {\n  return {\n    type: QueryEditorExpressionType.Operator,\n    property: expression.property ?? {\n      type: QueryEditorPropertyType.String,\n    },\n    operator: {\n      ...expression.operator,\n      value,\n    },\n  };\n}\n\n/** Creates a GroupByExpression for a specified field\n */\nexport function setGroupByField(field: string): QueryEditorGroupByExpression {\n  return {\n    type: QueryEditorExpressionType.GroupBy,\n    property: {\n      type: QueryEditorPropertyType.String,\n      name: field,\n    },\n  };\n}\n","import React, { useEffect, useMemo } from 'react';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { EditorField, EditorFieldGroup, EditorSwitch } from '@grafana/experimental';\nimport { Select } from '@grafana/ui';\n\nimport { STATISTICS } from '../../cloudwatch-sql/language';\nimport { CloudWatchDatasource } from '../../datasource';\nimport { useDimensionKeys, useMetrics, useNamespaces } from '../../hooks';\nimport { CloudWatchMetricsQuery } from '../../types';\nimport { appendTemplateVariables } from '../../utils/utils';\n\nimport {\n  getMetricNameFromExpression,\n  getNamespaceFromExpression,\n  getSchemaLabelKeys as getSchemaLabels,\n  isUsingWithSchema,\n  removeMetricName,\n  setAggregation,\n  setMetricName,\n  setNamespace,\n  setSchemaLabels,\n  setWithSchema,\n  stringArrayToDimensions,\n} from './utils';\n\ninterface SQLBuilderSelectRowProps {\n  query: CloudWatchMetricsQuery;\n  datasource: CloudWatchDatasource;\n  onQueryChange: (query: CloudWatchMetricsQuery) => void;\n}\n\nconst AGGREGATIONS = STATISTICS.map(toOption);\n\nconst SQLBuilderSelectRow: React.FC<SQLBuilderSelectRowProps> = ({ datasource, query, onQueryChange }) => {\n  const sql = query.sql ?? {};\n\n  const aggregation = sql.select?.name;\n  useEffect(() => {\n    if (!aggregation) {\n      onQueryChange(setAggregation(query, STATISTICS[0]));\n    }\n  }, [aggregation, onQueryChange, query]);\n\n  const metricName = getMetricNameFromExpression(sql.select);\n  const namespace = getNamespaceFromExpression(sql.from);\n  const schemaLabels = getSchemaLabels(sql.from);\n  const withSchemaEnabled = isUsingWithSchema(sql.from);\n\n  const namespaceOptions = useNamespaces(datasource);\n  const metricOptions = useMetrics(datasource, query.region, namespace);\n  const existingFilters = useMemo(() => stringArrayToDimensions(schemaLabels ?? []), [schemaLabels]);\n  const unusedDimensionKeys = useDimensionKeys(datasource, query.region, namespace, metricName, existingFilters);\n  const dimensionKeys = useMemo(\n    () => (schemaLabels?.length ? [...unusedDimensionKeys, ...schemaLabels.map(toOption)] : unusedDimensionKeys),\n    [unusedDimensionKeys, schemaLabels]\n  );\n\n  const onNamespaceChange = async (query: CloudWatchMetricsQuery) => {\n    const validatedQuery = await validateMetricName(query);\n    onQueryChange(validatedQuery);\n  };\n\n  const validateMetricName = async (query: CloudWatchMetricsQuery) => {\n    let { region, sql } = query;\n    await datasource.api.getMetrics(query.namespace, region).then((result: Array<SelectableValue<string>>) => {\n      if (!result.some((metric) => metric.value === metricName)) {\n        sql = removeMetricName(query).sql;\n      }\n    });\n    return { ...query, sql };\n  };\n\n  return (\n    <>\n      <EditorFieldGroup>\n        <EditorField label=\"Namespace\" width={16}>\n          <Select\n            aria-label=\"Namespace\"\n            value={namespace ? toOption(namespace) : null}\n            inputId={`${query.refId}-cloudwatch-sql-namespace`}\n            options={namespaceOptions}\n            allowCustomValue\n            onChange={({ value }) => value && onNamespaceChange(setNamespace(query, value))}\n          />\n        </EditorField>\n\n        <EditorField label=\"With schema\">\n          <EditorSwitch\n            id={`${query.refId}-cloudwatch-sql-withSchema`}\n            value={withSchemaEnabled}\n            onChange={(ev) =>\n              ev.target instanceof HTMLInputElement && onQueryChange(setWithSchema(query, ev.target.checked))\n            }\n          />\n        </EditorField>\n\n        {withSchemaEnabled && (\n          <EditorField label=\"Schema labels\" disabled={!namespace}>\n            <Select\n              id={`${query.refId}-cloudwatch-sql-schema-label-keys`}\n              width=\"auto\"\n              isMulti={true}\n              value={schemaLabels ? schemaLabels.map(toOption) : null}\n              options={dimensionKeys}\n              allowCustomValue\n              onChange={(item) => item && onQueryChange(setSchemaLabels(query, item))}\n            />\n          </EditorField>\n        )}\n      </EditorFieldGroup>\n\n      <EditorFieldGroup>\n        <EditorField label=\"Metric name\" width={16}>\n          <Select\n            aria-label=\"Metric name\"\n            value={metricName ? toOption(metricName) : null}\n            options={metricOptions}\n            allowCustomValue\n            onChange={({ value }) => value && onQueryChange(setMetricName(query, value))}\n          />\n        </EditorField>\n\n        <EditorField label=\"Aggregation\" width={16}>\n          <Select\n            aria-label=\"Aggregation\"\n            value={aggregation ? toOption(aggregation) : null}\n            options={appendTemplateVariables(datasource, AGGREGATIONS)}\n            onChange={({ value }) => value && onQueryChange(setAggregation(query, value))}\n          />\n        </EditorField>\n      </EditorFieldGroup>\n    </>\n  );\n};\n\nexport default SQLBuilderSelectRow;\n","import React, { useMemo, useState } from 'react';\nimport { useAsyncFn } from 'react-use';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { AccessoryButton, EditorList, InputGroup } from '@grafana/experimental';\nimport { Select } from '@grafana/ui';\n\nimport { COMPARISON_OPERATORS, EQUALS } from '../../cloudwatch-sql/language';\nimport { CloudWatchDatasource } from '../../datasource';\nimport { QueryEditorExpressionType, QueryEditorOperatorExpression, QueryEditorPropertyType } from '../../expressions';\nimport { useDimensionKeys } from '../../hooks';\nimport { CloudWatchMetricsQuery } from '../../types';\nimport { appendTemplateVariables } from '../../utils/utils';\n\nimport {\n  getFlattenedFilters,\n  getMetricNameFromExpression,\n  getNamespaceFromExpression,\n  sanitizeOperator,\n  setOperatorExpressionName,\n  setOperatorExpressionProperty,\n  setOperatorExpressionValue,\n  setSql,\n} from './utils';\n\ninterface SQLFilterProps {\n  query: CloudWatchMetricsQuery;\n  datasource: CloudWatchDatasource;\n  onQueryChange: (query: CloudWatchMetricsQuery) => void;\n}\n\nconst OPERATORS = COMPARISON_OPERATORS.map(toOption);\n\nconst SQLFilter: React.FC<SQLFilterProps> = ({ query, onQueryChange, datasource }) => {\n  const filtersFromQuery = useMemo(() => getFlattenedFilters(query.sql ?? {}), [query.sql]);\n  const [filters, setFilters] = useState<QueryEditorOperatorExpression[]>(filtersFromQuery);\n\n  const onChange = (newItems: Array<Partial<QueryEditorOperatorExpression>>) => {\n    // As new (empty object) items come in, with need to make sure they have the correct type\n    const cleaned = newItems.map(\n      (v): QueryEditorOperatorExpression => ({\n        type: QueryEditorExpressionType.Operator,\n        property: v.property ?? { type: QueryEditorPropertyType.String },\n        operator: v.operator ?? {\n          name: EQUALS,\n        },\n      })\n    );\n\n    setFilters(cleaned);\n\n    // Only save valid and complete filters into the query state\n    const validExpressions: QueryEditorOperatorExpression[] = [];\n    for (const operatorExpression of cleaned) {\n      const validated = sanitizeOperator(operatorExpression);\n      if (validated) {\n        validExpressions.push(validated);\n      }\n    }\n\n    const where = validExpressions.length\n      ? {\n          type: QueryEditorExpressionType.And as const,\n          expressions: validExpressions,\n        }\n      : undefined;\n\n    onQueryChange(setSql(query, { where }));\n  };\n\n  return <EditorList items={filters} onChange={onChange} renderItem={makeRenderFilter(datasource, query)} />;\n};\n\n// Making component functions in the render body is not recommended, but it works for now.\n// If some problems arise (perhaps with state going missing), consider this to be a potential cause\nfunction makeRenderFilter(datasource: CloudWatchDatasource, query: CloudWatchMetricsQuery) {\n  function renderFilter(\n    item: Partial<QueryEditorOperatorExpression>,\n    onChange: (item: QueryEditorOperatorExpression) => void,\n    onDelete: () => void\n  ) {\n    return <FilterItem datasource={datasource} query={query} filter={item} onChange={onChange} onDelete={onDelete} />;\n  }\n\n  return renderFilter;\n}\n\nexport default SQLFilter;\n\ninterface FilterItemProps {\n  datasource: CloudWatchDatasource;\n  query: CloudWatchMetricsQuery;\n  filter: Partial<QueryEditorOperatorExpression>;\n  onChange: (item: QueryEditorOperatorExpression) => void;\n  onDelete: () => void;\n}\n\nconst FilterItem: React.FC<FilterItemProps> = (props) => {\n  const { datasource, query, filter, onChange, onDelete } = props;\n  const sql = query.sql ?? {};\n\n  const namespace = getNamespaceFromExpression(sql.from);\n  const metricName = getMetricNameFromExpression(sql.select);\n\n  const dimensionKeys = useDimensionKeys(datasource, query.region, namespace, metricName);\n\n  const loadDimensionValues = async () => {\n    if (!filter.property?.name) {\n      return [];\n    }\n\n    return datasource.api\n      .getDimensionValues(query.region, namespace, metricName, filter.property.name, {})\n      .then((result: Array<SelectableValue<string>>) => {\n        return appendTemplateVariables(datasource, result);\n      });\n  };\n\n  const [state, loadOptions] = useAsyncFn(loadDimensionValues, [\n    query.region,\n    namespace,\n    metricName,\n    filter.property?.name,\n  ]);\n\n  return (\n    <InputGroup>\n      <Select\n        width=\"auto\"\n        value={filter.property?.name ? toOption(filter.property?.name) : null}\n        options={dimensionKeys}\n        allowCustomValue\n        onChange={({ value }) => value && onChange(setOperatorExpressionProperty(filter, value))}\n      />\n\n      <Select\n        width=\"auto\"\n        value={filter.operator?.name && toOption(filter.operator.name)}\n        options={OPERATORS}\n        onChange={({ value }) => value && onChange(setOperatorExpressionName(filter, value))}\n      />\n\n      <Select\n        width=\"auto\"\n        isLoading={state.loading}\n        value={\n          filter.operator?.value && typeof filter.operator?.value === 'string' ? toOption(filter.operator?.value) : null\n        }\n        options={state.value}\n        allowCustomValue\n        onOpenMenu={loadOptions}\n        onChange={({ value }) => value && onChange(setOperatorExpressionValue(filter, value))}\n      />\n\n      <AccessoryButton aria-label=\"remove\" icon=\"times\" variant=\"secondary\" onClick={onDelete} />\n    </InputGroup>\n  );\n};\n","import React, { useMemo, useState } from 'react';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { AccessoryButton, EditorList, InputGroup } from '@grafana/experimental';\nimport { Select } from '@grafana/ui';\n\nimport { CloudWatchDatasource } from '../../datasource';\nimport { QueryEditorExpressionType, QueryEditorGroupByExpression, QueryEditorPropertyType } from '../../expressions';\nimport { useDimensionKeys } from '../../hooks';\nimport { CloudWatchMetricsQuery } from '../../types';\n\nimport {\n  getFlattenedGroupBys,\n  getMetricNameFromExpression,\n  getNamespaceFromExpression,\n  setGroupByField,\n  setSql,\n} from './utils';\n\ninterface SQLGroupByProps {\n  query: CloudWatchMetricsQuery;\n  datasource: CloudWatchDatasource;\n  onQueryChange: (query: CloudWatchMetricsQuery) => void;\n}\n\nconst SQLGroupBy: React.FC<SQLGroupByProps> = ({ query, datasource, onQueryChange }) => {\n  const sql = query.sql ?? {};\n  const groupBysFromQuery = useMemo(() => getFlattenedGroupBys(query.sql ?? {}), [query.sql]);\n  const [items, setItems] = useState<QueryEditorGroupByExpression[]>(groupBysFromQuery);\n\n  const namespace = getNamespaceFromExpression(sql.from);\n  const metricName = getMetricNameFromExpression(sql.select);\n\n  const baseOptions = useDimensionKeys(datasource, query.region, namespace, metricName);\n  const options = useMemo(\n    // Exclude options we've already selected\n    () => baseOptions.filter((option) => !groupBysFromQuery.some((v) => v.property.name === option.value)),\n    [baseOptions, groupBysFromQuery]\n  );\n\n  const onChange = (newItems: Array<Partial<QueryEditorGroupByExpression>>) => {\n    // As new (empty object) items come in, with need to make sure they have the correct type\n    const cleaned = newItems.map(\n      (v): QueryEditorGroupByExpression => ({\n        type: QueryEditorExpressionType.GroupBy,\n        property: {\n          type: QueryEditorPropertyType.String,\n          name: v.property?.name,\n        },\n      })\n    );\n\n    setItems(cleaned);\n\n    // Only save complete expressions into the query state;\n    const completeExpressions = cleaned.filter((v) => v.property?.name);\n\n    const groupBy = completeExpressions.length\n      ? {\n          type: QueryEditorExpressionType.And as const,\n          expressions: completeExpressions,\n        }\n      : undefined;\n\n    onQueryChange(setSql(query, { groupBy }));\n  };\n\n  return <EditorList items={items} onChange={onChange} renderItem={makeRenderItem(options)} />;\n};\n\nfunction makeRenderItem(options: Array<SelectableValue<string>>) {\n  function renderItem(\n    item: Partial<QueryEditorGroupByExpression>,\n    onChange: (item: QueryEditorGroupByExpression) => void,\n    onDelete: () => void\n  ) {\n    return <GroupByItem options={options} item={item} onChange={onChange} onDelete={onDelete} />;\n  }\n\n  return renderItem;\n}\n\ninterface GroupByItemProps {\n  options: Array<SelectableValue<string>>;\n  item: Partial<QueryEditorGroupByExpression>;\n  onChange: (item: QueryEditorGroupByExpression) => void;\n  onDelete: () => void;\n}\n\nconst GroupByItem: React.FC<GroupByItemProps> = (props) => {\n  const { options, item, onChange, onDelete } = props;\n  const fieldName = item.property?.name;\n\n  return (\n    <InputGroup>\n      <Select\n        aria-label={`Group by ${fieldName ?? 'filter key'}`}\n        width=\"auto\"\n        value={fieldName ? toOption(fieldName) : null}\n        options={options}\n        allowCustomValue\n        onChange={({ value }) => value && onChange(setGroupByField(value))}\n      />\n\n      <AccessoryButton aria-label=\"remove\" icon=\"times\" variant=\"secondary\" onClick={onDelete} />\n    </InputGroup>\n  );\n};\n\nexport default SQLGroupBy;\n","import React from 'react';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { AccessoryButton, EditorField, EditorFieldGroup, InputGroup } from '@grafana/experimental';\nimport { Select } from '@grafana/ui';\n\nimport { ASC, DESC, STATISTICS } from '../../cloudwatch-sql/language';\nimport { CloudWatchDatasource } from '../../datasource';\nimport { CloudWatchMetricsQuery } from '../../types';\nimport { appendTemplateVariables } from '../../utils/utils';\n\nimport { setOrderBy, setSql } from './utils';\n\ninterface SQLBuilderSelectRowProps {\n  query: CloudWatchMetricsQuery;\n  datasource: CloudWatchDatasource;\n  onQueryChange: (query: CloudWatchMetricsQuery) => void;\n}\n\nconst orderByDirections: Array<SelectableValue<string>> = [\n  { label: ASC, value: ASC },\n  { label: DESC, value: DESC },\n];\n\nconst SQLOrderByGroup: React.FC<SQLBuilderSelectRowProps> = ({ query, onQueryChange, datasource }) => {\n  const sql = query.sql ?? {};\n  const orderBy = sql.orderBy?.name;\n  const orderByDirection = sql.orderByDirection;\n\n  return (\n    <EditorFieldGroup>\n      <EditorField label=\"Order by\" optional width={16}>\n        <InputGroup>\n          <Select\n            aria-label=\"Order by\"\n            onChange={({ value }) => value && onQueryChange(setOrderBy(query, value))}\n            options={appendTemplateVariables(datasource, STATISTICS.map(toOption))}\n            value={orderBy ? toOption(orderBy) : null}\n          />\n          {orderBy && (\n            <AccessoryButton\n              aria-label=\"remove\"\n              icon=\"times\"\n              variant=\"secondary\"\n              onClick={() => onQueryChange(setSql(query, { orderBy: undefined }))}\n            />\n          )}\n        </InputGroup>\n      </EditorField>\n\n      <EditorField label=\"Direction\" disabled={!orderBy} width={16}>\n        <Select\n          aria-label=\"Direction\"\n          inputId=\"cloudwatch-sql-order-by-direction\"\n          value={orderByDirection ? toOption(orderByDirection) : orderByDirections[0]}\n          options={appendTemplateVariables(datasource, orderByDirections)}\n          onChange={(item) => item && onQueryChange(setSql(query, { orderByDirection: item.value }))}\n        />\n      </EditorField>\n    </EditorFieldGroup>\n  );\n};\n\nexport default SQLOrderByGroup;\n","import React, { useCallback, useEffect, useState } from 'react';\n\nimport { EditorField, EditorRow, EditorRows } from '@grafana/experimental';\nimport { Input } from '@grafana/ui';\n\nimport SQLGenerator from '../../cloudwatch-sql/SQLGenerator';\nimport { CloudWatchDatasource } from '../../datasource';\nimport { CloudWatchMetricsQuery } from '../../types';\n\nimport SQLBuilderSelectRow from './SQLBuilderSelectRow';\nimport SQLFilter from './SQLFilter';\nimport SQLGroupBy from './SQLGroupBy';\nimport SQLOrderByGroup from './SQLOrderByGroup';\nimport { setSql } from './utils';\n\nexport type Props = {\n  query: CloudWatchMetricsQuery;\n  datasource: CloudWatchDatasource;\n  onChange: (value: CloudWatchMetricsQuery) => void;\n  onRunQuery: () => void;\n};\n\nexport function SQLBuilderEditor({ query, datasource, onChange, onRunQuery }: React.PropsWithChildren<Props>) {\n  const sql = query.sql ?? {};\n\n  const onQueryChange = useCallback(\n    (query: CloudWatchMetricsQuery) => {\n      const sqlGenerator = new SQLGenerator();\n      const sqlString = sqlGenerator.expressionToSqlQuery(query.sql ?? {});\n      const fullQuery = {\n        ...query,\n        sqlExpression: sqlString,\n      };\n\n      onChange(fullQuery);\n      onRunQuery();\n    },\n    [onChange, onRunQuery]\n  );\n\n  const [sqlPreview, setSQLPreview] = useState<string | undefined>();\n  useEffect(() => {\n    const sqlGenerator = new SQLGenerator();\n    const sqlString = sqlGenerator.expressionToSqlQuery(query.sql ?? {});\n    if (sqlPreview !== sqlString) {\n      setSQLPreview(sqlString);\n    }\n  }, [query, sqlPreview, setSQLPreview]);\n\n  return (\n    <EditorRows>\n      <EditorRow>\n        <SQLBuilderSelectRow query={query} onQueryChange={onQueryChange} datasource={datasource} />\n      </EditorRow>\n\n      <EditorRow>\n        <EditorField label=\"Filter\" optional={true}>\n          <SQLFilter query={query} onQueryChange={onQueryChange} datasource={datasource} />\n        </EditorField>\n      </EditorRow>\n\n      <EditorRow>\n        <EditorField label=\"Group by\" optional>\n          <SQLGroupBy query={query} onQueryChange={onQueryChange} datasource={datasource} />\n        </EditorField>\n\n        <SQLOrderByGroup query={query} onQueryChange={onQueryChange} datasource={datasource}></SQLOrderByGroup>\n\n        <EditorField label=\"Limit\" optional>\n          <Input\n            id={`${query.refId}-cloudwatch-sql-builder-editor-limit`}\n            value={sql.limit}\n            onChange={(e) => {\n              const val = e.currentTarget.valueAsNumber;\n              onQueryChange(setSql(query, { limit: isNaN(val) ? undefined : val }));\n            }}\n            type=\"number\"\n            min={1}\n          />\n        </EditorField>\n      </EditorRow>\n\n      {sqlPreview && (\n        <EditorRow>\n          {process.env.NODE_ENV === 'development' && <pre>{JSON.stringify(query.sql ?? {}, null, 2)}</pre>}\n          <pre>{sqlPreview ?? ''}</pre>\n        </EditorRow>\n      )}\n    </EditorRows>\n  );\n}\n","import { LanguageDefinition } from '../monarch/register';\n\nconst cloudWatchMetricMathLanguageDefinition: LanguageDefinition = {\n  id: 'cloudwatch-MetricMath',\n  extensions: [],\n  aliases: [],\n  mimetypes: [],\n  loader: () => import('./language'),\n};\nexport default cloudWatchMetricMathLanguageDefinition;\n","export const TRIGGER_SUGGEST = {\n  id: 'editor.action.triggerSuggest',\n  title: '',\n};\n","import type * as monacoType from 'monaco-editor/esm/vs/editor/editor.api';\n\nimport { Monaco } from '@grafana/ui';\n\nimport { Completeable } from './types';\n\nexport type LanguageDefinition = {\n  id: string;\n  extensions: string[];\n  aliases: string[];\n  mimetypes: string[];\n  loader: () => Promise<{\n    language: monacoType.languages.IMonarchLanguage;\n    conf: monacoType.languages.LanguageConfiguration;\n  }>;\n};\n\nexport const registerLanguage = (\n  monaco: Monaco,\n  language: LanguageDefinition,\n  completionItemProvider: Completeable\n) => {\n  const { id, loader } = language;\n\n  const languages = monaco.languages.getLanguages();\n  if (languages.find((l) => l.id === id)) {\n    return;\n  }\n\n  monaco.languages.register({ id });\n  loader().then((monarch) => {\n    monaco.languages.setMonarchTokensProvider(id, monarch.language);\n    monaco.languages.setLanguageConfiguration(id, monarch.conf);\n    monaco.languages.registerCompletionItemProvider(id, completionItemProvider.getCompletionProvider(monaco, language));\n  });\n};\n","import type * as monacoType from 'monaco-editor/esm/vs/editor/editor.api';\nimport React, { useCallback, useRef } from 'react';\n\nimport { CodeEditor, Monaco } from '@grafana/ui';\n\nimport { CloudWatchDatasource } from '../datasource';\nimport language from '../metric-math/definition';\nimport { TRIGGER_SUGGEST } from '../monarch/commands';\nimport { registerLanguage } from '../monarch/register';\n\nexport interface Props {\n  onChange: (query: string) => void;\n  onRunQuery: () => void;\n  expression: string;\n  datasource: CloudWatchDatasource;\n}\n\nexport function MathExpressionQueryField({\n  expression: query,\n  onChange,\n  onRunQuery,\n  datasource,\n}: React.PropsWithChildren<Props>) {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const onEditorMount = useCallback(\n    (editor: monacoType.editor.IStandaloneCodeEditor, monaco: Monaco) => {\n      editor.onDidFocusEditorText(() => editor.trigger(TRIGGER_SUGGEST.id, TRIGGER_SUGGEST.id, {}));\n      editor.addCommand(monaco.KeyMod.Shift | monaco.KeyCode.Enter, () => {\n        const text = editor.getValue();\n        onChange(text);\n        onRunQuery();\n      });\n\n      // auto resizes the editor to be the height of the content it holds\n      // this code comes from the Prometheus query editor.\n      // We may wish to consider abstracting it into the grafana/ui repo in the future\n      const updateElementHeight = () => {\n        const containerDiv = containerRef.current;\n        if (containerDiv !== null && editor.getContentHeight() < 200) {\n          const pixelHeight = Math.max(32, editor.getContentHeight());\n          containerDiv.style.height = `${pixelHeight}px`;\n          containerDiv.style.width = '100%';\n          const pixelWidth = containerDiv.clientWidth;\n          editor.layout({ width: pixelWidth, height: pixelHeight });\n        }\n      };\n\n      editor.onDidContentSizeChange(updateElementHeight);\n      updateElementHeight();\n    },\n    [onChange, onRunQuery]\n  );\n\n  return (\n    <div ref={containerRef}>\n      <CodeEditor\n        monacoOptions={{\n          // without this setting, the auto-resize functionality causes an infinite loop, don't remove it!\n          scrollBeyondLastLine: false,\n\n          // These additional options are style focused and are a subset of those in the query editor in Prometheus\n          fontSize: 14,\n          lineNumbers: 'off',\n          renderLineHighlight: 'none',\n          scrollbar: {\n            vertical: 'hidden',\n            horizontal: 'hidden',\n          },\n          suggestFontSize: 12,\n          wordWrap: 'on',\n          padding: {\n            top: 6,\n          },\n        }}\n        language={language.id}\n        value={query}\n        onBlur={(value) => {\n          if (value !== query) {\n            onChange(value);\n            onRunQuery();\n          }\n        }}\n        onBeforeEditorMount={(monaco: Monaco) =>\n          registerLanguage(monaco, language, datasource.metricMathCompletionItemProvider)\n        }\n        onEditorDidMount={onEditorMount}\n      />\n    </div>\n  );\n}\n","import { LanguageDefinition } from '../monarch/register';\n\nconst cloudWatchSqlLanguageDefinition: LanguageDefinition = {\n  id: 'cloudwatch-sql',\n  extensions: ['.cloudwatchSql'],\n  aliases: ['CloudWatch', 'cloudwatch', 'CloudWatchSQL'],\n  mimetypes: [],\n  loader: () => import('./language'),\n};\nexport default cloudWatchSqlLanguageDefinition;\n","import type * as monacoType from 'monaco-editor/esm/vs/editor/editor.api';\nimport React, { FunctionComponent, useCallback, useEffect } from 'react';\n\nimport { CodeEditor, Monaco } from '@grafana/ui';\n\nimport language from '../cloudwatch-sql/definition';\nimport { CloudWatchDatasource } from '../datasource';\nimport { TRIGGER_SUGGEST } from '../monarch/commands';\nimport { registerLanguage } from '../monarch/register';\n\nexport interface Props {\n  region: string;\n  sql: string;\n  onChange: (sql: string) => void;\n  onRunQuery: () => void;\n  datasource: CloudWatchDatasource;\n}\n\nexport const SQLCodeEditor: FunctionComponent<Props> = ({ region, sql, onChange, onRunQuery, datasource }) => {\n  useEffect(() => {\n    datasource.sqlCompletionItemProvider.setRegion(region);\n  }, [region, datasource]);\n\n  const onEditorMount = useCallback(\n    (editor: monacoType.editor.IStandaloneCodeEditor, monaco: Monaco) => {\n      editor.onDidFocusEditorText(() => editor.trigger(TRIGGER_SUGGEST.id, TRIGGER_SUGGEST.id, {}));\n      editor.addCommand(monaco.KeyMod.Shift | monaco.KeyCode.Enter, () => {\n        const text = editor.getValue();\n        onChange(text);\n        onRunQuery();\n      });\n    },\n    [onChange, onRunQuery]\n  );\n\n  return (\n    <CodeEditor\n      height={'150px'}\n      language={language.id}\n      value={sql}\n      onBlur={(value) => {\n        if (value !== sql) {\n          onChange(value);\n        }\n      }}\n      showMiniMap={false}\n      showLineNumbers={true}\n      onBeforeEditorMount={(monaco: Monaco) => registerLanguage(monaco, language, datasource.sqlCompletionItemProvider)}\n      onEditorDidMount={onEditorMount}\n    />\n  );\n};\n","import { monacoTypes } from '@grafana/ui';\n\nimport { TokenTypes } from './types';\n\nexport class LinkedToken {\n  constructor(\n    public type: string,\n    public value: string,\n    public range: monacoTypes.IRange,\n    public previous: LinkedToken | null,\n    public next: LinkedToken | null,\n    public tokenTypes: TokenTypes\n  ) {}\n\n  isKeyword(): boolean {\n    return this.type === this.tokenTypes.Keyword;\n  }\n\n  isWhiteSpace(): boolean {\n    return this.type === this.tokenTypes.Whitespace;\n  }\n\n  isParenthesis(): boolean {\n    return this.type === this.tokenTypes.Parenthesis;\n  }\n\n  isIdentifier(): boolean {\n    return this.type === this.tokenTypes.Identifier;\n  }\n\n  isString(): boolean {\n    return this.type === this.tokenTypes.String;\n  }\n\n  isDoubleQuotedString(): boolean {\n    return this.type === this.tokenTypes.Type;\n  }\n\n  isVariable(): boolean {\n    return this.type === this.tokenTypes.Variable;\n  }\n\n  isFunction(): boolean {\n    return this.type === this.tokenTypes.Function;\n  }\n\n  isNumber(): boolean {\n    return this.type === this.tokenTypes.Number;\n  }\n\n  is(type: string, value?: string | number | boolean): boolean {\n    const isType = this.type === type;\n    return value !== undefined ? isType && this.value === value : isType;\n  }\n\n  endsWith(value: string | number | boolean): boolean {\n    return this.value === value || this.value[this.value.length - 1] === value;\n  }\n\n  getPreviousNonWhiteSpaceToken(): LinkedToken | null {\n    let curr = this.previous;\n    while (curr != null) {\n      if (!curr.isWhiteSpace()) {\n        return curr;\n      }\n      curr = curr.previous;\n    }\n    return null;\n  }\n\n  getPreviousOfType(type: string, value?: string): LinkedToken | null {\n    let curr = this.previous;\n    while (curr != null) {\n      const isType = curr.type === type;\n      if (value !== undefined ? isType && curr.value === value : isType) {\n        return curr;\n      }\n      curr = curr.previous;\n    }\n    return null;\n  }\n\n  getPreviousUntil(type: string, ignoreTypes: string[], value?: string): LinkedToken[] | null {\n    let tokens: LinkedToken[] = [];\n    let curr = this.previous;\n    while (curr != null) {\n      if (ignoreTypes.some((t) => t === curr?.type)) {\n        curr = curr.previous;\n        continue;\n      }\n\n      const isType = curr.type === type;\n      if (value !== undefined ? isType && curr.value === value : isType) {\n        return tokens;\n      }\n      if (!curr.isWhiteSpace()) {\n        tokens.push(curr);\n      }\n      curr = curr.previous;\n    }\n\n    return tokens;\n  }\n\n  getNextUntil(type: string, ignoreTypes: string[], value?: string): LinkedToken[] | null {\n    let tokens: LinkedToken[] = [];\n    let curr = this.next;\n    while (curr != null) {\n      if (ignoreTypes.some((t) => t === curr?.type)) {\n        curr = curr.next;\n        continue;\n      }\n\n      const isType = curr.type === type;\n      if (value !== undefined ? isType && curr.value === value : isType) {\n        return tokens;\n      }\n      if (!curr.isWhiteSpace()) {\n        tokens.push(curr);\n      }\n      curr = curr.next;\n    }\n\n    return tokens;\n  }\n\n  getPreviousKeyword(): LinkedToken | null {\n    let curr = this.previous;\n    while (curr != null) {\n      if (curr.isKeyword()) {\n        return curr;\n      }\n      curr = curr.previous;\n    }\n    return null;\n  }\n\n  getNextNonWhiteSpaceToken(): LinkedToken | null {\n    let curr = this.next;\n    while (curr != null) {\n      if (!curr.isWhiteSpace()) {\n        return curr;\n      }\n      curr = curr.next;\n    }\n    return null;\n  }\n\n  getNextOfType(type: string, value?: string): LinkedToken | null {\n    let curr = this.next;\n    while (curr != null) {\n      const isType = curr.type === type;\n      if (value !== undefined ? isType && curr.value === value : isType) {\n        return curr;\n      }\n      curr = curr.next;\n    }\n    return null;\n  }\n}\n","import type { monacoTypes } from '@grafana/ui';\n\nimport { LinkedToken } from './LinkedToken';\nimport { LanguageDefinition } from './register';\nimport { Monaco, TokenTypes } from './types';\n\nexport function linkedTokenBuilder(\n  monaco: Monaco,\n  language: LanguageDefinition,\n  model: monacoTypes.editor.ITextModel,\n  position: monacoTypes.IPosition,\n  tokenTypes: TokenTypes\n) {\n  let current: LinkedToken | null = null;\n  let previous: LinkedToken | null = null;\n  const tokensPerLine = monaco.editor.tokenize(model.getValue() ?? '', language.id);\n\n  for (let lineIndex = 0; lineIndex < tokensPerLine.length; lineIndex++) {\n    const tokens = tokensPerLine[lineIndex];\n    // In case position is first column in new line, add empty whitespace token so that links are not broken\n    if (!tokens.length && previous) {\n      const token: monacoTypes.Token = {\n        offset: 0,\n        type: tokenTypes.Whitespace,\n        language: language.id,\n        _tokenBrand: undefined,\n      };\n      tokens.push(token);\n    }\n\n    for (let columnIndex = 0; columnIndex < tokens.length; columnIndex++) {\n      const token = tokens[columnIndex];\n      let endColumn =\n        tokens.length > columnIndex + 1 ? tokens[columnIndex + 1].offset + 1 : model.getLineLength(lineIndex + 1) + 1;\n\n      const range: monacoTypes.IRange = {\n        startLineNumber: lineIndex + 1,\n        startColumn: token.offset === 0 ? 0 : token.offset + 1,\n        endLineNumber: lineIndex + 1,\n        endColumn,\n      };\n\n      const value = model.getValueInRange(range);\n      const newToken: LinkedToken = new LinkedToken(token.type, value, range, previous, null, tokenTypes);\n\n      if (monaco.Range.containsPosition(range, position)) {\n        current = newToken;\n      }\n\n      if (previous) {\n        previous.next = newToken;\n      }\n      previous = newToken;\n    }\n  }\n\n  return current;\n}\n","import { monacoTypes } from '@grafana/ui';\n\nimport { LanguageDefinition } from './register';\n\nexport interface TokenTypes {\n  Parenthesis: string;\n  Whitespace: string;\n  Keyword: string;\n  Delimiter: string;\n  Operator: string;\n  Identifier: string;\n  Type: string;\n  Function: string;\n  Number: string;\n  String: string;\n  Variable: string;\n}\n\nexport enum StatementPosition {\n  Unknown,\n  // sql\n  SelectKeyword,\n  AfterSelectKeyword,\n  AfterSelectFuncFirstArgument,\n  AfterFromKeyword,\n  SchemaFuncFirstArgument,\n  SchemaFuncExtraArgument,\n  FromKeyword,\n  AfterFrom,\n  WhereKey,\n  WhereComparisonOperator,\n  WhereValue,\n  AfterWhereValue,\n  AfterGroupByKeywords,\n  AfterGroupBy,\n  AfterOrderByKeywords,\n  AfterOrderByFunction,\n  AfterOrderByDirection,\n  // metric math\n  PredefinedFunction,\n  SearchFuncSecondArg,\n  SearchFuncThirdArg,\n  PredefinedFuncSecondArg,\n  AfterFunction,\n  WithinString,\n}\n\nexport enum SuggestionKind {\n  SelectKeyword,\n  FunctionsWithArguments,\n  Metrics,\n  FromKeyword,\n  SchemaKeyword,\n  Namespaces,\n  LabelKeys,\n  WhereKeyword,\n  GroupByKeywords,\n  OrderByKeywords,\n  FunctionsWithoutArguments,\n  LimitKeyword,\n  SortOrderDirectionKeyword,\n  ComparisonOperators,\n  LabelValues,\n  LogicalOperators,\n\n  // metricmath,\n  KeywordArguments,\n  Operators,\n  Statistic,\n  Period,\n}\n\nexport enum CompletionItemPriority {\n  High = 'a',\n  MediumHigh = 'd',\n  Medium = 'g',\n  MediumLow = 'k',\n  Low = 'q',\n}\n\nexport interface Editor {\n  tokenize: (value: string, languageId: string) => monacoTypes.Token[][];\n}\n\nexport interface Range {\n  containsPosition: (range: monacoTypes.IRange, position: monacoTypes.IPosition) => boolean;\n  fromPositions: (start: monacoTypes.IPosition, end?: monacoTypes.IPosition) => monacoTypes.Range;\n}\n\nexport interface Languages {\n  CompletionItemInsertTextRule: {\n    InsertAsSnippet: 4;\n  };\n  CompletionItemKind: {\n    Function: 1;\n  };\n}\nexport interface Monaco {\n  editor: Editor;\n  Range: Range;\n  languages: Languages;\n}\n\nexport interface Completeable {\n  getCompletionProvider(\n    monaco: Monaco,\n    languageDefinition: LanguageDefinition\n  ): monacoTypes.languages.CompletionItemProvider;\n}\n","import { LanguageDefinition } from '../monarch/register';\n\nconst cloudWatchDynamicLabelsLanguageDefinition: LanguageDefinition = {\n  id: 'cloudwatch-dynamicLabels',\n  extensions: [],\n  aliases: [],\n  mimetypes: [],\n  loader: () => import('./language'),\n};\nexport default cloudWatchDynamicLabelsLanguageDefinition;\n","import { css, cx } from '@emotion/css';\nimport type * as monacoType from 'monaco-editor/esm/vs/editor/editor.api';\nimport React, { useCallback, useRef } from 'react';\n\nimport { CodeEditor, getInputStyles, Monaco, useTheme2 } from '@grafana/ui';\n\nimport { DynamicLabelsCompletionItemProvider } from '../dynamic-labels/CompletionItemProvider';\nimport language from '../dynamic-labels/definition';\nimport { TRIGGER_SUGGEST } from '../monarch/commands';\nimport { registerLanguage } from '../monarch/register';\n\nconst dynamicLabelsCompletionItemProvider = new DynamicLabelsCompletionItemProvider();\n\nexport interface Props {\n  onChange: (query: string) => void;\n  onRunQuery: () => void;\n  label: string;\n  width: number;\n}\n\nexport function DynamicLabelsField({ label, width, onChange, onRunQuery }: Props) {\n  const theme = useTheme2();\n  const styles = getInputStyles({ theme, width });\n  const containerRef = useRef<HTMLDivElement>(null);\n  const onEditorMount = useCallback(\n    (editor: monacoType.editor.IStandaloneCodeEditor, monaco: Monaco) => {\n      editor.onDidFocusEditorText(() => editor.trigger(TRIGGER_SUGGEST.id, TRIGGER_SUGGEST.id, {}));\n      editor.addCommand(monaco.KeyMod.Shift | monaco.KeyCode.Enter, () => {\n        const text = editor.getValue();\n        onChange(text);\n        onRunQuery();\n      });\n\n      const containerDiv = containerRef.current;\n      containerDiv !== null && editor.layout({ width: containerDiv.clientWidth, height: containerDiv.clientHeight });\n    },\n    [onChange, onRunQuery]\n  );\n\n  return (\n    <div ref={containerRef} className={cx(styles.wrapper)}>\n      <CodeEditor\n        containerStyles={css`\n          border: 1px solid ${theme.colors.action.disabledBackground};\n          &:hover {\n            border-color: ${theme.components.input.borderColor};\n          }\n        `}\n        monacoOptions={{\n          // without this setting, the auto-resize functionality causes an infinite loop, don't remove it!\n          scrollBeyondLastLine: false,\n\n          // These additional options are style focused and are a subset of those in the query editor in Prometheus\n          fontSize: 14,\n          lineNumbers: 'off',\n          renderLineHighlight: 'none',\n          overviewRulerLanes: 0,\n          scrollbar: {\n            vertical: 'hidden',\n            horizontal: 'hidden',\n          },\n          suggestFontSize: 12,\n          padding: {\n            top: 6,\n          },\n        }}\n        language={language.id}\n        value={label}\n        onBlur={(value) => {\n          if (value !== label) {\n            onChange(value);\n            onRunQuery();\n          }\n        }}\n        onBeforeEditorMount={(monaco: Monaco) =>\n          registerLanguage(monaco, language, dynamicLabelsCompletionItemProvider)\n        }\n        onEditorDidMount={onEditorMount}\n      />\n    </div>\n  );\n}\n","import type { Monaco, monacoTypes } from '@grafana/ui';\n\nimport { linkedTokenBuilder } from '../monarch/linkedTokenBuilder';\nimport { LanguageDefinition } from '../monarch/register';\nimport { Completeable, CompletionItemPriority, TokenTypes } from '../monarch/types';\n\nimport { DYNAMIC_LABEL_PATTERNS } from './language';\n\ntype CompletionItem = monacoTypes.languages.CompletionItem;\n\nexport class DynamicLabelsCompletionItemProvider implements Completeable {\n  tokenTypes: TokenTypes;\n\n  constructor() {\n    this.tokenTypes = {\n      Parenthesis: 'delimiter.parenthesis.cloudwatch-dynamicLabels',\n      Whitespace: 'white.cloudwatch-dynamicLabels',\n      Keyword: 'keyword.cloudwatch-dynamicLabels',\n      Delimiter: 'delimiter.cloudwatch-dynamicLabels',\n      Operator: 'operator.cloudwatch-dynamicLabels',\n      Identifier: 'identifier.cloudwatch-dynamicLabels',\n      Type: 'type.cloudwatch-dynamicLabels',\n      Function: 'predefined.cloudwatch-dynamicLabels',\n      Number: 'number.cloudwatch-dynamicLabels',\n      String: 'string.cloudwatch-dynamicLabels',\n      Variable: 'variable.cloudwatch-dynamicLabels',\n    };\n  }\n\n  // called by registerLanguage and passed to monaco with registerCompletionItemProvider\n  // returns an object that implements https://microsoft.github.io/monaco-editor/api/interfaces/monaco.languages.CompletionItemProvider.html\n  getCompletionProvider(monaco: Monaco, languageDefinition: LanguageDefinition) {\n    return {\n      triggerCharacters: [' ', '$', ',', '(', \"'\"], // one of these characters indicates that it is time to look for a suggestion\n      provideCompletionItems: async (model: monacoTypes.editor.ITextModel, position: monacoTypes.IPosition) => {\n        const currentToken = linkedTokenBuilder(monaco, languageDefinition, model, position, this.tokenTypes);\n        const invalidRangeToken = currentToken?.isWhiteSpace() || currentToken?.isParenthesis();\n        const range =\n          invalidRangeToken || !currentToken?.range ? monaco.Range.fromPositions(position) : currentToken?.range;\n        const toCompletionItem = (value: string, rest: Partial<CompletionItem> = {}) => {\n          const item: CompletionItem = {\n            label: value,\n            insertText: value,\n            kind: monaco.languages.CompletionItemKind.Field,\n            range,\n            sortText: CompletionItemPriority.Medium,\n            ...rest,\n          };\n          return item;\n        };\n        let suggestions: CompletionItem[] = [];\n        const next = currentToken?.next;\n        if (!currentToken?.isFunction() && (!next || next.isWhiteSpace())) {\n          suggestions = DYNAMIC_LABEL_PATTERNS.map((val) => toCompletionItem(val));\n          // always insert suggestion for dimension value and allow user to complete pattern by providing the dimension name\n          suggestions.push(\n            toCompletionItem(\"${PROP('Dim.')}\", {\n              sortText: CompletionItemPriority.High,\n              insertText: `\\${PROP('Dim.$0')} `,\n              insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n            })\n          );\n        }\n\n        return {\n          suggestions,\n        };\n      },\n    };\n  }\n}\n","import { debounce } from 'lodash';\nimport React, { FunctionComponent, useState } from 'react';\n\nimport { Input } from '@grafana/ui';\n\nexport interface Props {\n  onChange: (alias: any) => void;\n  value: string;\n  id?: string;\n}\n\nexport const Alias: FunctionComponent<Props> = ({ value = '', onChange, id }) => {\n  const [alias, setAlias] = useState(value);\n\n  const propagateOnChange = debounce(onChange, 1500);\n\n  onChange = (e: any) => {\n    setAlias(e.target.value);\n    propagateOnChange(e.target.value);\n  };\n\n  return <Input id={id} type=\"text\" value={alias} onChange={onChange} aria-label=\"Optional alias\" />;\n};\n","import { config } from '@grafana/runtime';\n\nimport { CloudWatchMetricsQuery } from '../types';\n\n// Call this function to migrate queries from within the plugin.\nexport function migrateMetricQuery(query: CloudWatchMetricsQuery): CloudWatchMetricsQuery {\n  //add metric query migrations here\n  const migratedQuery = migrateAliasPatterns(query);\n  return migratedQuery;\n}\n\nconst aliasPatterns: Record<string, string> = {\n  metric: `PROP('MetricName')`,\n  namespace: `PROP('Namespace')`,\n  period: `PROP('Period')`,\n  region: `PROP('Region')`,\n  stat: `PROP('Stat')`,\n  label: `LABEL`,\n};\n\nexport function migrateAliasPatterns(query: CloudWatchMetricsQuery): CloudWatchMetricsQuery {\n  if (config.featureToggles.cloudWatchDynamicLabels && !query.hasOwnProperty('label')) {\n    const regex = /{{\\s*(.+?)\\s*}}/g;\n    query.label =\n      query.alias?.replace(regex, (_, value) => {\n        if (aliasPatterns.hasOwnProperty(value)) {\n          return `\\${${aliasPatterns[value]}}`;\n        }\n\n        return `\\${PROP('Dim.${value}')}`;\n      }) ?? '';\n  }\n\n  return query;\n}\n","import deepEqual from 'fast-deep-equal';\nimport { useEffect, useMemo } from 'react';\n\nimport { migrateMetricQuery } from '../../migrations/metricQueryMigrations';\nimport { CloudWatchMetricsQuery, MetricEditorMode, MetricQueryType } from '../../types';\n\nexport const DEFAULT_QUERY: Omit<CloudWatchMetricsQuery, 'refId'> = {\n  queryMode: 'Metrics',\n  namespace: '',\n  metricName: '',\n  expression: '',\n  dimensions: {},\n  region: 'default',\n  id: '',\n  statistic: 'Average',\n  period: '',\n  metricQueryType: MetricQueryType.Search,\n  metricEditorMode: MetricEditorMode.Builder,\n  sqlExpression: '',\n  matchExact: true,\n};\n\nconst prepareQuery = (query: CloudWatchMetricsQuery) => {\n  const withDefaults = { ...DEFAULT_QUERY, ...query };\n  const migratedQuery = migrateMetricQuery(withDefaults);\n\n  // If we didn't make any changes to the object, then return the original object to keep the\n  // identity the same, and not trigger any other useEffects or anything.\n  return deepEqual(migratedQuery, query) ? query : migratedQuery;\n};\n\n/**\n * Returns queries with some defaults + migrations, and calls onChange function to notify if it changes\n */\nconst usePreparedMetricsQuery = (\n  query: CloudWatchMetricsQuery,\n  onChangeQuery: (newQuery: CloudWatchMetricsQuery) => void\n) => {\n  const preparedQuery = useMemo(() => prepareQuery(query), [query]);\n\n  useEffect(() => {\n    if (preparedQuery !== query) {\n      onChangeQuery(preparedQuery);\n    }\n  }, [preparedQuery, query, onChangeQuery]);\n\n  return preparedQuery;\n};\n\nexport default usePreparedMetricsQuery;\n","import React, { ChangeEvent, useState } from 'react';\n\nimport { QueryEditorProps } from '@grafana/data';\nimport { EditorField, EditorRow, Space } from '@grafana/experimental';\nimport { config } from '@grafana/runtime';\nimport { Input } from '@grafana/ui';\n\nimport { MathExpressionQueryField, MetricStatEditor, SQLBuilderEditor, SQLCodeEditor } from '../';\nimport { CloudWatchDatasource } from '../../datasource';\nimport { isCloudWatchMetricsQuery } from '../../guards';\nimport {\n  CloudWatchJsonData,\n  CloudWatchMetricsQuery,\n  CloudWatchQuery,\n  MetricEditorMode,\n  MetricQueryType,\n  MetricStat,\n} from '../../types';\nimport { DynamicLabelsField } from '../DynamicLabelsField';\nimport QueryHeader from '../QueryHeader';\n\nimport { Alias } from './Alias';\nimport usePreparedMetricsQuery from './usePreparedMetricsQuery';\n\nexport interface Props extends QueryEditorProps<CloudWatchDatasource, CloudWatchQuery, CloudWatchJsonData> {\n  query: CloudWatchMetricsQuery;\n}\n\nexport const MetricsQueryEditor = (props: Props) => {\n  const { query, onRunQuery, datasource } = props;\n  const [sqlCodeEditorIsDirty, setSQLCodeEditorIsDirty] = useState(false);\n  const preparedQuery = usePreparedMetricsQuery(query, props.onChange);\n\n  const onChange = (query: CloudWatchQuery) => {\n    const { onChange, onRunQuery } = props;\n    onChange(query);\n    onRunQuery();\n  };\n\n  return (\n    <>\n      <QueryHeader\n        query={query}\n        onRunQuery={onRunQuery}\n        datasource={datasource}\n        onChange={(newQuery) => {\n          if (isCloudWatchMetricsQuery(newQuery) && newQuery.metricEditorMode !== query.metricEditorMode) {\n            setSQLCodeEditorIsDirty(false);\n          }\n          onChange(newQuery);\n        }}\n        sqlCodeEditorIsDirty={sqlCodeEditorIsDirty}\n      />\n      <Space v={0.5} />\n\n      {query.metricQueryType === MetricQueryType.Search && (\n        <>\n          {query.metricEditorMode === MetricEditorMode.Builder && (\n            <MetricStatEditor\n              {...props}\n              refId={query.refId}\n              metricStat={query}\n              onChange={(metricStat: MetricStat) => props.onChange({ ...query, ...metricStat })}\n            ></MetricStatEditor>\n          )}\n          {query.metricEditorMode === MetricEditorMode.Code && (\n            <MathExpressionQueryField\n              onRunQuery={onRunQuery}\n              expression={query.expression ?? ''}\n              onChange={(expression) => props.onChange({ ...query, expression })}\n              datasource={datasource}\n            ></MathExpressionQueryField>\n          )}\n        </>\n      )}\n      {query.metricQueryType === MetricQueryType.Query && (\n        <>\n          {query.metricEditorMode === MetricEditorMode.Code && (\n            <SQLCodeEditor\n              region={query.region}\n              sql={query.sqlExpression ?? ''}\n              onChange={(sqlExpression) => {\n                if (!sqlCodeEditorIsDirty) {\n                  setSQLCodeEditorIsDirty(true);\n                }\n                props.onChange({ ...preparedQuery, sqlExpression });\n              }}\n              onRunQuery={onRunQuery}\n              datasource={datasource}\n            />\n          )}\n\n          {query.metricEditorMode === MetricEditorMode.Builder && (\n            <>\n              <SQLBuilderEditor\n                query={query}\n                onChange={props.onChange}\n                onRunQuery={onRunQuery}\n                datasource={datasource}\n              ></SQLBuilderEditor>\n            </>\n          )}\n        </>\n      )}\n      <Space v={0.5} />\n      <EditorRow>\n        <EditorField\n          label=\"ID\"\n          width={26}\n          optional\n          tooltip=\"ID can be used to reference other queries in math expressions. The ID can include numbers, letters, and underscore, and must start with a lowercase letter.\"\n          invalid={!!query.id && !/^$|^[a-z][a-zA-Z0-9_]*$/.test(query.id)}\n        >\n          <Input\n            id={`${query.refId}-cloudwatch-metric-query-editor-id`}\n            onBlur={onRunQuery}\n            onChange={(event: ChangeEvent<HTMLInputElement>) => onChange({ ...preparedQuery, id: event.target.value })}\n            type=\"text\"\n            value={query.id}\n          />\n        </EditorField>\n\n        <EditorField label=\"Period\" width={26} tooltip=\"Minimum interval between points in seconds.\">\n          <Input\n            id={`${query.refId}-cloudwatch-metric-query-editor-period`}\n            value={query.period || ''}\n            placeholder=\"auto\"\n            onBlur={onRunQuery}\n            onChange={(event: ChangeEvent<HTMLInputElement>) =>\n              onChange({ ...preparedQuery, period: event.target.value })\n            }\n          />\n        </EditorField>\n\n        {config.featureToggles.cloudWatchDynamicLabels ? (\n          <EditorField\n            label=\"Label\"\n            width={26}\n            optional\n            tooltip=\"Change time series legend name using Dynamic labels. See documentation for details.\"\n          >\n            <DynamicLabelsField\n              width={52}\n              onRunQuery={onRunQuery}\n              label={preparedQuery.label ?? ''}\n              onChange={(label) => props.onChange({ ...query, label })}\n            ></DynamicLabelsField>\n          </EditorField>\n        ) : (\n          <EditorField\n            label=\"Alias\"\n            width={26}\n            optional\n            tooltip=\"Change time series legend name using this field. See documentation for replacement variable formats.\"\n          >\n            <Alias\n              id={`${query.refId}-cloudwatch-metric-query-editor-alias`}\n              value={preparedQuery.alias ?? ''}\n              onChange={(value: string) => onChange({ ...preparedQuery, alias: value })}\n            />\n          </EditorField>\n        )}\n      </EditorRow>\n    </>\n  );\n};\n","import React, { PureComponent } from 'react';\n\nimport { QueryEditorProps } from '@grafana/data';\n\nimport { CloudWatchDatasource } from '../datasource';\nimport { isCloudWatchLogsQuery, isCloudWatchMetricsQuery } from '../guards';\nimport { CloudWatchJsonData, CloudWatchQuery } from '../types';\n\nimport { MetricsQueryEditor } from '././MetricsQueryEditor/MetricsQueryEditor';\nimport LogsQueryEditor from './LogsQueryEditor';\n\nexport type Props = QueryEditorProps<CloudWatchDatasource, CloudWatchQuery, CloudWatchJsonData>;\n\nexport class PanelQueryEditor extends PureComponent<Props> {\n  render() {\n    const { query } = this.props;\n\n    return (\n      <>\n        {isCloudWatchMetricsQuery(query) && <MetricsQueryEditor {...this.props} query={query} />}\n        {isCloudWatchLogsQuery(query) && <LogsQueryEditor {...this.props} query={query} />}\n      </>\n    );\n  }\n}\n","import React, { ChangeEvent } from 'react';\n\nimport { QueryEditorProps } from '@grafana/data';\nimport { EditorField, EditorHeader, EditorRow, EditorSwitch, InlineSelect, Space } from '@grafana/experimental';\nimport { Alert, Input } from '@grafana/ui';\n\nimport { CloudWatchDatasource } from '../datasource';\nimport { isCloudWatchAnnotationQuery } from '../guards';\nimport { useRegions } from '../hooks';\nimport { CloudWatchJsonData, CloudWatchQuery, MetricStat } from '../types';\n\nimport { MetricStatEditor } from './MetricStatEditor';\n\nexport type Props = QueryEditorProps<CloudWatchDatasource, CloudWatchQuery, CloudWatchJsonData>;\n\nexport const AnnotationQueryEditor = (props: Props) => {\n  const { query, onChange, datasource } = props;\n  const [regions, regionIsLoading] = useRegions(datasource);\n\n  if (!isCloudWatchAnnotationQuery(query)) {\n    return (\n      <Alert severity=\"error\" title=\"Invalid annotation query\" topSpacing={2}>\n        {JSON.stringify(query, null, 4)}\n      </Alert>\n    );\n  }\n\n  return (\n    <>\n      <EditorHeader>\n        <InlineSelect\n          label=\"Region\"\n          value={regions.find((v) => v.value === query.region)}\n          placeholder=\"Select region\"\n          allowCustomValue\n          onChange={({ value: region }) => region && onChange({ ...query, region })}\n          options={regions}\n          isLoading={regionIsLoading}\n        />\n      </EditorHeader>\n      <Space v={0.5} />\n      <MetricStatEditor\n        {...props}\n        refId={query.refId}\n        metricStat={query}\n        disableExpressions={true}\n        onChange={(metricStat: MetricStat) => onChange({ ...query, ...metricStat })}\n        onRunQuery={() => {}}\n      ></MetricStatEditor>\n      <Space v={0.5} />\n      <EditorRow>\n        <EditorField label=\"Period\" width={26} tooltip=\"Minimum interval between points in seconds.\">\n          <Input\n            value={query.period || ''}\n            placeholder=\"auto\"\n            onChange={(event: ChangeEvent<HTMLInputElement>) => onChange({ ...query, period: event.target.value })}\n          />\n        </EditorField>\n        <EditorField label=\"Enable Prefix Matching\" optional={true}>\n          <EditorSwitch\n            value={query.prefixMatching}\n            onChange={(e) => {\n              onChange({\n                ...query,\n                prefixMatching: e.currentTarget.checked,\n              });\n            }}\n          />\n        </EditorField>\n        <EditorField label=\"Action\" optional={true} disabled={!query.prefixMatching}>\n          <Input\n            value={query.actionPrefix || ''}\n            onChange={(event: ChangeEvent<HTMLInputElement>) =>\n              onChange({ ...query, actionPrefix: event.target.value })\n            }\n          />\n        </EditorField>\n        <EditorField label=\"Alarm Name\" optional={true} disabled={!query.prefixMatching}>\n          <Input\n            value={query.alarmNamePrefix || ''}\n            onChange={(event: ChangeEvent<HTMLInputElement>) =>\n              onChange({ ...query, alarmNamePrefix: event.target.value })\n            }\n          />\n        </EditorField>\n      </EditorRow>\n    </>\n  );\n};\n","import { AnnotationQuery } from '@grafana/data';\n\nimport { AnnotationQueryEditor } from './components/AnnotationQueryEditor';\nimport { isCloudWatchAnnotation } from './guards';\nimport { CloudWatchAnnotationQuery, CloudWatchQuery, LegacyAnnotationQuery } from './types';\n\nexport const CloudWatchAnnotationSupport = {\n  // converts legacy angular style queries to new format. Also sets the same default values as in the deprecated angular directive\n  prepareAnnotation: (\n    query: LegacyAnnotationQuery | AnnotationQuery<CloudWatchAnnotationQuery>\n  ): AnnotationQuery<CloudWatchAnnotationQuery> => {\n    if (isCloudWatchAnnotation(query)) {\n      return query;\n    }\n\n    return {\n      // setting AnnotationQuery props explicitly since spreading would incorrectly use props that should be on the target only\n      datasource: query.datasource,\n      enable: query.enable,\n      iconColor: query.iconColor,\n      name: query.name,\n      builtIn: query.builtIn,\n      hide: query.hide,\n      target: {\n        ...query.target,\n        ...query,\n        statistic: query.statistic || 'Average',\n        region: query.region || 'default',\n        queryMode: 'Annotations',\n        refId: query.refId || 'annotationQuery',\n      },\n    };\n  },\n  // return undefined if query is not complete so that annotation query execution is quietly skipped\n  prepareQuery: (anno: AnnotationQuery<CloudWatchAnnotationQuery>): CloudWatchQuery | undefined => {\n    if (!anno.target) {\n      return undefined;\n    }\n\n    const {\n      prefixMatching,\n      actionPrefix,\n      alarmNamePrefix,\n      statistic,\n      namespace,\n      metricName,\n      dimensions = {},\n    } = anno.target;\n    const validPrefixMatchingQuery = !!prefixMatching && !!actionPrefix && !!alarmNamePrefix;\n    const validMetricStatQuery =\n      !prefixMatching && !!namespace && !!metricName && !!statistic && !!Object.values(dimensions).length;\n\n    if (validPrefixMatchingQuery || validMetricStatQuery) {\n      return anno.target;\n    }\n\n    return undefined;\n  },\n  QueryEditor: AnnotationQueryEditor,\n};\n","import { debounce, memoize } from 'lodash';\n\nexport default (func: (...args: any[]) => void, wait = 7000) => {\n  const mem = memoize(\n    (...args) =>\n      debounce(func, wait, {\n        leading: true,\n      }),\n    (...args) => JSON.stringify(args)\n  );\n\n  return (...args: any[]) => mem(...args)(...args);\n};\n","import { Observable, map } from 'rxjs';\n\nimport { DataSourceInstanceSettings, DataSourceRef, getDataSourceRef, ScopedVars } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { notifyApp } from 'app/core/actions';\nimport { createErrorNotification } from 'app/core/copy/appNotification';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\nimport { store } from 'app/store/store';\nimport { AppNotificationTimeout } from 'app/types';\n\nimport memoizedDebounce from '../memoizedDebounce';\nimport { CloudWatchJsonData, Dimensions, MetricRequest, MultiFilters, TSDBResponse } from '../types';\n\nexport abstract class CloudWatchRequest {\n  templateSrv: TemplateSrv;\n  ref: DataSourceRef;\n  dsQueryEndpoint = '/api/ds/query';\n  debouncedCustomAlert: (title: string, message: string) => void = memoizedDebounce(\n    displayCustomError,\n    AppNotificationTimeout.Error\n  );\n\n  constructor(public instanceSettings: DataSourceInstanceSettings<CloudWatchJsonData>, templateSrv: TemplateSrv) {\n    this.templateSrv = templateSrv;\n    this.ref = getDataSourceRef(instanceSettings);\n  }\n\n  awsRequest(url: string, data: MetricRequest, headers: Record<string, string> = {}): Observable<TSDBResponse> {\n    const options = {\n      method: 'POST',\n      url,\n      data,\n      headers,\n    };\n\n    return getBackendSrv()\n      .fetch<TSDBResponse>(options)\n      .pipe(map((result) => result.data));\n  }\n\n  convertDimensionFormat(dimensions: Dimensions, scopedVars: ScopedVars): Dimensions {\n    return Object.entries(dimensions).reduce((result, [key, value]) => {\n      key = this.replaceVariableAndDisplayWarningIfMulti(key, scopedVars, true, 'dimension keys');\n\n      if (Array.isArray(value)) {\n        return { ...result, [key]: value };\n      }\n\n      if (!value) {\n        return { ...result, [key]: null };\n      }\n\n      const newValues = this.expandVariableToArray(value, scopedVars);\n      return { ...result, [key]: newValues };\n    }, {});\n  }\n\n  // get the value for a given template variable\n  expandVariableToArray(value: string, scopedVars: ScopedVars): string[] {\n    const variableName = this.templateSrv.getVariableName(value);\n    const valueVar = this.templateSrv.getVariables().find(({ name }) => {\n      return name === variableName;\n    });\n\n    if (variableName && valueVar) {\n      const isMultiVariable =\n        valueVar?.type === 'custom' || valueVar?.type === 'query' || valueVar?.type === 'datasource';\n      if (isMultiVariable && valueVar.multi) {\n        return this.templateSrv.replace(value, scopedVars, 'pipe').split('|');\n      }\n      return [this.templateSrv.replace(value, scopedVars)];\n    }\n    return [value];\n  }\n\n  convertMultiFilterFormat(multiFilters: MultiFilters, fieldName?: string) {\n    return Object.entries(multiFilters).reduce((result, [key, values]) => {\n      const interpolatedKey = this.replaceVariableAndDisplayWarningIfMulti(key, {}, true, fieldName);\n      if (!values) {\n        return { ...result, [interpolatedKey]: null };\n      }\n      const initialVal: string[] = [];\n      const newValues = values.reduce((result, value) => {\n        const vals = this.expandVariableToArray(value, {});\n        return [...result, ...vals];\n      }, initialVal);\n      return { ...result, [interpolatedKey]: newValues };\n    }, {});\n  }\n\n  replaceVariableAndDisplayWarningIfMulti(\n    target?: string,\n    scopedVars?: ScopedVars,\n    displayErrorIfIsMultiTemplateVariable?: boolean,\n    fieldName?: string\n  ) {\n    if (displayErrorIfIsMultiTemplateVariable && !!target) {\n      const variables = this.templateSrv.getVariables();\n      const variable = variables.find(({ name }) => name === this.templateSrv.getVariableName(target));\n      const isMultiVariable =\n        variable?.type === 'custom' || variable?.type === 'query' || variable?.type === 'datasource';\n      if (isMultiVariable && variable.multi) {\n        this.debouncedCustomAlert(\n          'CloudWatch templating error',\n          `Multi template variables are not supported for ${fieldName || target}`\n        );\n      }\n    }\n\n    return this.templateSrv.replace(target, scopedVars);\n  }\n\n  getActualRegion(region?: string) {\n    if (region === 'default' || region === undefined || region === '') {\n      return this.instanceSettings.jsonData.defaultRegion ?? '';\n    }\n    return region;\n  }\n}\n\nconst displayCustomError = (title: string, message: string) =>\n  store.dispatch(notifyApp(createErrorNotification(title, message)));\n","import { DataSourceInstanceSettings, SelectableValue } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\n\nimport { CloudWatchRequest } from './query-runner/CloudWatchRequest';\nimport { CloudWatchJsonData, DescribeLogGroupsRequest, Dimensions, MultiFilters } from './types';\n\nexport interface SelectableResourceValue extends SelectableValue<string> {\n  text: string;\n}\n\nexport class CloudWatchAPI extends CloudWatchRequest {\n  constructor(instanceSettings: DataSourceInstanceSettings<CloudWatchJsonData>, templateSrv: TemplateSrv) {\n    super(instanceSettings, templateSrv);\n  }\n\n  resourceRequest(\n    subtype: string,\n    parameters?: Record<string, string | string[] | number>\n  ): Promise<SelectableResourceValue[]> {\n    return getBackendSrv().get(`/api/datasources/${this.instanceSettings.id}/resources/${subtype}`, parameters);\n  }\n\n  getRegions() {\n    return this.resourceRequest('regions').then((regions) => [\n      { label: 'default', value: 'default', text: 'default' },\n      ...regions.filter((r) => r.value),\n    ]);\n  }\n\n  getNamespaces() {\n    return this.resourceRequest('namespaces');\n  }\n\n  async describeLogGroups(params: DescribeLogGroupsRequest) {\n    return this.resourceRequest('log-groups', {\n      ...params,\n      region: this.templateSrv.replace(this.getActualRegion(params.region)),\n    });\n  }\n\n  async describeAllLogGroups(params: DescribeLogGroupsRequest) {\n    return this.resourceRequest('all-log-groups', {\n      ...params,\n      region: this.templateSrv.replace(this.getActualRegion(params.region)),\n    });\n  }\n\n  async getMetrics(namespace: string | undefined, region?: string) {\n    if (!namespace) {\n      return [];\n    }\n\n    return this.resourceRequest('metrics', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      namespace: this.templateSrv.replace(namespace),\n    });\n  }\n\n  async getAllMetrics(region: string): Promise<Array<{ metricName?: string; namespace: string }>> {\n    const values = await this.resourceRequest('all-metrics', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n    });\n\n    return values.map((v) => ({ metricName: v.value, namespace: v.text }));\n  }\n\n  async getDimensionKeys(\n    namespace: string | undefined,\n    region: string,\n    dimensionFilters: Dimensions = {},\n    metricName = ''\n  ) {\n    if (!namespace) {\n      return [];\n    }\n\n    return this.resourceRequest('dimension-keys', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      namespace: this.templateSrv.replace(namespace),\n      dimensionFilters: JSON.stringify(this.convertDimensionFormat(dimensionFilters, {})),\n      metricName,\n    });\n  }\n\n  async getDimensionValues(\n    region: string,\n    namespace: string | undefined,\n    metricName: string | undefined,\n    dimensionKey: string,\n    filterDimensions: {}\n  ) {\n    if (!namespace || !metricName) {\n      return [];\n    }\n\n    const values = await this.resourceRequest('dimension-values', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      namespace: this.templateSrv.replace(namespace),\n      metricName: this.templateSrv.replace(metricName.trim()),\n      dimensionKey: this.templateSrv.replace(dimensionKey),\n      dimensions: JSON.stringify(this.convertDimensionFormat(filterDimensions, {})),\n    });\n\n    return values;\n  }\n\n  getEbsVolumeIds(region: string, instanceId: string) {\n    return this.resourceRequest('ebs-volume-ids', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      instanceId: this.templateSrv.replace(instanceId),\n    });\n  }\n\n  getEc2InstanceAttribute(region: string, attributeName: string, filters: MultiFilters) {\n    return this.resourceRequest('ec2-instance-attribute', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      attributeName: this.templateSrv.replace(attributeName),\n      filters: JSON.stringify(this.convertMultiFilterFormat(filters, 'filter key')),\n    });\n  }\n\n  getResourceARNs(region: string, resourceType: string, tags: MultiFilters) {\n    return this.resourceRequest('resource-arns', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      resourceType: this.templateSrv.replace(resourceType),\n      tags: JSON.stringify(this.convertMultiFilterFormat(tags, 'tag name')),\n    });\n  }\n}\n","import { getTemplateSrv, TemplateSrv } from '@grafana/runtime';\nimport type { Monaco, monacoTypes } from '@grafana/ui';\n\nimport { CloudWatchAPI } from '../api';\n\nimport { LinkedToken } from './LinkedToken';\nimport { linkedTokenBuilder } from './linkedTokenBuilder';\nimport { LanguageDefinition } from './register';\nimport { Completeable, StatementPosition, SuggestionKind, TokenTypes } from './types';\n\ntype CompletionItem = monacoTypes.languages.CompletionItem;\n\n/*\nCompletionItemProvider is an extendable class which needs to implement :\n- tokenTypes\n- getStatementPosition\n- getSuggestionKinds\n- getSuggestions\n*/\nexport class CompletionItemProvider implements Completeable {\n  api: CloudWatchAPI;\n  templateSrv: TemplateSrv;\n  tokenTypes: TokenTypes;\n\n  constructor(api: CloudWatchAPI, templateSrv: TemplateSrv = getTemplateSrv()) {\n    this.api = api;\n    this.templateSrv = templateSrv;\n    this.templateSrv = templateSrv;\n\n    // implement with more specific tokens when extending this class\n    this.tokenTypes = {\n      Parenthesis: 'delimiter.parenthesis',\n      Whitespace: 'white',\n      Keyword: 'keyword',\n      Delimiter: 'delimiter',\n      Operator: 'operator',\n      Identifier: 'identifier',\n      Type: 'type',\n      Function: 'predefined',\n      Number: 'number',\n      String: 'string',\n      Variable: 'variable',\n    };\n  }\n\n  // implemented by subclasses, given a token, returns a lexical position in a query\n  getStatementPosition(currentToken: LinkedToken | null): StatementPosition {\n    return StatementPosition.Unknown;\n  }\n\n  // implemented by subclasses, given a lexical statement position, returns potential kinds of suggestions\n  getSuggestionKinds(position: StatementPosition): SuggestionKind[] {\n    return [];\n  }\n\n  // implemented by subclasses, given potential suggestions kinds, returns suggestion objects for monaco aka \"CompletionItem\"\n  getSuggestions(\n    monaco: Monaco,\n    currentToken: LinkedToken | null,\n    suggestionKinds: SuggestionKind[],\n    statementPosition: StatementPosition,\n    position: monacoTypes.IPosition\n  ): Promise<CompletionItem[]> {\n    return Promise.reject([]);\n  }\n\n  // called by registerLanguage and passed to monaco with registerCompletionItemProvider\n  // returns an object that implements https://microsoft.github.io/monaco-editor/api/interfaces/monaco.languages.CompletionItemProvider.html\n  getCompletionProvider(monaco: Monaco, languageDefinition: LanguageDefinition) {\n    return {\n      triggerCharacters: [' ', '$', ',', '(', \"'\"], // one of these characters indicates that it is time to look for a suggestion\n      provideCompletionItems: async (model: monacoTypes.editor.ITextModel, position: monacoTypes.IPosition) => {\n        const currentToken = linkedTokenBuilder(monaco, languageDefinition, model, position, this.tokenTypes);\n        const statementPosition = this.getStatementPosition(currentToken);\n        const suggestionKinds = this.getSuggestionKinds(statementPosition);\n        const suggestions = await this.getSuggestions(\n          monaco,\n          currentToken,\n          suggestionKinds,\n          statementPosition,\n          position\n        );\n\n        return {\n          suggestions,\n        };\n      },\n    };\n  }\n}\n","import { TokenTypes } from '../../monarch/types';\n\nexport const SQLTokenTypes: TokenTypes = {\n  Parenthesis: 'delimiter.parenthesis.sql',\n  Whitespace: 'white.sql',\n  Keyword: 'keyword.sql',\n  Delimiter: 'delimiter.sql',\n  Operator: 'operator.sql',\n  Identifier: 'identifier.sql',\n  Type: 'type.sql',\n  Function: 'predefined.sql',\n  Number: 'number.sql',\n  String: 'string.sql',\n  Variable: 'variable.sql',\n};\n","import { LinkedToken } from '../../monarch/LinkedToken';\nimport { StatementPosition } from '../../monarch/types';\nimport { AND, ASC, BY, DESC, EQUALS, FROM, GROUP, NOT_EQUALS, ORDER, SCHEMA, SELECT, WHERE } from '../language';\n\nimport { SQLTokenTypes } from './types';\n\nexport function getStatementPosition(currentToken: LinkedToken | null): StatementPosition {\n  const previousNonWhiteSpace = currentToken?.getPreviousNonWhiteSpaceToken();\n  const previousKeyword = currentToken?.getPreviousKeyword();\n\n  const previousIsSlash = currentToken?.getPreviousNonWhiteSpaceToken()?.is(SQLTokenTypes.Operator, '/');\n  if (\n    currentToken === null ||\n    (currentToken.isWhiteSpace() && currentToken.previous === null) ||\n    (currentToken.is(SQLTokenTypes.Keyword, SELECT) && currentToken.previous === null) ||\n    previousIsSlash ||\n    (currentToken.isIdentifier() && (previousIsSlash || currentToken?.previous === null))\n  ) {\n    return StatementPosition.SelectKeyword;\n  }\n\n  if (previousNonWhiteSpace?.value === SELECT) {\n    return StatementPosition.AfterSelectKeyword;\n  }\n\n  if (\n    (previousNonWhiteSpace?.is(SQLTokenTypes.Parenthesis, '(') || currentToken?.is(SQLTokenTypes.Parenthesis, '()')) &&\n    previousKeyword?.value === SELECT\n  ) {\n    return StatementPosition.AfterSelectFuncFirstArgument;\n  }\n\n  if (previousKeyword?.value === SELECT && previousNonWhiteSpace?.isParenthesis()) {\n    return StatementPosition.FromKeyword;\n  }\n\n  if (previousNonWhiteSpace?.value === FROM) {\n    return StatementPosition.AfterFromKeyword;\n  }\n\n  if (\n    (previousNonWhiteSpace?.is(SQLTokenTypes.Parenthesis, '(') || currentToken?.is(SQLTokenTypes.Parenthesis, '()')) &&\n    previousKeyword?.value === SCHEMA\n  ) {\n    return StatementPosition.SchemaFuncFirstArgument;\n  }\n\n  if (previousKeyword?.value === SCHEMA && previousNonWhiteSpace?.is(SQLTokenTypes.Delimiter, ',')) {\n    return StatementPosition.SchemaFuncExtraArgument;\n  }\n\n  if (\n    (previousKeyword?.value === FROM && previousNonWhiteSpace?.isDoubleQuotedString()) ||\n    (previousKeyword?.value === FROM && previousNonWhiteSpace?.isVariable()) ||\n    (previousKeyword?.value === SCHEMA && previousNonWhiteSpace?.is(SQLTokenTypes.Parenthesis, ')'))\n  ) {\n    return StatementPosition.AfterFrom;\n  }\n\n  if (\n    previousKeyword?.value === WHERE &&\n    (previousNonWhiteSpace?.isKeyword() ||\n      previousNonWhiteSpace?.is(SQLTokenTypes.Parenthesis, '(') ||\n      previousNonWhiteSpace?.is(SQLTokenTypes.Operator, AND))\n  ) {\n    return StatementPosition.WhereKey;\n  }\n\n  if (\n    previousKeyword?.value === WHERE &&\n    (previousNonWhiteSpace?.isIdentifier() || previousNonWhiteSpace?.isDoubleQuotedString())\n  ) {\n    return StatementPosition.WhereComparisonOperator;\n  }\n\n  if (\n    previousKeyword?.value === WHERE &&\n    (previousNonWhiteSpace?.is(SQLTokenTypes.Operator, EQUALS) ||\n      previousNonWhiteSpace?.is(SQLTokenTypes.Operator, NOT_EQUALS))\n  ) {\n    return StatementPosition.WhereValue;\n  }\n\n  if (\n    previousKeyword?.value === WHERE &&\n    (previousNonWhiteSpace?.isString() || previousNonWhiteSpace?.is(SQLTokenTypes.Parenthesis, ')'))\n  ) {\n    return StatementPosition.AfterWhereValue;\n  }\n\n  if (\n    previousKeyword?.is(SQLTokenTypes.Keyword, BY) &&\n    previousKeyword?.getPreviousKeyword()?.is(SQLTokenTypes.Keyword, GROUP) &&\n    (previousNonWhiteSpace?.is(SQLTokenTypes.Keyword, BY) || previousNonWhiteSpace?.is(SQLTokenTypes.Delimiter, ','))\n  ) {\n    return StatementPosition.AfterGroupByKeywords;\n  }\n\n  if (\n    previousKeyword?.is(SQLTokenTypes.Keyword, BY) &&\n    previousKeyword?.getPreviousKeyword()?.is(SQLTokenTypes.Keyword, GROUP) &&\n    (previousNonWhiteSpace?.isIdentifier() || previousNonWhiteSpace?.isDoubleQuotedString())\n  ) {\n    return StatementPosition.AfterGroupBy;\n  }\n\n  if (\n    previousNonWhiteSpace?.is(SQLTokenTypes.Keyword, BY) &&\n    previousNonWhiteSpace?.getPreviousKeyword()?.is(SQLTokenTypes.Keyword, ORDER)\n  ) {\n    return StatementPosition.AfterOrderByKeywords;\n  }\n\n  if (\n    previousKeyword?.is(SQLTokenTypes.Keyword, BY) &&\n    previousKeyword?.getPreviousKeyword()?.is(SQLTokenTypes.Keyword, ORDER) &&\n    previousNonWhiteSpace?.is(SQLTokenTypes.Parenthesis) &&\n    previousNonWhiteSpace?.getPreviousNonWhiteSpaceToken()?.is(SQLTokenTypes.Function)\n  ) {\n    return StatementPosition.AfterOrderByFunction;\n  }\n\n  if (previousKeyword?.is(SQLTokenTypes.Keyword, DESC) || previousKeyword?.is(SQLTokenTypes.Keyword, ASC)) {\n    return StatementPosition.AfterOrderByDirection;\n  }\n\n  return StatementPosition.Unknown;\n}\n","import { StatementPosition, SuggestionKind } from '../../monarch/types';\n\nexport function getSuggestionKinds(statementPosition: StatementPosition): SuggestionKind[] {\n  switch (statementPosition) {\n    case StatementPosition.SelectKeyword:\n      return [SuggestionKind.SelectKeyword];\n    case StatementPosition.AfterSelectKeyword:\n      return [SuggestionKind.FunctionsWithArguments];\n    case StatementPosition.AfterSelectFuncFirstArgument:\n      return [SuggestionKind.Metrics];\n    case StatementPosition.AfterFromKeyword:\n      return [SuggestionKind.Namespaces, SuggestionKind.SchemaKeyword];\n    case StatementPosition.SchemaFuncFirstArgument:\n      return [SuggestionKind.Namespaces];\n    case StatementPosition.SchemaFuncExtraArgument:\n      return [SuggestionKind.LabelKeys];\n    case StatementPosition.FromKeyword:\n      return [SuggestionKind.FromKeyword];\n    case StatementPosition.AfterFrom:\n      return [\n        SuggestionKind.WhereKeyword,\n        SuggestionKind.GroupByKeywords,\n        SuggestionKind.OrderByKeywords,\n        SuggestionKind.LimitKeyword,\n      ];\n    case StatementPosition.WhereKey:\n      return [SuggestionKind.LabelKeys];\n    case StatementPosition.WhereComparisonOperator:\n      return [SuggestionKind.ComparisonOperators];\n    case StatementPosition.WhereValue:\n      return [SuggestionKind.LabelValues];\n    case StatementPosition.AfterWhereValue:\n      return [\n        SuggestionKind.LogicalOperators,\n        SuggestionKind.GroupByKeywords,\n        SuggestionKind.OrderByKeywords,\n        SuggestionKind.LimitKeyword,\n      ];\n    case StatementPosition.AfterGroupByKeywords:\n      return [SuggestionKind.LabelKeys];\n    case StatementPosition.AfterGroupBy:\n      return [SuggestionKind.OrderByKeywords, SuggestionKind.LimitKeyword];\n    case StatementPosition.AfterOrderByKeywords:\n      return [SuggestionKind.FunctionsWithoutArguments];\n    case StatementPosition.AfterOrderByFunction:\n      return [SuggestionKind.SortOrderDirectionKeyword, SuggestionKind.LimitKeyword];\n    case StatementPosition.AfterOrderByDirection:\n      return [SuggestionKind.LimitKeyword];\n  }\n\n  return [];\n}\n","import { LinkedToken } from '../../monarch/LinkedToken';\nimport { FROM, SCHEMA, SELECT } from '../language';\n\nimport { SQLTokenTypes } from './types';\n\nexport const getSelectToken = (currentToken: LinkedToken | null) =>\n  currentToken?.getPreviousOfType(SQLTokenTypes.Keyword, SELECT) ?? null;\n\nexport const getSelectStatisticToken = (currentToken: LinkedToken | null) => {\n  const assumedStatisticToken = getSelectToken(currentToken)?.getNextNonWhiteSpaceToken();\n  return assumedStatisticToken?.isVariable() || assumedStatisticToken?.isFunction() ? assumedStatisticToken : null;\n};\n\nexport const getMetricNameToken = (currentToken: LinkedToken | null) => {\n  // statistic function is followed by `(` and then an argument\n  const assumedMetricNameToken = getSelectStatisticToken(currentToken)?.next?.next;\n  return assumedMetricNameToken?.isVariable() || assumedMetricNameToken?.isIdentifier() ? assumedMetricNameToken : null;\n};\n\nexport const getFromKeywordToken = (currentToken: LinkedToken | null) => {\n  const selectToken = getSelectToken(currentToken);\n  return selectToken?.getNextOfType(SQLTokenTypes.Keyword, FROM);\n};\n\nexport const getNamespaceToken = (currentToken: LinkedToken | null) => {\n  const fromToken = getFromKeywordToken(currentToken);\n  const nextNonWhiteSpace = fromToken?.getNextNonWhiteSpaceToken();\n  if (\n    nextNonWhiteSpace?.isDoubleQuotedString() ||\n    (nextNonWhiteSpace?.isVariable() && nextNonWhiteSpace?.value.toUpperCase() !== SCHEMA)\n  ) {\n    // schema is not used\n    return nextNonWhiteSpace;\n  } else if (nextNonWhiteSpace?.isKeyword() && nextNonWhiteSpace.next?.is(SQLTokenTypes.Parenthesis, '(')) {\n    // schema is specified\n    const assumedNamespaceToken = nextNonWhiteSpace.next?.next;\n    if (assumedNamespaceToken?.isDoubleQuotedString() || assumedNamespaceToken?.isVariable()) {\n      return assumedNamespaceToken;\n    }\n  }\n  return null;\n};\n","import { uniq } from 'lodash';\n\nimport { getTemplateSrv, TemplateSrv } from '@grafana/runtime';\nimport type { Monaco, monacoTypes } from '@grafana/ui';\n\nimport { CloudWatchAPI } from '../../api';\nimport { CompletionItemProvider } from '../../monarch/CompletionItemProvider';\nimport { LinkedToken } from '../../monarch/LinkedToken';\nimport { TRIGGER_SUGGEST } from '../../monarch/commands';\nimport { SuggestionKind, CompletionItemPriority, StatementPosition } from '../../monarch/types';\nimport {\n  BY,\n  FROM,\n  GROUP,\n  LIMIT,\n  ORDER,\n  SCHEMA,\n  SELECT,\n  ASC,\n  DESC,\n  WHERE,\n  COMPARISON_OPERATORS,\n  LOGICAL_OPERATORS,\n  STATISTICS,\n} from '../language';\n\nimport { getStatementPosition } from './statementPosition';\nimport { getSuggestionKinds } from './suggestionKind';\nimport { getMetricNameToken, getNamespaceToken } from './tokenUtils';\nimport { SQLTokenTypes } from './types';\n\ntype CompletionItem = monacoTypes.languages.CompletionItem;\n\nexport class SQLCompletionItemProvider extends CompletionItemProvider {\n  region: string;\n\n  constructor(api: CloudWatchAPI, templateSrv: TemplateSrv = getTemplateSrv()) {\n    super(api, templateSrv);\n    this.region = api.getActualRegion() ?? '';\n    this.getStatementPosition = getStatementPosition;\n    this.getSuggestionKinds = getSuggestionKinds;\n    this.tokenTypes = SQLTokenTypes;\n  }\n\n  setRegion(region: string) {\n    this.region = region;\n  }\n\n  async getSuggestions(\n    monaco: Monaco,\n    currentToken: LinkedToken | null,\n    suggestionKinds: SuggestionKind[],\n    statementPosition: StatementPosition,\n    position: monacoTypes.IPosition\n  ): Promise<CompletionItem[]> {\n    let suggestions: CompletionItem[] = [];\n    const invalidRangeToken = currentToken?.isWhiteSpace() || currentToken?.isParenthesis();\n    const range =\n      invalidRangeToken || !currentToken?.range ? monaco.Range.fromPositions(position) : currentToken?.range;\n\n    const toCompletionItem = (value: string, rest: Partial<CompletionItem> = {}) => {\n      const item: CompletionItem = {\n        label: value,\n        insertText: value,\n        kind: monaco.languages.CompletionItemKind.Field,\n        range,\n        sortText: CompletionItemPriority.Medium,\n        ...rest,\n      };\n      return item;\n    };\n\n    function addSuggestion(value: string, rest: Partial<CompletionItem> = {}) {\n      suggestions = [...suggestions, toCompletionItem(value, rest)];\n    }\n\n    for (const suggestion of suggestionKinds) {\n      switch (suggestion) {\n        case SuggestionKind.SelectKeyword:\n          addSuggestion(SELECT, {\n            insertText: `${SELECT} $0`,\n            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n            kind: monaco.languages.CompletionItemKind.Keyword,\n            command: TRIGGER_SUGGEST,\n          });\n          break;\n\n        case SuggestionKind.FunctionsWithArguments:\n          STATISTICS.map((s) =>\n            addSuggestion(s, {\n              insertText: `${s}($0)`,\n              insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n              command: TRIGGER_SUGGEST,\n              kind: monaco.languages.CompletionItemKind.Function,\n            })\n          );\n          break;\n\n        case SuggestionKind.FunctionsWithoutArguments:\n          STATISTICS.map((s) =>\n            addSuggestion(s, {\n              insertText: `${s}() `,\n              insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n              command: TRIGGER_SUGGEST,\n              kind: monaco.languages.CompletionItemKind.Function,\n            })\n          );\n          break;\n\n        case SuggestionKind.Metrics:\n          {\n            const namespaceToken = getNamespaceToken(currentToken);\n            if (namespaceToken?.value) {\n              // if a namespace is specified, only suggest metrics for the namespace\n              const metrics = await this.api.getMetrics(\n                this.templateSrv.replace(namespaceToken?.value.replace(/\\\"/g, '')),\n                this.templateSrv.replace(this.region)\n              );\n              metrics.forEach((m) => m.value && addSuggestion(m.value));\n            } else {\n              // If no namespace is specified in the query, just list all metrics\n              const metrics = await this.api.getAllMetrics(this.templateSrv.replace(this.region));\n              uniq(metrics.map((m) => m.metricName)).forEach((m) => m && addSuggestion(m, { insertText: m }));\n            }\n          }\n          break;\n\n        case SuggestionKind.FromKeyword:\n          addSuggestion(FROM, {\n            insertText: `${FROM} `,\n            command: TRIGGER_SUGGEST,\n          });\n          break;\n\n        case SuggestionKind.SchemaKeyword:\n          addSuggestion(SCHEMA, {\n            sortText: CompletionItemPriority.High,\n            insertText: `${SCHEMA}($0)`,\n            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n            command: TRIGGER_SUGGEST,\n            kind: monaco.languages.CompletionItemKind.Function,\n          });\n          break;\n\n        case SuggestionKind.Namespaces:\n          const metricNameToken = getMetricNameToken(currentToken);\n          let namespaces = [];\n          if (metricNameToken?.value) {\n            // if a metric is specified, only suggest namespaces that actually have that metric\n            const metrics = await this.api.getAllMetrics(this.region);\n            const metricName = this.templateSrv.replace(metricNameToken.value);\n            namespaces = metrics.filter((m) => m.metricName === metricName).map((m) => m.namespace);\n          } else {\n            // if no metric is specified, just suggest all namespaces\n            const ns = await this.api.getNamespaces();\n            namespaces = ns.map((n) => n.value);\n          }\n          namespaces.map((n) => addSuggestion(`\"${n}\"`, { insertText: `\"${n}\"` }));\n          break;\n\n        case SuggestionKind.LabelKeys:\n          {\n            const metricNameToken = getMetricNameToken(currentToken);\n            const namespaceToken = getNamespaceToken(currentToken);\n            if (namespaceToken?.value) {\n              let dimensionFilter = {};\n              let labelKeyTokens;\n              if (statementPosition === StatementPosition.SchemaFuncExtraArgument) {\n                labelKeyTokens = namespaceToken?.getNextUntil(this.tokenTypes.Parenthesis, [\n                  this.tokenTypes.Delimiter,\n                  this.tokenTypes.Whitespace,\n                ]);\n              } else if (statementPosition === StatementPosition.AfterGroupByKeywords) {\n                labelKeyTokens = currentToken?.getPreviousUntil(this.tokenTypes.Keyword, [\n                  this.tokenTypes.Delimiter,\n                  this.tokenTypes.Whitespace,\n                ]);\n              }\n              dimensionFilter = (labelKeyTokens || []).reduce((acc, curr) => {\n                return { ...acc, [curr.value]: null };\n              }, {});\n              const keys = await this.api.getDimensionKeys(\n                this.templateSrv.replace(namespaceToken.value.replace(/\\\"/g, '')),\n                this.templateSrv.replace(this.region),\n                dimensionFilter,\n                metricNameToken?.value ?? ''\n              );\n              keys.map((m) => {\n                const key = /[\\s\\.-]/.test(m.value ?? '') ? `\"${m.value}\"` : m.value;\n                key && addSuggestion(key);\n              });\n            }\n          }\n          break;\n\n        case SuggestionKind.LabelValues:\n          {\n            const namespaceToken = getNamespaceToken(currentToken);\n            const metricNameToken = getMetricNameToken(currentToken);\n            const labelKey = currentToken?.getPreviousNonWhiteSpaceToken()?.getPreviousNonWhiteSpaceToken();\n            if (namespaceToken?.value && labelKey?.value && metricNameToken?.value) {\n              const values = await this.api.getDimensionValues(\n                this.templateSrv.replace(this.region),\n                this.templateSrv.replace(namespaceToken.value.replace(/\\\"/g, '')),\n                this.templateSrv.replace(metricNameToken.value),\n                this.templateSrv.replace(labelKey.value),\n                {}\n              );\n              values.map((o) =>\n                addSuggestion(`'${o.value}'`, { insertText: `'${o.value}' `, command: TRIGGER_SUGGEST })\n              );\n            }\n          }\n          break;\n\n        case SuggestionKind.LogicalOperators:\n          LOGICAL_OPERATORS.map((o) =>\n            addSuggestion(`${o}`, {\n              insertText: `${o} `,\n              command: TRIGGER_SUGGEST,\n              sortText: CompletionItemPriority.MediumHigh,\n            })\n          );\n          break;\n\n        case SuggestionKind.WhereKeyword:\n          addSuggestion(`${WHERE}`, {\n            insertText: `${WHERE} `,\n            command: TRIGGER_SUGGEST,\n            sortText: CompletionItemPriority.High,\n          });\n          break;\n\n        case SuggestionKind.ComparisonOperators:\n          COMPARISON_OPERATORS.map((o) => addSuggestion(`${o}`, { insertText: `${o} `, command: TRIGGER_SUGGEST }));\n          break;\n\n        case SuggestionKind.GroupByKeywords:\n          addSuggestion(`${GROUP} ${BY}`, {\n            insertText: `${GROUP} ${BY} `,\n            command: TRIGGER_SUGGEST,\n            sortText: CompletionItemPriority.MediumHigh,\n          });\n          break;\n\n        case SuggestionKind.OrderByKeywords:\n          addSuggestion(`${ORDER} ${BY}`, {\n            insertText: `${ORDER} ${BY} `,\n            command: TRIGGER_SUGGEST,\n            sortText: CompletionItemPriority.Medium,\n          });\n          break;\n\n        case SuggestionKind.LimitKeyword:\n          addSuggestion(LIMIT, { insertText: `${LIMIT} `, sortText: CompletionItemPriority.MediumLow });\n          break;\n\n        case SuggestionKind.SortOrderDirectionKeyword:\n          [ASC, DESC].map((s) =>\n            addSuggestion(s, {\n              insertText: `${s} `,\n              command: TRIGGER_SUGGEST,\n            })\n          );\n          break;\n      }\n    }\n\n    this.templateSrv.getVariables().map((v) => {\n      const variable = `$${v.name}`;\n      addSuggestion(variable, {\n        range,\n        label: variable,\n        insertText: variable,\n        kind: monaco.languages.CompletionItemKind.Variable,\n        sortText: CompletionItemPriority.Low,\n      });\n    });\n\n    return suggestions;\n  }\n}\n","import { sortedUniq } from 'lodash';\nimport Prism, { Grammar } from 'prismjs';\nimport { lastValueFrom } from 'rxjs';\n\nimport { AbsoluteTimeRange, HistoryItem, LanguageProvider } from '@grafana/data';\nimport { CompletionItemGroup, SearchFunctionType, Token, TypeaheadInput, TypeaheadOutput } from '@grafana/ui';\n\nimport { CloudWatchDatasource } from './datasource';\nimport syntax, {\n  AGGREGATION_FUNCTIONS_STATS,\n  BOOLEAN_FUNCTIONS,\n  DATETIME_FUNCTIONS,\n  FIELD_AND_FILTER_FUNCTIONS,\n  IP_FUNCTIONS,\n  NUMERIC_OPERATORS,\n  QUERY_COMMANDS,\n  STRING_FUNCTIONS,\n} from './syntax';\nimport { CloudWatchQuery, TSDBResponse } from './types';\n\nexport type CloudWatchHistoryItem = HistoryItem<CloudWatchQuery>;\n\ntype TypeaheadContext = {\n  history?: CloudWatchHistoryItem[];\n  absoluteRange?: AbsoluteTimeRange;\n  logGroupNames?: string[];\n  region: string;\n};\n\nexport class CloudWatchLanguageProvider extends LanguageProvider {\n  started = false;\n  declare initialRange: AbsoluteTimeRange;\n  datasource: CloudWatchDatasource;\n\n  constructor(datasource: CloudWatchDatasource, initialValues?: any) {\n    super();\n\n    this.datasource = datasource;\n\n    Object.assign(this, initialValues);\n  }\n\n  // Strip syntax chars\n  cleanText = (s: string) => s.replace(/[()]/g, '').trim();\n\n  getSyntax(): Grammar {\n    return syntax;\n  }\n\n  request = (url: string, params?: any): Promise<TSDBResponse> => {\n    return lastValueFrom(this.datasource.logsQueryRunner.awsRequest(url, params));\n  };\n\n  start = () => {\n    if (!this.startTask) {\n      this.startTask = Promise.resolve().then(() => {\n        this.started = true;\n        return [];\n      });\n    }\n\n    return this.startTask;\n  };\n\n  isStatsQuery(query: string): boolean {\n    const grammar = this.getSyntax();\n    const tokens = Prism.tokenize(query, grammar) ?? [];\n\n    return !!tokens.find(\n      (token) =>\n        typeof token !== 'string' &&\n        token.content.toString().toLowerCase() === 'stats' &&\n        token.type === 'query-command'\n    );\n  }\n\n  /**\n   * Return suggestions based on input that can be then plugged into a typeahead dropdown.\n   * Keep this DOM-free for testing\n   * @param input\n   * @param context Is optional in types but is required in case we are doing getLabelCompletionItems\n   * @param context.absoluteRange Required in case we are doing getLabelCompletionItems\n   * @param context.history Optional used only in getEmptyCompletionItems\n   */\n  async provideCompletionItems(input: TypeaheadInput, context?: TypeaheadContext): Promise<TypeaheadOutput> {\n    const { value } = input;\n\n    // Get tokens\n    const tokens = value?.data.get('tokens');\n\n    if (!tokens || !tokens.length) {\n      return { suggestions: [] };\n    }\n\n    const curToken: Token = tokens.filter(\n      (token: any) =>\n        token.offsets.start <= value!.selection?.start?.offset && token.offsets.end >= value!.selection?.start?.offset\n    )[0];\n\n    const isFirstToken = !curToken.prev;\n    const prevToken = prevNonWhitespaceToken(curToken);\n\n    const isCommandStart = isFirstToken || (!isFirstToken && prevToken?.types.includes('command-separator'));\n    if (isCommandStart) {\n      return this.getCommandCompletionItems();\n    }\n\n    if (isInsideFunctionParenthesis(curToken)) {\n      return await this.getFieldCompletionItems(context?.logGroupNames ?? [], context?.region || 'default');\n    }\n\n    if (isAfterKeyword('by', curToken)) {\n      return this.handleKeyword(context);\n    }\n\n    if (prevToken?.types.includes('comparison-operator')) {\n      return this.handleComparison(context);\n    }\n\n    const commandToken = previousCommandToken(curToken);\n    if (commandToken) {\n      return await this.handleCommand(commandToken, curToken, context);\n    }\n\n    return {\n      suggestions: [],\n    };\n  }\n\n  private fetchedFieldsCache:\n    | {\n        time: number;\n        logGroups: string[];\n        fields: string[];\n      }\n    | undefined;\n\n  private fetchFields = async (logGroups: string[], region: string): Promise<string[]> => {\n    if (\n      this.fetchedFieldsCache &&\n      Date.now() - this.fetchedFieldsCache.time < 30 * 1000 &&\n      sortedUniq(this.fetchedFieldsCache.logGroups).join('|') === sortedUniq(logGroups).join('|')\n    ) {\n      return this.fetchedFieldsCache.fields;\n    }\n\n    const results = await Promise.all(\n      logGroups.map((logGroup) => this.datasource.logsQueryRunner.getLogGroupFields({ logGroupName: logGroup, region }))\n    );\n\n    const fields = [\n      ...new Set<string>(\n        results.reduce((acc: string[], cur) => acc.concat(cur.logGroupFields?.map((f) => f.name) as string[]), [])\n      ).values(),\n    ];\n\n    this.fetchedFieldsCache = {\n      time: Date.now(),\n      logGroups,\n      fields,\n    };\n\n    return fields;\n  };\n\n  private handleKeyword = async (context?: TypeaheadContext): Promise<TypeaheadOutput> => {\n    const suggs = await this.getFieldCompletionItems(context?.logGroupNames ?? [], context?.region || 'default');\n    const functionSuggestions: CompletionItemGroup[] = [\n      {\n        searchFunctionType: SearchFunctionType.Prefix,\n        label: 'Functions',\n        items: STRING_FUNCTIONS.concat(DATETIME_FUNCTIONS, IP_FUNCTIONS),\n      },\n    ];\n    suggs.suggestions.push(...functionSuggestions);\n\n    return suggs;\n  };\n\n  private handleCommand = async (\n    commandToken: Token,\n    curToken: Token,\n    context?: TypeaheadContext\n  ): Promise<TypeaheadOutput> => {\n    const queryCommand = commandToken.content.toLowerCase();\n    const prevToken = prevNonWhitespaceToken(curToken);\n    const currentTokenIsFirstArg = prevToken === commandToken;\n\n    if (queryCommand === 'sort') {\n      return this.handleSortCommand(currentTokenIsFirstArg, curToken, context);\n    }\n\n    if (queryCommand === 'parse') {\n      if (currentTokenIsFirstArg) {\n        return await this.getFieldCompletionItems(context?.logGroupNames ?? [], context?.region || 'default');\n      }\n    }\n\n    const currentTokenIsAfterCommandAndEmpty = isTokenType(commandToken.next, 'whitespace') && !commandToken.next?.next;\n    const currentTokenIsAfterCommand =\n      currentTokenIsAfterCommandAndEmpty || nextNonWhitespaceToken(commandToken) === curToken;\n\n    const currentTokenIsComma = isTokenType(curToken, 'punctuation', ',');\n    const currentTokenIsCommaOrAfterComma = currentTokenIsComma || isTokenType(prevToken, 'punctuation', ',');\n\n    // We only show suggestions if we are after a command or after a comma which is a field separator\n    if (!(currentTokenIsAfterCommand || currentTokenIsCommaOrAfterComma)) {\n      return { suggestions: [] };\n    }\n\n    if (['display', 'fields'].includes(queryCommand)) {\n      const typeaheadOutput = await this.getFieldCompletionItems(\n        context?.logGroupNames ?? [],\n        context?.region || 'default'\n      );\n      typeaheadOutput.suggestions.push(...this.getFieldAndFilterFunctionCompletionItems().suggestions);\n\n      return typeaheadOutput;\n    }\n\n    if (queryCommand === 'stats') {\n      const typeaheadOutput = this.getStatsAggCompletionItems();\n      if (currentTokenIsComma || currentTokenIsAfterCommandAndEmpty) {\n        typeaheadOutput?.suggestions.forEach((group) => {\n          group.skipFilter = true;\n        });\n      }\n      return typeaheadOutput;\n    }\n\n    if (queryCommand === 'filter' && currentTokenIsFirstArg) {\n      const sugg = await this.getFieldCompletionItems(context?.logGroupNames ?? [], context?.region || 'default');\n      const boolFuncs = this.getBoolFuncCompletionItems();\n      sugg.suggestions.push(...boolFuncs.suggestions);\n      return sugg;\n    }\n    return { suggestions: [] };\n  };\n\n  private async handleSortCommand(\n    isFirstArgument: boolean,\n    curToken: Token,\n    context?: TypeaheadContext\n  ): Promise<TypeaheadOutput> {\n    if (isFirstArgument) {\n      return await this.getFieldCompletionItems(context?.logGroupNames ?? [], context?.region || 'default');\n    } else if (isTokenType(prevNonWhitespaceToken(curToken), 'field-name')) {\n      // suggest sort options\n      return {\n        suggestions: [\n          {\n            searchFunctionType: SearchFunctionType.Prefix,\n            label: 'Sort Order',\n            items: [\n              {\n                label: 'asc',\n              },\n              { label: 'desc' },\n            ],\n          },\n        ],\n      };\n    }\n\n    return { suggestions: [] };\n  }\n\n  private handleComparison = async (context?: TypeaheadContext) => {\n    const fieldsSuggestions = await this.getFieldCompletionItems(\n      context?.logGroupNames ?? [],\n      context?.region || 'default'\n    );\n    const comparisonSuggestions = this.getComparisonCompletionItems();\n    fieldsSuggestions.suggestions.push(...comparisonSuggestions.suggestions);\n    return fieldsSuggestions;\n  };\n\n  private getCommandCompletionItems = (): TypeaheadOutput => {\n    return {\n      suggestions: [{ searchFunctionType: SearchFunctionType.Prefix, label: 'Commands', items: QUERY_COMMANDS }],\n    };\n  };\n\n  private getFieldAndFilterFunctionCompletionItems = (): TypeaheadOutput => {\n    return {\n      suggestions: [\n        { searchFunctionType: SearchFunctionType.Prefix, label: 'Functions', items: FIELD_AND_FILTER_FUNCTIONS },\n      ],\n    };\n  };\n\n  private getStatsAggCompletionItems = (): TypeaheadOutput => {\n    return {\n      suggestions: [\n        { searchFunctionType: SearchFunctionType.Prefix, label: 'Functions', items: AGGREGATION_FUNCTIONS_STATS },\n      ],\n    };\n  };\n\n  private getBoolFuncCompletionItems = (): TypeaheadOutput => {\n    return {\n      suggestions: [\n        {\n          searchFunctionType: SearchFunctionType.Prefix,\n          label: 'Functions',\n          items: BOOLEAN_FUNCTIONS,\n        },\n      ],\n    };\n  };\n\n  private getComparisonCompletionItems = (): TypeaheadOutput => {\n    return {\n      suggestions: [\n        {\n          searchFunctionType: SearchFunctionType.Prefix,\n          label: 'Functions',\n          items: NUMERIC_OPERATORS.concat(BOOLEAN_FUNCTIONS),\n        },\n      ],\n    };\n  };\n\n  private getFieldCompletionItems = async (logGroups: string[], region: string): Promise<TypeaheadOutput> => {\n    const fields = await this.fetchFields(logGroups, region);\n\n    return {\n      suggestions: [\n        {\n          label: 'Fields',\n          items: fields.map((field) => ({\n            label: field,\n            insertText: field.match(/@?[_a-zA-Z]+[_.0-9a-zA-Z]*/) ? undefined : `\\`${field}\\``,\n          })),\n        },\n      ],\n    };\n  };\n}\n\nfunction nextNonWhitespaceToken(token: Token): Token | null {\n  let curToken = token;\n\n  while (curToken.next) {\n    if (curToken.next.types.includes('whitespace')) {\n      curToken = curToken.next;\n    } else {\n      return curToken.next;\n    }\n  }\n\n  return null;\n}\n\nfunction prevNonWhitespaceToken(token: Token): Token | null {\n  let curToken = token;\n\n  while (curToken.prev) {\n    if (isTokenType(curToken.prev, 'whitespace')) {\n      curToken = curToken.prev;\n    } else {\n      return curToken.prev;\n    }\n  }\n\n  return null;\n}\n\nfunction previousCommandToken(startToken: Token): Token | null {\n  let thisToken = startToken;\n  while (!!thisToken.prev) {\n    thisToken = thisToken.prev;\n    if (\n      thisToken.types.includes('query-command') &&\n      (!thisToken.prev || isTokenType(prevNonWhitespaceToken(thisToken), 'command-separator'))\n    ) {\n      return thisToken;\n    }\n  }\n  return null;\n}\n\nconst funcsWithFieldArgs = [\n  'avg',\n  'count',\n  'count_distinct',\n  'earliest',\n  'latest',\n  'sortsFirst',\n  'sortsLast',\n  'max',\n  'min',\n  'pct',\n  'stddev',\n  'ispresent',\n  'fromMillis',\n  'toMillis',\n  'isempty',\n  'isblank',\n  'isValidIp',\n  'isValidIpV4',\n  'isValidIpV6',\n  'isIpInSubnet',\n  'isIpv4InSubnet',\n  'isIpv6InSubnet',\n].map((funcName) => funcName.toLowerCase());\n\n/**\n * Returns true if cursor is currently inside a function parenthesis for example `count(|)` or `count(@mess|)` should\n * return true.\n */\nfunction isInsideFunctionParenthesis(curToken: Token): boolean {\n  const prevToken = prevNonWhitespaceToken(curToken);\n\n  if (!prevToken) {\n    return false;\n  }\n\n  const parenthesisToken = curToken.content === '(' ? curToken : prevToken.content === '(' ? prevToken : undefined;\n  if (parenthesisToken) {\n    const maybeFunctionToken = prevNonWhitespaceToken(parenthesisToken);\n    if (maybeFunctionToken) {\n      return (\n        funcsWithFieldArgs.includes(maybeFunctionToken.content.toLowerCase()) &&\n        maybeFunctionToken.types.includes('function')\n      );\n    }\n  }\n  return false;\n}\n\nfunction isAfterKeyword(keyword: string, token: Token): boolean {\n  const maybeKeyword = getPreviousTokenExcluding(token, [\n    'whitespace',\n    'function',\n    'punctuation',\n    'field-name',\n    'number',\n  ]);\n  if (isTokenType(maybeKeyword, 'keyword', 'by')) {\n    const prev = getPreviousTokenExcluding(token, ['whitespace']);\n    if (prev === maybeKeyword || isTokenType(prev, 'punctuation', ',')) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isTokenType(token: Token | undefined | null, type: string, content?: string): boolean {\n  if (!token?.types.includes(type)) {\n    return false;\n  }\n  if (content) {\n    if (token?.content.toLowerCase() !== content) {\n      return false;\n    }\n  }\n  return true;\n}\n\ntype TokenDef = string | { type: string; value: string };\nfunction getPreviousTokenExcluding(token: Token, exclude: TokenDef[]): Token | undefined | null {\n  let curToken = token.prev;\n  main: while (curToken) {\n    for (const item of exclude) {\n      if (typeof item === 'string') {\n        if (curToken.types.includes(item)) {\n          curToken = curToken.prev;\n          continue main;\n        }\n      } else {\n        if (curToken.types.includes(item.type) && curToken.content.toLowerCase() === item.value) {\n          curToken = curToken.prev;\n          continue main;\n        }\n      }\n    }\n    break;\n  }\n  return curToken;\n}\n","import { TokenTypes } from '../../monarch/types';\n\nexport const MetricMathTokenTypes: TokenTypes = {\n  Parenthesis: 'delimiter.parenthesis.cloudwatch-MetricMath',\n  Whitespace: 'white.cloudwatch-MetricMath',\n  Keyword: 'keyword.cloudwatch-MetricMath',\n  Delimiter: 'delimiter.cloudwatch-MetricMath',\n  Operator: 'operator.cloudwatch-MetricMath',\n  Identifier: 'identifier.cloudwatch-MetricMath',\n  Type: 'type.cloudwatch-MetricMath',\n  Function: 'predefined.cloudwatch-MetricMath',\n  Number: 'number.cloudwatch-MetricMath',\n  String: 'string.cloudwatch-MetricMath',\n  Variable: 'variable.cloudwatch-MetricMath',\n};\n","import { LinkedToken } from '../../monarch/LinkedToken';\nimport { StatementPosition } from '../../monarch/types';\n\nimport { MetricMathTokenTypes } from './types';\n\nexport function getStatementPosition(currentToken: LinkedToken | null): StatementPosition {\n  const previousNonWhiteSpace = currentToken?.getPreviousNonWhiteSpaceToken();\n\n  if (currentToken && currentToken.isString()) {\n    return StatementPosition.WithinString;\n  }\n\n  if (currentToken && previousNonWhiteSpace) {\n    const currentFunction = currentToken.getPreviousOfType(MetricMathTokenTypes.Function);\n    const isAfterComma = previousNonWhiteSpace.is(MetricMathTokenTypes.Delimiter, ',');\n    const isWithinSearch = currentFunction && currentFunction.value === 'SEARCH';\n    const allTokensAfterStartOfSearch =\n      currentToken.getPreviousUntil(MetricMathTokenTypes.Function, [], 'SEARCH') || [];\n\n    if (isWithinSearch) {\n      // if there's only one ' then we're still within the first arg\n      if (allTokensAfterStartOfSearch.filter(({ value }) => value === \"'\").length === 1) {\n        return StatementPosition.WithinString;\n      }\n\n      // if there was a , before the last , and it happened after the start of SEARCH\n      const lastComma = previousNonWhiteSpace.getPreviousOfType(MetricMathTokenTypes.Delimiter, ',');\n      if (lastComma) {\n        const lastCommaIsAfterSearch =\n          lastComma.range.startColumn > currentFunction.range.startColumn &&\n          lastComma.range.startLineNumber >= currentFunction.range.startLineNumber;\n        if (lastCommaIsAfterSearch) {\n          return StatementPosition.SearchFuncThirdArg;\n        }\n      }\n\n      // otherwise assume it's the second arg\n      return StatementPosition.SearchFuncSecondArg;\n    }\n\n    if (!isWithinSearch && isAfterComma) {\n      return StatementPosition.PredefinedFuncSecondArg;\n    }\n  }\n\n  if (previousNonWhiteSpace?.endsWith(')')) {\n    return StatementPosition.AfterFunction;\n  }\n\n  if (!currentToken || !currentToken.isString()) {\n    return StatementPosition.PredefinedFunction;\n  }\n\n  return StatementPosition.Unknown;\n}\n","import { StatementPosition, SuggestionKind } from '../../monarch/types';\n\nexport function getSuggestionKinds(statementPosition: StatementPosition): SuggestionKind[] {\n  switch (statementPosition) {\n    case StatementPosition.PredefinedFunction:\n      return [SuggestionKind.FunctionsWithArguments];\n    case StatementPosition.PredefinedFuncSecondArg:\n      return [SuggestionKind.FunctionsWithArguments, SuggestionKind.KeywordArguments];\n    case StatementPosition.AfterFunction:\n      return [SuggestionKind.Operators];\n    case StatementPosition.SearchFuncSecondArg:\n      return [SuggestionKind.Statistic];\n    case StatementPosition.SearchFuncThirdArg:\n      return [SuggestionKind.Period];\n  }\n\n  return [];\n}\n","import { getTemplateSrv, TemplateSrv } from '@grafana/runtime';\nimport type { Monaco, monacoTypes } from '@grafana/ui';\n\nimport { CloudWatchAPI } from '../../api';\nimport { CompletionItemProvider } from '../../monarch/CompletionItemProvider';\nimport { LinkedToken } from '../../monarch/LinkedToken';\nimport { TRIGGER_SUGGEST } from '../../monarch/commands';\nimport { SuggestionKind, CompletionItemPriority, StatementPosition } from '../../monarch/types';\nimport {\n  METRIC_MATH_FNS,\n  METRIC_MATH_KEYWORDS,\n  METRIC_MATH_OPERATORS,\n  METRIC_MATH_PERIODS,\n  METRIC_MATH_STATISTIC_KEYWORD_STRINGS,\n} from '../language';\n\nimport { getStatementPosition } from './statementPosition';\nimport { getSuggestionKinds } from './suggestionKind';\nimport { MetricMathTokenTypes } from './types';\n\ntype CompletionItem = monacoTypes.languages.CompletionItem;\n\nexport class MetricMathCompletionItemProvider extends CompletionItemProvider {\n  constructor(api: CloudWatchAPI, templateSrv: TemplateSrv = getTemplateSrv()) {\n    super(api, templateSrv);\n    this.getStatementPosition = getStatementPosition;\n    this.getSuggestionKinds = getSuggestionKinds;\n    this.tokenTypes = MetricMathTokenTypes;\n  }\n\n  async getSuggestions(\n    monaco: Monaco,\n    currentToken: LinkedToken | null,\n    suggestionKinds: SuggestionKind[],\n    statementPosition: StatementPosition,\n    position: monacoTypes.IPosition\n  ): Promise<CompletionItem[]> {\n    let suggestions: CompletionItem[] = [];\n    const invalidRangeToken = currentToken?.isWhiteSpace() || currentToken?.isParenthesis();\n    const range =\n      invalidRangeToken || !currentToken?.range ? monaco.Range.fromPositions(position) : currentToken?.range;\n\n    const toCompletionItem = (value: string, rest: Partial<CompletionItem> = {}) => {\n      const item: CompletionItem = {\n        label: value,\n        insertText: value,\n        kind: monaco.languages.CompletionItemKind.Field,\n        range,\n        sortText: CompletionItemPriority.Medium,\n        ...rest,\n      };\n      return item;\n    };\n\n    function addSuggestion(value: string, rest: Partial<CompletionItem> = {}) {\n      suggestions = [...suggestions, toCompletionItem(value, rest)];\n    }\n\n    for (const suggestion of suggestionKinds) {\n      switch (suggestion) {\n        case SuggestionKind.FunctionsWithArguments:\n          METRIC_MATH_FNS.map((f) =>\n            addSuggestion(f, {\n              insertText: f === 'SEARCH' ? `${f}('$0')` : `${f}($0)`,\n              insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n              command: TRIGGER_SUGGEST,\n              kind: monaco.languages.CompletionItemKind.Function,\n            })\n          );\n          break;\n\n        case SuggestionKind.KeywordArguments:\n          METRIC_MATH_KEYWORDS.map((s) =>\n            addSuggestion(s, {\n              insertText: s,\n              command: TRIGGER_SUGGEST,\n              kind: monaco.languages.CompletionItemKind.Keyword,\n              sortText: CompletionItemPriority.MediumHigh,\n            })\n          );\n          break;\n\n        case SuggestionKind.Statistic:\n          METRIC_MATH_STATISTIC_KEYWORD_STRINGS.map((s) =>\n            addSuggestion(s, {\n              insertText: `'${s}', `,\n              command: TRIGGER_SUGGEST,\n            })\n          );\n          break;\n\n        case SuggestionKind.Operators:\n          METRIC_MATH_OPERATORS.map((s) =>\n            addSuggestion(s, {\n              insertText: `${s} `,\n              command: TRIGGER_SUGGEST,\n            })\n          );\n          break;\n\n        case SuggestionKind.Period:\n          METRIC_MATH_PERIODS.map((s, idx) =>\n            addSuggestion(s.toString(), {\n              kind: monaco.languages.CompletionItemKind.Value,\n              sortText: String.fromCharCode(97 + idx), // converts index 0, 1 to \"a\", \"b\", etc needed to show the time periods in numerical order\n            })\n          );\n          break;\n      }\n    }\n\n    // always suggest template variables\n    this.templateSrv.getVariables().map((v) => {\n      const variable = `$${v.name}`;\n      addSuggestion(variable, {\n        range,\n        label: variable,\n        insertText: variable,\n        kind: monaco.languages.CompletionItemKind.Variable,\n        sortText: CompletionItemPriority.Low,\n      });\n    });\n\n    return suggestions;\n  }\n}\n","import { map, Observable } from 'rxjs';\n\nimport { DataQueryRequest, DataQueryResponse, DataSourceInstanceSettings } from '@grafana/data';\nimport { toDataQueryResponse } from '@grafana/runtime';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\n\nimport { CloudWatchAnnotationQuery, CloudWatchJsonData, CloudWatchQuery } from '../types';\n\nimport { CloudWatchRequest } from './CloudWatchRequest';\n\n// This class handles execution of CloudWatch annotation queries\nexport class CloudWatchAnnotationQueryRunner extends CloudWatchRequest {\n  constructor(instanceSettings: DataSourceInstanceSettings<CloudWatchJsonData>, templateSrv: TemplateSrv) {\n    super(instanceSettings, templateSrv);\n  }\n\n  handleAnnotationQuery(\n    queries: CloudWatchAnnotationQuery[],\n    options: DataQueryRequest<CloudWatchQuery>\n  ): Observable<DataQueryResponse> {\n    return this.awsRequest(this.dsQueryEndpoint, {\n      from: options.range.from.valueOf().toString(),\n      to: options.range.to.valueOf().toString(),\n      queries: queries.map((query) => ({\n        ...query,\n        statistic: this.templateSrv.replace(query.statistic),\n        region: this.templateSrv.replace(this.getActualRegion(query.region)),\n        namespace: this.templateSrv.replace(query.namespace),\n        metricName: this.templateSrv.replace(query.metricName),\n        dimensions: this.convertDimensionFormat(query.dimensions ?? {}, {}),\n        period: query.period ?? '',\n        actionPrefix: query.actionPrefix ?? '',\n        alarmNamePrefix: query.alarmNamePrefix ?? '',\n        type: 'annotationQuery',\n        datasource: this.ref,\n      })),\n    }).pipe(\n      map((r) => {\n        const frames = toDataQueryResponse({ data: r }).data;\n        return { data: frames };\n      })\n    );\n  }\n}\n","import { DataFrame, DataLink, DataQueryRequest, DataQueryResponse, ScopedVars, TimeRange } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\n\nimport { AwsUrl, encodeUrl } from '../aws_url';\nimport { CloudWatchLogsQuery, CloudWatchQuery } from '../types';\n\ntype ReplaceFn = (\n  target?: string,\n  scopedVars?: ScopedVars,\n  displayErrorIfIsMultiTemplateVariable?: boolean,\n  fieldName?: string\n) => string;\n\nexport async function addDataLinksToLogsResponse(\n  response: DataQueryResponse,\n  request: DataQueryRequest<CloudWatchQuery>,\n  range: TimeRange,\n  replaceFn: ReplaceFn,\n  getVariableValueFn: (value: string, scopedVars: ScopedVars) => string[],\n  getRegion: (region: string) => string,\n  tracingDatasourceUid?: string\n): Promise<void> {\n  const replace = (target: string, fieldName?: string) => replaceFn(target, request.scopedVars, true, fieldName);\n  const getVariableValue = (target: string) => getVariableValueFn(target, request.scopedVars);\n\n  for (const dataFrame of response.data as DataFrame[]) {\n    const curTarget = request.targets.find((target) => target.refId === dataFrame.refId) as CloudWatchLogsQuery;\n    const interpolatedRegion = getRegion(replace(curTarget.region ?? '', 'region'));\n\n    for (const field of dataFrame.fields) {\n      if (field.name === '@xrayTraceId' && tracingDatasourceUid) {\n        getRegion(replace(curTarget.region ?? '', 'region'));\n        const xrayLink = await createInternalXrayLink(tracingDatasourceUid, interpolatedRegion);\n        if (xrayLink) {\n          field.config.links = [xrayLink];\n        }\n      } else {\n        // Right now we add generic link to open the query in xray console to every field so it shows in the logs row\n        // details. Unfortunately this also creates link for all values inside table which look weird.\n        field.config.links = [createAwsConsoleLink(curTarget, range, interpolatedRegion, replace, getVariableValue)];\n      }\n    }\n  }\n}\n\nasync function createInternalXrayLink(datasourceUid: string, region: string) {\n  let ds;\n  try {\n    ds = await getDataSourceSrv().get(datasourceUid);\n  } catch (e) {\n    console.error('Could not load linked xray data source, it was probably deleted after it was linked', e);\n    return undefined;\n  }\n\n  return {\n    title: ds.name,\n    url: '',\n    internal: {\n      query: { query: '${__value.raw}', queryType: 'getTrace', region: region },\n      datasourceUid: datasourceUid,\n      datasourceName: ds.name,\n    },\n  } as DataLink;\n}\n\nfunction createAwsConsoleLink(\n  target: CloudWatchLogsQuery,\n  range: TimeRange,\n  region: string,\n  replace: (target: string, fieldName?: string) => string,\n  getVariableValue: (value: string) => string[]\n) {\n  const interpolatedExpression = target.expression ? replace(target.expression) : '';\n  const interpolatedGroups = target.logGroupNames?.flatMap(getVariableValue) ?? [];\n\n  const urlProps: AwsUrl = {\n    end: range.to.toISOString(),\n    start: range.from.toISOString(),\n    timeType: 'ABSOLUTE',\n    tz: 'UTC',\n    editorString: interpolatedExpression,\n    isLiveTail: false,\n    source: interpolatedGroups,\n  };\n\n  const encodedUrl = encodeUrl(urlProps, region);\n  return {\n    url: encodedUrl,\n    title: 'View in CloudWatch console',\n    targetBlank: true,\n  };\n}\n","import { Observable, Subscription } from 'rxjs';\n\nimport { DataFrame, DataFrameJSON, DataQueryError } from '@grafana/data';\nimport { FetchError, toDataQueryResponse } from '@grafana/runtime';\n\nimport { StartQueryRequest } from '../types';\n\ntype Result = { frames: DataFrameJSON[]; error?: string };\n\n/**\n * A retry strategy specifically for cloud watch logs query. Cloud watch logs queries need first starting the query\n * and the polling for the results. The start query can fail because of the concurrent queries rate limit,\n * and so we have to retry the start query call if there is already lot of queries running.\n *\n * As we send multiple queries in a single request some can fail and some can succeed and we have to also handle those\n * cases by only retrying the failed queries. We retry the failed queries until we hit the time limit or all queries\n * succeed and only then we pass the data forward. This means we wait longer but makes the code a bit simpler as we\n * can treat starting the query and polling as steps in a pipeline.\n * @param queryFun\n * @param targets\n * @param options\n */\nexport function runWithRetry(\n  queryFun: (targets: StartQueryRequest[]) => Observable<DataFrame[]>,\n  targets: StartQueryRequest[],\n  timeoutFunc: (retry: number, startTime: number) => boolean\n): Observable<{ frames: DataFrame[]; error?: DataQueryError }> {\n  const startTime = new Date();\n  let retries = 0;\n  let timerID: any;\n  let subscription: Subscription;\n  let collected = {};\n\n  const retryWaitFunction = (retry: number) => {\n    return Math.pow(2, retry) * 1000 + Math.random() * 100;\n  };\n\n  return new Observable((observer) => {\n    // Run function is where the logic takes place. We have it in a function so we can call it recursively.\n    function run(currentQueryParams: StartQueryRequest[]) {\n      subscription = queryFun(currentQueryParams).subscribe({\n        next(frames) {\n          // In case we successfully finished, merge the current response with whatever we already collected.\n          const collectedPreviously = toDataQueryResponse({ data: { results: collected } }).data || [];\n          observer.next({ frames: [...collectedPreviously, ...frames] });\n          observer.complete();\n        },\n        error(error: FetchError<{ results?: Record<string, Result> }> | string) {\n          // In case of error we first try to figure out what kind of error it is\n\n          // This means it was a generic 500 error probably so we just pass it on\n          if (typeof error === 'string') {\n            observer.error(error);\n            return;\n          }\n\n          // In case of multiple queries this some can error while some may be ok\n          const errorData = splitErrorData(error);\n\n          if (!errorData) {\n            // Not sure what happened but the error structure wasn't what we expected\n            observer.error(error);\n            return;\n          }\n\n          if (!errorData!.errors.length) {\n            // So there is no limit error but some other errors so nothing to retry so we just pass it as it would be\n            // otherwise.\n            observer.error(error);\n            return;\n          }\n\n          if (timeoutFunc(retries, startTime.valueOf())) {\n            // We timed out but we could have started some queries\n            if (Object.keys(collected).length || Object.keys(errorData.good).length) {\n              const dataResponse = toDataQueryResponse({\n                data: {\n                  results: {\n                    ...(errorData.good ?? {}),\n                    ...(collected ?? {}),\n                  },\n                },\n              });\n              dataResponse.error = {\n                ...(dataResponse.error ?? {}),\n                message: `Some queries timed out: ${errorData.errorMessage}`,\n              };\n              // So we consider this a partial success and pass the data forward but also with error to be shown to\n              // the user.\n              observer.next({\n                error: dataResponse.error,\n                frames: dataResponse.data,\n              });\n              observer.complete();\n            } else {\n              // So we timed out and there was no data to pass forward so we just pass the error\n              const dataResponse = toDataQueryResponse({ data: { results: error.data?.results ?? {} } });\n              observer.error(dataResponse.error);\n            }\n            return;\n          }\n\n          collected = {\n            ...collected,\n            ...errorData!.good,\n          };\n\n          timerID = setTimeout(\n            () => {\n              retries++;\n              run(errorData!.errors);\n            },\n            // We want to know how long to wait for the next retry. First time this will be 0.\n            retryWaitFunction(retries + 1)\n          );\n        },\n      });\n    }\n    run(targets);\n    return () => {\n      // We clear only the latest timer and subscription but the observable should complete after one response so\n      // there should not be more things running at the same time.\n      clearTimeout(timerID);\n      subscription.unsubscribe();\n    };\n  });\n}\n\nfunction splitErrorData(error: FetchError<{ results?: Record<string, Result> }>) {\n  const results = error.data?.results;\n  if (!results) {\n    return undefined;\n  }\n  return Object.keys(results).reduce<{\n    errors: StartQueryRequest[];\n    good: Record<string, Result>;\n    errorMessage: string;\n  }>(\n    (acc, refId) => {\n      if (results[refId].error?.startsWith('LimitExceededException')) {\n        acc.errorMessage = results[refId].error!;\n        acc.errors.push(error.config.data.queries.find((q: any) => q.refId === refId));\n      } else {\n        acc.good[refId] = results[refId];\n      }\n      return acc;\n    },\n    { errors: [], good: {}, errorMessage: '' }\n  );\n}\n","import { SchedulerLike, Observable, SchedulerAction, Subscriber, asyncScheduler } from 'rxjs';\n\n/**\n * Creates an Observable that emits sequential numbers after increasing intervals of time\n * starting with `startPeriod`, ending with `endPeriod` and incrementing by `step`.\n */\nexport const increasingInterval = (\n  { startPeriod = 0, endPeriod = 5000, step = 1000 },\n  scheduler: SchedulerLike = asyncScheduler\n): Observable<number> => {\n  return new Observable<number>((subscriber) => {\n    const state: IntervalState = {\n      subscriber,\n      counter: 0,\n      period: startPeriod,\n      step,\n      endPeriod,\n    };\n\n    subscriber.add(scheduler.schedule(dispatch, startPeriod, state));\n    return subscriber;\n  });\n};\n\nfunction dispatch(this: SchedulerAction<IntervalState>, state?: IntervalState) {\n  if (!state) {\n    return;\n  }\n  const { subscriber, counter, period, step, endPeriod } = state;\n  subscriber.next(counter);\n  const newPeriod = Math.min(period + step, endPeriod);\n  this.schedule({ subscriber, counter: counter + 1, period: newPeriod, step, endPeriod }, newPeriod);\n}\n\ninterface IntervalState {\n  subscriber: Subscriber<number>;\n  counter: number;\n  period: number;\n  endPeriod: number;\n  step: number;\n}\n","import { isEmpty, set } from 'lodash';\nimport {\n  Observable,\n  of,\n  mergeMap,\n  map,\n  from,\n  concatMap,\n  finalize,\n  repeat,\n  scan,\n  share,\n  takeWhile,\n  tap,\n  zip,\n  catchError,\n  lastValueFrom,\n} from 'rxjs';\n\nimport {\n  DataFrame,\n  DataQueryError,\n  DataQueryErrorType,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n  LoadingState,\n  LogRowModel,\n  rangeUtil,\n  ScopedVars,\n} from '@grafana/data';\nimport { BackendDataSourceResponse, config, FetchError, FetchResponse, toDataQueryResponse } from '@grafana/runtime';\nimport { RowContextOptions } from '@grafana/ui/src/components/Logs/LogRowContextProvider';\nimport { TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\n\nimport {\n  CloudWatchJsonData,\n  CloudWatchLogsQuery,\n  CloudWatchLogsQueryStatus,\n  CloudWatchLogsRequest,\n  CloudWatchQuery,\n  DescribeLogGroupsRequest,\n  GetLogEventsRequest,\n  GetLogGroupFieldsRequest,\n  GetLogGroupFieldsResponse,\n  LogAction,\n  StartQueryRequest,\n} from '../types';\nimport { addDataLinksToLogsResponse } from '../utils/datalinks';\nimport { runWithRetry } from '../utils/logsRetry';\nimport { increasingInterval } from '../utils/rxjs/increasingInterval';\n\nimport { CloudWatchRequest } from './CloudWatchRequest';\n\nexport const LOG_IDENTIFIER_INTERNAL = '__log__grafana_internal__';\nexport const LOGSTREAM_IDENTIFIER_INTERNAL = '__logstream__grafana_internal__';\n\n// This class handles execution of CloudWatch logs query data queries\nexport class CloudWatchLogsQueryRunner extends CloudWatchRequest {\n  logsTimeout: string;\n  defaultLogGroups: string[];\n  logQueries: Record<string, { id: string; region: string; statsQuery: boolean }> = {};\n  tracingDataSourceUid?: string;\n\n  constructor(\n    instanceSettings: DataSourceInstanceSettings<CloudWatchJsonData>,\n    templateSrv: TemplateSrv,\n    private readonly timeSrv: TimeSrv\n  ) {\n    super(instanceSettings, templateSrv);\n\n    this.tracingDataSourceUid = instanceSettings.jsonData.tracingDatasourceUid;\n    this.logsTimeout = instanceSettings.jsonData.logsTimeout || '15m';\n    this.defaultLogGroups = instanceSettings.jsonData.defaultLogGroups || [];\n  }\n\n  /**\n   * Handle log query. The log query works by starting the query on the CloudWatch and then periodically polling for\n   * results.\n   * @param logQueries\n   * @param options\n   */\n  handleLogQueries = (\n    logQueries: CloudWatchLogsQuery[],\n    options: DataQueryRequest<CloudWatchQuery>\n  ): Observable<DataQueryResponse> => {\n    const queryParams = logQueries.map((target: CloudWatchLogsQuery) => ({\n      queryString: target.expression || '',\n      refId: target.refId,\n      logGroupNames: target.logGroupNames || this.defaultLogGroups,\n      region: super.replaceVariableAndDisplayWarningIfMulti(\n        this.getActualRegion(target.region),\n        options.scopedVars,\n        true,\n        'region'\n      ),\n    }));\n\n    const validLogQueries = queryParams.filter((item) => item.logGroupNames?.length);\n    if (logQueries.length > validLogQueries.length) {\n      return of({ data: [], error: { message: 'Log group is required' } });\n    }\n\n    // No valid targets, return the empty result to save a round trip.\n    if (isEmpty(validLogQueries)) {\n      return of({ data: [], state: LoadingState.Done });\n    }\n\n    const startTime = new Date();\n    const timeoutFunc = () => {\n      return Date.now() >= startTime.valueOf() + rangeUtil.intervalToMs(this.logsTimeout);\n    };\n\n    return runWithRetry(\n      (targets: StartQueryRequest[]) => {\n        return this.makeLogActionRequest('StartQuery', targets, {\n          makeReplacements: true,\n          scopedVars: options.scopedVars,\n          skipCache: true,\n        });\n      },\n      queryParams,\n      timeoutFunc\n    ).pipe(\n      mergeMap(({ frames, error }: { frames: DataFrame[]; error?: DataQueryError }) =>\n        // This queries for the results\n        this.logsQuery(\n          frames.map((dataFrame) => ({\n            queryId: dataFrame.fields[0].values.get(0),\n            region: dataFrame.meta?.custom?.['Region'] ?? 'default',\n            refId: dataFrame.refId!,\n            statsGroups: logQueries.find((target) => target.refId === dataFrame.refId)?.statsGroups,\n          })),\n          timeoutFunc\n        ).pipe(\n          map((response: DataQueryResponse) => {\n            if (!response.error && error) {\n              response.error = error;\n            }\n            return response;\n          })\n        )\n      ),\n      mergeMap((dataQueryResponse) => {\n        return from(\n          (async () => {\n            await addDataLinksToLogsResponse(\n              dataQueryResponse,\n              options,\n              this.timeSrv.timeRange(),\n              this.replaceVariableAndDisplayWarningIfMulti.bind(this),\n              this.expandVariableToArray.bind(this),\n              this.getActualRegion.bind(this),\n              this.tracingDataSourceUid\n            );\n\n            return dataQueryResponse;\n          })()\n        );\n      })\n    );\n  };\n\n  /**\n   * Checks progress and polls data of a started logs query with some retry logic.\n   * @param queryParams\n   */\n  logsQuery(\n    queryParams: Array<{\n      queryId: string;\n      refId: string;\n      limit?: number;\n      region: string;\n      statsGroups?: string[];\n    }>,\n    timeoutFunc: () => boolean\n  ): Observable<DataQueryResponse> {\n    this.logQueries = {};\n    queryParams.forEach((param) => {\n      this.logQueries[param.refId] = {\n        id: param.queryId,\n        region: param.region,\n        statsQuery: (param.statsGroups?.length ?? 0) > 0 ?? false,\n      };\n    });\n\n    const dataFrames = increasingInterval({ startPeriod: 100, endPeriod: 1000, step: 300 }).pipe(\n      concatMap((_) => this.makeLogActionRequest('GetQueryResults', queryParams, { skipCache: true })),\n      repeat(),\n      share()\n    );\n\n    const initialValue: { failures: number; prevRecordsMatched: Record<string, number> } = {\n      failures: 0,\n      prevRecordsMatched: {},\n    };\n    const consecutiveFailedAttempts = dataFrames.pipe(\n      scan(({ failures, prevRecordsMatched }, frames) => {\n        failures++;\n        for (const frame of frames) {\n          const recordsMatched = frame.meta?.stats?.find((stat) => stat.displayName === 'Records scanned')?.value!;\n          if (recordsMatched > (prevRecordsMatched[frame.refId!] ?? 0)) {\n            failures = 0;\n          }\n          prevRecordsMatched[frame.refId!] = recordsMatched;\n        }\n\n        return { failures, prevRecordsMatched };\n      }, initialValue),\n      map(({ failures }) => failures),\n      share()\n    );\n\n    const queryResponse: Observable<DataQueryResponse> = zip(dataFrames, consecutiveFailedAttempts).pipe(\n      tap(([dataFrames]) => {\n        for (const frame of dataFrames) {\n          if (\n            [\n              CloudWatchLogsQueryStatus.Complete,\n              CloudWatchLogsQueryStatus.Cancelled,\n              CloudWatchLogsQueryStatus.Failed,\n            ].includes(frame.meta?.custom?.['Status']) &&\n            this.logQueries.hasOwnProperty(frame.refId!)\n          ) {\n            delete this.logQueries[frame.refId!];\n          }\n        }\n      }),\n      map(([dataFrames, failedAttempts]) => {\n        if (timeoutFunc()) {\n          for (const frame of dataFrames) {\n            set(frame, 'meta.custom.Status', CloudWatchLogsQueryStatus.Cancelled);\n          }\n        }\n\n        return {\n          data: dataFrames,\n          key: 'test-key',\n          state: dataFrames.every((dataFrame) =>\n            [\n              CloudWatchLogsQueryStatus.Complete,\n              CloudWatchLogsQueryStatus.Cancelled,\n              CloudWatchLogsQueryStatus.Failed,\n            ].includes(dataFrame.meta?.custom?.['Status'])\n          )\n            ? LoadingState.Done\n            : LoadingState.Loading,\n          error: timeoutFunc()\n            ? {\n                message: `error: query timed out after ${failedAttempts} attempts`,\n                type: DataQueryErrorType.Timeout,\n              }\n            : undefined,\n        };\n      }),\n      takeWhile(({ state }) => state !== LoadingState.Error && state !== LoadingState.Done, true)\n    );\n\n    return withTeardown(queryResponse, () => this.stopQueries());\n  }\n\n  stopQueries() {\n    if (Object.keys(this.logQueries).length > 0) {\n      this.makeLogActionRequest(\n        'StopQuery',\n        Object.values(this.logQueries).map((logQuery) => ({ queryId: logQuery.id, region: logQuery.region })),\n        {\n          makeReplacements: false,\n          skipCache: true,\n        }\n      ).pipe(\n        finalize(() => {\n          this.logQueries = {};\n        })\n      );\n    }\n  }\n\n  makeLogActionRequest(\n    subtype: LogAction,\n    queryParams: CloudWatchLogsRequest[],\n    options: {\n      scopedVars?: ScopedVars;\n      makeReplacements?: boolean;\n      skipCache?: boolean;\n    } = {\n      makeReplacements: true,\n      skipCache: false,\n    }\n  ): Observable<DataFrame[]> {\n    const range = this.timeSrv.timeRange();\n\n    const requestParams = {\n      from: range.from.valueOf().toString(),\n      to: range.to.valueOf().toString(),\n      queries: queryParams.map((param: CloudWatchLogsRequest) => ({\n        // eslint-ignore-next-line\n        refId: (param as StartQueryRequest).refId || 'A',\n        intervalMs: 1, // dummy\n        maxDataPoints: 1, // dummy\n        datasource: this.ref,\n        type: 'logAction',\n        subtype: subtype,\n        ...param,\n      })),\n    };\n\n    if (options.makeReplacements) {\n      requestParams.queries.forEach((query: CloudWatchLogsRequest) => {\n        const fieldsToReplace: Array<\n          keyof (GetLogEventsRequest & StartQueryRequest & DescribeLogGroupsRequest & GetLogGroupFieldsRequest)\n        > = ['queryString', 'logGroupNames', 'logGroupName', 'logGroupNamePrefix'];\n\n        // eslint-ignore-next-line\n        const anyQuery: any = query;\n        for (const fieldName of fieldsToReplace) {\n          if (query.hasOwnProperty(fieldName)) {\n            if (Array.isArray(anyQuery[fieldName])) {\n              anyQuery[fieldName] = anyQuery[fieldName].flatMap((val: string) => {\n                if (fieldName === 'logGroupNames') {\n                  return this.expandVariableToArray(val, options.scopedVars || {});\n                }\n                return this.replaceVariableAndDisplayWarningIfMulti(val, options.scopedVars, true, fieldName);\n              });\n            } else {\n              anyQuery[fieldName] = this.replaceVariableAndDisplayWarningIfMulti(\n                anyQuery[fieldName],\n                options.scopedVars,\n                true,\n                fieldName\n              );\n            }\n          }\n        }\n\n        if (anyQuery.region) {\n          anyQuery.region = this.replaceVariableAndDisplayWarningIfMulti(\n            anyQuery.region,\n            options.scopedVars,\n            true,\n            'region'\n          );\n          anyQuery.region = this.getActualRegion(anyQuery.region);\n        }\n      });\n    }\n\n    const resultsToDataFrames = (\n      val:\n        | { data: BackendDataSourceResponse | undefined }\n        | FetchResponse<BackendDataSourceResponse | undefined>\n        | DataQueryError\n    ): DataFrame[] => toDataQueryResponse(val).data || [];\n    let headers = {};\n    if (options.skipCache) {\n      headers = {\n        'X-Cache-Skip': true,\n      };\n    }\n\n    return this.awsRequest(this.dsQueryEndpoint, requestParams, headers).pipe(\n      map((response) => resultsToDataFrames({ data: response })),\n      catchError((err: FetchError) => {\n        if (config.featureToggles.datasourceQueryMultiStatus && err.status === 207) {\n          throw err;\n        }\n\n        if (err.status === 400) {\n          throw err;\n        }\n\n        if (err.data?.error) {\n          throw err.data.error;\n        } else if (err.data?.message) {\n          // In PROD we do not supply .error\n          throw err.data.message;\n        }\n\n        throw err;\n      })\n    );\n  }\n\n  getLogRowContext = async (\n    row: LogRowModel,\n    { limit = 10, direction = 'BACKWARD' }: RowContextOptions = {},\n    query?: CloudWatchLogsQuery\n  ): Promise<{ data: DataFrame[] }> => {\n    let logStreamField = null;\n    let logField = null;\n\n    for (const field of row.dataFrame.fields) {\n      if (field.name === LOGSTREAM_IDENTIFIER_INTERNAL) {\n        logStreamField = field;\n        if (logField !== null) {\n          break;\n        }\n      } else if (field.name === LOG_IDENTIFIER_INTERNAL) {\n        logField = field;\n        if (logStreamField !== null) {\n          break;\n        }\n      }\n    }\n\n    const requestParams: GetLogEventsRequest = {\n      limit,\n      startFromHead: direction !== 'BACKWARD',\n      region: query?.region,\n      logGroupName: parseLogGroupName(logField!.values.get(row.rowIndex)),\n      logStreamName: logStreamField!.values.get(row.rowIndex),\n    };\n\n    if (direction === 'BACKWARD') {\n      requestParams.endTime = row.timeEpochMs;\n    } else {\n      requestParams.startTime = row.timeEpochMs;\n    }\n\n    const dataFrames = await lastValueFrom(this.makeLogActionRequest('GetLogEvents', [requestParams]));\n\n    return {\n      data: dataFrames,\n    };\n  };\n\n  async getLogGroupFields(params: GetLogGroupFieldsRequest): Promise<GetLogGroupFieldsResponse> {\n    const dataFrames = await lastValueFrom(this.makeLogActionRequest('GetLogGroupFields', [params]));\n\n    const fieldNames = dataFrames[0].fields[0].values.toArray();\n    const fieldPercentages = dataFrames[0].fields[1].values.toArray();\n    const getLogGroupFieldsResponse = {\n      logGroupFields: fieldNames.map((val, i) => ({ name: val, percent: fieldPercentages[i] })) ?? [],\n    };\n\n    return getLogGroupFieldsResponse;\n  }\n}\n\nfunction withTeardown<T = DataQueryResponse>(observable: Observable<T>, onUnsubscribe: () => void): Observable<T> {\n  return new Observable<T>((subscriber) => {\n    const innerSub = observable.subscribe({\n      next: (val) => subscriber.next(val),\n      error: (err) => subscriber.next(err),\n      complete: () => subscriber.complete(),\n    });\n\n    return () => {\n      innerSub.unsubscribe();\n      onUnsubscribe();\n    };\n  });\n}\n\nfunction parseLogGroupName(logIdentifier: string): string {\n  const colonIndex = logIdentifier.lastIndexOf(':');\n  return logIdentifier.slice(colonIndex + 1);\n}\n","import React, { FunctionComponent } from 'react';\n\nexport interface Props {\n  region: string;\n}\n\nexport const ThrottlingErrorMessage: FunctionComponent<Props> = ({ region }) => (\n  <p>\n    Please visit the&nbsp;\n    <a\n      target=\"_blank\"\n      rel=\"noreferrer\"\n      className=\"text-link\"\n      href={`https://${region}.console.aws.amazon.com/servicequotas/home?region=${region}#!/services/monitoring/quotas/L-5E141212`}\n    >\n      AWS Service Quotas console\n    </a>\n    &nbsp;to request a quota increase or see our&nbsp;\n    <a\n      target=\"_blank\"\n      rel=\"noreferrer\"\n      className=\"text-link\"\n      href=\"https://grafana.com/docs/grafana/latest/datasources/cloudwatch/#service-quotas\"\n    >\n      documentation\n    </a>\n    &nbsp;to learn more.\n  </p>\n);\n","import { findLast, isEmpty } from 'lodash';\nimport React from 'react';\nimport { catchError, map, Observable, of, throwError } from 'rxjs';\n\nimport {\n  DataFrame,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n  dateTimeFormat,\n  FieldType,\n  rangeUtil,\n  ScopedVars,\n  TimeRange,\n} from '@grafana/data';\nimport { toDataQueryResponse } from '@grafana/runtime';\nimport { notifyApp } from 'app/core/actions';\nimport { createErrorNotification } from 'app/core/copy/appNotification';\nimport { TemplateSrv } from 'app/features/templating/template_srv';\nimport { store } from 'app/store/store';\nimport { AppNotificationTimeout } from 'app/types';\n\nimport { ThrottlingErrorMessage } from '../components/ThrottlingErrorMessage';\nimport memoizedDebounce from '../memoizedDebounce';\nimport { migrateMetricQuery } from '../migrations/metricQueryMigrations';\nimport {\n  CloudWatchJsonData,\n  CloudWatchMetricsQuery,\n  CloudWatchQuery,\n  DataQueryError,\n  MetricQuery,\n  MetricRequest,\n} from '../types';\nimport { filterMetricsQuery } from '../utils/utils';\n\nimport { CloudWatchRequest } from './CloudWatchRequest';\n\nconst displayAlert = (datasourceName: string, region: string) =>\n  store.dispatch(\n    notifyApp(\n      createErrorNotification(\n        `CloudWatch request limit reached in ${region} for data source ${datasourceName}`,\n        '',\n        undefined,\n        React.createElement(ThrottlingErrorMessage, { region }, null)\n      )\n    )\n  );\n// This class handles execution of CloudWatch metrics query data queries\nexport class CloudWatchMetricsQueryRunner extends CloudWatchRequest {\n  debouncedAlert: (datasourceName: string, region: string) => void = memoizedDebounce(\n    displayAlert,\n    AppNotificationTimeout.Error\n  );\n\n  constructor(instanceSettings: DataSourceInstanceSettings<CloudWatchJsonData>, templateSrv: TemplateSrv) {\n    super(instanceSettings, templateSrv);\n  }\n\n  handleMetricQueries = (\n    metricQueries: CloudWatchMetricsQuery[],\n    options: DataQueryRequest<CloudWatchQuery>\n  ): Observable<DataQueryResponse> => {\n    const timezoneUTCOffset = dateTimeFormat(Date.now(), {\n      timeZone: options.timezone,\n      format: 'Z',\n    }).replace(':', '');\n\n    const validMetricsQueries = metricQueries\n      .filter(this.filterMetricQuery)\n      .map((q: CloudWatchMetricsQuery): MetricQuery => {\n        const migratedQuery = migrateMetricQuery(q);\n        const migratedAndIterpolatedQuery = this.replaceMetricQueryVars(migratedQuery, options);\n\n        return {\n          timezoneUTCOffset,\n          intervalMs: options.intervalMs,\n          maxDataPoints: options.maxDataPoints,\n          ...migratedAndIterpolatedQuery,\n          type: 'timeSeriesQuery',\n          datasource: this.ref,\n        };\n      });\n\n    // No valid targets, return the empty result to save a round trip.\n    if (isEmpty(validMetricsQueries)) {\n      return of({ data: [] });\n    }\n\n    const request = {\n      from: options?.range?.from.valueOf().toString(),\n      to: options?.range?.to.valueOf().toString(),\n      queries: validMetricsQueries,\n    };\n\n    return this.performTimeSeriesQuery(request, options.range);\n  };\n\n  interpolateMetricsQueryVariables(\n    query: CloudWatchMetricsQuery,\n    scopedVars: ScopedVars\n  ): Pick<CloudWatchMetricsQuery, 'alias' | 'metricName' | 'namespace' | 'period' | 'dimensions' | 'sqlExpression'> {\n    return {\n      alias: this.replaceVariableAndDisplayWarningIfMulti(query.alias, scopedVars),\n      metricName: this.replaceVariableAndDisplayWarningIfMulti(query.metricName, scopedVars),\n      namespace: this.replaceVariableAndDisplayWarningIfMulti(query.namespace, scopedVars),\n      period: this.replaceVariableAndDisplayWarningIfMulti(query.period, scopedVars),\n      sqlExpression: this.replaceVariableAndDisplayWarningIfMulti(query.sqlExpression, scopedVars),\n      dimensions: this.convertDimensionFormat(query.dimensions ?? {}, scopedVars),\n    };\n  }\n\n  performTimeSeriesQuery(request: MetricRequest, { from, to }: TimeRange): Observable<DataQueryResponse> {\n    return this.awsRequest(this.dsQueryEndpoint, request).pipe(\n      map((res) => {\n        const dataframes: DataFrame[] = toDataQueryResponse({ data: res }).data;\n        if (!dataframes || dataframes.length <= 0) {\n          return { data: [] };\n        }\n\n        const lastError = findLast(res.results, (v) => !!v.error);\n\n        dataframes.forEach((frame) => {\n          frame.fields.forEach((field) => {\n            if (field.type === FieldType.time) {\n              // field.config.interval is populated in order for Grafana to fill in null values at frame intervals\n              field.config.interval = frame.meta?.custom?.period * 1000;\n            }\n          });\n        });\n\n        return {\n          data: dataframes,\n          error: lastError ? { message: lastError.error } : undefined,\n        };\n      }),\n      catchError((err: DataQueryError<CloudWatchMetricsQuery>) => {\n        const isFrameError = err.data?.results;\n\n        // Error is not frame specific\n        if (!isFrameError && err.data && err.data.message === 'Metric request error' && err.data.error) {\n          err.message = err.data.error;\n          return throwError(() => err);\n        }\n\n        // The error is either for a specific frame or for all the frames\n        const results: Array<{ error?: string }> = Object.values(err.data?.results ?? {});\n        const firstErrorResult = results.find((r) => r.error);\n        if (firstErrorResult) {\n          err.message = firstErrorResult.error;\n        }\n\n        if (results.some((r) => r.error && /^Throttling:.*/.test(r.error))) {\n          const failedRedIds = Object.keys(err.data?.results ?? {});\n          const regionsAffected = Object.values(request.queries).reduce(\n            (res: string[], { refId, region }) =>\n              (refId && !failedRedIds.includes(refId)) || res.includes(region) ? res : [...res, region],\n            []\n          );\n          regionsAffected.forEach((region) => {\n            const actualRegion = this.getActualRegion(region);\n            if (actualRegion) {\n              this.debouncedAlert(this.instanceSettings.name, actualRegion);\n            }\n          });\n        }\n\n        return throwError(() => err);\n      })\n    );\n  }\n\n  filterMetricQuery(query: CloudWatchMetricsQuery): boolean {\n    return filterMetricsQuery(query);\n  }\n\n  replaceMetricQueryVars(\n    query: CloudWatchMetricsQuery,\n    options: DataQueryRequest<CloudWatchQuery>\n  ): CloudWatchMetricsQuery {\n    query.region = this.templateSrv.replace(this.getActualRegion(query.region), options.scopedVars);\n    query.namespace = this.replaceVariableAndDisplayWarningIfMulti(\n      query.namespace,\n      options.scopedVars,\n      true,\n      'namespace'\n    );\n    query.metricName = this.replaceVariableAndDisplayWarningIfMulti(\n      query.metricName,\n      options.scopedVars,\n      true,\n      'metric name'\n    );\n    query.dimensions = this.convertDimensionFormat(query.dimensions ?? {}, options.scopedVars);\n    query.statistic = this.templateSrv.replace(query.statistic, options.scopedVars);\n    query.period = String(this.getPeriod(query, options)); // use string format for period in graph query, and alerting\n    query.id = this.templateSrv.replace(query.id, options.scopedVars);\n    query.expression = this.templateSrv.replace(query.expression, options.scopedVars);\n    query.sqlExpression = this.templateSrv.replace(query.sqlExpression, options.scopedVars, 'raw');\n\n    return query;\n  }\n\n  getPeriod(target: CloudWatchMetricsQuery, options: DataQueryRequest<CloudWatchQuery>) {\n    let period = this.templateSrv.replace(target.period, options.scopedVars);\n    if (period && period.toLowerCase() !== 'auto') {\n      let p: number;\n      if (/^\\d+$/.test(period)) {\n        p = parseInt(period, 10);\n      } else {\n        p = rangeUtil.intervalToSeconds(period);\n      }\n\n      if (p < 1) {\n        p = 1;\n      }\n\n      return String(p);\n    }\n\n    return period;\n  }\n}\n","import { omit } from 'lodash';\n\nimport { Dimensions, VariableQuery, VariableQueryType, OldVariableQuery, MultiFilters } from '../types';\n\nconst jsonVariable = /\\${(\\w+):json}/g;\n\nfunction isVariableQuery(rawQuery: string | VariableQuery | OldVariableQuery): rawQuery is VariableQuery {\n  return typeof rawQuery !== 'string' && typeof rawQuery.ec2Filters !== 'string' && typeof rawQuery.tags !== 'string';\n}\n\nfunction migrateMultiFilters(oldFilters: string): MultiFilters {\n  const tempFilters = oldFilters.replace(jsonVariable, '\"$$$1\"');\n  const parsedFilters: Dimensions = JSON.parse(tempFilters);\n  const newFilters: MultiFilters = {};\n  // if the old filter was {key:value} transform it to {key:[value]}\n  Object.keys(parsedFilters).forEach((key) => {\n    const value = parsedFilters[key];\n    if (typeof value === 'string') {\n      newFilters[key] = [value];\n    } else if (value !== undefined) {\n      newFilters[key] = value;\n    }\n  });\n  return newFilters;\n}\n\nexport function migrateVariableQuery(rawQuery: string | VariableQuery | OldVariableQuery): VariableQuery {\n  if (isVariableQuery(rawQuery)) {\n    return rawQuery;\n  }\n\n  // rawQuery is OldVariableQuery\n  if (typeof rawQuery !== 'string') {\n    const newQuery: VariableQuery = omit(rawQuery, ['dimensionFilters', 'ec2Filters', 'tags']);\n    newQuery.dimensionFilters = {};\n    newQuery.ec2Filters = {};\n    newQuery.tags = {};\n\n    if (rawQuery.dimensionFilters !== '' && rawQuery.ec2Filters !== '[]') {\n      const tempFilters = rawQuery.dimensionFilters.replace(jsonVariable, '\"$$$1\"');\n      try {\n        newQuery.dimensionFilters = JSON.parse(tempFilters);\n      } catch {\n        throw new Error(`unable to migrate poorly formed filters: ${rawQuery.dimensionFilters}`);\n      }\n    }\n    if (rawQuery.ec2Filters !== '' && rawQuery.ec2Filters !== '[]') {\n      try {\n        newQuery.ec2Filters = migrateMultiFilters(rawQuery.ec2Filters);\n      } catch {\n        throw new Error(`unable to migrate poorly formed filters: ${rawQuery.ec2Filters}`);\n      }\n    }\n    if (rawQuery.tags !== '' && rawQuery.tags !== '[]') {\n      try {\n        newQuery.tags = migrateMultiFilters(rawQuery.tags);\n      } catch {\n        throw new Error(`unable to migrate poorly formed filters: ${rawQuery.tags}`);\n      }\n    }\n    return newQuery;\n  }\n\n  const newQuery: VariableQuery = {\n    refId: 'CloudWatchVariableQueryEditor-VariableQuery',\n    queryType: VariableQueryType.Regions,\n    namespace: '',\n    region: '',\n    metricName: '',\n    dimensionKey: '',\n    dimensionFilters: {},\n    ec2Filters: {},\n    instanceID: '',\n    attributeName: '',\n    resourceType: '',\n    tags: {},\n  };\n\n  if (rawQuery === '') {\n    return newQuery;\n  }\n\n  if (rawQuery.match(/^regions\\(\\)/)) {\n    return newQuery;\n  }\n  if (rawQuery.match(/^namespaces\\(\\)/)) {\n    newQuery.queryType = VariableQueryType.Namespaces;\n    return newQuery;\n  }\n  const metricNameQuery = rawQuery.match(/^metrics\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/);\n  if (metricNameQuery) {\n    newQuery.queryType = VariableQueryType.Metrics;\n    newQuery.namespace = metricNameQuery[1];\n    newQuery.region = metricNameQuery[3] || '';\n    return newQuery;\n  }\n  const dimensionKeysQuery = rawQuery.match(/^dimension_keys\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/);\n  if (dimensionKeysQuery) {\n    newQuery.queryType = VariableQueryType.DimensionKeys;\n    newQuery.namespace = dimensionKeysQuery[1];\n    newQuery.region = dimensionKeysQuery[3] || '';\n    return newQuery;\n  }\n\n  const dimensionValuesQuery = rawQuery.match(\n    /^dimension_values\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?([^,]+?)(,\\s?(.+))?\\)/\n  );\n  if (dimensionValuesQuery) {\n    newQuery.queryType = VariableQueryType.DimensionValues;\n    newQuery.region = dimensionValuesQuery[1];\n    newQuery.namespace = dimensionValuesQuery[2];\n    newQuery.metricName = dimensionValuesQuery[3];\n    newQuery.dimensionKey = dimensionValuesQuery[4];\n    newQuery.dimensionFilters = {};\n    if (!!dimensionValuesQuery[6] && dimensionValuesQuery[6] !== '[]') {\n      const tempFilters = dimensionValuesQuery[6].replace(jsonVariable, '\"$$$1\"');\n      try {\n        newQuery.dimensionFilters = JSON.parse(tempFilters);\n      } catch {\n        throw new Error(`unable to migrate poorly formed filters: ${dimensionValuesQuery[6]}`);\n      }\n    }\n    return newQuery;\n  }\n\n  const ebsVolumeIdsQuery = rawQuery.match(/^ebs_volume_ids\\(([^,]+?),\\s?([^,]+?)\\)/);\n  if (ebsVolumeIdsQuery) {\n    newQuery.queryType = VariableQueryType.EBSVolumeIDs;\n    newQuery.region = ebsVolumeIdsQuery[1];\n    newQuery.instanceID = ebsVolumeIdsQuery[2];\n    return newQuery;\n  }\n\n  const ec2InstanceAttributeQuery = rawQuery.match(/^ec2_instance_attribute\\(([^,]+?),\\s?([^,]+?),\\s?(.+?)\\)/);\n  if (ec2InstanceAttributeQuery) {\n    newQuery.queryType = VariableQueryType.EC2InstanceAttributes;\n    newQuery.region = ec2InstanceAttributeQuery[1];\n    newQuery.attributeName = ec2InstanceAttributeQuery[2];\n    if (ec2InstanceAttributeQuery[3] && ec2InstanceAttributeQuery[3] !== '[]') {\n      try {\n        newQuery.ec2Filters = migrateMultiFilters(ec2InstanceAttributeQuery[3]);\n      } catch {\n        throw new Error(`unable to migrate poorly formed filters: ${ec2InstanceAttributeQuery[3]}`);\n      }\n    }\n    return newQuery;\n  }\n\n  const resourceARNsQuery = rawQuery.match(/^resource_arns\\(([^,]+?),\\s?([^,]+?),\\s?(.+?)\\)/);\n  if (resourceARNsQuery) {\n    newQuery.queryType = VariableQueryType.ResourceArns;\n    newQuery.region = resourceARNsQuery[1];\n    newQuery.resourceType = resourceARNsQuery[2];\n    if (resourceARNsQuery[3] && resourceARNsQuery[3] !== '[]') {\n      try {\n        newQuery.tags = migrateMultiFilters(resourceARNsQuery[3]);\n      } catch {\n        throw new Error(`unable to migrate poorly formed filters: ${resourceARNsQuery[3]}`);\n      }\n    }\n    return newQuery;\n  }\n\n  const statsQuery = rawQuery.match(/^statistics\\(\\)/);\n  if (statsQuery) {\n    newQuery.queryType = VariableQueryType.Statistics;\n    return newQuery;\n  }\n  throw new Error('unable to parse old variable query');\n}\n","import { css, cx } from '@emotion/css';\nimport React, { FunctionComponent, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { AccessoryButton, InputGroup } from '@grafana/experimental';\nimport { Input, stylesFactory, useTheme2 } from '@grafana/ui';\n\nimport { MultiFilterCondition } from './MultiFilter';\n\nexport interface Props {\n  filter: MultiFilterCondition;\n  onChange: (value: MultiFilterCondition) => void;\n  onDelete: () => void;\n  keyPlaceholder?: string;\n}\n\nexport const MultiFilterItem: FunctionComponent<Props> = ({ filter, onChange, onDelete, keyPlaceholder }) => {\n  const [localKey, setLocalKey] = useState(filter.key || '');\n  const [localValue, setLocalValue] = useState(filter.value?.join(', ') || '');\n  const theme = useTheme2();\n  const styles = getOperatorStyles(theme);\n\n  return (\n    <div data-testid=\"cloudwatch-multifilter-item\">\n      <InputGroup>\n        <Input\n          data-testid=\"cloudwatch-multifilter-item-key\"\n          aria-label=\"Filter key\"\n          value={localKey}\n          placeholder={keyPlaceholder ?? 'key'}\n          onChange={(e) => setLocalKey(e.currentTarget.value)}\n          onBlur={() => {\n            if (localKey && localKey !== filter.key) {\n              onChange({ ...filter, key: localKey });\n            }\n          }}\n        />\n\n        <span className={cx(styles.root)}>=</span>\n\n        <Input\n          data-testid=\"cloudwatch-multifilter-item-value\"\n          aria-label=\"Filter value\"\n          value={localValue}\n          placeholder=\"value1, value2,...\"\n          onChange={(e) => setLocalValue(e.currentTarget.value)}\n          onBlur={() => {\n            const newValues = localValue.split(',').map((v) => v.trim());\n            if (localValue && newValues !== filter.value) {\n              onChange({ ...filter, value: newValues });\n            }\n            setLocalValue(newValues.join(', '));\n          }}\n        />\n\n        <AccessoryButton aria-label=\"remove\" icon=\"times\" variant=\"secondary\" onClick={onDelete} type=\"button\" />\n      </InputGroup>\n    </div>\n  );\n};\n\nconst getOperatorStyles = stylesFactory((theme: GrafanaTheme2) => ({\n  root: css({\n    padding: theme.spacing(0, 1),\n    alignSelf: 'center',\n  }),\n}));\n","import { isEqual } from 'lodash';\nimport React, { useEffect, useState } from 'react';\n\nimport { EditorList } from '@grafana/experimental';\n\nimport { MultiFilters } from '../../types';\n\nimport { MultiFilterItem } from './MultiFilterItem';\n\nexport interface Props {\n  filters?: MultiFilters;\n  onChange: (filters: MultiFilters) => void;\n  keyPlaceholder?: string;\n}\n\nexport interface MultiFilterCondition {\n  key?: string;\n  operator?: string;\n  value?: string[];\n}\n\nconst multiFiltersToFilterConditions = (filters: MultiFilters) =>\n  Object.keys(filters).map((key) => ({ key, value: filters[key], operator: '=' }));\n\nconst filterConditionsToMultiFilters = (filters: MultiFilterCondition[]) => {\n  const res: MultiFilters = {};\n  filters.forEach(({ key, value }) => {\n    if (key && value) {\n      res[key] = value;\n    }\n  });\n  return res;\n};\n\nexport const MultiFilter = ({ filters, onChange, keyPlaceholder }: Props) => {\n  const [items, setItems] = useState<MultiFilterCondition[]>([]);\n  useEffect(() => setItems(filters ? multiFiltersToFilterConditions(filters) : []), [filters]);\n  const onFiltersChange = (newItems: Array<Partial<MultiFilterCondition>>) => {\n    setItems(newItems);\n\n    // The onChange event should only be triggered in the case there is a complete dimension object.\n    // So when a new key is added that does not yet have a value, it should not trigger an onChange event.\n    const newMultifilters = filterConditionsToMultiFilters(newItems);\n    if (!isEqual(newMultifilters, filters)) {\n      onChange(newMultifilters);\n    }\n  };\n\n  return <EditorList items={items} onChange={onFiltersChange} renderItem={makeRenderFilter(keyPlaceholder)} />;\n};\n\nfunction makeRenderFilter(keyPlaceholder?: string) {\n  function renderFilter(\n    item: MultiFilterCondition,\n    onChange: (item: MultiFilterCondition) => void,\n    onDelete: () => void\n  ) {\n    return (\n      <MultiFilterItem\n        filter={item}\n        onChange={(item) => onChange(item)}\n        onDelete={onDelete}\n        keyPlaceholder={keyPlaceholder}\n      />\n    );\n  }\n  return renderFilter;\n}\n","import React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { InlineField, Select } from '@grafana/ui';\n\nimport { VariableQueryType } from '../../types';\n\nconst LABEL_WIDTH = 20;\n\ninterface VariableQueryFieldProps<T> {\n  onChange: (value: T) => void;\n  options: SelectableValue[];\n  value: T | null;\n  label: string;\n  inputId?: string;\n  allowCustomValue?: boolean;\n  isLoading?: boolean;\n}\n\nexport const VariableQueryField = <T extends string | VariableQueryType>({\n  label,\n  onChange,\n  value,\n  options,\n  allowCustomValue = false,\n  isLoading = false,\n  inputId = label,\n}: VariableQueryFieldProps<T>) => {\n  return (\n    <InlineField label={label} labelWidth={LABEL_WIDTH} htmlFor={inputId}>\n      <Select\n        aria-label={label}\n        width={25}\n        allowCustomValue={allowCustomValue}\n        value={value}\n        onChange={({ value }) => onChange(value!)}\n        options={options}\n        isLoading={isLoading}\n        inputId={inputId}\n      />\n    </InlineField>\n  );\n};\n","import React, { FC, useState } from 'react';\n\nimport { InlineField, Input, PopoverContent } from '@grafana/ui';\n\nconst LABEL_WIDTH = 20;\n\ninterface VariableTextFieldProps {\n  onBlur: (value: string) => void;\n  value: string;\n  label: string;\n  placeholder?: string;\n  tooltip?: PopoverContent;\n  interactive?: boolean;\n}\n\nexport const VariableTextField: FC<VariableTextFieldProps> = ({\n  interactive,\n  label,\n  onBlur,\n  placeholder,\n  value,\n  tooltip,\n}) => {\n  const [localValue, setLocalValue] = useState(value);\n  return (\n    <InlineField interactive={interactive} label={label} labelWidth={LABEL_WIDTH} tooltip={tooltip} grow>\n      <Input\n        aria-label={label}\n        placeholder={placeholder}\n        value={localValue}\n        onChange={(e) => setLocalValue(e.currentTarget.value)}\n        onBlur={() => onBlur(localValue)}\n      />\n    </InlineField>\n  );\n};\n","import React from 'react';\n\nimport { QueryEditorProps, SelectableValue } from '@grafana/data';\nimport { InlineField } from '@grafana/ui';\n\nimport { Dimensions } from '..';\nimport { CloudWatchDatasource } from '../../datasource';\nimport { useDimensionKeys, useMetrics, useNamespaces, useRegions } from '../../hooks';\nimport { migrateVariableQuery } from '../../migrations/variableQueryMigrations';\nimport { CloudWatchJsonData, CloudWatchQuery, VariableQuery, VariableQueryType } from '../../types';\n\nimport { MultiFilter } from './MultiFilter';\nimport { VariableQueryField } from './VariableQueryField';\nimport { VariableTextField } from './VariableTextField';\n\nexport type Props = QueryEditorProps<CloudWatchDatasource, CloudWatchQuery, CloudWatchJsonData, VariableQuery>;\n\nconst queryTypes: Array<{ value: string; label: string }> = [\n  { value: VariableQueryType.Regions, label: 'Regions' },\n  { value: VariableQueryType.Namespaces, label: 'Namespaces' },\n  { value: VariableQueryType.Metrics, label: 'Metrics' },\n  { value: VariableQueryType.DimensionKeys, label: 'Dimension Keys' },\n  { value: VariableQueryType.DimensionValues, label: 'Dimension Values' },\n  { value: VariableQueryType.EBSVolumeIDs, label: 'EBS Volume IDs' },\n  { value: VariableQueryType.EC2InstanceAttributes, label: 'EC2 Instance Attributes' },\n  { value: VariableQueryType.ResourceArns, label: 'Resource ARNs' },\n  { value: VariableQueryType.Statistics, label: 'Statistics' },\n  { value: VariableQueryType.LogGroups, label: 'Log Groups' },\n];\n\nexport const VariableQueryEditor = ({ query, datasource, onChange }: Props) => {\n  const parsedQuery = migrateVariableQuery(query);\n\n  const { region, namespace, metricName, dimensionKey, dimensionFilters } = parsedQuery;\n  const [regions, regionIsLoading] = useRegions(datasource);\n  const namespaces = useNamespaces(datasource);\n  const metrics = useMetrics(datasource, region, namespace);\n  const dimensionKeys = useDimensionKeys(datasource, region, namespace, metricName);\n  const keysForDimensionFilter = useDimensionKeys(datasource, region, namespace, metricName, dimensionFilters ?? {});\n\n  const onRegionChange = async (region: string) => {\n    const validatedQuery = await sanitizeQuery({\n      ...parsedQuery,\n      region,\n    });\n    onQueryChange(validatedQuery);\n  };\n\n  const onNamespaceChange = async (namespace: string) => {\n    const validatedQuery = await sanitizeQuery({\n      ...parsedQuery,\n      namespace,\n    });\n    onQueryChange(validatedQuery);\n  };\n\n  const onQueryChange = (newQuery: VariableQuery) => {\n    onChange({\n      ...newQuery,\n      refId: 'CloudWatchVariableQueryEditor-VariableQuery',\n    });\n  };\n\n  // Reset dimensionValue parameters if namespace or region change\n  const sanitizeQuery = async (query: VariableQuery) => {\n    let { metricName, dimensionKey, dimensionFilters, namespace, region } = query;\n    if (metricName) {\n      await datasource.api.getMetrics(namespace, region).then((result: Array<SelectableValue<string>>) => {\n        if (!result.find((metric) => metric.value === metricName)) {\n          metricName = '';\n        }\n      });\n    }\n    if (dimensionKey) {\n      await datasource.api.getDimensionKeys(namespace, region).then((result: Array<SelectableValue<string>>) => {\n        if (!result.find((key) => key.value === dimensionKey)) {\n          dimensionKey = '';\n          dimensionFilters = {};\n        }\n      });\n    }\n    return { ...query, metricName, dimensionKey, dimensionFilters };\n  };\n\n  const hasRegionField = [\n    VariableQueryType.Metrics,\n    VariableQueryType.DimensionKeys,\n    VariableQueryType.DimensionValues,\n    VariableQueryType.EBSVolumeIDs,\n    VariableQueryType.EC2InstanceAttributes,\n    VariableQueryType.ResourceArns,\n    VariableQueryType.LogGroups,\n  ].includes(parsedQuery.queryType);\n  const hasNamespaceField = [\n    VariableQueryType.Metrics,\n    VariableQueryType.DimensionKeys,\n    VariableQueryType.DimensionValues,\n  ].includes(parsedQuery.queryType);\n  return (\n    <>\n      <VariableQueryField\n        value={parsedQuery.queryType}\n        options={queryTypes}\n        onChange={(value: VariableQueryType) => onQueryChange({ ...parsedQuery, queryType: value })}\n        label=\"Query type\"\n        inputId={`variable-query-type-${query.refId}`}\n      />\n      {hasRegionField && (\n        <VariableQueryField\n          value={region}\n          options={regions}\n          onChange={(value: string) => onRegionChange(value)}\n          label=\"Region\"\n          isLoading={regionIsLoading}\n          inputId={`variable-query-region-${query.refId}`}\n        />\n      )}\n      {hasNamespaceField && (\n        <VariableQueryField\n          value={namespace}\n          options={namespaces}\n          onChange={(value: string) => onNamespaceChange(value)}\n          label=\"Namespace\"\n          inputId={`variable-query-namespace-${query.refId}`}\n          allowCustomValue\n        />\n      )}\n      {parsedQuery.queryType === VariableQueryType.DimensionValues && (\n        <>\n          <VariableQueryField\n            value={metricName || null}\n            options={metrics}\n            onChange={(value: string) => onQueryChange({ ...parsedQuery, metricName: value })}\n            label=\"Metric\"\n            inputId={`variable-query-metric-${query.refId}`}\n            allowCustomValue\n          />\n          <VariableQueryField\n            value={dimensionKey || null}\n            options={dimensionKeys}\n            onChange={(value: string) => onQueryChange({ ...parsedQuery, dimensionKey: value })}\n            label=\"Dimension key\"\n            inputId={`variable-query-dimension-key-${query.refId}`}\n            allowCustomValue\n          />\n          <InlineField label=\"Dimensions\" labelWidth={20} tooltip=\"Dimensions to filter the returned values on\">\n            <Dimensions\n              metricStat={{ ...parsedQuery, dimensions: parsedQuery.dimensionFilters }}\n              onChange={(dimensions) => {\n                onChange({ ...parsedQuery, dimensionFilters: dimensions });\n              }}\n              dimensionKeys={keysForDimensionFilter}\n              disableExpressions={true}\n              datasource={datasource}\n            />\n          </InlineField>\n        </>\n      )}\n      {parsedQuery.queryType === VariableQueryType.EBSVolumeIDs && (\n        <VariableTextField\n          value={query.instanceID}\n          placeholder=\"i-XXXXXXXXXXXXXXXXX\"\n          onBlur={(value: string) => onQueryChange({ ...parsedQuery, instanceID: value })}\n          label=\"Instance ID\"\n        />\n      )}\n      {parsedQuery.queryType === VariableQueryType.EC2InstanceAttributes && (\n        <>\n          <VariableTextField\n            value={parsedQuery.attributeName}\n            onBlur={(value: string) => onQueryChange({ ...parsedQuery, attributeName: value })}\n            label=\"Attribute name\"\n            interactive={true}\n            tooltip={\n              <>\n                {'Attribute or tag to query on. Tags should be formatted \"Tags.<name>\". '}\n                <a\n                  href=\"https://grafana.com/docs/grafana/latest/datasources/aws-cloudwatch/template-queries-cloudwatch/#selecting-attributes\"\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  See the documentation for more details\n                </a>\n              </>\n            }\n          />\n          <InlineField\n            label=\"Filters\"\n            labelWidth={20}\n            tooltip={\n              <>\n                <a\n                  href=\"https://grafana.com/docs/grafana/latest/datasources/aws-cloudwatch/template-queries-cloudwatch/#selecting-attributes\"\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  Pre-defined ec2:DescribeInstances filters/tags\n                </a>\n                {' and the values to filter on. Tags should be formatted tag:<name>.'}\n              </>\n            }\n          >\n            <MultiFilter\n              filters={parsedQuery.ec2Filters}\n              onChange={(filters) => {\n                onChange({ ...parsedQuery, ec2Filters: filters });\n              }}\n              keyPlaceholder=\"filter/tag\"\n            />\n          </InlineField>\n        </>\n      )}\n      {parsedQuery.queryType === VariableQueryType.ResourceArns && (\n        <>\n          <VariableTextField\n            value={parsedQuery.resourceType}\n            onBlur={(value: string) => onQueryChange({ ...parsedQuery, resourceType: value })}\n            label=\"Resource type\"\n          />\n          <InlineField label=\"Tags\" labelWidth={20} tooltip=\"Tags to filter the returned values on.\">\n            <MultiFilter\n              filters={parsedQuery.tags}\n              onChange={(filters) => {\n                onChange({ ...parsedQuery, tags: filters });\n              }}\n              keyPlaceholder=\"tag\"\n            />\n          </InlineField>\n        </>\n      )}\n      {parsedQuery.queryType === VariableQueryType.LogGroups && (\n        <VariableTextField\n          value={query.logGroupPrefix ?? ''}\n          onBlur={(value: string) => onQueryChange({ ...parsedQuery, logGroupPrefix: value })}\n          label=\"Log group prefix\"\n        />\n      )}\n    </>\n  );\n};\n","import { from, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CustomVariableSupport, DataQueryRequest, DataQueryResponse } from '@grafana/data';\n\nimport { CloudWatchAPI } from './api';\nimport { VariableQueryEditor } from './components/VariableQueryEditor/VariableQueryEditor';\nimport { CloudWatchDatasource } from './datasource';\nimport { migrateVariableQuery } from './migrations/variableQueryMigrations';\nimport { standardStatistics } from './standardStatistics';\nimport { VariableQuery, VariableQueryType } from './types';\n\nexport class CloudWatchVariableSupport extends CustomVariableSupport<CloudWatchDatasource, VariableQuery> {\n  constructor(private readonly api: CloudWatchAPI) {\n    super();\n    this.query = this.query.bind(this);\n  }\n\n  editor = VariableQueryEditor;\n\n  query(request: DataQueryRequest<VariableQuery>): Observable<DataQueryResponse> {\n    const queryObj = migrateVariableQuery(request.targets[0]);\n    return from(this.execute(queryObj)).pipe(map((data) => ({ data })));\n  }\n\n  async execute(query: VariableQuery) {\n    try {\n      switch (query.queryType) {\n        case VariableQueryType.Regions:\n          return this.handleRegionsQuery();\n        case VariableQueryType.Namespaces:\n          return this.handleNamespacesQuery();\n        case VariableQueryType.Metrics:\n          return this.handleMetricsQuery(query);\n        case VariableQueryType.DimensionKeys:\n          return this.handleDimensionKeysQuery(query);\n        case VariableQueryType.DimensionValues:\n          return this.handleDimensionValuesQuery(query);\n        case VariableQueryType.EBSVolumeIDs:\n          return this.handleEbsVolumeIdsQuery(query);\n        case VariableQueryType.EC2InstanceAttributes:\n          return this.handleEc2InstanceAttributeQuery(query);\n        case VariableQueryType.ResourceArns:\n          return this.handleResourceARNsQuery(query);\n        case VariableQueryType.Statistics:\n          return this.handleStatisticsQuery();\n        case VariableQueryType.LogGroups:\n          return this.handleLogGroupsQuery(query);\n      }\n    } catch (error) {\n      console.error(`Could not run CloudWatchMetricFindQuery ${query}`, error);\n      return [];\n    }\n  }\n\n  async handleLogGroupsQuery({ region, logGroupPrefix }: VariableQuery) {\n    const logGroups = await this.api.describeAllLogGroups({\n      region,\n      logGroupNamePrefix: logGroupPrefix,\n    });\n    return logGroups.map((s) => ({\n      text: s.value,\n      value: s.value,\n      expandable: true,\n    }));\n  }\n\n  async handleRegionsQuery() {\n    const regions = await this.api.getRegions();\n    return regions.map((s) => ({\n      text: s.label,\n      value: s.value,\n      expandable: true,\n    }));\n  }\n\n  async handleNamespacesQuery() {\n    const namespaces = await this.api.getNamespaces();\n    return namespaces.map((s) => ({\n      text: s.label,\n      value: s.value,\n      expandable: true,\n    }));\n  }\n\n  async handleMetricsQuery({ namespace, region }: VariableQuery) {\n    const metrics = await this.api.getMetrics(namespace, region);\n    return metrics.map((s) => ({\n      text: s.label,\n      value: s.value,\n      expandable: true,\n    }));\n  }\n\n  async handleDimensionKeysQuery({ namespace, region }: VariableQuery) {\n    const keys = await this.api.getDimensionKeys(namespace, region);\n    return keys.map((s) => ({\n      text: s.label,\n      value: s.value,\n      expandable: true,\n    }));\n  }\n\n  async handleDimensionValuesQuery({ namespace, region, dimensionKey, metricName, dimensionFilters }: VariableQuery) {\n    if (!dimensionKey || !metricName) {\n      return [];\n    }\n    const keys = await this.api.getDimensionValues(region, namespace, metricName, dimensionKey, dimensionFilters ?? {});\n    return keys.map((s) => ({\n      text: s.label,\n      value: s.value,\n      expandable: true,\n    }));\n  }\n\n  async handleEbsVolumeIdsQuery({ region, instanceID }: VariableQuery) {\n    if (!instanceID) {\n      return [];\n    }\n    const ids = await this.api.getEbsVolumeIds(region, instanceID);\n    return ids.map((s) => ({\n      text: s.label,\n      value: s.value,\n      expandable: true,\n    }));\n  }\n\n  async handleEc2InstanceAttributeQuery({ region, attributeName, ec2Filters }: VariableQuery) {\n    if (!attributeName) {\n      return [];\n    }\n    const values = await this.api.getEc2InstanceAttribute(region, attributeName, ec2Filters ?? {});\n    return values.map((s) => ({\n      text: s.label,\n      value: s.value,\n      expandable: true,\n    }));\n  }\n\n  async handleResourceARNsQuery({ region, resourceType, tags }: VariableQuery) {\n    if (!resourceType) {\n      return [];\n    }\n    const keys = await this.api.getResourceARNs(region, resourceType, tags ?? {});\n    return keys.map((s) => ({\n      text: s.label,\n      value: s.value,\n      expandable: true,\n    }));\n  }\n\n  async handleStatisticsQuery() {\n    return standardStatistics.map((s: string) => ({\n      text: s,\n      value: s,\n      expandable: true,\n    }));\n  }\n}\n","import { cloneDeep, find, isEmpty } from 'lodash';\nimport { merge, Observable, of } from 'rxjs';\n\nimport {\n  DataFrame,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n  DataSourceWithLogsContextSupport,\n  LoadingState,\n  LogRowModel,\n  ScopedVars,\n} from '@grafana/data';\nimport { DataSourceWithBackend } from '@grafana/runtime';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { getTemplateSrv, TemplateSrv } from 'app/features/templating/template_srv';\n\nimport { RowContextOptions } from '../../../features/logs/components/LogRowContextProvider';\n\nimport { CloudWatchAnnotationSupport } from './annotationSupport';\nimport { CloudWatchAPI } from './api';\nimport { SQLCompletionItemProvider } from './cloudwatch-sql/completion/CompletionItemProvider';\nimport { isCloudWatchAnnotationQuery, isCloudWatchLogsQuery, isCloudWatchMetricsQuery } from './guards';\nimport { CloudWatchLanguageProvider } from './language_provider';\nimport { MetricMathCompletionItemProvider } from './metric-math/completion/CompletionItemProvider';\nimport { CloudWatchAnnotationQueryRunner } from './query-runner/CloudWatchAnnotationQueryRunner';\nimport { CloudWatchLogsQueryRunner } from './query-runner/CloudWatchLogsQueryRunner';\nimport { CloudWatchMetricsQueryRunner } from './query-runner/CloudWatchMetricsQueryRunner';\nimport {\n  CloudWatchAnnotationQuery,\n  CloudWatchJsonData,\n  CloudWatchLogsQuery,\n  CloudWatchMetricsQuery,\n  CloudWatchQuery,\n} from './types';\nimport { CloudWatchVariableSupport } from './variables';\n\nexport class CloudWatchDatasource\n  extends DataSourceWithBackend<CloudWatchQuery, CloudWatchJsonData>\n  implements DataSourceWithLogsContextSupport<CloudWatchLogsQuery>\n{\n  defaultRegion?: string;\n  languageProvider: CloudWatchLanguageProvider;\n  sqlCompletionItemProvider: SQLCompletionItemProvider;\n  metricMathCompletionItemProvider: MetricMathCompletionItemProvider;\n\n  type = 'cloudwatch';\n\n  private metricsQueryRunner: CloudWatchMetricsQueryRunner;\n  private annotationQueryRunner: CloudWatchAnnotationQueryRunner;\n  logsQueryRunner: CloudWatchLogsQueryRunner;\n  api: CloudWatchAPI;\n\n  constructor(\n    instanceSettings: DataSourceInstanceSettings<CloudWatchJsonData>,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv(),\n    timeSrv: TimeSrv = getTimeSrv()\n  ) {\n    super(instanceSettings);\n    this.defaultRegion = instanceSettings.jsonData.defaultRegion;\n    this.api = new CloudWatchAPI(instanceSettings, templateSrv);\n    this.languageProvider = new CloudWatchLanguageProvider(this);\n    this.sqlCompletionItemProvider = new SQLCompletionItemProvider(this.api, this.templateSrv);\n    this.metricMathCompletionItemProvider = new MetricMathCompletionItemProvider(this.api, this.templateSrv);\n    this.metricsQueryRunner = new CloudWatchMetricsQueryRunner(instanceSettings, templateSrv);\n    this.logsQueryRunner = new CloudWatchLogsQueryRunner(instanceSettings, templateSrv, timeSrv);\n    this.annotationQueryRunner = new CloudWatchAnnotationQueryRunner(instanceSettings, templateSrv);\n    this.variables = new CloudWatchVariableSupport(this.api);\n    this.annotations = CloudWatchAnnotationSupport;\n  }\n\n  filterQuery(query: CloudWatchQuery) {\n    return query.hide !== true || (isCloudWatchMetricsQuery(query) && query.id !== '');\n  }\n\n  query(options: DataQueryRequest<CloudWatchQuery>): Observable<DataQueryResponse> {\n    options = cloneDeep(options);\n\n    let queries = options.targets.filter(this.filterQuery);\n\n    const logQueries: CloudWatchLogsQuery[] = [];\n    const metricsQueries: CloudWatchMetricsQuery[] = [];\n    const annotationQueries: CloudWatchAnnotationQuery[] = [];\n\n    queries.forEach((query) => {\n      if (isCloudWatchAnnotationQuery(query)) {\n        annotationQueries.push(query);\n      } else if (isCloudWatchLogsQuery(query)) {\n        logQueries.push(query);\n      } else {\n        metricsQueries.push(query);\n      }\n    });\n\n    const dataQueryResponses: Array<Observable<DataQueryResponse>> = [];\n    if (logQueries.length) {\n      dataQueryResponses.push(this.logsQueryRunner.handleLogQueries(logQueries, options));\n    }\n\n    if (metricsQueries.length) {\n      dataQueryResponses.push(this.metricsQueryRunner.handleMetricQueries(metricsQueries, options));\n    }\n\n    if (annotationQueries.length) {\n      dataQueryResponses.push(this.annotationQueryRunner.handleAnnotationQuery(annotationQueries, options));\n    }\n    // No valid targets, return the empty result to save a round trip.\n    if (isEmpty(dataQueryResponses)) {\n      return of({\n        data: [],\n        state: LoadingState.Done,\n      });\n    }\n\n    return merge(...dataQueryResponses);\n  }\n\n  interpolateVariablesInQueries(queries: CloudWatchQuery[], scopedVars: ScopedVars): CloudWatchQuery[] {\n    if (!queries.length) {\n      return queries;\n    }\n\n    return queries.map((query) => ({\n      ...query,\n      region: this.metricsQueryRunner.replaceVariableAndDisplayWarningIfMulti(\n        this.getActualRegion(query.region),\n        scopedVars\n      ),\n      ...(isCloudWatchMetricsQuery(query) &&\n        this.metricsQueryRunner.interpolateMetricsQueryVariables(query, scopedVars)),\n    }));\n  }\n\n  getLogRowContext = async (\n    row: LogRowModel,\n    context?: RowContextOptions,\n    query?: CloudWatchLogsQuery\n  ): Promise<{ data: DataFrame[] }> => {\n    return this.logsQueryRunner.getLogRowContext(row, context, query);\n  };\n\n  targetContainsTemplate(target: any) {\n    return (\n      this.templateSrv.containsTemplate(target.region) ||\n      this.templateSrv.containsTemplate(target.namespace) ||\n      this.templateSrv.containsTemplate(target.metricName) ||\n      this.templateSrv.containsTemplate(target.expression!) ||\n      target.logGroupNames?.some((logGroup: string) => this.templateSrv.containsTemplate(logGroup)) ||\n      find(target.dimensions, (v, k) => this.templateSrv.containsTemplate(k) || this.templateSrv.containsTemplate(v))\n    );\n  }\n\n  showContextToggle() {\n    return true;\n  }\n\n  getQueryDisplayText(query: CloudWatchQuery) {\n    if (query.queryMode === 'Logs') {\n      return query.expression ?? '';\n    } else {\n      return JSON.stringify(query);\n    }\n  }\n\n  // public\n  getVariables() {\n    return this.templateSrv.getVariables().map((v) => `$${v.name}`);\n  }\n\n  getActualRegion(region?: string) {\n    if (region === 'default' || region === undefined || region === '') {\n      return this.defaultRegion ?? '';\n    }\n    return region;\n  }\n}\n","import { DashboardLoadedEvent } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\n\nimport { isCloudWatchLogsQuery, isCloudWatchMetricsQuery } from './guards';\nimport { migrateMetricQuery } from './migrations/metricQueryMigrations';\nimport pluginJson from './plugin.json';\nimport {\n  CloudWatchLogsQuery,\n  CloudWatchMetricsQuery,\n  CloudWatchQuery,\n  MetricEditorMode,\n  MetricQueryType,\n} from './types';\nimport { filterMetricsQuery } from './utils/utils';\n\ninterface CloudWatchOnDashboardLoadedTrackingEvent {\n  grafana_version?: string;\n  dashboard_id?: string;\n  org_id?: number;\n\n  /* The number of CloudWatch logs queries present in the dashboard*/\n  logs_queries_count: number;\n\n  /* The number of CloudWatch metrics queries present in the dashboard*/\n  metrics_queries_count: number;\n\n  /* The number of queries using the \"Search\" mode. \n  Should be measured in relation to metrics_queries_count, e.g metrics_search_count + metrics_query_count = metrics_queries_count */\n  metrics_search_count: number;\n\n  /* The number of search queries that are using the builder mode. \n  Should be measured in relation to metrics_search_count, e.g metrics_search_builder_count + metrics_search_code_count = metrics_search_count */\n  metrics_search_builder_count: number;\n\n  /* The number of search queries that are using the code mode. \n  Should be measured in relation to metrics_search_count, e.g metrics_search_builder_count + metrics_search_code_count = metrics_search_count */\n  metrics_search_code_count: number;\n\n  /* The number of search queries that have enabled the `match exact` toggle in the builder mode. \n  Should be measured in relation to metrics_search_builder_count. \n  E.g 'Out of 5 metric seach queries (metrics_search_builder_count), 2 had match exact toggle (metrics_search_match_exact_count) enabled */\n  metrics_search_match_exact_count: number;\n\n  /* The number of queries using the \"Query\" mode (AKA Metric Insights). \n  Should be measured in relation to metrics_queries_count, e.g metrics_search_count + metrics_query_count = metrics_queries_count */\n  metrics_query_count: number;\n\n  /* The number of \"Insights\" queries that are using the builder mode. \n  Should be measured in relation to metrics_query_count, e.g metrics_query_builder_count + metrics_query_code_count = metrics_query_count */\n  metrics_query_builder_count: number;\n\n  /* The number of \"Insights\" queries that are using the code mode. \n  Should be measured in relation to metrics_query_count, e.g metrics_query_builder_count + metrics_query_code_count = metrics_query_count */\n  metrics_query_code_count: number;\n}\n\nexport const onDashboardLoadedHandler = ({\n  payload: { dashboardId, orgId, grafanaVersion, queries },\n}: DashboardLoadedEvent<CloudWatchQuery>) => {\n  try {\n    const cloudWatchQueries = queries[pluginJson.id];\n\n    if (!cloudWatchQueries?.length) {\n      return;\n    }\n\n    let logsQueries: CloudWatchLogsQuery[] = [];\n    let metricsQueries: CloudWatchMetricsQuery[] = [];\n\n    for (const query of cloudWatchQueries) {\n      if (query.hide) {\n        continue;\n      }\n\n      if (isCloudWatchLogsQuery(query)) {\n        query.logGroupNames?.length && logsQueries.push(query);\n      } else if (isCloudWatchMetricsQuery(query)) {\n        const migratedQuery = migrateMetricQuery(query);\n        filterMetricsQuery(migratedQuery) && metricsQueries.push(query);\n      }\n    }\n\n    const e: CloudWatchOnDashboardLoadedTrackingEvent = {\n      grafana_version: grafanaVersion,\n      dashboard_id: dashboardId,\n      org_id: orgId,\n      logs_queries_count: logsQueries?.length,\n      metrics_queries_count: metricsQueries?.length,\n      metrics_search_count: 0,\n      metrics_search_builder_count: 0,\n      metrics_search_code_count: 0,\n      metrics_search_match_exact_count: 0,\n      metrics_query_count: 0,\n      metrics_query_builder_count: 0,\n      metrics_query_code_count: 0,\n    };\n\n    for (const q of metricsQueries) {\n      e.metrics_search_count += +Boolean(q.metricQueryType === MetricQueryType.Search);\n      e.metrics_search_builder_count += +isMetricSearchBuilder(q);\n      e.metrics_search_code_count += +Boolean(\n        q.metricQueryType === MetricQueryType.Search && q.metricEditorMode === MetricEditorMode.Code\n      );\n      e.metrics_search_match_exact_count += +Boolean(isMetricSearchBuilder(q) && q.matchExact);\n      e.metrics_query_count += +Boolean(q.metricQueryType === MetricQueryType.Query);\n      e.metrics_query_builder_count += +Boolean(\n        q.metricQueryType === MetricQueryType.Query && q.metricEditorMode === MetricEditorMode.Builder\n      );\n      e.metrics_query_code_count += +Boolean(\n        q.metricQueryType === MetricQueryType.Query && q.metricEditorMode === MetricEditorMode.Code\n      );\n    }\n\n    reportInteraction('grafana_ds_cloudwatch_dashboard_loaded', e);\n  } catch (error) {\n    console.error('error in cloudwatch tracking handler', error);\n  }\n};\n\nconst isMetricSearchBuilder = (q: CloudWatchMetricsQuery) =>\n  Boolean(q.metricQueryType === MetricQueryType.Search && q.metricEditorMode === MetricEditorMode.Builder);\n","import { DashboardLoadedEvent, DataSourcePlugin } from '@grafana/data';\nimport { getAppEvents } from '@grafana/runtime';\n\nimport { ConfigEditor } from './components/ConfigEditor';\nimport LogsCheatSheet from './components/LogsCheatSheet';\nimport { MetaInspector } from './components/MetaInspector';\nimport { PanelQueryEditor } from './components/PanelQueryEditor';\nimport { CloudWatchDatasource } from './datasource';\nimport { onDashboardLoadedHandler } from './tracking';\nimport { CloudWatchJsonData, CloudWatchQuery } from './types';\n\nexport const plugin = new DataSourcePlugin<CloudWatchDatasource, CloudWatchQuery, CloudWatchJsonData>(\n  CloudWatchDatasource\n)\n  .setQueryEditorHelp(LogsCheatSheet)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(PanelQueryEditor)\n  .setMetadataInspector(MetaInspector);\n\n// Subscribe to on dashboard loaded event so that we can track plugin adoption\ngetAppEvents().subscribe<DashboardLoadedEvent<CloudWatchQuery>>(DashboardLoadedEvent, onDashboardLoadedHandler);\n","import React, { FC, useEffect, useState } from 'react';\nimport { useDebounce } from 'react-use';\n\nimport { ConnectionConfig } from '@grafana/aws-sdk';\nimport {\n  rangeUtil,\n  DataSourcePluginOptionsEditorProps,\n  onUpdateDatasourceJsonDataOption,\n  updateDatasourcePluginJsonDataOption,\n  updateDatasourcePluginOption,\n} from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { Input, InlineField } from '@grafana/ui';\nimport { notifyApp } from 'app/core/actions';\nimport { createWarningNotification } from 'app/core/copy/appNotification';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { store } from 'app/store/store';\n\nimport { SelectableResourceValue } from '../api';\nimport { CloudWatchDatasource } from '../datasource';\nimport { CloudWatchJsonData, CloudWatchSecureJsonData } from '../types';\n\nimport { LogGroupSelector } from './LogGroupSelector';\nimport { XrayLinkConfig } from './XrayLinkConfig';\n\nexport type Props = DataSourcePluginOptionsEditorProps<CloudWatchJsonData, CloudWatchSecureJsonData>;\n\nexport const ConfigEditor: FC<Props> = (props: Props) => {\n  const { options } = props;\n  const { defaultLogGroups, logsTimeout, defaultRegion } = options.jsonData;\n  const [saved, setSaved] = useState(!!options.version && options.version > 1);\n\n  const datasource = useDatasource(options.name, saved);\n  useAuthenticationWarning(options.jsonData);\n  const logsTimeoutError = useTimoutValidation(logsTimeout);\n  useEffect(() => {\n    setSaved(false);\n  }, [\n    props.options.jsonData.assumeRoleArn,\n    props.options.jsonData.authType,\n    props.options.jsonData.defaultRegion,\n    props.options.jsonData.endpoint,\n    props.options.jsonData.externalId,\n    props.options.jsonData.profile,\n    props.options.secureJsonData?.accessKey,\n    props.options.secureJsonData?.secretKey,\n  ]);\n\n  const saveOptions = async (): Promise<void> => {\n    if (saved) {\n      return;\n    }\n    await getBackendSrv()\n      .put(`/api/datasources/${options.id}`, options)\n      .then((result: { datasource: any }) => {\n        updateDatasourcePluginOption(props, 'version', result.datasource.version);\n      });\n    setSaved(true);\n  };\n\n  return (\n    <>\n      <ConnectionConfig\n        {...props}\n        loadRegions={\n          datasource &&\n          (async () => {\n            return datasource.api\n              .getRegions()\n              .then((regions) =>\n                regions.reduce(\n                  (acc: string[], curr: SelectableResourceValue) => (curr.value ? [...acc, curr.value] : acc),\n                  []\n                )\n              );\n          })\n        }\n      >\n        <InlineField label=\"Namespaces of Custom Metrics\" labelWidth={28} tooltip=\"Namespaces of Custom Metrics.\">\n          <Input\n            width={60}\n            placeholder=\"Namespace1,Namespace2\"\n            value={options.jsonData.customMetricsNamespaces || ''}\n            onChange={onUpdateDatasourceJsonDataOption(props, 'customMetricsNamespaces')}\n          />\n        </InlineField>\n      </ConnectionConfig>\n\n      <h3 className=\"page-heading\">CloudWatch Logs</h3>\n      <div className=\"gf-form-group\">\n        <InlineField\n          label=\"Timeout\"\n          labelWidth={28}\n          tooltip='Custom timeout for CloudWatch Logs insights queries which have max concurrency limits. Default is 15 minutes. Must be a valid duration string, such as \"15m\" \"30s\" \"2000ms\" etc.'\n          invalid={Boolean(logsTimeoutError)}\n        >\n          <Input\n            width={60}\n            placeholder=\"15m\"\n            value={options.jsonData.logsTimeout || ''}\n            onChange={onUpdateDatasourceJsonDataOption(props, 'logsTimeout')}\n            title={'The timeout must be a valid duration string, such as \"15m\" \"30s\" \"2000ms\" etc.'}\n          />\n        </InlineField>\n        <InlineField\n          label=\"Default Log Groups\"\n          labelWidth={28}\n          tooltip=\"Optionally, specify default log groups for CloudWatch Logs queries.\"\n        >\n          <LogGroupSelector\n            region={defaultRegion ?? ''}\n            selectedLogGroups={defaultLogGroups ?? []}\n            datasource={datasource}\n            onChange={(logGroups) => {\n              updateDatasourcePluginJsonDataOption(props, 'defaultLogGroups', logGroups);\n            }}\n            onOpenMenu={saveOptions}\n            width={60}\n            saved={saved}\n          />\n        </InlineField>\n      </div>\n\n      <XrayLinkConfig\n        onChange={(uid) => updateDatasourcePluginJsonDataOption(props, 'tracingDatasourceUid', uid)}\n        datasourceUid={options.jsonData.tracingDatasourceUid}\n      />\n    </>\n  );\n};\n\nfunction useAuthenticationWarning(jsonData: CloudWatchJsonData) {\n  const addWarning = (message: string) => {\n    store.dispatch(notifyApp(createWarningNotification('CloudWatch Authentication', message)));\n  };\n\n  useEffect(() => {\n    if (jsonData.authType === 'arn') {\n      addWarning('Since grafana 7.3 authentication type \"arn\" is deprecated, falling back to default SDK provider');\n    } else if (jsonData.authType === 'credentials' && !jsonData.profile && !jsonData.database) {\n      addWarning(\n        'As of grafana 7.3 authentication type \"credentials\" should be used only for shared file credentials. \\\n             If you don\\'t have a credentials file, switch to the default SDK provider for extracting credentials \\\n             from environment variables or IAM roles'\n      );\n    }\n  }, [jsonData.authType, jsonData.database, jsonData.profile]);\n}\n\nfunction useDatasource(datasourceName: string, saved: boolean) {\n  const [datasource, setDatasource] = useState<CloudWatchDatasource>();\n\n  useEffect(() => {\n    // reload the datasource when it's saved\n    if (!saved) {\n      return;\n    }\n    getDatasourceSrv()\n      .loadDatasource(datasourceName)\n      .then((datasource) => {\n        // It's really difficult to type .loadDatasource() because it's inherently untyped as it involves two JSON.parse()'s\n        // So a \"as\" type assertion here is a necessary evil.\n        setDatasource(datasource as CloudWatchDatasource);\n      });\n  }, [datasourceName, saved]);\n\n  return datasource;\n}\n\nfunction useTimoutValidation(value: string | undefined) {\n  const [err, setErr] = useState<undefined | string>(undefined);\n  useDebounce(\n    () => {\n      if (value) {\n        try {\n          rangeUtil.describeInterval(value);\n          setErr(undefined);\n        } catch (e) {\n          if (e instanceof Error) {\n            setErr(e.toString());\n          }\n        }\n      } else {\n        setErr(undefined);\n      }\n    },\n    350,\n    [value]\n  );\n  return err;\n}\n","import { groupBy } from 'lodash';\nimport React, { useMemo } from 'react';\n\nimport { MetadataInspectorProps } from '@grafana/data';\n\nimport { CloudWatchDatasource } from '../datasource';\nimport { CloudWatchQuery, CloudWatchJsonData } from '../types';\n\nexport type Props = MetadataInspectorProps<CloudWatchDatasource, CloudWatchQuery, CloudWatchJsonData>;\n\nexport function MetaInspector({ data = [] }: Props) {\n  const rows = useMemo(() => groupBy(data, 'refId'), [data]);\n\n  return (\n    <>\n      <table className=\"filter-table form-inline\">\n        <thead>\n          <tr>\n            <th>RefId</th>\n            <th>Metric Data Query ID</th>\n            <th>Metric Data Query Expression</th>\n            <th>Period</th>\n            <th />\n          </tr>\n        </thead>\n        {Object.entries(rows).map(([refId, frames], idx) => {\n          if (!frames.length) {\n            return null;\n          }\n\n          const frame = frames[0];\n          const custom = frame.meta?.custom;\n          if (!custom) {\n            return null;\n          }\n\n          return (\n            <tbody key={idx}>\n              <tr>\n                <td>{refId}</td>\n                <td>{custom.id}</td>\n                <td>{frame.meta?.executedQueryString}</td>\n                <td>{custom.period}</td>\n              </tr>\n            </tbody>\n          );\n        })}\n      </table>\n    </>\n  );\n}\n","import { useEffect, useRef } from 'react';\nvar isPrimitive = function (val) { return val !== Object(val); };\nvar useCustomCompareEffect = function (effect, deps, depsEqual) {\n    if (process.env.NODE_ENV !== 'production') {\n        if (!(deps instanceof Array) || !deps.length) {\n            console.warn('`useCustomCompareEffect` should not be used with no dependencies. Use React.useEffect instead.');\n        }\n        if (deps.every(isPrimitive)) {\n            console.warn('`useCustomCompareEffect` should not be used with dependencies that are all primitive values. Use React.useEffect instead.');\n        }\n        if (typeof depsEqual !== 'function') {\n            console.warn('`useCustomCompareEffect` should be used with depsEqual callback for comparing deps list');\n        }\n    }\n    var ref = useRef(undefined);\n    if (!ref.current || !depsEqual(deps, ref.current)) {\n        ref.current = deps;\n    }\n    useEffect(effect, ref.current);\n};\nexport default useCustomCompareEffect;\n","import isDeepEqualReact from 'fast-deep-equal/react';\nexport default isDeepEqualReact;\n","import useCustomCompareEffect from './useCustomCompareEffect';\nimport isDeepEqual from './misc/isDeepEqual';\nvar isPrimitive = function (val) { return val !== Object(val); };\nvar useDeepCompareEffect = function (effect, deps) {\n    if (process.env.NODE_ENV !== 'production') {\n        if (!(deps instanceof Array) || !deps.length) {\n            console.warn('`useDeepCompareEffect` should not be used with no dependencies. Use React.useEffect instead.');\n        }\n        if (deps.every(isPrimitive)) {\n            console.warn('`useDeepCompareEffect` should not be used with dependencies that are all primitive values. Use React.useEffect instead.');\n        }\n    }\n    useCustomCompareEffect(effect, deps, isDeepEqual);\n};\nexport default useDeepCompareEffect;\n","Object.defineProperty(exports,\"__esModule\",{value:!0});var e,t=require(\"react\"),a=(e=t)&&\"object\"==typeof e&&\"default\"in e?e.default:e,n=require(\"@grafana/ui\"),l=require(\"@grafana/data\"),o=require(\"lodash\"),s=function(){return(s=Object.assign||function(e){for(var t,a=1,n=arguments.length;a<n;a++)for(var l in t=arguments[a])Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l]);return e}).apply(this,arguments)};function i(e,t,a,n){return new(a||(a=Promise))((function(l,o){function s(e){try{r(n.next(e))}catch(e){o(e)}}function i(e){try{r(n.throw(e))}catch(e){o(e)}}function r(e){var t;e.done?l(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(s,i)}r((n=n.apply(e,t||[])).next())}))}function r(e,t){var a,n,l,o,s={label:0,sent:function(){if(1&l[0])throw l[1];return l[1]},trys:[],ops:[]};return o={next:i(0),throw:i(1),return:i(2)},\"function\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function i(o){return function(i){return function(o){if(a)throw new TypeError(\"Generator is already executing.\");for(;s;)try{if(a=1,n&&(l=2&o[0]?n.return:o[0]?n.throw||((l=n.return)&&l.call(n),0):n.next)&&!(l=l.call(n,o[1])).done)return l;switch(n=0,l&&(o=[2&o[0],l.value]),o[0]){case 0:case 1:l=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,n=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(l=s.trys,(l=l.length>0&&l[l.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!l||o[1]>l[0]&&o[1]<l[3])){s.label=o[1];break}if(6===o[0]&&s.label<l[1]){s.label=l[1],l=o;break}if(l&&s.label<l[2]){s.label=l[2],s.ops.push(o);break}l[2]&&s.ops.pop(),s.trys.pop();continue}o=t.call(e,s)}catch(e){o=[6,e],n=0}finally{a=l=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,i])}}}function u(e,t){var a=\"function\"==typeof Symbol&&e[Symbol.iterator];if(!a)return e;var n,l,o=a.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)s.push(n.value)}catch(e){l={error:e}}finally{try{n&&!n.done&&(a=o.return)&&a.call(o)}finally{if(l)throw l.error}}return s}var c,d=[\"af-south-1\",\"ap-east-1\",\"ap-northeast-1\",\"ap-northeast-2\",\"ap-northeast-3\",\"ap-south-1\",\"ap-southeast-1\",\"ap-southeast-2\",\"ca-central-1\",\"cn-north-1\",\"cn-northwest-1\",\"eu-central-1\",\"eu-north-1\",\"eu-west-1\",\"eu-west-2\",\"eu-west-3\",\"me-south-1\",\"sa-east-1\",\"us-east-1\",\"us-east-2\",\"us-gov-east-1\",\"us-gov-west-1\",\"us-iso-east-1\",\"us-isob-east-1\",\"us-west-1\",\"us-west-2\"];(c=exports.AwsAuthType||(exports.AwsAuthType={})).Keys=\"keys\",c.Credentials=\"credentials\",c.Default=\"default\",c.EC2IAMRole=\"ec2_iam_role\",c.ARN=\"arn\";var p,h=[{label:\"Workspace IAM Role\",value:exports.AwsAuthType.EC2IAMRole},{label:\"AWS SDK Default\",value:exports.AwsAuthType.Default},{label:\"Access & secret key\",value:exports.AwsAuthType.Keys},{label:\"Credentials file\",value:exports.AwsAuthType.Credentials}],f=function(e){return{value:e,label:e}},v=function(e){var o,i,r,c,p,v,m,g,y,b=u(t.useState((e.standardRegions||d).map(f)),2),D=b[0],w=b[1],E=e.loadRegions,A=e.onOptionsChange,S=e.skipHeader,C=void 0!==S&&S,x=e.skipEndpoint,V=void 0!==x&&x,I=e.options,F=I.jsonData.profile;void 0===F&&(F=I.database);var O=window.grafanaBootData.settings,R=null!==(o=O.awsAllowedAuthProviders)&&void 0!==o?o:[exports.AwsAuthType.Default,exports.AwsAuthType.Keys,exports.AwsAuthType.Credentials],j=null===(i=O.awsAssumeRoleEnabled)||void 0===i||i,K=h.find((function(e){return e.value===I.jsonData.authType}));return t.useEffect((function(){!K&&R.length&&A(s(s({},I),{jsonData:s(s({},I.jsonData),{authType:R[0]})}))}),[K,I,A]),t.useEffect((function(){E&&E().then((function(e){return w(e.map(f))}))}),[E]),a.createElement(n.FieldSet,{label:C?\"\":\"Connection Details\",\"data-testid\":\"connection-config\"},a.createElement(n.InlineField,{label:\"Authentication Provider\",labelWidth:28,tooltip:\"Specify which AWS credentials chain to use.\"},a.createElement(n.Select,{\"aria-label\":\"Authentication Provider\",className:\"width-30\",value:K,options:h.filter((function(e){return R.includes(e.value)})),defaultValue:I.jsonData.authType,onChange:function(t){l.onUpdateDatasourceJsonDataOptionSelect(e,\"authType\")(t)},menuShouldPortal:!0})),\"credentials\"===I.jsonData.authType&&a.createElement(n.InlineField,{label:\"Credentials Profile Name\",labelWidth:28,tooltip:\"Credentials profile name, as specified in ~/.aws/credentials, leave blank for default.\"},a.createElement(n.Input,{\"aria-label\":\"Credentials Profile Name\",className:\"width-30\",placeholder:\"default\",value:F,onChange:l.onUpdateDatasourceJsonDataOption(e,\"profile\")})),\"keys\"===I.jsonData.authType&&a.createElement(a.Fragment,null,a.createElement(n.InlineField,{label:\"Access Key ID\",labelWidth:28},(null===(r=e.options.secureJsonFields)||void 0===r?void 0:r.accessKey)?a.createElement(n.ButtonGroup,{className:\"width-30\"},a.createElement(n.Input,{disabled:!0,placeholder:\"Configured\"}),a.createElement(n.ToolbarButton,{icon:\"edit\",tooltip:\"Edit Access Key ID\",type:\"button\",onClick:l.onUpdateDatasourceResetOption(e,\"accessKey\")})):a.createElement(n.Input,{\"aria-label\":\"Access Key ID\",className:\"width-30\",value:null!==(p=null===(c=I.secureJsonData)||void 0===c?void 0:c.accessKey)&&void 0!==p?p:\"\",onChange:l.onUpdateDatasourceSecureJsonDataOption(e,\"accessKey\")})),a.createElement(n.InlineField,{label:\"Secret Access Key\",labelWidth:28},(null===(v=e.options.secureJsonFields)||void 0===v?void 0:v.secretKey)?a.createElement(n.ButtonGroup,{className:\"width-30\"},a.createElement(n.Input,{disabled:!0,placeholder:\"Configured\"}),a.createElement(n.ToolbarButton,{icon:\"edit\",type:\"button\",tooltip:\"Edit Secret Access Key\",onClick:l.onUpdateDatasourceResetOption(e,\"secretKey\")})):a.createElement(n.Input,{\"aria-label\":\"Secret Access Key\",className:\"width-30\",value:null!==(g=null===(m=I.secureJsonData)||void 0===m?void 0:m.secretKey)&&void 0!==g?g:\"\",onChange:l.onUpdateDatasourceSecureJsonDataOption(e,\"secretKey\")}))),j&&a.createElement(a.Fragment,null,a.createElement(n.InlineField,{label:\"Assume Role ARN\",labelWidth:28,tooltip:\"Optionally, specify the ARN of a role to assume. Specifying a role here will ensure that the selected authentication provider is used to assume the specified role rather than using the credentials directly. Leave blank if you don't need to assume a role at all\"},a.createElement(n.Input,{\"aria-label\":\"Assume Role ARN\",className:\"width-30\",placeholder:\"arn:aws:iam:*\",value:I.jsonData.assumeRoleArn||\"\",onChange:l.onUpdateDatasourceJsonDataOption(e,\"assumeRoleArn\")})),a.createElement(n.InlineField,{label:\"External ID\",labelWidth:28,tooltip:\"If you are assuming a role in another account, that has been created with an external ID, specify the external ID here.\"},a.createElement(n.Input,{\"aria-label\":\"External ID\",className:\"width-30\",placeholder:\"External ID\",value:I.jsonData.externalId||\"\",onChange:l.onUpdateDatasourceJsonDataOption(e,\"externalId\")}))),!V&&a.createElement(n.InlineField,{label:\"Endpoint\",labelWidth:28,tooltip:\"Optionally, specify a custom endpoint for the service\"},a.createElement(n.Input,{\"aria-label\":\"Endpoint\",className:\"width-30\",placeholder:null!==(y=e.defaultEndpoint)&&void 0!==y?y:\"https://{service}.{region}.amazonaws.com\",value:I.jsonData.endpoint||\"\",onChange:l.onUpdateDatasourceJsonDataOption(e,\"endpoint\")})),a.createElement(n.InlineField,{label:\"Default Region\",labelWidth:28,tooltip:\"Specify the region, such as for US West (Oregon) use ` us-west-2 ` as the region.\"},a.createElement(n.Select,{\"aria-label\":\"Default Region\",className:\"width-30\",value:D.find((function(e){return e.value===I.jsonData.defaultRegion})),options:D,defaultValue:I.jsonData.defaultRegion,allowCustomValue:!0,onChange:l.onUpdateDatasourceJsonDataOptionSelect(e,\"defaultRegion\"),formatCreateLabel:function(e){return\"Use region: \"+e},menuShouldPortal:!0})),e.children)};function m(e){var l=this,c=u(t.useState(e.value||e.default||null),2),d=c[0],p=c[1],h=u(t.useState(d?[d]:[]),2),f=h[0],v=h[1],m=u(t.useState(e.dependencies),2),g=m[0],y=m[1],b=u(t.useState(!1),2),D=b[0],w=b[1],E=u(t.useState(!1),2),A=E[0],S=E[1],C=t.useMemo((function(){var t=[{label:\"default (\"+e.default+\")\",value:\"__default\",description:\"Default value set in the data source\"}];return e.value&&\"__default\"!==e.value&&t.push({label:e.value,value:e.value}),t}),[e.default,e.value]),x=u(t.useState(e.default?C:[]),2),V=x[0],I=x[1];t.useEffect((function(){void 0!==e.resources&&v(e.resources)}),[e.resources]),t.useEffect((function(){var t=e.default?C:[];f.length?(f.forEach((function(e){var a=\"string\"==typeof e?e:e.value;t.find((function(e){return e.value===a}))||(\"string\"==typeof e?t.push({label:e,value:e}):t.push(e))})),I(t)):I([])}),[f,C,e.default]),t.useEffect((function(){o.isEqual(e.dependencies,g)||(S(!1),p(null),e.onChange(null),y(e.dependencies))}),[e,g]);return a.createElement(n.InlineField,{label:e.label,labelWidth:e.labelWidth,tooltip:e.tooltip,hidden:e.hidden},a.createElement(\"div\",{\"data-testid\":e[\"data-testid\"],title:e.title},a.createElement(n.Select,s({},e,{\"aria-label\":e.label,options:V,onChange:function(t){e.onChange(t),t.value&&p(t.value)},isLoading:D,className:e.className||\"min-width-6\",onOpenMenu:function(){return e.fetch&&i(l,void 0,void 0,(function(){return r(this,(function(t){switch(t.label){case 0:w(!0),t.label=1;case 1:return t.trys.push([1,,3,4]),[4,i(l,void 0,void 0,(function(){var t;return r(this,(function(a){switch(a.label){case 0:return A?[2]:e.saveOptions?[4,e.saveOptions()]:[3,2];case 1:a.sent(),a.label=2;case 2:return a.trys.push([2,,4,5]),[4,e.fetch()];case 3:return t=a.sent(),v(t),[3,5];case 4:return S(!0),[7];case 5:return[2]}}))}))];case 2:return t.sent(),[3,4];case 3:return w(!1),[7];case 4:return[2]}}))}))},menuShouldPortal:!0}))))}(p=exports.FillValueOptions||(exports.FillValueOptions={}))[p.Previous=0]=\"Previous\",p[p.Null=1]=\"Null\",p[p.Value=2]=\"Value\";var g=[{label:\"Previous Value\",value:exports.FillValueOptions.Previous},{label:\"NULL\",value:exports.FillValueOptions.Null},{label:\"Value\",value:exports.FillValueOptions.Value}];function y(e){return\"string\"==typeof e?e:e.map((function(e){return function(e){return\"'\"+String(e).replace(/'/g,\"''\")+\"'\"}(e)})).join(\",\")}exports.ConfigSelect=function(e){var t,n,l=e.options.jsonData,o={title:l.defaultRegion?\"\":\"select a default region\",labelWidth:28,className:\"width-30\"},i=[e.options.jsonData.assumeRoleArn,e.options.jsonData.authType,e.options.jsonData.defaultRegion,e.options.jsonData.endpoint,e.options.jsonData.externalId,e.options.jsonData.profile,null===(t=e.options.secureJsonData)||void 0===t?void 0:t.accessKey,null===(n=e.options.secureJsonData)||void 0===n?void 0:n.secretKey].concat(e.dependencies);return a.createElement(m,s({label:e.label,\"data-testid\":e[\"data-testid\"],onChange:e.onChange,fetch:e.fetch,value:e.value,saveOptions:e.saveOptions,dependencies:i,hidden:e.hidden,disabled:e.disabled||!l.defaultRegion,allowCustomValue:e.allowCustomValue,autoFocus:e.autoFocus,backspaceRemovesValue:e.backspaceRemovesValue,className:e.className,invalid:e.invalid,isClearable:e.isClearable,isMulti:e.isMulti,inputId:e.inputId,showAllSelectedWhenOpen:e.showAllSelectedWhenOpen,maxMenuHeight:e.maxMenuHeight,minMenuHeight:e.minMenuHeight,maxVisibleValues:e.maxVisibleValues,menuPlacement:e.menuPlacement,menuPosition:e.menuPosition,noOptionsMessage:e.noOptionsMessage,onBlur:e.onBlur,onCreateOption:e.onCreateOption,onInputChange:e.onInputChange,placeholder:e.placeholder,width:e.width,isOptionDisabled:e.isOptionDisabled},o))},exports.ConnectionConfig=v,exports.FillValueSelect=function(e){var t,l,o;return a.createElement(a.Fragment,null,a.createElement(n.InlineField,{label:\"Fill value\",tooltip:\"value to fill missing points\"},a.createElement(n.Select,{\"aria-label\":\"Fill value\",options:g,value:null!==(l=null===(t=e.query.fillMode)||void 0===t?void 0:t.mode)&&void 0!==l?l:exports.FillValueOptions.Previous,onChange:function(t){var a=t.value;e.onChange(s(s({},e.query),{fillMode:s(s({},e.query.fillMode),{mode:a})})),e.onRunQuery()},className:\"width-12\",menuShouldPortal:!0})),(null===(o=e.query.fillMode)||void 0===o?void 0:o.mode)===exports.FillValueOptions.Value&&a.createElement(n.InlineField,{label:\"Value\",labelWidth:11},a.createElement(n.Input,{type:\"number\",\"aria-label\":\"Value\",value:e.query.fillMode.value,onChange:function(t){var a=t.currentTarget;return e.onChange(s(s({},e.query),{fillMode:{mode:exports.FillValueOptions.Value,value:a.valueAsNumber}}))},onBlur:function(){return e.onRunQuery()}})))},exports.FormatSelect=function(e){return a.createElement(n.InlineField,{label:\"Format as\",labelWidth:11},a.createElement(n.Select,{\"aria-label\":\"Format as\",options:e.options,value:e.query.format,onChange:function(t){e.onChange(s(s({},e.query),{format:t.value||0})),e.onRunQuery()},className:\"width-12\",menuShouldPortal:!0}))},exports.InlineInput=function(e){return a.createElement(n.InlineField,{label:e.label,labelWidth:28,tooltip:e.tooltip,hidden:e.hidden,disabled:e.disabled},a.createElement(n.Input,{\"data-testid\":e[\"data-testid\"],className:\"width-30\",value:e.value,onChange:e.onChange,placeholder:e.placeholder,disabled:e.disabled}))},exports.QueryCodeEditor=function(e){var l=e.getSuggestions,i=e.query,r=o.defaults(e.query,{rawSQL:\"\"}).rawSQL,u=t.useRef([]);return t.useEffect((function(){u.current=l(i)}),[l,i]),a.createElement(n.CodeEditor,s({language:e.language,value:r,onBlur:function(t){var a=s(s({},e.query),{rawSQL:t});e.onChange(a),e.onRunQuery()},showMiniMap:!1,showLineNumbers:!0,getSuggestions:function(){return u.current},height:\"240px\"},e.editorProps))},exports.ResourceSelector=m,exports.SIGV4ConnectionConfig=function(e){var t,n,l,o,i=e.onOptionsChange,r=e.options,u={onOptionsChange:function(e){var t,a,n,l,o=s(s({},r),{jsonData:s(s({},r.jsonData),{sigV4AuthType:e.jsonData.authType,sigV4Profile:e.jsonData.profile,sigV4AssumeRoleArn:e.jsonData.assumeRoleArn,sigV4ExternalId:e.jsonData.externalId,sigV4Region:e.jsonData.defaultRegion,sigV4Endpoint:e.jsonData.endpoint}),secureJsonFields:{sigV4AccessKey:null===(t=e.secureJsonFields)||void 0===t?void 0:t.accessKey,sigV4SecretKey:null===(a=e.secureJsonFields)||void 0===a?void 0:a.secretKey},secureJsonData:{sigV4AccessKey:null===(n=e.secureJsonData)||void 0===n?void 0:n.accessKey,sigV4SecretKey:null===(l=e.secureJsonData)||void 0===l?void 0:l.secretKey}});i(o)},options:s(s({},r),{jsonData:s(s({},r.jsonData),{authType:r.jsonData.sigV4AuthType,profile:r.jsonData.sigV4Profile,assumeRoleArn:r.jsonData.sigV4AssumeRoleArn,externalId:r.jsonData.sigV4ExternalId,defaultRegion:r.jsonData.sigV4Region,endpoint:r.jsonData.sigV4Endpoint}),secureJsonFields:{accessKey:null===(t=r.secureJsonFields)||void 0===t?void 0:t.sigV4AccessKey,secretKey:null===(n=r.secureJsonFields)||void 0===n?void 0:n.sigV4SecretKey},secureJsonData:{accessKey:null===(l=r.secureJsonData)||void 0===l?void 0:l.sigV4AccessKey,secretKey:null===(o=r.secureJsonData)||void 0===o?void 0:o.sigV4SecretKey}})};return a.createElement(a.Fragment,null,a.createElement(\"div\",{className:\"gf-form\"},a.createElement(\"h6\",null,\"SigV4 Auth Details\")),a.createElement(v,s({},u,{skipHeader:!0,skipEndpoint:!0})))},exports.appendTemplateVariablesAsSuggestions=function(e,t){var a=e(),l=[];return a.getVariables().forEach((function(e){var t=\"$\"+e.name,o=a.replace(t);o===t&&(o=\"\"),l.push({label:t,kind:n.CodeEditorSuggestionItemKind.Text,detail:\"(Template Variable) \"+o})})),t.concat(l)},exports.applySQLTemplateVariables=function(e,t,a){var n=a();return s(s({},e),{rawSQL:n.replace(e.rawSQL,t,y)})},exports.awsAuthProviderOptions=h,exports.filterSQLQuery=function(e){return!!e.rawSQL},exports.standardRegions=d;\n//# sourceMappingURL=index.production.js.map\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./dist/index.production.js');\n} else {\n  module.exports = require('./dist/index.development.js');\n}\n","'use strict';\n\n// do not edit .js files directly - edit src/index.jst\n\n\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (key === '_owner' && a.$$typeof) {\n        // React-specific: avoid traversing React elements' _owner.\n        //  _owner contains circular references\n        // and is not needed when comparing the actual elements (and not their owners)\n        continue;\n      }\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n","module.exports = require('./lib/jsurl');","/**\n * Copyright (c) 2011 Bruno Jouhier <bruno.jouhier@sage.com>\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n//\n(function(exports) {\n\t\"use strict\";\n\texports.stringify = function stringify(v) {\n\t\tfunction encode(s) {\n\t\t\treturn !/[^\\w-.]/.test(s) ? s : s.replace(/[^\\w-.]/g, function(ch) {\n\t\t\t\tif (ch === '$') return '!';\n\t\t\t\tch = ch.charCodeAt(0);\n\t\t\t\t// thanks to Douglas Crockford for the negative slice trick\n\t\t\t\treturn ch < 0x100 ? '*' + ('00' + ch.toString(16)).slice(-2) : '**' + ('0000' + ch.toString(16)).slice(-4);\n\t\t\t});\n\t\t}\n\n\t\tvar tmpAry;\n\n\t\tswitch (typeof v) {\n\t\t\tcase 'number':\n\t\t\t\treturn isFinite(v) ? '~' + v : '~null';\n\t\t\tcase 'boolean':\n\t\t\t\treturn '~' + v;\n\t\t\tcase 'string':\n\t\t\t\treturn \"~'\" + encode(v);\n\t\t\tcase 'object':\n\t\t\t\tif (!v) return '~null';\n\n\t\t\t\ttmpAry = [];\n\n\t\t\t\tif (Array.isArray(v)) {\n\t\t\t\t\tfor (var i = 0; i < v.length; i++) {\n\t\t\t\t\t\ttmpAry[i] = stringify(v[i]) || '~null';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn '~(' + (tmpAry.join('') || '~') + ')';\n\t\t\t\t} else {\n\t\t\t\t\tfor (var key in v) {\n\t\t\t\t\t\tif (v.hasOwnProperty(key)) {\n\t\t\t\t\t\t\tvar val = stringify(v[key]);\n\n\t\t\t\t\t\t\t// skip undefined and functions\n\t\t\t\t\t\t\tif (val) {\n\t\t\t\t\t\t\t\ttmpAry.push(encode(key) + val);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn '~(' + tmpAry.join('~') + ')';\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\t// function, undefined\n\t\t\t\treturn;\n\t\t}\n\t};\n\n\tvar reserved = {\n\t\t\"true\": true,\n\t\t\"false\": false,\n\t\t\"null\": null\n\t};\n\n\texports.parse = function(s) {\n\t\tif (!s) return s;\n\t\ts = s.replace(/%(25)*27/g, \"'\");\n\t\tvar i = 0,\n\t\t\tlen = s.length;\n\n\t\tfunction eat(expected) {\n\t\t\tif (s.charAt(i) !== expected) throw new Error(\"bad JSURL syntax: expected \" + expected + \", got \" + (s && s.charAt(i)));\n\t\t\ti++;\n\t\t}\n\n\t\tfunction decode() {\n\t\t\tvar beg = i,\n\t\t\t\tch, r = \"\";\n\t\t\twhile (i < len && (ch = s.charAt(i)) !== '~' && ch !== ')') {\n\t\t\t\tswitch (ch) {\n\t\t\t\t\tcase '*':\n\t\t\t\t\t\tif (beg < i) r += s.substring(beg, i);\n\t\t\t\t\t\tif (s.charAt(i + 1) === '*') r += String.fromCharCode(parseInt(s.substring(i + 2, i + 6), 16)), beg = (i += 6);\n\t\t\t\t\t\telse r += String.fromCharCode(parseInt(s.substring(i + 1, i + 3), 16)), beg = (i += 3);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase '!':\n\t\t\t\t\t\tif (beg < i) r += s.substring(beg, i);\n\t\t\t\t\t\tr += '$', beg = ++i;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn r + s.substring(beg, i);\n\t\t}\n\n\t\treturn (function parseOne() {\n\t\t\tvar result, ch, beg;\n\t\t\teat('~');\n\t\t\tswitch (ch = s.charAt(i)) {\n\t\t\t\tcase '(':\n\t\t\t\t\ti++;\n\t\t\t\t\tif (s.charAt(i) === '~') {\n\t\t\t\t\t\tresult = [];\n\t\t\t\t\t\tif (s.charAt(i + 1) === ')') i++;\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\tresult.push(parseOne());\n\t\t\t\t\t\t\t} while (s.charAt(i) === '~');\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult = {};\n\t\t\t\t\t\tif (s.charAt(i) !== ')') {\n\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\tvar key = decode();\n\t\t\t\t\t\t\t\tresult[key] = parseOne();\n\t\t\t\t\t\t\t} while (s.charAt(i) === '~' && ++i);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\teat(')');\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"'\":\n\t\t\t\t\ti++;\n\t\t\t\t\tresult = decode();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbeg = i++;\n\t\t\t\t\twhile (i < len && /[^)~]/.test(s.charAt(i)))\n\t\t\t\t\ti++;\n\t\t\t\t\tvar sub = s.substring(beg, i);\n\t\t\t\t\tif (/[\\d\\-]/.test(ch)) {\n\t\t\t\t\t\tresult = parseFloat(sub);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult = reserved[sub];\n\t\t\t\t\t\tif (typeof result === \"undefined\") throw new Error(\"bad value keyword: \" + sub);\n\t\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t})();\n\t}\n\n\texports.tryParse = function(s, def) {\n\t\ttry {\n\t\t\treturn exports.parse(s);\n\t\t} catch (ex) {\n\t\t\treturn def;\n\t\t}\n\t}\n\n})(typeof exports !== 'undefined' ? exports : (window.JSURL = window.JSURL || {}));\n"],"names":["SELECT","FROM","WHERE","GROUP","ORDER","BY","DESC","ASC","LIMIT","WITH","SCHEMA","KEYWORDS","STATISTICS","AND","LOGICAL_OPERATORS","EQUALS","NOT_EQUALS","COMPARISON_OPERATORS","language","defaultToken","tokenPostfix","ignoreCase","brackets","open","close","token","keywords","operators","builtinFunctions","tokenizer","root","include","cases","whitespace","comments","comment","numbers","strings","next","string","string_double","complexIdentifiers","bracketedIdentifier","quotedIdentifier","conf","lineComment","blockComment","autoClosingPairs","surroundingPairs","DYNAMIC_LABEL_PATTERNS","id","builtInFunctions","map","replace","join","METRIC_MATH_FNS","METRIC_MATH_STATISTIC_KEYWORD_STRINGS","METRIC_MATH_KEYWORDS","METRIC_MATH_OPERATORS","METRIC_MATH_PERIODS","nonNestableStates","escapeRegExp","variables","assignment","nestedCurly","nestedParens","toOption","value","label","appendTemplateVariables","datasource","values","options","getVariables","filterMetricsQuery","query","region","metricQueryType","metricEditorMode","expression","metricName","namespace","sqlExpression","statistic","MetricQueryType","MetricEditorMode","LogGroupSelector","selectedLogGroups","onChange","onRunQuery","onOpenMenu","refId","width","saved","loadingLogGroups","setLoadingLogGroups","useState","availableLogGroups","setAvailableLogGroups","logGroupOptions","useMemo","unionBy","fetchLogGroupOptions","useCallback","async","logGroupNamePrefix","api","describeLogGroups","err","dispatch","notifyApp","createErrorNotification","JSON","stringify","useEffect","getActualRegion","then","logGroups","finally","getAvailableLogGroupOptions","onLogGroupSearchDebounced","debounce","searchTerm","actionMeta","action","test","matchingLogGroups","inputId","allowCustomValue","v","filter","onBlur","closeMenuOnSelect","isClearable","isOptionDisabled","length","placeholder","maxVisibleValues","noOptionsMessage","isLoading","onInputChange","getStyles","theme","infoText","css","spacing","colors","text","secondary","xRayDsId","XrayLinkConfig","datasourceUid","hasXrayDatasource","Boolean","getDatasourceSrv","getList","pluginId","styles","useStyles2","className","Alert","title","severity","InlineField","htmlFor","labelWidth","tooltip","DataSourcePicker","ds","uid","current","noDefault","raw","_createClass","defineProperties","target","props","i","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","_templateObject","freeze","_classCallCheck","instance","TypeError","TemplateTag","_this","this","_len","arguments","transformers","Array","_key","tag","_len2","expressions","_key2","interimTag","bind","transformEndResult","transformString","reduce","processSubstitutions","isArray","transformer","previousTag","template","_len3","substitutions","_key3","apply","undefined","concat","resultSoFar","remainingPart","substitution","transformSubstitution","shift","str","res","transform","onString","onSubstitution","endResult","onEndResult","defaults","separator","conjunction","serial","opts","arrayLength","indent","match","separatorIndex","lastIndexOf","slice","_toConsumableArray","arr","arr2","from","type","Math","min","el","regexp","RegExp","Error","side","trim","toLowerCase","splitBy","includes","split","isValidValue","x","Number","isNaN","replaceWhat","replaceWith","toString","QUERY_COMMANDS","documentation","NUMERIC_OPERATORS","detail","STRING_FUNCTIONS","DATETIME_FUNCTIONS","IP_FUNCTIONS","BOOLEAN_FUNCTIONS","AGGREGATION_FUNCTIONS_STATS","STATS_FUNCS","FIELD_AND_FILTER_FUNCTIONS","FUNCTIONS","pattern","greedy","backticks","alias","quote","regex","command","function","f","keyword","lookbehind","number","punctuation","CLIQ_EXAMPLES","category","examples","expr","stripIndents","stripIndent","renderHighlightedMarkup","code","keyPrefix","grammar","spans","flattenTokens","Prism","types","aliases","content","exampleCategory","LogsCheatSheet","PureComponent","onClickExample","renderExpression","onClick","queryMode","logGroupNames","renderLogsCheatSheet","cat","cx","item","j","render","isCloudWatchLogsQuery","cloudwatchQuery","isCloudWatchMetricsQuery","hasOwnProperty","isCloudWatchAnnotationQuery","wildcardOption","FilterItem","metricStat","dimensions","dimensionKeys","disableExpressions","onDelete","dimensionsExcludingCurrentKey","currentKey","entries","acc","excludeCurrentKey","state","loadOptions","useAsyncFn","getDimensionValues","result","unshift","useTheme2","getOperatorStyles","InputGroup","Select","change","loading","AccessoryButton","icon","variant","stylesFactory","padding","alignSelf","Dimensions","dimensionFilters","dimensionsToFilterConditions","operator","items","setItems","EditorList","newItems","newDimensions","isEqual","renderItem","makeRenderFilter","JSURL","require","encodeUrl","obj","CloudWatchLink","Component","href","prevProps","panelData","panelDataNew","panelDataOld","request","getExternalLink","setState","range","start","toISOString","end","to","timeType","tz","editorString","isLiveTail","source","rel","Icon","name","byRE","groupsRE","getStatsGroups","b","groups","g","lastIndex","index","exec","push","useRegions","regionsIsLoading","setRegionsIsLoading","regions","setRegions","variableOptionGroup","getRegions","useNamespaces","namespaces","setNamespaces","getNamespaces","useMetrics","metrics","setMetrics","getMetrics","useDimensionKeys","dimensionFilter","setDimensionKeys","useDeepCompareEffect","getDimensionKeys","metricEditorModes","editorModes","sqlCodeEditorIsDirty","showConfirm","setShowConfirm","onEditorModeChange","newMetricEditorMode","InlineSelect","find","m","FlexItem","grow","RadioButtonGroup","size","Button","ConfirmModal","isOpen","body","confirmText","dismissText","onConfirm","onDismiss","apiModes","regionIsLoading","EditorHeader","onRegion","commonProps","pick","ExploreMode","rowGap","CloudWatchLogsQueryField","React","constructor","context","super","hint","logsQueryRunner","defaultLogGroups","statsGroups","languageProvider","suggestions","cloudwatchLanguageProvider","history","absoluteRange","prefix","wrapperClasses","labelKey","editor","typeahead","provideCompletionItems","plugins","BracesPlugin","SlatePrism","onlyIn","node","object","getSyntax","prismLanguages","cloudwatch","syntax","ExtraFieldElement","data","showError","error","cleanText","inputEl","additionalPlugins","onChangeQuery","onTypeahead","portalOrigin","disabled","message","fix","labelClass","CloudWatchLogsQueryEditor","memo","exploreId","absolute","valueOf","Date","now","standardStatistics","MetricStatEditor","onMetricStatChange","validateMetricName","metric","EditorRows","EditorRow","EditorFieldGroup","EditorField","validatedQuery","onNamespaceChange","s","startsWith","optional","EditorSwitch","matchExact","e","currentTarget","checked","QueryEditorPropertyType","QueryEditorExpressionType","SQLGenerator","templateSrv","getTemplateSrv","expressionToSqlQuery","select","where","groupBy","orderBy","orderByDirection","limit","parameters","parts","appendSelect","appendFrom","appendWhere","appendGroupBy","appendOrderBy","appendLimit","appendFunction","Function","formatValue","property","isTopLevelExpression","topLevelExpressionsCount","hasChildExpressions","And","andParts","exp","andCombined","wrapInParentheses","Or","Operator","appendOperator","orParts","orCombined","groupByParts","GroupBy","params","p","interpolated","getMetricNameFromExpression","selectExpression","getNamespaceFromExpression","fromExpression","Property","sanitizeOperator","String","flattenOperatorExpressions","flatMap","getFlattenedFilters","sql","getFlattenedGroupBys","setSql","setAggregation","aggregation","AGGREGATIONS","onQueryChange","schemaLabels","curr","getSchemaLabels","withSchemaEnabled","namespaceOptions","metricOptions","existingFilters","unusedDimensionKeys","some","queryWithNoParams","removeMetricName","namespaceParam","FunctionParameter","labelKeys","setNamespace","ev","HTMLInputElement","withSchema","setWithSchema","isMulti","l","setSchemaLabels","param","setMetricName","OPERATORS","filtersFromQuery","filters","setFilters","cleaned","validExpressions","operatorExpression","validated","setOperatorExpressionValue","makeRenderItem","GroupByItem","fieldName","field","groupBysFromQuery","baseOptions","option","completeExpressions","orderByDirections","setOrderBy","SQLBuilderEditor","sqlString","fullQuery","sqlPreview","setSQLPreview","Input","I","val","valueAsNumber","process","extensions","mimetypes","loader","TRIGGER_SUGGEST","registerLanguage","monaco","completionItemProvider","languages","getLanguages","register","monarch","setMonarchTokensProvider","setLanguageConfiguration","registerCompletionItemProvider","getCompletionProvider","MathExpressionQueryField","containerRef","useRef","onEditorMount","onDidFocusEditorText","trigger","addCommand","KeyMod","Shift","KeyCode","Enter","getValue","updateElementHeight","containerDiv","getContentHeight","pixelHeight","max","style","height","pixelWidth","clientWidth","layout","onDidContentSizeChange","ref","CodeEditor","monacoOptions","scrollBeyondLastLine","fontSize","lineNumbers","renderLineHighlight","scrollbar","vertical","horizontal","suggestFontSize","wordWrap","top","onBeforeEditorMount","metricMathCompletionItemProvider","onEditorDidMount","SQLCodeEditor","sqlCompletionItemProvider","setRegion","showMiniMap","showLineNumbers","LinkedToken","previous","tokenTypes","isKeyword","Keyword","isWhiteSpace","Whitespace","isParenthesis","Parenthesis","isIdentifier","Identifier","isString","isDoubleQuotedString","Type","isVariable","Variable","isFunction","isNumber","is","isType","endsWith","getPreviousNonWhiteSpaceToken","getPreviousOfType","getPreviousUntil","ignoreTypes","tokens","t","getNextUntil","getPreviousKeyword","getNextNonWhiteSpaceToken","getNextOfType","linkedTokenBuilder","model","position","tokensPerLine","tokenize","lineIndex","offset","_tokenBrand","columnIndex","endColumn","getLineLength","startLineNumber","startColumn","endLineNumber","getValueInRange","newToken","Range","containsPosition","StatementPosition","SuggestionKind","CompletionItemPriority","dynamicLabelsCompletionItemProvider","Delimiter","languageDefinition","triggerCharacters","currentToken","fromPositions","toCompletionItem","rest","insertText","kind","CompletionItemKind","Field","sortText","Medium","High","insertTextRules","CompletionItemInsertTextRule","InsertAsSnippet","DynamicLabelsField","getInputStyles","clientHeight","wrapper","containerStyles","disabledBackground","components","input","borderColor","overviewRulerLanes","Alias","setAlias","propagateOnChange","migrateMetricQuery","migratedQuery","config","_","aliasPatterns","migrateAliasPatterns","period","stat","DEFAULT_QUERY","preparedQuery","deepEqual","prepareQuery","MetricsQueryEditor","setSQLCodeEditorIsDirty","usePreparedMetricsQuery","newQuery","Space","invalid","event","PanelQueryEditor","LogsQueryEditor","CloudWatchAnnotationSupport","prepareAnnotation","isCloudWatchAnnotation","enable","iconColor","builtIn","hide","anno","prefixMatching","actionPrefix","alarmNamePrefix","validPrefixMatchingQuery","validMetricStatQuery","QueryEditor","topSpacing","func","wait","mem","memoize","leading","args","CloudWatchRequest","instanceSettings","memoizedDebounce","displayCustomError","AppNotificationTimeout","getDataSourceRef","awsRequest","url","method","headers","getBackendSrv","fetch","pipe","convertDimensionFormat","scopedVars","replaceVariableAndDisplayWarningIfMulti","newValues","expandVariableToArray","variableName","getVariableName","valueVar","multi","convertMultiFilterFormat","multiFilters","interpolatedKey","displayErrorIfIsMultiTemplateVariable","variable","debouncedCustomAlert","jsonData","defaultRegion","store","CloudWatchAPI","resourceRequest","subtype","get","r","dimensionKey","filterDimensions","getEbsVolumeIds","instanceId","getEc2InstanceAttribute","attributeName","getResourceARNs","resourceType","tags","CompletionItemProvider","getStatementPosition","Unknown","getSuggestionKinds","getSuggestions","suggestionKinds","statementPosition","Promise","reject","SQLTokenTypes","previousNonWhiteSpace","previousKeyword","previousIsSlash","SelectKeyword","AfterSelectKeyword","AfterSelectFuncFirstArgument","FromKeyword","AfterFromKeyword","SchemaFuncFirstArgument","SchemaFuncExtraArgument","AfterFrom","WhereKey","WhereComparisonOperator","WhereValue","AfterWhereValue","AfterGroupByKeywords","AfterGroupBy","AfterOrderByKeywords","AfterOrderByFunction","AfterOrderByDirection","FunctionsWithArguments","Metrics","Namespaces","SchemaKeyword","LabelKeys","WhereKeyword","GroupByKeywords","OrderByKeywords","LimitKeyword","ComparisonOperators","LabelValues","LogicalOperators","FunctionsWithoutArguments","SortOrderDirectionKeyword","getSelectToken","getMetricNameToken","assumedMetricNameToken","assumedStatisticToken","getSelectStatisticToken","getNamespaceToken","fromToken","selectToken","getFromKeywordToken","nextNonWhiteSpace","toUpperCase","assumedNamespaceToken","SQLCompletionItemProvider","addSuggestion","suggestion","namespaceToken","forEach","getAllMetrics","uniq","metricNameToken","n","labelKeyTokens","o","MediumHigh","MediumLow","Low","CloudWatchLanguageProvider","LanguageProvider","initialValues","lastValueFrom","startTask","resolve","started","fetchedFieldsCache","time","sortedUniq","fields","results","all","logGroup","getLogGroupFields","logGroupName","Set","cur","logGroupFields","suggs","getFieldCompletionItems","functionSuggestions","searchFunctionType","SearchFunctionType","commandToken","curToken","queryCommand","prevToken","prevNonWhitespaceToken","currentTokenIsFirstArg","handleSortCommand","currentTokenIsAfterCommandAndEmpty","isTokenType","currentTokenIsAfterCommand","nextNonWhitespaceToken","currentTokenIsComma","currentTokenIsCommaOrAfterComma","typeaheadOutput","getFieldAndFilterFunctionCompletionItems","getStatsAggCompletionItems","group","skipFilter","sugg","boolFuncs","getBoolFuncCompletionItems","fieldsSuggestions","comparisonSuggestions","getComparisonCompletionItems","fetchFields","assign","isStatsQuery","offsets","selection","isFirstToken","prev","getCommandCompletionItems","parenthesisToken","maybeFunctionToken","funcsWithFieldArgs","isInsideFunctionParenthesis","maybeKeyword","getPreviousTokenExcluding","isAfterKeyword","handleKeyword","handleComparison","startToken","thisToken","previousCommandToken","handleCommand","isFirstArgument","funcName","exclude","main","MetricMathTokenTypes","WithinString","currentFunction","isAfterComma","isWithinSearch","allTokensAfterStartOfSearch","lastComma","SearchFuncThirdArg","SearchFuncSecondArg","PredefinedFuncSecondArg","AfterFunction","PredefinedFunction","KeywordArguments","Operators","Statistic","Period","MetricMathCompletionItemProvider","idx","Value","fromCharCode","CloudWatchAnnotationQueryRunner","handleAnnotationQuery","queries","dsQueryEndpoint","toDataQueryResponse","createInternalXrayLink","getDataSourceSrv","console","internal","queryType","datasourceName","createAwsConsoleLink","getVariableValue","interpolatedExpression","interpolatedGroups","targetBlank","runWithRetry","queryFun","targets","timeoutFunc","startTime","timerID","subscription","retries","collected","Observable","observer","run","currentQueryParams","subscribe","frames","collectedPreviously","complete","errorData","keys","errorMessage","errors","q","good","splitErrorData","retry","dataResponse","setTimeout","pow","random","clearTimeout","unsubscribe","subscriber","counter","step","endPeriod","newPeriod","schedule","LOG_IDENTIFIER_INTERNAL","LOGSTREAM_IDENTIFIER_INTERNAL","CloudWatchLogsQueryRunner","timeSrv","logQueries","queryParams","queryString","validLogQueries","of","isEmpty","LoadingState","rangeUtil","logsTimeout","makeLogActionRequest","makeReplacements","skipCache","mergeMap","logsQuery","dataFrame","queryId","meta","custom","response","dataQueryResponse","replaceFn","getVariableValueFn","getRegion","tracingDatasourceUid","curTarget","interpolatedRegion","xrayLink","links","addDataLinksToLogsResponse","timeRange","tracingDataSourceUid","row","direction","logStreamField","logField","requestParams","startFromHead","parseLogGroupName","rowIndex","logStreamName","endTime","timeEpochMs","dataFrames","statsQuery","startPeriod","scheduler","asyncScheduler","add","increasingInterval","concatMap","repeat","share","consecutiveFailedAttempts","scan","failures","prevRecordsMatched","frame","recordsMatched","stats","displayName","queryResponse","zip","tap","CloudWatchLogsQueryStatus","failedAttempts","set","every","DataQueryErrorType","takeWhile","observable","onUnsubscribe","stopQueries","innerSub","logQuery","finalize","intervalMs","maxDataPoints","fieldsToReplace","anyQuery","resultsToDataFrames","catchError","status","fieldNames","toArray","fieldPercentages","percent","logIdentifier","colonIndex","ThrottlingErrorMessage","displayAlert","CloudWatchMetricsQueryRunner","metricQueries","timezoneUTCOffset","dateTimeFormat","timeZone","timezone","format","validMetricsQueries","filterMetricQuery","migratedAndIterpolatedQuery","replaceMetricQueryVars","performTimeSeriesQuery","interpolateMetricsQueryVariables","dataframes","lastError","findLast","FieldType","interval","throwError","firstErrorResult","failedRedIds","actualRegion","debouncedAlert","getPeriod","parseInt","jsonVariable","migrateMultiFilters","oldFilters","tempFilters","parsedFilters","parse","newFilters","migrateVariableQuery","rawQuery","ec2Filters","isVariableQuery","omit","VariableQueryType","instanceID","metricNameQuery","dimensionKeysQuery","dimensionValuesQuery","ebsVolumeIdsQuery","ec2InstanceAttributeQuery","resourceARNsQuery","MultiFilterItem","keyPlaceholder","localKey","setLocalKey","localValue","setLocalValue","MultiFilter","multiFiltersToFilterConditions","newMultifilters","filterConditionsToMultiFilters","VariableQueryField","VariableTextField","interactive","queryTypes","VariableQueryEditor","parsedQuery","keysForDimensionFilter","sanitizeQuery","hasRegionField","hasNamespaceField","onRegionChange","logGroupPrefix","CloudWatchVariableSupport","CustomVariableSupport","queryObj","execute","handleRegionsQuery","handleNamespacesQuery","handleMetricsQuery","handleDimensionKeysQuery","handleDimensionValuesQuery","handleEbsVolumeIdsQuery","handleEc2InstanceAttributeQuery","handleResourceARNsQuery","handleStatisticsQuery","handleLogGroupsQuery","describeAllLogGroups","expandable","CloudWatchDatasource","DataSourceWithBackend","getTimeSrv","getLogRowContext","metricsQueryRunner","annotationQueryRunner","annotations","filterQuery","cloneDeep","metricsQueries","annotationQueries","dataQueryResponses","handleLogQueries","handleMetricQueries","merge","interpolateVariablesInQueries","targetContainsTemplate","containsTemplate","k","showContextToggle","getQueryDisplayText","isMetricSearchBuilder","plugin","DataSourcePlugin","setQueryEditorHelp","setConfigEditor","setSaved","version","setDatasource","loadDatasource","useDatasource","addWarning","createWarningNotification","authType","profile","database","useAuthenticationWarning","logsTimeoutError","setErr","useDebounce","useTimoutValidation","assumeRoleArn","endpoint","externalId","secureJsonData","accessKey","secretKey","ConnectionConfig","loadRegions","customMetricsNamespaces","onUpdateDatasourceJsonDataOption","updateDatasourcePluginJsonDataOption","put","updateDatasourcePluginOption","setQueryEditor","setMetadataInspector","rows","executedQueryString","getAppEvents","DashboardLoadedEvent","payload","dashboardId","orgId","grafanaVersion","cloudWatchQueries","pluginJson","logsQueries","grafana_version","dashboard_id","org_id","logs_queries_count","metrics_queries_count","metrics_search_count","metrics_search_builder_count","metrics_search_code_count","metrics_search_match_exact_count","metrics_query_count","metrics_query_builder_count","metrics_query_code_count","reportInteraction","effect","deps","depsEqual","isDeepEqual","a","default","call","throw","done","sent","trys","ops","return","Symbol","iterator","pop","u","c","d","exports","Keys","Credentials","Default","EC2IAMRole","ARN","h","y","standardRegions","D","w","E","A","onOptionsChange","S","skipHeader","C","skipEndpoint","V","F","O","window","grafanaBootData","settings","R","awsAllowedAuthProviders","awsAssumeRoleEnabled","K","createElement","FieldSet","defaultValue","onUpdateDatasourceJsonDataOptionSelect","menuShouldPortal","Fragment","secureJsonFields","ButtonGroup","ToolbarButton","onUpdateDatasourceResetOption","onUpdateDatasourceSecureJsonDataOption","defaultEndpoint","formatCreateLabel","children","dependencies","description","resources","hidden","saveOptions","Previous","Null","SIGV4ConnectionConfig","sigV4AuthType","sigV4Profile","sigV4AssumeRoleArn","sigV4ExternalId","sigV4Region","sigV4Endpoint","sigV4AccessKey","sigV4SecretKey","module","equal","flags","$$typeof","encode","ch","charCodeAt","tmpAry","isFinite","reserved","len","eat","expected","charAt","decode","beg","substring","parseOne","sub","parseFloat","tryParse","def","ex"],"sourceRoot":""}