{"version":3,"file":"6159.000965e08e8f1e7b9d13.js","mappings":"iNAYO,MAAMA,EAAkB,IAAoE,IAAjEC,SAAUC,EAAZ,cAA2BC,GAAwC,EACjG,MAAMC,GAAUC,EAAAA,EAAAA,UAA2B,KAAMC,EAAAA,EAAAA,MAAyB,IACpEC,GAAUF,EAAAA,EAAAA,UACd,IACED,EACGI,KAAKC,IAAD,CAAUC,MAAOD,EAAEE,KAAMC,OAAQH,EAAEI,KAAKC,MAAMC,MAAOC,MAAOP,MAChEQ,MAAK,CAACC,EAAGC,KAAJ,uBAAUD,EAAER,aAAZ,aAAU,EAASU,cAAcD,EAAET,WAC7C,CAACN,KAEIY,EAAOK,IAAYC,EAAAA,EAAAA,UAAkD,IACtErB,GAAWsB,EAAAA,EAAAA,cACdnB,IACC,MAAMoB,EAAiBpB,EAAQqB,QAAQhB,GAAMA,EAAEO,QAAOR,KAAKC,GAAMA,EAAEO,QACnEd,EAAcsB,GACdH,EAASjB,KAEX,CAACF,IAEGwB,GAASC,EAAAA,EAAAA,IAAWC,GAEpBC,EAAgB,CACpBC,gBAAgB,EAChBC,eAAiBC,GAAWA,EAAEtB,MAC9BuB,eAAiBD,GAAWA,EAAEhB,MAC9BkB,iBAAkB,uBAClBC,YAAa,iBACbhC,cAAAA,EACAI,QAAAA,EACAS,MAAAA,EACAf,SAAAA,GAGF,OACE,iBAAKmC,UAAWV,EAAOW,UAAvB,UACGrB,EAAMsB,OAAS,IACd,SAAC,KAAD,CACEC,KAAK,KACLC,KAAK,YACLC,KAAK,OACLL,UAAWV,EAAOgB,MAClBC,QAAS,IAAM1C,EAAS,IACxB,aAAW,cANb,0BAWF,SAAC,KAAD,iBAAiB4B,EAAjB,CAAgCe,OAAM,OAAE,SAAC,IAAD,CAAMjC,KAAK,YAAa,aAAW,2BAKjF,SAASiB,EAAUiB,GACjB,MAAO,CACLR,UAAWS,EAAAA,GAAI;;;;;MAMfJ,MAAOI,EAAAA,GAAI;;mBAEID,EAAME,QAAQ;;cAEnBF,EAAME,QAAQ;;iNChErB,MAAMC,EAAoE,CAC/EC,aAAcC,EAAAA,GAAAA,QACdC,gBAAiB,IAGNC,GAAkBC,EAAAA,EAAAA,IAC7B,wCAGWC,EAAiC,WAGX,IAFjCC,EAEiC,uDAFKP,EACtCQ,EACiC,uCACjC,OAAIJ,EAAgBK,MAAMD,GACjB,OAAP,UACKD,EADL,CAEEJ,gBAAiBK,EAAOE,QAAQC,WAAWnD,KAAKoD,GAAMA,EAAEC,QACxDZ,aAAcC,EAAAA,GAAAA,OAIXK,G,uBCdF,MAAMO,EAAqC,IAA4C,IAA3C,aAAEC,EAAF,UAAgBC,EAAhB,UAA2BC,GAAgB,EAC5F,MAAMvC,GAASwC,EAAAA,EAAAA,IAAUC,EAAAA,KAClB,gBAAEhB,EAAF,aAAmBF,GAAgBmB,IAAYC,EAAAA,EAAAA,YACpDf,EACAN,GAEIsB,GAAgBjE,EAAAA,EAAAA,UAAQ,KAAMkE,EAAAA,EAAAA,IAAgBH,IAAW,CAACA,KAChEI,EAAAA,EAAAA,YAAU,KACRF,ECrBG,SAAgCP,GACrC,OAAOU,eAAgBL,GACrB,MAAMT,QAAmBe,EAAAA,EAAAA,IAA0BX,EAAaY,KAChEP,EAAShB,EAAgB,CAAEO,WAAAA,MDkBbiB,CAAuBb,MACpC,CAACO,EAAeP,IACnB,MAAMc,EAAYC,QAAQ3B,EAAgBb,QACpCyC,EAAO9B,IAAiBC,EAAAA,GAAAA,KAE9B,OACE,UAAC8B,EAAA,EAAD,CAAO5C,UAAWV,EAAOuD,MAAOpB,MAAM,uBAAuBrB,KAAK,YAAYwB,UAAWA,EAAWkB,QAAQ,EAA5G,UACIH,EAA8B,KAA/B,OAAQ,SAACI,EAAD,KACRJ,GACC,2BACGF,GAAY,SAACO,EAAD,CAAwBjC,gBAAiBA,IAAsB,KAC1E0B,EAA0B,KAA3B,OAAa,SAACQ,EAAD,MAEd,UAACL,EAAA,YAAD,YACE,SAACM,EAAA,GAAD,CAAQC,QAAQ,YAAY5C,QAASqB,EAAWvB,KAAK,UAArD,qBAGA,SAAC6C,EAAA,GAAD,CAAQC,QAAQ,cAAc5C,QAASsB,EAAWuB,SAAUX,EAA5D,0BAKF,SAKJM,EAAuB,IAAM,IAAN,GAAM,wDAE7BE,EAAc,KAClB,MAAM3D,GAASwC,EAAAA,EAAAA,IAAUC,EAAAA,GAEzB,OAAO,gBAAK/B,UAAWV,EAAO+D,UAAvB,gDAGHL,EAA4D,IAAyB,IAAxB,gBAAEjC,GAAsB,EACzF,MAAMzB,GAASwC,EAAAA,EAAAA,IAAUC,EAAAA,GACnBuB,EAAoC,IAA3BvC,EAAgBb,OAAe,aAAe,cACvDqD,EAAW,GAAExC,EAAgBb,UAAUoD,IAC7C,OAA+B,IAA3BvC,EAAgBb,OACX,MAIP,4BACE,eAAGF,UAAWV,EAAOkE,SAArB,UACG,qEACD,4BAASD,IACR,4EAEH,mBAAOvD,UAAWV,EAAOmE,QAAzB,iBACE,4BACE,yBACE,iDAGJ,2BACG1C,EAAgB3C,KAAI,CAACqD,EAAO7B,KAC3B,yBACE,wBAAK6B,KADG,cAAa7B,gB,QEjE5B,MAAM8D,EAAiG,IAKxG,UALyG,aAC7G/B,EAD6G,QAE7GpB,EAF6G,SAG7GoD,EAH6G,qBAI7GC,GACI,EACJ,MAAOC,EAAmBC,IAAwB5E,EAAAA,EAAAA,WAAS,GAOrD6E,EAAW,UAAGC,EAAAA,EAAAA,OAAcrC,EAAasC,MAAMC,aAApC,SAA6CC,EAAAA,EAAAA,GAAuBxC,EAAasC,MAAMC,MAAME,KAE9G,OACE,iCACE,SAACC,EAAA,EAAD,CACEC,WAAW,EACX7C,MAAOE,EAAapD,KACpBgG,YAAa5C,EAAa4C,YAC1BC,OAAQT,EACRxD,QAAS,IAAMA,MAAAA,OAAN,EAAMA,EAAUoB,GACzBgC,SAAUC,EAAuB,IAAME,GAAqB,QAAQW,EANtE,UAQE,SAACC,EAAD,CAAY/C,aAAcA,MAE3BkC,IACC,SAACnC,EAAD,CACEC,aAAcA,EACdE,UAtBc,KACpB8B,MAAAA,GAAAA,EAAWhC,GACXmC,GAAqB,IAqBflC,UAAW,IAAMkC,GAAqB,SAWhD,SAASY,EAAT,GAA4E,IAAxD,aAAE/C,GAAsD,EAC1E,MAAMrC,GAASC,EAAAA,EAAAA,IAAWC,GAE1B,OAAKmC,EAAayC,KAAKO,WAAchD,EAAayC,KAAKQ,WAIlDjD,EAAayC,KAAKO,WAUrB,iBAAM3E,UAAWV,EAAOuF,cAAxB,UACE,UAACC,EAAA,EAAD,CAAMC,KAAO,iBAAgBpD,EAAayC,KAAKO,YAA/C,iBACE,SAACK,EAAA,EAAD,CAAMzG,KAAM,gBAAiB4B,KAAK,SAClC,0BAAOwB,EAAayC,KAAKQ,mBAX3B,kBAAM5E,UAAWV,EAAOuF,cAAxB,iBACE,SAACG,EAAA,EAAD,CAAMzG,KAAM,SAAU4B,KAAK,SAC3B,0BAAOwB,EAAayC,KAAKQ,gBAPtB,KAsBX,SAASpF,EAAUiB,GACjB,MAAO,CACLoE,cAAenE,EAAAA,GAAI;;;eAGRD,EAAMwE,OAAOC,KAAKC;mBACd1E,EAAM2E,WAAWC,UAAUC;qBACzB7E,EAAME,QAAQ;;;wBAGXF,EAAME,QAAQ;;;0NClF/B,SAAS4E,EAAT,GAAmF,IAA7D,SAAE1H,EAAF,cAAYE,GAAiD,EACxF,MAAMuB,GAASC,EAAAA,EAAAA,IAAWC,IACnBgG,EAASC,IAAcvG,EAAAA,EAAAA,WAAS,GACjCwG,GAAavG,EAAAA,EAAAA,cAAawG,GA2ClCtD,eACEsD,EACAF,GAEAA,GAAW,GAEX,MAAMG,EAAS,CACbC,MAAOF,EACPzB,KAAM4B,EAAAA,EAAAA,WACNC,WAAYC,EAAAA,GAAAA,MAKR7H,SADyC8H,EAAAA,EAAAA,KAAgBC,OAAON,IAC3CxH,KAAKoD,IAAD,CAAUlD,MAAOkD,EAAEC,MAAO7C,MAAO,CAAEuH,GAAI3E,EAAE2E,GAAI1E,MAAOD,EAAEC,WAChFkE,IAAgB,UAAUS,SAAST,EAAaU,gBACnDlI,EAAQmI,QAAQ,CAAEhI,MAAO,UAAWM,MAAO,CAAEuH,GAAI,EAAG1E,MAAO,aAK7D,OAFAgE,GAAW,GAEJtH,EAhEkDoI,CAAoBZ,EAAcF,IAAa,IAClGe,GAAuBvI,EAAAA,EAAAA,UAAQ,IAAMwI,GAAAA,CAASf,EAAY,MAAM,CAACA,KAEhE9G,EAAOK,IAAYC,EAAAA,EAAAA,UAA6C,IACjEwH,GAAuBvH,EAAAA,EAAAA,cAC1BwH,IACC,MAAMC,EAAmBD,EAAQtH,QAAQwH,GAAMnE,QAAQmE,EAAEjI,SAAQR,KAAKyI,GAAMA,EAAEjI,QAC9Ef,EAAS+I,GACT3H,EAAS0H,KAEX,CAAC9I,IAGH,OACE,iBAAKmC,UAAWV,EAAOW,UAAvB,UACGrB,EAAMsB,OAAS,IACd,SAACgD,EAAA,GAAD,CACE/C,KAAK,KACLC,KAAK,YACLC,KAAK,OACLL,UAAWV,EAAOgB,MAClBC,QAAS,IAAM1C,EAAS,IACxB,aAAW,gBANb,4BAWF,SAAC,KAAD,CACEe,MAAOA,EACPf,SAAU6I,EACVI,UAAWtB,EACXuB,YAAaP,EACbzI,cAAeA,EACfgC,YAAY,mBACZD,iBAAiB,mBACjBU,OAAM,OAAE,SAACwE,EAAA,EAAD,CAAMzG,KAAK,YACnB,aAAW,gBACXmB,gBAAc,OA8BtB,SAASF,EAAUiB,GACjB,MAAO,CACLR,UAAWS,EAAAA,GAAI;;;;;MAMfJ,MAAOI,EAAAA,GAAI;;mBAEID,EAAME,QAAQ;;cAEnBF,EAAME,QAAQ;;uDClFrB,IAAKqG,G,SAAAA,GAAAA,EAAAA,MAAAA,QAAAA,EAAAA,SAAAA,W,CAAAA,IAAAA,EAAAA,KAiBL,MAAMC,EAAsB,IAUU,IAVT,QAClC1G,EADkC,QAElC4C,EAAU6D,EAA2BE,SAFH,eAGlCC,EAHkC,gBAIlCC,EAJkC,QAKlCC,EAAUC,EAAAA,GALwB,gBAMlCC,GAAkB,EANgB,iBAOlCC,GAAmB,EAPe,SAQlCC,GAAW,EARuB,qBASlC7D,GAAuB,GACoB,EAC3C,MAAMtE,GAASC,EAAAA,EAAAA,KAAWJ,EAAAA,EAAAA,cAAasB,GAyDzC,SAAmBA,EAAsB0C,GACvC,MAAMuE,EAAchH,EAAAA,GAAI;;eAEXD,EAAME,QAAQ;IAE3B,MAAO,CACLgH,mBAAoBjH,EAAAA,GAAI;mBACTyC,IAAY6D,EAA2BY,MAAQ,EAAI;MAElE3H,UAAWS,EAAAA,GAAI;;;iBAGFD,EAAME,QAAQ;MAE3BkH,kBAAmBnH,EAAAA,GAAI;;MAGvBoH,cAAepH,EAAAA,GAAI;QACfyC,IAAY6D,EAA2BY,MAAQF,EAAc;;;;oBAIjDjH,EAAME,QAAQ;iBACjBF,EAAME,QAAQ;wBACPF,EAAME,QAAQ;OAjFanB,CAAUiB,EAAO0C,IAAU,CAACA,MAEtE4E,EAAaC,IAAkB9I,EAAAA,EAAAA,UAAS,KACxC+I,EAAsBC,IAA2BhJ,EAAAA,EAAAA,UAAS,KACjEiJ,EAAAA,EAAAA,IAAY,IAAMD,EAAwBH,IAAc,IAAK,CAACA,IAE9D,MAAOK,EAAeC,IAAoBnJ,EAAAA,EAAAA,UAAkC,KACrEoJ,EAAcC,IAAmBrJ,EAAAA,EAAAA,UAAmBkI,EAAkB,CAACoB,OAAOpB,IAAoB,KAClGqB,EAAaC,IAAkBxJ,EAAAA,EAAAA,UAAmB,IAEnDyJ,EAAuBlB,GAAYF,GAAmBC,EACtDoB,EAAuBzF,IAAY6D,EAA2BY,MAAQ,KAAO,KAEnF,OACE,gBAAK5H,UAAWV,EAAOW,UAAvB,UACE,UAAC,KAAD,CAAeU,QAASiI,EAAxB,WACE,iBAAK5I,UAAWV,EAAOwI,cAAvB,WACE,gBAAK9H,UAAWV,EAAOqI,mBAAvB,UACE,SAACkB,EAAA,EAAD,CACEjK,MAAOmJ,EACPlK,SAAUmK,EACVjI,YAAY,gCACZ+I,MAAO,EACPC,aAAa,MAGhBJ,IACC,SAACK,EAAD,CACEvB,SAAUA,EACVF,gBAAiBA,EACjBC,iBAAkBA,EAClByB,aAAcZ,EACda,qBAAsBX,EACtBY,oBAAqBT,EACrBN,cAAeA,EAAcxJ,MAC7BuE,QAASA,QAKf,gBAAKnD,UAAWV,EAAOuI,kBAAvB,UACE,SAACuB,EAAA,EAAD,CACEC,YAAa9I,EACboF,aAAcsC,EACdG,cAAeA,EAAcxJ,MAC7B6J,YAAaA,EACbH,aAAcA,EACdnB,eAAgBA,EAChBvD,qBAAsBA,EACtByD,QAASA,YAgDrB,MAAM2B,EAAiBM,EAAAA,MACrB,IAS2B,IAT1B,QACCnG,EAAU6D,EAA2BE,SADtC,SAECO,EAFD,gBAGCF,EAHD,iBAICC,EAJD,cAKCY,EALD,aAMCa,EAND,qBAOCC,EAPD,oBAQCC,GACyB,EACzB,MAAM7J,GAASC,EAAAA,EAAAA,KAAWJ,EAAAA,EAAAA,cAAasB,GAyB3C,SAAsBA,GAAqE,IAA/C0C,EAA+C,uDAArC6D,EAA2BE,SAC/E,MAAMqC,EAAqB7I,EAAAA,GAAI;;WAEtBD,EAAME,QAAQ;;;;IAKjB6I,EAA0B9I,EAAAA,GAAI;MAChC6I;;;;IAKEE,EAAkB/I,EAAAA,GAAI;;;;;IAMtBgJ,EAAuBhJ,EAAAA,GAAI;MAC7B+I;;;IAKJ,OAAQtG,GACN,KAAK6D,EAA2BE,SAC9B,MAAO,CACLjH,UAAWsJ,EACXE,gBAAiBA,GAErB,KAAKzC,EAA2BY,MAC9B,MAAO,CACL3H,UAAWuJ,EACXC,gBAAiBC,IA5D4BC,CAAalJ,EAAO0C,IAAU,CAACA,KAC1EyG,GAAqBzK,EAAAA,EAAAA,cACxBnB,GAA+BmL,EAAoBnL,EAAQI,KAAKC,GAAMA,EAAE8H,OACzE,CAACgD,IAEGU,GAAsB1K,EAAAA,EAAAA,cACzBwH,GAA0BuC,EAAqBvC,EAAQvI,KAAKyI,GAAM2B,OAAO3B,EAAEV,QAC5E,CAAC+C,IAGH,OACE,iBAAKlJ,UAAWV,EAAOW,UAAvB,UACGwH,IAAY,SAACqC,EAAA,EAAD,CAAYlL,MAAOwJ,EAAevK,SAAUoL,EAAc5J,OAAQ,CAAC,YAAa,iBAC3FmI,GAAoBD,KACpB,iBAAKvH,UAAWV,EAAOmK,gBAAvB,UACGjC,IAAoB,SAACjC,EAAD,CAAc1H,SAAUgM,IAC5CtC,IAAmB,SAAC3J,EAAA,EAAD,CAAiBC,SAAU+L,aAO3DZ,EAAee,YAAc,kB,kJCrJtB,MAAMX,EAAqD,IAU5D,IAV6D,UACjEpJ,EADiE,YAEjEqJ,EAFiE,aAGjE1D,EAHiE,cAIjEyC,EAJiE,YAKjEK,EALiE,aAMjEH,EANiE,qBAOjE1E,EACAuD,eAAgB6C,EAChB3C,QAAS4C,EAAe,IACpB,EACJ,MAAM3K,GAASwC,EAAAA,EAAAA,IAAUoI,KAClB,cAAEC,EAAF,KAAiBC,EAAjB,QAAuB/C,EAAvB,cAAgCgD,EAAhC,aAA+CxJ,EAA/C,eAA6DsG,GAAkBnF,IAAYC,EAAAA,EAAAA,YAChGqI,EAAAA,GAD0G,iBAGrGC,EAAAA,GAHqG,CAIxGpD,eAAgB6C,EAChB3C,QAAS4C,KAGP/H,GAAgBjE,EAAAA,EAAAA,UAAQ,KAAMkE,EAAAA,EAAAA,IAAgBH,IAAW,CAACA,KAChEmG,EAAAA,EAAAA,IACE,IACEjG,GACEsI,EAAAA,EAAAA,IAAuB,CACrB7E,aAAAA,EACAyC,cAAAA,EACAK,YAAAA,EACAH,aAAAA,EACA8B,KAAAA,EACA/C,QAAAA,EACAF,eAAAA,MAGN,IACA,CAACxB,EAAcyC,EAAeK,EAAaH,EAAc8B,EAAMlI,IAEjE,MAAMyB,EAAW,QAAC,IAAEpB,GAAH,SACfL,GAAcuI,EAAAA,EAAAA,IAAmBlI,EAAK,CAAEoD,aAAAA,EAAcyE,KAAAA,EAAM/C,QAAAA,MAG9D,OACE,iBAAKrH,WAAW0K,EAAAA,EAAAA,IAAGpL,EAAOW,UAAWD,GAArC,WACE,gBAAKA,UAAWV,EAAOqL,iBAAvB,SACG9J,IAAiBC,EAAAA,GAAAA,QAAjB,OACC,sDACEqJ,EAAcjK,OAAS,GACzB,cAAGF,UAAWV,EAAOsL,cAArB,sCAEAT,MAAAA,OAHE,EAGFA,EAAe/L,KAAI,CAACyM,EAAMjL,KACxB,SAAC,IAAD,CAEE+B,aAAckJ,EACdlH,SAAUA,EACVpD,QAAS8I,EACTzF,qBAAsBA,GAJhB,iBAAgBhE,SAS7BuK,EAAcjK,QACb,gBAAKF,UAAWV,EAAOwL,WAAvB,UACE,SAAC,IAAD,CACEC,YAAaX,EACbC,cAAeA,EACfW,WA1BYZ,GAAiBlI,GAAc+I,EAAAA,EAAAA,IAAW,CAAEb,KAAAA,KA2BxDc,oBAAoB,MAGtB,SAKJhB,EAAsBzJ,IACnB,CACLR,UAAWS,EAAAA,GAAI;;;;MAKfiK,iBAAkBjK,EAAAA,GAAI;;;kBAGRD,EAAME,QAAQwK;MAE5BC,aAAc1K,EAAAA,GAAI;;MAGlB2K,eAAgB3K,EAAAA,GAAI;;;MAIpBoK,WAAYpK,EAAAA,GAAI;;oBAEAD,EAAME,QAAQwK;MAE9BP,cAAelK,EAAAA,GAAI;;;4MCtGhB,SAAS8J,EAAuBc,GACrC,OAAO,SAAUtJ,GACf,MAAMuJ,EAAe,IAAIC,EAAAA,GACnBC,GAAiBC,EAAAA,EAAAA,IACrBC,EAAAA,EAAAA,IAAiB,CACfhG,aAAc2F,EAAK3F,aACnB0B,QAASiE,EAAKjE,QACd+C,KAAMkB,EAAKlB,KACXwB,WAAYN,EAAKnE,eACjBiB,cAAekD,EAAKlD,cACpByD,WAAYP,EAAK7C,YACjBH,aAAcgD,EAAKhD,gBAErBwD,MACAC,EAAAA,EAAAA,IAAS,QAAC,QAAE1E,EAAS2E,SAAU7B,EAArB,KAAoCC,EAApC,WAA0C6B,GAA3C,SACPC,EAAAA,EAAAA,KAAGlL,EAAAA,EAAAA,IAAgB,CAAEmJ,cAAAA,EAAeC,KAAAA,EAAM/C,QAAAA,EAAS4E,WAAAA,SAErDE,EAAAA,EAAAA,IAAYC,IACVC,QAAQC,MAAMF,IACPF,EAAAA,EAAAA,KAAGlL,EAAAA,EAAAA,IAAgB,OAAD,UAAMuJ,EAAAA,GAAN,CAAqCH,KAAMkB,EAAKlB,KAAM/C,QAASiE,EAAKjE,gBAE/FkF,EAAAA,EAAAA,IAAS,IAAMhB,EAAaiB,iBAC5BC,EAAAA,EAAAA,MAGFlB,EAAamB,KAIXC,EAAAA,EAAAA,IAAMC,EAAAA,EAAAA,GAAM,IAAId,MAAKe,EAAAA,EAAAA,IAAMC,EAAAA,EAAAA,QAAeC,EAAAA,EAAAA,GAAUtB,IAAkBA,GAAgBuB,UAAUhL,KAK/F,SAASyI,EAAmBlI,EAAa+I,GAC9C,OAAOjJ,eAAgBL,GACrB,UACQiL,EAAAA,EAAAA,IAAsB1K,GAC5BiI,EAAuBc,EAAvBd,CAA6BxI,GAC7B,MAAOkL,GACPb,QAAQC,MAAMY,KAKb,SAAS/K,EAAgBH,GAC9B,OAAO,SAAUZ,GACf,OAAIA,aAAkB+L,SACb/L,EAAOY,GAETA,EAASZ,M,8FCrDb,MAAMmJ,EAAwD,CACnE1J,aAAcC,EAAAA,GAAAA,QACdqJ,cAAe,GACf8B,WAAY,EACZ5E,QAAS,GACT+C,KAAM,EACNC,cAAe,EACflD,oBAAgB1C,GAGLqI,GAAa7L,EAAAA,EAAAA,IAAa,iCAC1BD,GAAkBC,EAAAA,EAAAA,IAE7B,sCAEWgK,GAAahK,EAAAA,EAAAA,IAAmD,iCAEhEqJ,EAA2B,CAACnJ,EAA+BC,KACtE,GAAI0L,EAAWzL,MAAMD,GACnB,OAAO,OAAP,UAAYD,EAAZ,CAAmBN,aAAcC,EAAAA,GAAAA,UAGnC,GAAIE,EAAgBK,MAAMD,GAAS,CACjC,MAAM,cAAE+I,EAAF,KAAiBC,EAAjB,QAAuB/C,EAAvB,WAAgC4E,GAAe7K,EAAOE,QACtD+I,EAAgB+C,KAAKC,KAAKpB,EAAa5E,GAC7C,OAAO,OAAP,UACKlG,EADL,CAEEgJ,cAAAA,EACA9C,QAAAA,EACA4E,WAAAA,EACApL,aAAcC,EAAAA,GAAAA,KACduJ,cAAAA,EACAD,KAAMA,EAAOC,EAAgBD,EAAO,EAAIA,IAI5C,OAAIa,EAAW5J,MAAMD,GACZ,OAAP,UAAYD,EAAZ,CAAmBiJ,KAAMhJ,EAAOE,QAAQ8I,OAGnCjJ,I,gDCrDF,SAASY,EAAetB,GAC7B,MAAO,CACLgD,QAAS/C,EAAAA,GAAI;;;;;uBAKMD,EAAM6M,OAAOC,OAAOpC;0BACjB1K,EAAMwE,OAAOuI;oBACnB/M,EAAMwE,OAAOwI;eAClBhN,EAAMwE,OAAOyI;mBACTjN,EAAM2E,WAAWjF,KAAKwN;;;;;qBAKpBlN,EAAM2E,WAAWjF,KAAKgL;;;;;;kBAMzB1K,EAAME,QAAQiN;;;;sBAIVnN,EAAMwE,OAAO4I;;MAG/BC,YAAapN,EAAAA,GAAI;uBACED,EAAME,QAAQiN;MAEjCpK,SAAU9C,EAAAA,GAAI;eACHD,EAAMwE,OAAOyI;mBACTjN,EAAM2E,WAAWjF,KAAKgL;MAErC4C,gBAAiBrN,EAAAA,GAAI;oBACLD,EAAME,QAAQgN;MAE9B9K,MAAOnC,EAAAA,GAAI;;MAGX2C,UAAW3C,EAAAA,GAAI;mBACAD,EAAM2E,WAAW4I,QAAQC;eAC7BxN,EAAMwE,OAAOiJ;4BACAzN,EAAME,QAAQa;qBACrBf,EAAME,QAAQa;2JC/B5B,MAAM6C,EAAiC,IAUxC,IAVyC,UAC7CC,EAD6C,MAE7C7C,EAF6C,OAG7C+C,EAH6C,QAI7CjE,EAJ6C,SAK7CoD,EAL6C,SAM7CP,EAN6C,UAO7C+K,EAP6C,YAQ7C5J,EAR6C,SAS7C6J,GACI,EACJ,MAAM9O,GAASC,EAAAA,EAAAA,IAAWC,GACpB6O,EAAajL,GAAYoB,EAAOrD,QAAUmN,EAAAA,GAAAA,WAC1CC,GAAW7D,EAAAA,EAAAA,IAAG,CAClB,CAACpL,EAAOuL,OAAO,EACf,CAACvL,EAAOkP,cAAeH,EACvB,CAAC/O,EAAOmP,SAAUnK,IAGpB,OACE,iBACEtE,UAAWuO,EACX,aAAYG,EAAAA,GAAAA,WAAAA,oBAAAA,KAA8ClK,EAAOjG,MACjEgC,QAAS8N,OAAa5J,EAAYlE,EAClCkB,MAAO6C,EAAY,oCAAsCE,EAAOjG,KAJlE,WAME,gBAAKyB,WAAW0K,EAAAA,EAAAA,IAAGpL,EAAOqP,IAAK,CAAE,CAACrP,EAAO8D,UAAWiL,IAAeO,IAAKpK,EAAO/F,KAAKC,MAAMC,MAAOkQ,IAAI,MAErG,iBAAK7O,WAAW0K,EAAAA,EAAAA,IAAGpL,EAAOwP,YAAa,CAAE,CAACxP,EAAO8D,UAAWiL,IAA5D,WACE,gBAAKrO,UAAWV,EAAOf,KAAvB,SAA8BkD,IAC7B8C,GAAc,iBAAMvE,UAAWV,EAAOiF,YAAxB,SAAsCA,IAAsB,KAC1E6J,KAEFD,IACC,gBAAKnO,WAAW0K,EAAAA,EAAAA,IAAGpL,EAAOyP,MAAO,CAAE,CAACzP,EAAO8D,UAAWiL,IAAtD,UACE,SAACW,EAAD,CAAkBxK,OAAQA,MAG7Bb,IACC,SAAC,IAAD,CACEpF,KAAK,YACLgC,QAAU2M,IACRA,EAAE+B,kBACFtL,KAEF3D,UAAWV,EAAO4P,aAClB,aAAW,yCAOrB7K,EAAc0F,YAAc,gBAE5B,MAAMvK,EAAaiB,IACV,CACLoK,KAAMnK,EAAAA,GAAI;;;;;oBAKMD,EAAMwE,OAAOkK,WAAWhK;uBACrB1E,EAAM2O,MAAMC;oBACf5O,EAAM6O,QAAQC;0BACR9O,EAAMwE,OAAOkK,WAAWhK;;;;;;oBAM9B1E,EAAM+O,YAAYC,OAAO,CAAC,cAAe,CACrDC,SAAUjP,EAAM+O,YAAYE,SAASC;;;sBAIvBlP,EAAMwE,OAAO2K,UAAUnP,EAAMwE,OAAOkK,WAAWhK,UAAW;;MAG5E2J,YAAapO,EAAAA,GAAI;;;iBAGJD,EAAME,QAAQ,EAAG;MAE9B6N,aAAc9N,EAAAA,GAAI;;;;;sBAKAD,EAAMwE,OAAO7D,OAAOyO;;MAGtCpB,QAAS/N,EAAAA,GAAI;;0BAESD,EAAMwE,OAAO6K,QAAQxC;oBAC3B7M,EAAMwE,OAAO7D,OAAO2O;MAEpC3M,SAAU1C,EAAAA,GAAI;iBACDD,EAAMwE,OAAO7D,OAAO4O;;;;MAKjCzR,KAAMmC,EAAAA,GAAI;;;mBAGKD,EAAM2E,WAAWjF,KAAKgL;qBACpB1K,EAAM2E,WAAW6K;;MAGlC1L,YAAa7D,EAAAA,GAAI;;;;eAIND,EAAMwE,OAAOC,KAAKC;mBACd1E,EAAM2E,WAAWC,UAAUC;qBACzB7E,EAAM2E,WAAW8K;;;MAIlCvB,IAAKjO,EAAAA,GAAI;;;;;MAMTqO,MAAOrO,EAAAA,GAAI;oBACKD,EAAMwE,OAAOkK,WAAWW;MAExCZ,aAAcxO,EAAAA,GAAI;;;QAWhBsO,EAAoD,IAAgB,IAAf,OAAExK,GAAa,EACxE,OAAI2L,EAAAA,EAAAA,GAA0B3L,EAAO4L,YAC5B,SAAC,IAAD,CAAsBC,OAAQ7L,EAAO4L,aAGvC,SAAC,IAAD,CAAiBjP,MAAOqD,EAAOrD,SAGxC6N,EAAiBjF,YAAc,oB,8ECpKxB,SAAS7L,IACd,MAAMoS,EAAYtM,EAAAA,GAAAA,OAElB,OAAOuM,OAAOC,KAAKF,GAChBjR,QAAQoR,IAA2C,IAAnCH,EAAUG,GAAV,eAChBrS,KAAKqS,GAAQH,EAAUG,KACvB5R,MAAK,CAACC,EAAoBC,IAAuBD,EAAED,KAAOE,EAAEF,OAG1D,SAAS6R,EACdC,EACA5I,EACA0G,GAEA,IAAK1G,EAAY7H,OACf,OAAOyQ,EAAYtR,QAAQhB,GACrBA,EAAE8C,QAAUmN,EAAAA,GAAAA,YACPG,EAAQtI,KAAO9H,EAAE8H,KAM9B,MAAMN,GAAQ+K,EAAAA,EAAAA,IAAwB7I,GAAa1B,cAC7CwK,EAA2B,GAC3BxP,EAA2B,GAC3ByP,EAAe,QAAQC,WAAWlL,GAExC,IAAK,MAAMgF,KAAQ8F,EAAa,CAC9B,GAAI9F,EAAK1J,QAAUmN,EAAAA,GAAAA,YAA0BG,EAAQtI,KAAO0E,EAAK1E,GAC/D,SAGF,MACM6K,EADOnG,EAAKtM,KAAK8H,cACN4K,QAAQpL,GAEb,IAARmL,EACFH,EAAMK,KAAKrG,GACFmG,EAAM,EACf3P,EAAM6P,KAAKrG,GACFiG,GAA4B,eAAZjG,EAAK1E,IAC9B0K,EAAMK,KAAKrG,GAIf,OAAOgG,EAAMM,OAAO9P,K,+ECvCf,MAAM+P,EAA8BC,IACzC,MAAMC,EASR,SAA6BnQ,GAC3B,OAAQA,GACN,KAAKmN,EAAAA,GAAAA,WACH,MAAO,CACLpJ,KAAM,aACNqM,MAAO,MACPC,QAAU,sEAEd,KAAKlD,EAAAA,GAAAA,MACH,MAAO,CACLpJ,KAAM,QACNqM,MAAO,OACPC,QAAU,oFAEd,KAAKlD,EAAAA,GAAAA,KACH,MAAO,CACLpJ,KAAM,OACNqM,MAAO,OACPC,QAAU,0DAEd,QACE,OAAO,MA9BKC,CAAoBJ,EAAMlQ,OAE1C,OAAKmQ,GAIE,SAAC,IAAD,CAAOC,MAAOD,EAAQC,MAAO9P,MAAO6P,EAAQE,QAAStM,KAAMoM,EAAQpM,KAAM9E,KAAMkR,EAAQlR,OAHrF","sources":["webpack://grafana/./public/app/core/components/PanelTypeFilter/PanelTypeFilter.tsx","webpack://grafana/./public/app/features/library-panels/components/DeleteLibraryPanelModal/reducer.ts","webpack://grafana/./public/app/features/library-panels/components/DeleteLibraryPanelModal/DeleteLibraryPanelModal.tsx","webpack://grafana/./public/app/features/library-panels/components/DeleteLibraryPanelModal/actions.ts","webpack://grafana/./public/app/features/library-panels/components/LibraryPanelCard/LibraryPanelCard.tsx","webpack://grafana/./public/app/core/components/FolderFilter/FolderFilter.tsx","webpack://grafana/./public/app/features/library-panels/components/LibraryPanelsSearch/LibraryPanelsSearch.tsx","webpack://grafana/./public/app/features/library-panels/components/LibraryPanelsView/LibraryPanelsView.tsx","webpack://grafana/./public/app/features/library-panels/components/LibraryPanelsView/actions.ts","webpack://grafana/./public/app/features/library-panels/components/LibraryPanelsView/reducer.ts","webpack://grafana/./public/app/features/library-panels/styles.ts","webpack://grafana/./public/app/features/panel/components/VizTypePicker/PanelTypeCard.tsx","webpack://grafana/./public/app/features/panel/state/util.ts","webpack://grafana/./public/app/features/plugins/components/PluginStateInfo.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useCallback, useMemo, useState } from 'react';\n\nimport { GrafanaTheme2, PanelPluginMeta, SelectableValue } from '@grafana/data';\nimport { Icon, Button, MultiSelect, useStyles2 } from '@grafana/ui';\nimport { getAllPanelPluginMeta } from 'app/features/panel/state/util';\n\nexport interface Props {\n  onChange: (plugins: PanelPluginMeta[]) => void;\n  maxMenuHeight?: number;\n}\n\nexport const PanelTypeFilter = ({ onChange: propsOnChange, maxMenuHeight }: Props): JSX.Element => {\n  const plugins = useMemo<PanelPluginMeta[]>(() => getAllPanelPluginMeta(), []);\n  const options = useMemo(\n    () =>\n      plugins\n        .map((p) => ({ label: p.name, imgUrl: p.info.logos.small, value: p }))\n        .sort((a, b) => a.label?.localeCompare(b.label)),\n    [plugins]\n  );\n  const [value, setValue] = useState<Array<SelectableValue<PanelPluginMeta>>>([]);\n  const onChange = useCallback(\n    (plugins: Array<SelectableValue<PanelPluginMeta>>) => {\n      const changedPlugins = plugins.filter((p) => p.value).map((p) => p.value!);\n      propsOnChange(changedPlugins);\n      setValue(plugins);\n    },\n    [propsOnChange]\n  );\n  const styles = useStyles2(getStyles);\n\n  const selectOptions = {\n    defaultOptions: true,\n    getOptionLabel: (i: any) => i.label,\n    getOptionValue: (i: any) => i.value,\n    noOptionsMessage: 'No Panel types found',\n    placeholder: 'Filter by type',\n    maxMenuHeight,\n    options,\n    value,\n    onChange,\n  };\n\n  return (\n    <div className={styles.container}>\n      {value.length > 0 && (\n        <Button\n          size=\"xs\"\n          icon=\"trash-alt\"\n          fill=\"text\"\n          className={styles.clear}\n          onClick={() => onChange([])}\n          aria-label=\"Clear types\"\n        >\n          Clear types\n        </Button>\n      )}\n      <MultiSelect {...selectOptions} prefix={<Icon name=\"filter\" />} aria-label=\"Panel Type filter\" />\n    </div>\n  );\n};\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css`\n      label: container;\n      position: relative;\n      min-width: 180px;\n      flex-grow: 1;\n    `,\n    clear: css`\n      label: clear;\n      font-size: ${theme.spacing(1.5)};\n      position: absolute;\n      top: -${theme.spacing(4.5)};\n      right: 0;\n    `,\n  };\n}\n","import { createAction } from '@reduxjs/toolkit';\nimport { AnyAction } from 'redux';\n\nimport { LoadingState } from '@grafana/data';\nimport { DashboardSearchItem } from 'app/features/search/types';\n\nexport interface DeleteLibraryPanelModalState {\n  loadingState: LoadingState;\n  dashboardTitles: string[];\n}\n\nexport const initialDeleteLibraryPanelModalState: DeleteLibraryPanelModalState = {\n  loadingState: LoadingState.Loading,\n  dashboardTitles: [],\n};\n\nexport const searchCompleted = createAction<{ dashboards: DashboardSearchItem[] }>(\n  'libraryPanels/delete/searchCompleted'\n);\n\nexport const deleteLibraryPanelModalReducer = (\n  state: DeleteLibraryPanelModalState = initialDeleteLibraryPanelModalState,\n  action: AnyAction\n): DeleteLibraryPanelModalState => {\n  if (searchCompleted.match(action)) {\n    return {\n      ...state,\n      dashboardTitles: action.payload.dashboards.map((d) => d.title),\n      loadingState: LoadingState.Done,\n    };\n  }\n\n  return state;\n};\n","import React, { FC, useEffect, useMemo, useReducer } from 'react';\n\nimport { LoadingState } from '@grafana/data';\nimport { Button, Modal, useStyles } from '@grafana/ui';\n\nimport { getModalStyles } from '../../styles';\nimport { LibraryElementDTO } from '../../types';\nimport { asyncDispatcher } from '../LibraryPanelsView/actions';\n\nimport { getConnectedDashboards } from './actions';\nimport { deleteLibraryPanelModalReducer, initialDeleteLibraryPanelModalState } from './reducer';\n\ninterface Props {\n  libraryPanel: LibraryElementDTO;\n  onConfirm: () => void;\n  onDismiss: () => void;\n}\n\nexport const DeleteLibraryPanelModal: FC<Props> = ({ libraryPanel, onDismiss, onConfirm }) => {\n  const styles = useStyles(getModalStyles);\n  const [{ dashboardTitles, loadingState }, dispatch] = useReducer(\n    deleteLibraryPanelModalReducer,\n    initialDeleteLibraryPanelModalState\n  );\n  const asyncDispatch = useMemo(() => asyncDispatcher(dispatch), [dispatch]);\n  useEffect(() => {\n    asyncDispatch(getConnectedDashboards(libraryPanel));\n  }, [asyncDispatch, libraryPanel]);\n  const connected = Boolean(dashboardTitles.length);\n  const done = loadingState === LoadingState.Done;\n\n  return (\n    <Modal className={styles.modal} title=\"Delete library panel\" icon=\"trash-alt\" onDismiss={onDismiss} isOpen={true}>\n      {!done ? <LoadingIndicator /> : null}\n      {done ? (\n        <div>\n          {connected ? <HasConnectedDashboards dashboardTitles={dashboardTitles} /> : null}\n          {!connected ? <Confirm /> : null}\n\n          <Modal.ButtonRow>\n            <Button variant=\"secondary\" onClick={onDismiss} fill=\"outline\">\n              Cancel\n            </Button>\n            <Button variant=\"destructive\" onClick={onConfirm} disabled={connected}>\n              Delete\n            </Button>\n          </Modal.ButtonRow>\n        </div>\n      ) : null}\n    </Modal>\n  );\n};\n\nconst LoadingIndicator: FC = () => <span>Loading library panel...</span>;\n\nconst Confirm: FC = () => {\n  const styles = useStyles(getModalStyles);\n\n  return <div className={styles.modalText}>Do you want to delete this panel?</div>;\n};\n\nconst HasConnectedDashboards: FC<{ dashboardTitles: string[] }> = ({ dashboardTitles }) => {\n  const styles = useStyles(getModalStyles);\n  const suffix = dashboardTitles.length === 1 ? 'dashboard.' : 'dashboards.';\n  const message = `${dashboardTitles.length} ${suffix}`;\n  if (dashboardTitles.length === 0) {\n    return null;\n  }\n\n  return (\n    <div>\n      <p className={styles.textInfo}>\n        {'This library panel can not be deleted because it is connected to '}\n        <strong>{message}</strong>\n        {' Remove the library panel from the dashboards listed below and retry.'}\n      </p>\n      <table className={styles.myTable}>\n        <thead>\n          <tr>\n            <th>Dashboard name</th>\n          </tr>\n        </thead>\n        <tbody>\n          {dashboardTitles.map((title, i) => (\n            <tr key={`dash-title-${i}`}>\n              <td>{title}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import { getConnectedDashboards as apiGetConnectedDashboards } from '../../state/api';\nimport { DispatchResult, LibraryElementDTO } from '../../types';\n\nimport { searchCompleted } from './reducer';\n\nexport function getConnectedDashboards(libraryPanel: LibraryElementDTO): DispatchResult {\n  return async function (dispatch) {\n    const dashboards = await apiGetConnectedDashboards(libraryPanel.uid);\n    dispatch(searchCompleted({ dashboards }));\n  };\n}\n","import { css } from '@emotion/css';\nimport React, { ReactElement, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { Icon, Link, useStyles2 } from '@grafana/ui';\nimport { getPanelPluginNotFound } from 'app/features/panel/components/PanelPluginError';\nimport { PanelTypeCard } from 'app/features/panel/components/VizTypePicker/PanelTypeCard';\n\nimport { LibraryElementDTO } from '../../types';\nimport { DeleteLibraryPanelModal } from '../DeleteLibraryPanelModal/DeleteLibraryPanelModal';\n\nexport interface LibraryPanelCardProps {\n  libraryPanel: LibraryElementDTO;\n  onClick: (panel: LibraryElementDTO) => void;\n  onDelete?: (panel: LibraryElementDTO) => void;\n  showSecondaryActions?: boolean;\n}\n\nexport const LibraryPanelCard: React.FC<LibraryPanelCardProps & { children?: JSX.Element | JSX.Element[] }> = ({\n  libraryPanel,\n  onClick,\n  onDelete,\n  showSecondaryActions,\n}) => {\n  const [showDeletionModal, setShowDeletionModal] = useState(false);\n\n  const onDeletePanel = () => {\n    onDelete?.(libraryPanel);\n    setShowDeletionModal(false);\n  };\n\n  const panelPlugin = config.panels[libraryPanel.model.type] ?? getPanelPluginNotFound(libraryPanel.model.type).meta;\n\n  return (\n    <>\n      <PanelTypeCard\n        isCurrent={false}\n        title={libraryPanel.name}\n        description={libraryPanel.description}\n        plugin={panelPlugin}\n        onClick={() => onClick?.(libraryPanel)}\n        onDelete={showSecondaryActions ? () => setShowDeletionModal(true) : undefined}\n      >\n        <FolderLink libraryPanel={libraryPanel} />\n      </PanelTypeCard>\n      {showDeletionModal && (\n        <DeleteLibraryPanelModal\n          libraryPanel={libraryPanel}\n          onConfirm={onDeletePanel}\n          onDismiss={() => setShowDeletionModal(false)}\n        />\n      )}\n    </>\n  );\n};\n\ninterface FolderLinkProps {\n  libraryPanel: LibraryElementDTO;\n}\n\nfunction FolderLink({ libraryPanel }: FolderLinkProps): ReactElement | null {\n  const styles = useStyles2(getStyles);\n\n  if (!libraryPanel.meta.folderUid && !libraryPanel.meta.folderName) {\n    return null;\n  }\n\n  if (!libraryPanel.meta.folderUid) {\n    return (\n      <span className={styles.metaContainer}>\n        <Icon name={'folder'} size=\"sm\" />\n        <span>{libraryPanel.meta.folderName}</span>\n      </span>\n    );\n  }\n\n  return (\n    <span className={styles.metaContainer}>\n      <Link href={`/dashboards/f/${libraryPanel.meta.folderUid}`}>\n        <Icon name={'folder-upload'} size=\"sm\" />\n        <span>{libraryPanel.meta.folderName}</span>\n      </Link>\n    </span>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    metaContainer: css`\n      display: flex;\n      align-items: center;\n      color: ${theme.colors.text.secondary};\n      font-size: ${theme.typography.bodySmall.fontSize};\n      padding-top: ${theme.spacing(0.5)};\n\n      svg {\n        margin-right: ${theme.spacing(0.5)};\n        margin-bottom: 3px;\n      }\n    `,\n  };\n}\n","import { css } from '@emotion/css';\nimport debounce from 'debounce-promise';\nimport React, { useCallback, useMemo, useState } from 'react';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { AsyncMultiSelect, Icon, Button, useStyles2 } from '@grafana/ui';\nimport { getBackendSrv } from 'app/core/services/backend_srv';\nimport { DashboardSearchHit, DashboardSearchItemType } from 'app/features/search/types';\nimport { FolderInfo, PermissionLevelString } from 'app/types';\n\nexport interface FolderFilterProps {\n  onChange: (folder: FolderInfo[]) => void;\n  maxMenuHeight?: number;\n}\n\nexport function FolderFilter({ onChange, maxMenuHeight }: FolderFilterProps): JSX.Element {\n  const styles = useStyles2(getStyles);\n  const [loading, setLoading] = useState(false);\n  const getOptions = useCallback((searchString: string) => getFoldersAsOptions(searchString, setLoading), []);\n  const debouncedLoadOptions = useMemo(() => debounce(getOptions, 300), [getOptions]);\n\n  const [value, setValue] = useState<Array<SelectableValue<FolderInfo>>>([]);\n  const onSelectOptionChange = useCallback(\n    (folders: Array<SelectableValue<FolderInfo>>) => {\n      const changedFolderIds = folders.filter((f) => Boolean(f.value)).map((f) => f.value!);\n      onChange(changedFolderIds);\n      setValue(folders);\n    },\n    [onChange]\n  );\n\n  return (\n    <div className={styles.container}>\n      {value.length > 0 && (\n        <Button\n          size=\"xs\"\n          icon=\"trash-alt\"\n          fill=\"text\"\n          className={styles.clear}\n          onClick={() => onChange([])}\n          aria-label=\"Clear folders\"\n        >\n          Clear folders\n        </Button>\n      )}\n      <AsyncMultiSelect\n        value={value}\n        onChange={onSelectOptionChange}\n        isLoading={loading}\n        loadOptions={debouncedLoadOptions}\n        maxMenuHeight={maxMenuHeight}\n        placeholder=\"Filter by folder\"\n        noOptionsMessage=\"No folders found\"\n        prefix={<Icon name=\"filter\" />}\n        aria-label=\"Folder filter\"\n        defaultOptions\n      />\n    </div>\n  );\n}\n\nasync function getFoldersAsOptions(\n  searchString: string,\n  setLoading: (loading: boolean) => void\n): Promise<Array<SelectableValue<FolderInfo>>> {\n  setLoading(true);\n\n  const params = {\n    query: searchString,\n    type: DashboardSearchItemType.DashFolder,\n    permission: PermissionLevelString.View,\n  };\n\n  // FIXME: stop using id from search and use UID instead\n  const searchHits: DashboardSearchHit[] = await getBackendSrv().search(params);\n  const options = searchHits.map((d) => ({ label: d.title, value: { id: d.id, title: d.title } }));\n  if (!searchString || 'general'.includes(searchString.toLowerCase())) {\n    options.unshift({ label: 'General', value: { id: 0, title: 'General' } });\n  }\n\n  setLoading(false);\n\n  return options;\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css`\n      label: container;\n      position: relative;\n      min-width: 180px;\n      flex-grow: 1;\n    `,\n    clear: css`\n      label: clear;\n      font-size: ${theme.spacing(1.5)};\n      position: absolute;\n      top: -${theme.spacing(4.5)};\n      right: 0;\n    `,\n  };\n}\n","import { css } from '@emotion/css';\nimport React, { useCallback, useState } from 'react';\nimport { useDebounce } from 'react-use';\n\nimport { GrafanaTheme2, PanelPluginMeta, SelectableValue } from '@grafana/data';\nimport { useStyles2, VerticalGroup, FilterInput } from '@grafana/ui';\nimport { FolderInfo } from 'app/types';\n\nimport { FolderFilter } from '../../../../core/components/FolderFilter/FolderFilter';\nimport { PanelTypeFilter } from '../../../../core/components/PanelTypeFilter/PanelTypeFilter';\nimport { SortPicker } from '../../../../core/components/Select/SortPicker';\nimport { DEFAULT_PER_PAGE_PAGINATION } from '../../../../core/constants';\nimport { LibraryElementDTO } from '../../types';\nimport { LibraryPanelsView } from '../LibraryPanelsView/LibraryPanelsView';\n\nexport enum LibraryPanelsSearchVariant {\n  Tight = 'tight',\n  Spacious = 'spacious',\n}\n\nexport interface LibraryPanelsSearchProps {\n  onClick: (panel: LibraryElementDTO) => void;\n  variant?: LibraryPanelsSearchVariant;\n  showSort?: boolean;\n  showPanelFilter?: boolean;\n  showFolderFilter?: boolean;\n  showSecondaryActions?: boolean;\n  currentPanelId?: string;\n  currentFolderId?: number;\n  perPage?: number;\n}\n\nexport const LibraryPanelsSearch = ({\n  onClick,\n  variant = LibraryPanelsSearchVariant.Spacious,\n  currentPanelId,\n  currentFolderId,\n  perPage = DEFAULT_PER_PAGE_PAGINATION,\n  showPanelFilter = false,\n  showFolderFilter = false,\n  showSort = false,\n  showSecondaryActions = false,\n}: LibraryPanelsSearchProps): JSX.Element => {\n  const styles = useStyles2(useCallback((theme) => getStyles(theme, variant), [variant]));\n\n  const [searchQuery, setSearchQuery] = useState('');\n  const [debouncedSearchQuery, setDebouncedSearchQuery] = useState('');\n  useDebounce(() => setDebouncedSearchQuery(searchQuery), 200, [searchQuery]);\n\n  const [sortDirection, setSortDirection] = useState<SelectableValue<string>>({});\n  const [folderFilter, setFolderFilter] = useState<string[]>(currentFolderId ? [String(currentFolderId)] : []);\n  const [panelFilter, setPanelFilter] = useState<string[]>([]);\n\n  const sortOrFiltersVisible = showSort || showPanelFilter || showFolderFilter;\n  const verticalGroupSpacing = variant === LibraryPanelsSearchVariant.Tight ? 'lg' : 'xs';\n\n  return (\n    <div className={styles.container}>\n      <VerticalGroup spacing={verticalGroupSpacing}>\n        <div className={styles.gridContainer}>\n          <div className={styles.filterInputWrapper}>\n            <FilterInput\n              value={searchQuery}\n              onChange={setSearchQuery}\n              placeholder=\"Search by name or description\"\n              width={0}\n              escapeRegex={false}\n            />\n          </div>\n          {sortOrFiltersVisible && (\n            <SearchControls\n              showSort={showSort}\n              showPanelFilter={showPanelFilter}\n              showFolderFilter={showFolderFilter}\n              onSortChange={setSortDirection}\n              onFolderFilterChange={setFolderFilter}\n              onPanelFilterChange={setPanelFilter}\n              sortDirection={sortDirection.value}\n              variant={variant}\n            />\n          )}\n        </div>\n\n        <div className={styles.libraryPanelsView}>\n          <LibraryPanelsView\n            onClickCard={onClick}\n            searchString={debouncedSearchQuery}\n            sortDirection={sortDirection.value}\n            panelFilter={panelFilter}\n            folderFilter={folderFilter}\n            currentPanelId={currentPanelId}\n            showSecondaryActions={showSecondaryActions}\n            perPage={perPage}\n          />\n        </div>\n      </VerticalGroup>\n    </div>\n  );\n};\n\nfunction getStyles(theme: GrafanaTheme2, variant: LibraryPanelsSearchVariant) {\n  const tightLayout = css`\n    flex-direction: row;\n    row-gap: ${theme.spacing(1)};\n  `;\n  return {\n    filterInputWrapper: css`\n      flex-grow: ${variant === LibraryPanelsSearchVariant.Tight ? 1 : 'initial'};\n    `,\n    container: css`\n      width: 100%;\n      overflow-y: auto;\n      padding: ${theme.spacing(1)};\n    `,\n    libraryPanelsView: css`\n      width: 100%;\n    `,\n    gridContainer: css`\n      ${variant === LibraryPanelsSearchVariant.Tight ? tightLayout : ''};\n      display: flex;\n      flex-direction: column;\n      width: 100%;\n      column-gap: ${theme.spacing(1)};\n      row-gap: ${theme.spacing(1)};\n      padding-bottom: ${theme.spacing(2)};\n    `,\n  };\n}\n\ninterface SearchControlsProps {\n  showSort: boolean;\n  showPanelFilter: boolean;\n  showFolderFilter: boolean;\n  sortDirection?: string;\n  onSortChange: (sortValue: SelectableValue) => void;\n  onFolderFilterChange: (folder: string[]) => void;\n  onPanelFilterChange: (plugins: string[]) => void;\n  variant?: LibraryPanelsSearchVariant;\n}\n\nconst SearchControls = React.memo(\n  ({\n    variant = LibraryPanelsSearchVariant.Spacious,\n    showSort,\n    showPanelFilter,\n    showFolderFilter,\n    sortDirection,\n    onSortChange,\n    onFolderFilterChange,\n    onPanelFilterChange,\n  }: SearchControlsProps) => {\n    const styles = useStyles2(useCallback((theme) => getRowStyles(theme, variant), [variant]));\n    const panelFilterChanged = useCallback(\n      (plugins: PanelPluginMeta[]) => onPanelFilterChange(plugins.map((p) => p.id)),\n      [onPanelFilterChange]\n    );\n    const folderFilterChanged = useCallback(\n      (folders: FolderInfo[]) => onFolderFilterChange(folders.map((f) => String(f.id))),\n      [onFolderFilterChange]\n    );\n\n    return (\n      <div className={styles.container}>\n        {showSort && <SortPicker value={sortDirection} onChange={onSortChange} filter={['alpha-asc', 'alpha-desc']} />}\n        {(showFolderFilter || showPanelFilter) && (\n          <div className={styles.filterContainer}>\n            {showFolderFilter && <FolderFilter onChange={folderFilterChanged} />}\n            {showPanelFilter && <PanelTypeFilter onChange={panelFilterChanged} />}\n          </div>\n        )}\n      </div>\n    );\n  }\n);\nSearchControls.displayName = 'SearchControls';\n\nfunction getRowStyles(theme: GrafanaTheme2, variant = LibraryPanelsSearchVariant.Spacious) {\n  const searchRowContainer = css`\n    display: flex;\n    gap: ${theme.spacing(1)};\n    flex-grow: 1;\n    flex-direction: row;\n    justify-content: end;\n  `;\n  const searchRowContainerTight = css`\n    ${searchRowContainer};\n    flex-grow: initial;\n    flex-direction: column;\n    justify-content: normal;\n  `;\n  const filterContainer = css`\n    display: flex;\n    flex-direction: row;\n    margin-left: auto;\n    gap: 4px;\n  `;\n  const filterContainerTight = css`\n    ${filterContainer};\n    flex-direction: column;\n    margin-left: initial;\n  `;\n\n  switch (variant) {\n    case LibraryPanelsSearchVariant.Spacious:\n      return {\n        container: searchRowContainer,\n        filterContainer: filterContainer,\n      };\n    case LibraryPanelsSearchVariant.Tight:\n      return {\n        container: searchRowContainerTight,\n        filterContainer: filterContainerTight,\n      };\n  }\n}\n","import { css, cx } from '@emotion/css';\nimport React, { useMemo, useReducer } from 'react';\nimport { useDebounce } from 'react-use';\n\nimport { GrafanaTheme, LoadingState } from '@grafana/data';\nimport { Pagination, useStyles } from '@grafana/ui';\n\nimport { LibraryElementDTO } from '../../types';\nimport { LibraryPanelCard } from '../LibraryPanelCard/LibraryPanelCard';\n\nimport { asyncDispatcher, deleteLibraryPanel, searchForLibraryPanels } from './actions';\nimport { changePage, initialLibraryPanelsViewState, libraryPanelsViewReducer } from './reducer';\n\ninterface LibraryPanelViewProps {\n  className?: string;\n  onClickCard: (panel: LibraryElementDTO) => void;\n  showSecondaryActions?: boolean;\n  currentPanelId?: string;\n  searchString: string;\n  sortDirection?: string;\n  panelFilter?: string[];\n  folderFilter?: string[];\n  perPage?: number;\n}\n\nexport const LibraryPanelsView: React.FC<LibraryPanelViewProps> = ({\n  className,\n  onClickCard,\n  searchString,\n  sortDirection,\n  panelFilter,\n  folderFilter,\n  showSecondaryActions,\n  currentPanelId: currentPanel,\n  perPage: propsPerPage = 40,\n}) => {\n  const styles = useStyles(getPanelViewStyles);\n  const [{ libraryPanels, page, perPage, numberOfPages, loadingState, currentPanelId }, dispatch] = useReducer(\n    libraryPanelsViewReducer,\n    {\n      ...initialLibraryPanelsViewState,\n      currentPanelId: currentPanel,\n      perPage: propsPerPage,\n    }\n  );\n  const asyncDispatch = useMemo(() => asyncDispatcher(dispatch), [dispatch]);\n  useDebounce(\n    () =>\n      asyncDispatch(\n        searchForLibraryPanels({\n          searchString,\n          sortDirection,\n          panelFilter,\n          folderFilter,\n          page,\n          perPage,\n          currentPanelId,\n        })\n      ),\n    300,\n    [searchString, sortDirection, panelFilter, folderFilter, page, asyncDispatch]\n  );\n  const onDelete = ({ uid }: LibraryElementDTO) =>\n    asyncDispatch(deleteLibraryPanel(uid, { searchString, page, perPage }));\n  const onPageChange = (page: number) => asyncDispatch(changePage({ page }));\n\n  return (\n    <div className={cx(styles.container, className)}>\n      <div className={styles.libraryPanelList}>\n        {loadingState === LoadingState.Loading ? (\n          <p>Loading library panels...</p>\n        ) : libraryPanels.length < 1 ? (\n          <p className={styles.noPanelsFound}>No library panels found.</p>\n        ) : (\n          libraryPanels?.map((item, i) => (\n            <LibraryPanelCard\n              key={`library-panel=${i}`}\n              libraryPanel={item}\n              onDelete={onDelete}\n              onClick={onClickCard}\n              showSecondaryActions={showSecondaryActions}\n            />\n          ))\n        )}\n      </div>\n      {libraryPanels.length ? (\n        <div className={styles.pagination}>\n          <Pagination\n            currentPage={page}\n            numberOfPages={numberOfPages}\n            onNavigate={onPageChange}\n            hideWhenSinglePage={true}\n          />\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nconst getPanelViewStyles = (theme: GrafanaTheme) => {\n  return {\n    container: css`\n      display: flex;\n      flex-direction: column;\n      flex-wrap: nowrap;\n    `,\n    libraryPanelList: css`\n      max-width: 100%;\n      display: grid;\n      grid-gap: ${theme.spacing.sm};\n    `,\n    searchHeader: css`\n      display: flex;\n    `,\n    newPanelButton: css`\n      margin-top: 10px;\n      align-self: flex-start;\n    `,\n    pagination: css`\n      align-self: center;\n      margin-top: ${theme.spacing.sm};\n    `,\n    noPanelsFound: css`\n      label: noPanelsFound;\n      min-height: 200px;\n    `,\n  };\n};\n","import { AnyAction } from '@reduxjs/toolkit';\nimport { Dispatch } from 'react';\nimport { from, merge, of, Subscription, timer } from 'rxjs';\nimport { catchError, finalize, mapTo, mergeMap, share, takeUntil } from 'rxjs/operators';\n\nimport { deleteLibraryPanel as apiDeleteLibraryPanel, getLibraryPanels } from '../../state/api';\n\nimport { initialLibraryPanelsViewState, initSearch, searchCompleted } from './reducer';\n\ntype DispatchResult = (dispatch: Dispatch<AnyAction>) => void;\ninterface SearchArgs {\n  perPage: number;\n  page: number;\n  searchString: string;\n  sortDirection?: string;\n  panelFilter?: string[];\n  folderFilter?: string[];\n  currentPanelId?: string;\n}\n\nexport function searchForLibraryPanels(args: SearchArgs): DispatchResult {\n  return function (dispatch) {\n    const subscription = new Subscription();\n    const dataObservable = from(\n      getLibraryPanels({\n        searchString: args.searchString,\n        perPage: args.perPage,\n        page: args.page,\n        excludeUid: args.currentPanelId,\n        sortDirection: args.sortDirection,\n        typeFilter: args.panelFilter,\n        folderFilter: args.folderFilter,\n      })\n    ).pipe(\n      mergeMap(({ perPage, elements: libraryPanels, page, totalCount }) =>\n        of(searchCompleted({ libraryPanels, page, perPage, totalCount }))\n      ),\n      catchError((err) => {\n        console.error(err);\n        return of(searchCompleted({ ...initialLibraryPanelsViewState, page: args.page, perPage: args.perPage }));\n      }),\n      finalize(() => subscription.unsubscribe()), // make sure we unsubscribe\n      share()\n    );\n\n    subscription.add(\n      // If 50ms without a response dispatch a loading state\n      // mapTo will translate the timer event into a loading state\n      // takeUntil will cancel the timer emit when first response is received on the dataObservable\n      merge(timer(50).pipe(mapTo(initSearch()), takeUntil(dataObservable)), dataObservable).subscribe(dispatch)\n    );\n  };\n}\n\nexport function deleteLibraryPanel(uid: string, args: SearchArgs): DispatchResult {\n  return async function (dispatch) {\n    try {\n      await apiDeleteLibraryPanel(uid);\n      searchForLibraryPanels(args)(dispatch);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n}\n\nexport function asyncDispatcher(dispatch: Dispatch<AnyAction>) {\n  return function (action: any) {\n    if (action instanceof Function) {\n      return action(dispatch);\n    }\n    return dispatch(action);\n  };\n}\n","import { createAction } from '@reduxjs/toolkit';\nimport { AnyAction } from 'redux';\n\nimport { LoadingState } from '@grafana/data';\n\nimport { LibraryElementDTO } from '../../types';\n\nexport interface LibraryPanelsViewState {\n  loadingState: LoadingState;\n  libraryPanels: LibraryElementDTO[];\n  totalCount: number;\n  perPage: number;\n  page: number;\n  numberOfPages: number;\n  currentPanelId?: string;\n}\n\nexport const initialLibraryPanelsViewState: LibraryPanelsViewState = {\n  loadingState: LoadingState.Loading,\n  libraryPanels: [],\n  totalCount: 0,\n  perPage: 40,\n  page: 1,\n  numberOfPages: 0,\n  currentPanelId: undefined,\n};\n\nexport const initSearch = createAction('libraryPanels/view/initSearch');\nexport const searchCompleted = createAction<\n  Omit<LibraryPanelsViewState, 'currentPanelId' | 'searchString' | 'loadingState' | 'numberOfPages'>\n>('libraryPanels/view/searchCompleted');\n\nexport const changePage = createAction<Pick<LibraryPanelsViewState, 'page'>>('libraryPanels/view/changePage');\n\nexport const libraryPanelsViewReducer = (state: LibraryPanelsViewState, action: AnyAction) => {\n  if (initSearch.match(action)) {\n    return { ...state, loadingState: LoadingState.Loading };\n  }\n\n  if (searchCompleted.match(action)) {\n    const { libraryPanels, page, perPage, totalCount } = action.payload;\n    const numberOfPages = Math.ceil(totalCount / perPage);\n    return {\n      ...state,\n      libraryPanels,\n      perPage,\n      totalCount,\n      loadingState: LoadingState.Done,\n      numberOfPages,\n      page: page > numberOfPages ? page - 1 : page,\n    };\n  }\n\n  if (changePage.match(action)) {\n    return { ...state, page: action.payload.page };\n  }\n\n  return state;\n};\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme } from '@grafana/data';\n\nexport function getModalStyles(theme: GrafanaTheme) {\n  return {\n    myTable: css`\n      max-height: 204px;\n      overflow-y: auto;\n      margin-top: 11px;\n      margin-bottom: 28px;\n      border-radius: ${theme.border.radius.sm};\n      border: 1px solid ${theme.colors.bg3};\n      background: ${theme.colors.bg1};\n      color: ${theme.colors.textSemiWeak};\n      font-size: ${theme.typography.size.md};\n      width: 100%;\n\n      thead {\n        color: #538ade;\n        font-size: ${theme.typography.size.sm};\n      }\n\n      th,\n      td {\n        padding: 6px 13px;\n        height: ${theme.spacing.xl};\n      }\n\n      tbody > tr:nth-child(odd) {\n        background: ${theme.colors.bg2};\n      }\n    `,\n    noteTextbox: css`\n      margin-bottom: ${theme.spacing.xl};\n    `,\n    textInfo: css`\n      color: ${theme.colors.textSemiWeak};\n      font-size: ${theme.typography.size.sm};\n    `,\n    dashboardSearch: css`\n      margin-top: ${theme.spacing.md};\n    `,\n    modal: css`\n      width: 500px;\n    `,\n    modalText: css`\n      font-size: ${theme.typography.heading.h4};\n      color: ${theme.colors.link};\n      margin-bottom: calc(${theme.spacing.d} * 2);\n      padding-top: ${theme.spacing.d};\n    `,\n  };\n}\n","import { css, cx } from '@emotion/css';\nimport React, { MouseEventHandler } from 'react';\n\nimport { GrafanaTheme2, isUnsignedPluginSignature, PanelPluginMeta, PluginState } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { IconButton, PluginSignatureBadge, useStyles2 } from '@grafana/ui';\nimport { PluginStateInfo } from 'app/features/plugins/components/PluginStateInfo';\n\ninterface Props {\n  isCurrent: boolean;\n  plugin: PanelPluginMeta;\n  title: string;\n  onClick: MouseEventHandler<HTMLDivElement>;\n  onDelete?: () => void;\n  disabled?: boolean;\n  showBadge?: boolean;\n  description?: string;\n}\n\nexport const PanelTypeCard: React.FC<Props> = ({\n  isCurrent,\n  title,\n  plugin,\n  onClick,\n  onDelete,\n  disabled,\n  showBadge,\n  description,\n  children,\n}) => {\n  const styles = useStyles2(getStyles);\n  const isDisabled = disabled || plugin.state === PluginState.deprecated;\n  const cssClass = cx({\n    [styles.item]: true,\n    [styles.itemDisabled]: isDisabled,\n    [styles.current]: isCurrent,\n  });\n\n  return (\n    <div\n      className={cssClass}\n      aria-label={selectors.components.PluginVisualization.item(plugin.name)}\n      onClick={isDisabled ? undefined : onClick}\n      title={isCurrent ? 'Click again to close this section' : plugin.name}\n    >\n      <img className={cx(styles.img, { [styles.disabled]: isDisabled })} src={plugin.info.logos.small} alt=\"\" />\n\n      <div className={cx(styles.itemContent, { [styles.disabled]: isDisabled })}>\n        <div className={styles.name}>{title}</div>\n        {description ? <span className={styles.description}>{description}</span> : null}\n        {children}\n      </div>\n      {showBadge && (\n        <div className={cx(styles.badge, { [styles.disabled]: isDisabled })}>\n          <PanelPluginBadge plugin={plugin} />\n        </div>\n      )}\n      {onDelete && (\n        <IconButton\n          name=\"trash-alt\"\n          onClick={(e) => {\n            e.stopPropagation();\n            onDelete();\n          }}\n          className={styles.deleteButton}\n          aria-label=\"Delete button on panel type card\"\n        />\n      )}\n    </div>\n  );\n};\n\nPanelTypeCard.displayName = 'PanelTypeCard';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    item: css`\n      position: relative;\n      display: flex;\n      flex-shrink: 0;\n      cursor: pointer;\n      background: ${theme.colors.background.secondary};\n      border-radius: ${theme.shape.borderRadius()};\n      box-shadow: ${theme.shadows.z1};\n      border: 1px solid ${theme.colors.background.secondary};\n      align-items: center;\n      padding: 8px;\n      width: 100%;\n      position: relative;\n      overflow: hidden;\n      transition: ${theme.transitions.create(['background'], {\n        duration: theme.transitions.duration.short,\n      })};\n\n      &:hover {\n        background: ${theme.colors.emphasize(theme.colors.background.secondary, 0.03)};\n      }\n    `,\n    itemContent: css`\n      overflow: hidden;\n      position: relative;\n      padding: ${theme.spacing(0, 1)};\n    `,\n    itemDisabled: css`\n      cursor: default;\n\n      &,\n      &:hover {\n        background: ${theme.colors.action.disabledBackground};\n      }\n    `,\n    current: css`\n      label: currentVisualizationItem;\n      border: 1px solid ${theme.colors.primary.border};\n      background: ${theme.colors.action.selected};\n    `,\n    disabled: css`\n      opacity: ${theme.colors.action.disabledOpacity};\n      filter: grayscale(1);\n      cursor: default;\n      pointer-events: none;\n    `,\n    name: css`\n      text-overflow: ellipsis;\n      overflow: hidden;\n      font-size: ${theme.typography.size.sm};\n      font-weight: ${theme.typography.fontWeightMedium};\n      width: 100%;\n    `,\n    description: css`\n      display: block;\n      text-overflow: ellipsis;\n      overflow: hidden;\n      color: ${theme.colors.text.secondary};\n      font-size: ${theme.typography.bodySmall.fontSize};\n      font-weight: ${theme.typography.fontWeightLight};\n      width: 100%;\n      max-height: 4.5em;\n    `,\n    img: css`\n      max-height: 38px;\n      width: 38px;\n      display: flex;\n      align-items: center;\n    `,\n    badge: css`\n      background: ${theme.colors.background.primary};\n    `,\n    deleteButton: css`\n      cursor: pointer;\n      margin-left: auto;\n    `,\n  };\n};\n\ninterface PanelPluginBadgeProps {\n  plugin: PanelPluginMeta;\n}\n\nconst PanelPluginBadge: React.FC<PanelPluginBadgeProps> = ({ plugin }) => {\n  if (isUnsignedPluginSignature(plugin.signature)) {\n    return <PluginSignatureBadge status={plugin.signature} />;\n  }\n\n  return <PluginStateInfo state={plugin.state} />;\n};\n\nPanelPluginBadge.displayName = 'PanelPluginBadge';\n","import { PanelPluginMeta, PluginState, unEscapeStringFromRegex } from '@grafana/data';\nimport { config } from 'app/core/config';\n\nexport function getAllPanelPluginMeta(): PanelPluginMeta[] {\n  const allPanels = config.panels;\n\n  return Object.keys(allPanels)\n    .filter((key) => allPanels[key]['hideFromList'] === false)\n    .map((key) => allPanels[key])\n    .sort((a: PanelPluginMeta, b: PanelPluginMeta) => a.sort - b.sort);\n}\n\nexport function filterPluginList(\n  pluginsList: PanelPluginMeta[],\n  searchQuery: string, // Note: this will be an escaped regex string as it comes from `FilterInput`\n  current: PanelPluginMeta\n): PanelPluginMeta[] {\n  if (!searchQuery.length) {\n    return pluginsList.filter((p) => {\n      if (p.state === PluginState.deprecated) {\n        return current.id === p.id;\n      }\n      return true;\n    });\n  }\n\n  const query = unEscapeStringFromRegex(searchQuery).toLowerCase();\n  const first: PanelPluginMeta[] = [];\n  const match: PanelPluginMeta[] = [];\n  const isGraphQuery = 'graph'.startsWith(query);\n\n  for (const item of pluginsList) {\n    if (item.state === PluginState.deprecated && current.id !== item.id) {\n      continue;\n    }\n\n    const name = item.name.toLowerCase();\n    const idx = name.indexOf(query);\n\n    if (idx === 0) {\n      first.push(item);\n    } else if (idx > 0) {\n      match.push(item);\n    } else if (isGraphQuery && item.id === 'timeseries') {\n      first.push(item);\n    }\n  }\n\n  return first.concat(match);\n}\n","import React, { FC } from 'react';\n\nimport { PluginState } from '@grafana/data';\nimport { Badge, BadgeProps } from '@grafana/ui';\n\ninterface Props {\n  state?: PluginState;\n}\n\nexport const PluginStateInfo: FC<Props> = (props) => {\n  const display = getFeatureStateInfo(props.state);\n\n  if (!display) {\n    return null;\n  }\n\n  return <Badge color={display.color} title={display.tooltip} text={display.text} icon={display.icon} />;\n};\n\nfunction getFeatureStateInfo(state?: PluginState): BadgeProps | null {\n  switch (state) {\n    case PluginState.deprecated:\n      return {\n        text: 'Deprecated',\n        color: 'red',\n        tooltip: `This feature is deprecated and will be removed in a future release`,\n      };\n    case PluginState.alpha:\n      return {\n        text: 'Alpha',\n        color: 'blue',\n        tooltip: `This feature is experimental and future updates might not be backward compatible`,\n      };\n    case PluginState.beta:\n      return {\n        text: 'Beta',\n        color: 'blue',\n        tooltip: `This feature is close to complete but not fully tested`,\n      };\n    default:\n      return null;\n  }\n}\n"],"names":["PanelTypeFilter","onChange","propsOnChange","maxMenuHeight","plugins","useMemo","getAllPanelPluginMeta","options","map","p","label","name","imgUrl","info","logos","small","value","sort","a","b","localeCompare","setValue","useState","useCallback","changedPlugins","filter","styles","useStyles2","getStyles","selectOptions","defaultOptions","getOptionLabel","i","getOptionValue","noOptionsMessage","placeholder","className","container","length","size","icon","fill","clear","onClick","prefix","theme","css","spacing","initialDeleteLibraryPanelModalState","loadingState","LoadingState","dashboardTitles","searchCompleted","createAction","deleteLibraryPanelModalReducer","state","action","match","payload","dashboards","d","title","DeleteLibraryPanelModal","libraryPanel","onDismiss","onConfirm","useStyles","getModalStyles","dispatch","useReducer","asyncDispatch","asyncDispatcher","useEffect","async","apiGetConnectedDashboards","uid","getConnectedDashboards","connected","Boolean","done","Modal","modal","isOpen","LoadingIndicator","HasConnectedDashboards","Confirm","Button","variant","disabled","modalText","suffix","message","textInfo","myTable","LibraryPanelCard","onDelete","showSecondaryActions","showDeletionModal","setShowDeletionModal","panelPlugin","config","model","type","getPanelPluginNotFound","meta","PanelTypeCard","isCurrent","description","plugin","undefined","FolderLink","folderUid","folderName","metaContainer","Link","href","Icon","colors","text","secondary","typography","bodySmall","fontSize","FolderFilter","loading","setLoading","getOptions","searchString","params","query","DashboardSearchItemType","permission","PermissionLevelString","getBackendSrv","search","id","includes","toLowerCase","unshift","getFoldersAsOptions","debouncedLoadOptions","debounce","onSelectOptionChange","folders","changedFolderIds","f","isLoading","loadOptions","LibraryPanelsSearchVariant","LibraryPanelsSearch","Spacious","currentPanelId","currentFolderId","perPage","DEFAULT_PER_PAGE_PAGINATION","showPanelFilter","showFolderFilter","showSort","tightLayout","filterInputWrapper","Tight","libraryPanelsView","gridContainer","searchQuery","setSearchQuery","debouncedSearchQuery","setDebouncedSearchQuery","useDebounce","sortDirection","setSortDirection","folderFilter","setFolderFilter","String","panelFilter","setPanelFilter","sortOrFiltersVisible","verticalGroupSpacing","FilterInput","width","escapeRegex","SearchControls","onSortChange","onFolderFilterChange","onPanelFilterChange","LibraryPanelsView","onClickCard","React","searchRowContainer","searchRowContainerTight","filterContainer","filterContainerTight","getRowStyles","panelFilterChanged","folderFilterChanged","SortPicker","displayName","currentPanel","propsPerPage","getPanelViewStyles","libraryPanels","page","numberOfPages","libraryPanelsViewReducer","initialLibraryPanelsViewState","searchForLibraryPanels","deleteLibraryPanel","cx","libraryPanelList","noPanelsFound","item","pagination","currentPage","onNavigate","changePage","hideWhenSinglePage","sm","searchHeader","newPanelButton","args","subscription","Subscription","dataObservable","from","getLibraryPanels","excludeUid","typeFilter","pipe","mergeMap","elements","totalCount","of","catchError","err","console","error","finalize","unsubscribe","share","add","merge","timer","mapTo","initSearch","takeUntil","subscribe","apiDeleteLibraryPanel","e","Function","Math","ceil","border","radius","bg3","bg1","textSemiWeak","md","xl","bg2","noteTextbox","dashboardSearch","heading","h4","link","showBadge","children","isDisabled","PluginState","cssClass","itemDisabled","current","selectors","img","src","alt","itemContent","badge","PanelPluginBadge","stopPropagation","deleteButton","background","shape","borderRadius","shadows","z1","transitions","create","duration","short","emphasize","disabledBackground","primary","selected","disabledOpacity","fontWeightMedium","fontWeightLight","isUnsignedPluginSignature","signature","status","allPanels","Object","keys","key","filterPluginList","pluginsList","unEscapeStringFromRegex","first","isGraphQuery","startsWith","idx","indexOf","push","concat","PluginStateInfo","props","display","color","tooltip","getFeatureStateInfo"],"sourceRoot":""}