{"version":3,"file":"heatmapPanel.0eff7067ab10b72cceaf.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/ColorScale/ColorScale.tsx","webpack://grafana/./public/app/plugins/panel/heatmap/HeatmapHoverView.tsx","webpack://grafana/./public/app/plugins/panel/heatmap/utils.ts","webpack://grafana/./public/app/plugins/panel/heatmap/fields.ts","webpack://grafana/./public/app/plugins/panel/heatmap/models.gen.ts","webpack://grafana/./public/app/plugins/panel/heatmap/palettes.ts","webpack://grafana/./public/app/plugins/panel/heatmap/HeatmapPanel.tsx","webpack://grafana/./public/app/plugins/panel/heatmap/migrations.ts","webpack://grafana/./public/app/plugins/panel/heatmap/module.tsx","webpack://grafana/./public/app/plugins/panel/heatmap/suggestions.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useState, useEffect } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useTheme2 } from '@grafana/ui';\n\ntype Props = {\n  colorPalette: string[];\n  min: number;\n  max: number;\n\n  // Show a value as string -- when not defined, the raw values will not be shown\n  display?: (v: number) => string;\n  hoverValue?: number;\n  useStopsPercentage?: boolean;\n};\n\ntype HoverState = {\n  isShown: boolean;\n  value: number;\n};\n\nconst GRADIENT_STOPS = 10;\n\nexport const ColorScale = ({ colorPalette, min, max, display, hoverValue, useStopsPercentage }: Props) => {\n  const [colors, setColors] = useState<string[]>([]);\n  const [scaleHover, setScaleHover] = useState<HoverState>({ isShown: false, value: 0 });\n  const [percent, setPercent] = useState<number | null>(null); // 0-100 for CSS percentage\n\n  const theme = useTheme2();\n  const styles = getStyles(theme, colors);\n\n  useEffect(() => {\n    setColors(getGradientStops({ colorArray: colorPalette, stops: GRADIENT_STOPS, useStopsPercentage }));\n  }, [colorPalette, useStopsPercentage]);\n\n  const onScaleMouseMove = (event: React.MouseEvent<HTMLDivElement>) => {\n    const divOffset = event.nativeEvent.offsetX;\n    const offsetWidth = (event.target as any).offsetWidth as number;\n    const normPercentage = Math.floor((divOffset * 100) / offsetWidth + 1);\n    const scaleValue = Math.floor(((max - min) * normPercentage) / 100 + min);\n\n    setScaleHover({ isShown: true, value: scaleValue });\n    setPercent(normPercentage);\n  };\n\n  const onScaleMouseLeave = () => {\n    setScaleHover({ isShown: false, value: 0 });\n  };\n\n  useEffect(() => {\n    setPercent(hoverValue == null ? null : clampPercent100((hoverValue - min) / (max - min)));\n  }, [hoverValue, min, max]);\n\n  return (\n    <div className={styles.scaleWrapper} onMouseMove={onScaleMouseMove} onMouseLeave={onScaleMouseLeave}>\n      <div className={styles.scaleGradient}>\n        {display && (scaleHover.isShown || hoverValue !== undefined) && (\n          <div className={styles.followerContainer}>\n            <div className={styles.follower} style={{ left: `${percent}%` }} />\n          </div>\n        )}\n      </div>\n      {display && (\n        <div className={styles.followerContainer}>\n          <div className={styles.legendValues}>\n            <span>{display(min)}</span>\n            <span>{display(max)}</span>\n          </div>\n          {percent != null && (scaleHover.isShown || hoverValue !== undefined) && (\n            <span className={styles.hoverValue} style={{ left: `${percent}%` }}>\n              {display(hoverValue ?? scaleHover.value)}\n            </span>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst getGradientStops = ({\n  colorArray,\n  stops,\n  useStopsPercentage = true,\n}: {\n  colorArray: string[];\n  stops: number;\n  useStopsPercentage?: boolean;\n}): string[] => {\n  const colorCount = colorArray.length;\n  if (useStopsPercentage && colorCount <= 20) {\n    const incr = (1 / colorCount) * 100;\n    let per = 0;\n    const stops: string[] = [];\n    for (const color of colorArray) {\n      if (per > 0) {\n        stops.push(`${color} ${per}%`);\n      } else {\n        stops.push(color);\n      }\n      per += incr;\n      stops.push(`${color} ${per}%`);\n    }\n    return stops;\n  }\n\n  const gradientEnd = colorArray[colorCount - 1];\n  const skip = Math.ceil(colorCount / stops);\n  const gradientStops = new Set<string>();\n\n  for (let i = 0; i < colorCount; i += skip) {\n    gradientStops.add(colorArray[i]);\n  }\n\n  gradientStops.add(gradientEnd);\n\n  return [...gradientStops];\n};\n\nfunction clampPercent100(v: number) {\n  if (v > 1) {\n    return 100;\n  }\n  if (v < 0) {\n    return 0;\n  }\n  return v * 100;\n}\n\nconst getStyles = (theme: GrafanaTheme2, colors: string[]) => ({\n  scaleWrapper: css`\n    width: 100%;\n    font-size: 11px;\n    opacity: 1;\n  `,\n  scaleGradient: css`\n    background: linear-gradient(90deg, ${colors.join()});\n    height: 10px;\n    pointer-events: none;\n  `,\n  legendValues: css`\n    display: flex;\n    justify-content: space-between;\n    pointer-events: none;\n  `,\n  hoverValue: css`\n    position: absolute;\n    margin-top: -14px;\n    padding: 3px 15px;\n    background: ${theme.colors.background.primary};\n    transform: translateX(-50%);\n  `,\n  followerContainer: css`\n    position: relative;\n    pointer-events: none;\n    white-space: nowrap;\n  `,\n  follower: css`\n    position: absolute;\n    height: 14px;\n    width: 14px;\n    border-radius: 50%;\n    transform: translateX(-50%) translateY(-50%);\n    border: 2px solid ${theme.colors.text.primary};\n    margin-top: 5px;\n  `,\n});\n","import React, { useEffect, useRef, useState } from 'react';\n\nimport { DataFrameType, Field, FieldType, formattedValueToString, getFieldDisplayName, LinkModel } from '@grafana/data';\nimport { LinkButton, VerticalGroup } from '@grafana/ui';\nimport { getDashboardSrv } from 'app/features/dashboard/services/DashboardSrv';\nimport { isHeatmapCellsDense, readHeatmapRowsCustomMeta } from 'app/features/transformers/calculateHeatmap/heatmap';\nimport { HeatmapCellLayout } from 'app/features/transformers/calculateHeatmap/models.gen';\n\nimport { DataHoverView } from '../geomap/components/DataHoverView';\n\nimport { HeatmapData } from './fields';\nimport { HeatmapHoverEvent } from './utils';\n\ntype Props = {\n  data: HeatmapData;\n  hover: HeatmapHoverEvent;\n  showHistogram?: boolean;\n};\n\nexport const HeatmapHoverView = (props: Props) => {\n  if (props.hover.seriesIdx === 2) {\n    return <DataHoverView data={props.data.exemplars} rowIndex={props.hover.dataIdx} />;\n  }\n  return <HeatmapHoverCell {...props} />;\n};\n\nconst HeatmapHoverCell = ({ data, hover, showHistogram }: Props) => {\n  const index = hover.dataIdx;\n  const xField = data.heatmap?.fields[0];\n  const yField = data.heatmap?.fields[1];\n  const countField = data.heatmap?.fields[2];\n\n  const xDisp = (v: any) => {\n    if (xField?.display) {\n      return formattedValueToString(xField.display(v));\n    }\n    if (xField?.type === FieldType.time) {\n      const tooltipTimeFormat = 'YYYY-MM-DD HH:mm:ss';\n      const dashboard = getDashboardSrv().getCurrent();\n      return dashboard?.formatDate(v, tooltipTimeFormat);\n    }\n    return `${v}`;\n  };\n\n  const xVals = xField?.values.toArray();\n  const yVals = yField?.values.toArray();\n  const countVals = countField?.values.toArray();\n\n  // labeled buckets\n  const meta = readHeatmapRowsCustomMeta(data.heatmap);\n  const yDispSrc = meta.yOrdinalDisplay ?? yVals;\n  const yDisp = yField?.display ? (v: any) => formattedValueToString(yField.display!(v)) : (v: any) => `${v}`;\n\n  const yValueIdx = index % data.yBucketCount! ?? 0;\n\n  const yMinIdx = data.yLayout === HeatmapCellLayout.le ? yValueIdx - 1 : yValueIdx;\n  const yMaxIdx = data.yLayout === HeatmapCellLayout.le ? yValueIdx : yValueIdx + 1;\n\n  const yBucketMin = yDispSrc?.[yMinIdx];\n  const yBucketMax = yDispSrc?.[yMaxIdx];\n\n  let xBucketMin: number;\n  let xBucketMax: number;\n\n  if (data.xLayout === HeatmapCellLayout.le) {\n    xBucketMax = xVals?.[index];\n    xBucketMin = xBucketMax - data.xBucketSize!;\n  } else {\n    xBucketMin = xVals?.[index];\n    xBucketMax = xBucketMin + data.xBucketSize!;\n  }\n\n  const count = countVals?.[index];\n\n  const visibleFields = data.heatmap?.fields.filter((f) => !Boolean(f.config.custom?.hideFrom?.tooltip));\n  const links: Array<LinkModel<Field>> = [];\n  const linkLookup = new Set<string>();\n\n  for (const field of visibleFields ?? []) {\n    // TODO: Currently always undefined? (getLinks)\n    if (field.getLinks) {\n      const v = field.values.get(index);\n      const disp = field.display ? field.display(v) : { text: `${v}`, numeric: +v };\n\n      field.getLinks({ calculatedValue: disp, valueRowIndex: index }).forEach((link) => {\n        const key = `${link.title}/${link.href}`;\n        if (!linkLookup.has(key)) {\n          links.push(link);\n          linkLookup.add(key);\n        }\n      });\n    }\n  }\n\n  let can = useRef<HTMLCanvasElement>(null);\n\n  let histCssWidth = 150;\n  let histCssHeight = 50;\n  let histCanWidth = Math.round(histCssWidth * devicePixelRatio);\n  let histCanHeight = Math.round(histCssHeight * devicePixelRatio);\n\n  useEffect(\n    () => {\n      if (showHistogram) {\n        let histCtx = can.current?.getContext('2d');\n\n        if (histCtx && xVals && yVals && countVals) {\n          let fromIdx = index;\n\n          while (xVals[fromIdx--] === xVals[index]) {}\n\n          fromIdx++;\n\n          let toIdx = fromIdx + data.yBucketCount!;\n\n          let maxCount = 0;\n\n          let i = fromIdx;\n          while (i < toIdx) {\n            let c = countVals[i];\n            maxCount = Math.max(maxCount, c);\n            i++;\n          }\n\n          let pHov = new Path2D();\n          let pRest = new Path2D();\n\n          i = fromIdx;\n          let j = 0;\n          while (i < toIdx) {\n            let c = countVals[i];\n\n            if (c > 0) {\n              let pctY = c / maxCount;\n              let pctX = j / (data.yBucketCount! + 1);\n\n              let p = i === index ? pHov : pRest;\n\n              p.rect(\n                Math.round(histCanWidth * pctX),\n                Math.round(histCanHeight * (1 - pctY)),\n                Math.round(histCanWidth / data.yBucketCount!),\n                Math.round(histCanHeight * pctY)\n              );\n            }\n\n            i++;\n            j++;\n          }\n\n          histCtx.clearRect(0, 0, histCanWidth, histCanHeight);\n\n          histCtx.fillStyle = '#ffffff80';\n          histCtx.fill(pRest);\n\n          histCtx.fillStyle = '#ff000080';\n          histCtx.fill(pHov);\n        }\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [index]\n  );\n\n  const [isSparse] = useState(\n    () => data.heatmap?.meta?.type === DataFrameType.HeatmapCells && !isHeatmapCellsDense(data.heatmap)\n  );\n\n  if (isSparse) {\n    return (\n      <div>\n        <DataHoverView data={data.heatmap} rowIndex={index} />\n      </div>\n    );\n  }\n\n  const renderYBuckets = () => {\n    switch (data.yLayout) {\n      case HeatmapCellLayout.unknown:\n        return <div>{yDisp(yBucketMin)}</div>;\n    }\n    return (\n      <div>\n        Bucket: {yDisp(yBucketMin)} - {yDisp(yBucketMax)}\n      </div>\n    );\n  };\n\n  return (\n    <>\n      <div>\n        <div>{xDisp(xBucketMin)}</div>\n        <div>{xDisp(xBucketMax)}</div>\n      </div>\n      {showHistogram && (\n        <canvas\n          width={histCanWidth}\n          height={histCanHeight}\n          ref={can}\n          style={{ width: histCanWidth + 'px', height: histCanHeight + 'px' }}\n        />\n      )}\n      <div>\n        {renderYBuckets()}\n        <div>\n          {getFieldDisplayName(countField!, data.heatmap)}: {data.display!(count)}\n        </div>\n      </div>\n      {links.length > 0 && (\n        <VerticalGroup>\n          {links.map((link, i) => (\n            <LinkButton\n              key={i}\n              icon={'external-link-alt'}\n              target={link.target}\n              href={link.href}\n              onClick={link.onClick}\n              fill=\"text\"\n              style={{ width: '100%' }}\n            >\n              {link.title}\n            </LinkButton>\n          ))}\n        </VerticalGroup>\n      )}\n    </>\n  );\n};\n","import { MutableRefObject, RefObject } from 'react';\nimport uPlot, { Cursor } from 'uplot';\n\nimport {\n  DashboardCursorSync,\n  DataFrameType,\n  DataHoverClearEvent,\n  DataHoverEvent,\n  DataHoverPayload,\n  EventBus,\n  formattedValueToString,\n  getValueFormat,\n  GrafanaTheme2,\n  incrRoundDn,\n  incrRoundUp,\n  TimeRange,\n} from '@grafana/data';\nimport { AxisPlacement, ScaleDirection, ScaleDistribution, ScaleOrientation } from '@grafana/schema';\nimport { UPlotConfigBuilder } from '@grafana/ui';\nimport { isHeatmapCellsDense, readHeatmapRowsCustomMeta } from 'app/features/transformers/calculateHeatmap/heatmap';\nimport { HeatmapCellLayout } from 'app/features/transformers/calculateHeatmap/models.gen';\n\nimport { pointWithin, Quadtree, Rect } from '../barchart/quadtree';\n\nimport { HeatmapData } from './fields';\nimport { PanelFieldConfig, YAxisConfig } from './models.gen';\n\ninterface PathbuilderOpts {\n  each: (u: uPlot, seriesIdx: number, dataIdx: number, lft: number, top: number, wid: number, hgt: number) => void;\n  gap?: number | null;\n  hideLE?: number;\n  hideGE?: number;\n  xAlign?: -1 | 0 | 1;\n  yAlign?: -1 | 0 | 1;\n  ySizeDivisor?: number;\n  disp: {\n    fill: {\n      values: (u: uPlot, seriesIndex: number) => number[];\n      index: Array<CanvasRenderingContext2D['fillStyle']>;\n    };\n  };\n}\n\ninterface PointsBuilderOpts {\n  each: (u: uPlot, seriesIdx: number, dataIdx: number, lft: number, top: number, wid: number, hgt: number) => void;\n}\n\nexport interface HeatmapHoverEvent {\n  seriesIdx: number;\n  dataIdx: number;\n  pageX: number;\n  pageY: number;\n}\n\nexport interface HeatmapZoomEvent {\n  xMin: number;\n  xMax: number;\n}\n\ninterface PrepConfigOpts {\n  dataRef: RefObject<HeatmapData>;\n  theme: GrafanaTheme2;\n  eventBus: EventBus;\n  onhover?: null | ((evt?: HeatmapHoverEvent | null) => void);\n  onclick?: null | ((evt?: Object) => void);\n  onzoom?: null | ((evt: HeatmapZoomEvent) => void);\n  isToolTipOpen: MutableRefObject<boolean>;\n  timeZone: string;\n  getTimeRange: () => TimeRange;\n  palette: string[];\n  exemplarColor: string;\n  cellGap?: number | null; // in css pixels\n  hideLE?: number;\n  hideGE?: number;\n  yAxisConfig: YAxisConfig;\n  ySizeDivisor?: number;\n  sync?: () => DashboardCursorSync;\n}\n\nexport function prepConfig(opts: PrepConfigOpts) {\n  const {\n    dataRef,\n    theme,\n    eventBus,\n    onhover,\n    onclick,\n    onzoom,\n    isToolTipOpen,\n    timeZone,\n    getTimeRange,\n    palette,\n    cellGap,\n    hideLE,\n    hideGE,\n    yAxisConfig,\n    ySizeDivisor,\n    sync,\n  } = opts;\n\n  const xScaleKey = 'x';\n  const xScaleUnit = 'time';\n\n  const pxRatio = devicePixelRatio;\n\n  let heatmapType = dataRef.current?.heatmap?.meta?.type;\n  const exemplarFillColor = theme.visualization.getColorByName(opts.exemplarColor);\n\n  let qt: Quadtree;\n  let hRect: Rect | null;\n\n  let builder = new UPlotConfigBuilder(timeZone);\n\n  let rect: DOMRect;\n\n  builder.addHook('init', (u) => {\n    u.root.querySelectorAll<HTMLElement>('.u-cursor-pt').forEach((el) => {\n      Object.assign(el.style, {\n        borderRadius: '0',\n        border: '1px solid white',\n        background: 'transparent',\n      });\n    });\n\n    onclick &&\n      u.over.addEventListener(\n        'mouseup',\n        (e) => {\n          // @ts-ignore\n          let isDragging: boolean = u.cursor.drag._x || u.cursor.drag._y;\n\n          if (!isDragging) {\n            onclick(e);\n          }\n        },\n        true\n      );\n  });\n\n  onzoom &&\n    builder.addHook('setSelect', (u) => {\n      onzoom({\n        xMin: u.posToVal(u.select.left, xScaleKey),\n        xMax: u.posToVal(u.select.left + u.select.width, xScaleKey),\n      });\n      u.setSelect({ left: 0, top: 0, width: 0, height: 0 }, false);\n    });\n\n  // this is a tmp hack because in mode: 2, uplot does not currently call scales.x.range() for setData() calls\n  // scales.x.range() typically reads back from drilled-down panelProps.timeRange via getTimeRange()\n  builder.addHook('setData', (u) => {\n    //let [min, max] = (u.scales!.x!.range! as uPlot.Range.Function)(u, 0, 100, xScaleKey);\n\n    let { min: xMin, max: xMax } = u.scales!.x;\n\n    let min = getTimeRange().from.valueOf();\n    let max = getTimeRange().to.valueOf();\n\n    if (xMin !== min || xMax !== max) {\n      queueMicrotask(() => {\n        u.setScale(xScaleKey, { min, max });\n      });\n    }\n  });\n\n  // rect of .u-over (grid area)\n  builder.addHook('syncRect', (u, r) => {\n    rect = r;\n  });\n\n  const payload: DataHoverPayload = {\n    point: {\n      [xScaleUnit]: null,\n    },\n    data: dataRef.current?.heatmap,\n  };\n  const hoverEvent = new DataHoverEvent(payload);\n\n  let pendingOnleave: ReturnType<typeof setTimeout> | 0;\n\n  onhover &&\n    builder.addHook('setLegend', (u) => {\n      if (u.cursor.idxs != null) {\n        for (let i = 0; i < u.cursor.idxs.length; i++) {\n          const sel = u.cursor.idxs[i];\n          if (sel != null) {\n            const { left, top } = u.cursor;\n            payload.rowIndex = sel;\n            payload.point[xScaleUnit] = u.posToVal(left!, xScaleKey);\n            eventBus.publish(hoverEvent);\n\n            if (!isToolTipOpen.current) {\n              if (pendingOnleave) {\n                clearTimeout(pendingOnleave);\n                pendingOnleave = 0;\n              }\n              onhover({\n                seriesIdx: i,\n                dataIdx: sel,\n                pageX: rect.left + left!,\n                pageY: rect.top + top!,\n              });\n            }\n            return;\n          }\n        }\n      }\n\n      if (!isToolTipOpen.current) {\n        // if tiles have gaps, reduce flashing / re-render (debounce onleave by 100ms)\n        if (!pendingOnleave) {\n          pendingOnleave = setTimeout(() => {\n            onhover(null);\n            payload.rowIndex = undefined;\n            payload.point[xScaleUnit] = null;\n            eventBus.publish(hoverEvent);\n          }, 100);\n        }\n      }\n    });\n\n  builder.addHook('drawClear', (u) => {\n    qt = qt || new Quadtree(0, 0, u.bbox.width, u.bbox.height);\n\n    qt.clear();\n\n    // force-clear the path cache to cause drawBars() to rebuild new quadtree\n    u.series.forEach((s, i) => {\n      if (i > 0) {\n        // @ts-ignore\n        s._paths = null;\n      }\n    });\n  });\n\n  builder.setMode(2);\n\n  builder.addScale({\n    scaleKey: xScaleKey,\n    isTime: true,\n    orientation: ScaleOrientation.Horizontal,\n    direction: ScaleDirection.Right,\n    // TODO: expand by x bucket size and layout\n    range: () => {\n      return [getTimeRange().from.valueOf(), getTimeRange().to.valueOf()];\n    },\n  });\n\n  builder.addAxis({\n    scaleKey: xScaleKey,\n    placement: AxisPlacement.Bottom,\n    isTime: true,\n    theme: theme,\n    timeZone,\n  });\n\n  const yField = dataRef.current?.heatmap?.fields[1]!;\n  if (!yField) {\n    return builder; // early abort (avoids error)\n  }\n\n  // eslint-ignore @typescript-eslint/no-explicit-any\n  const yFieldConfig = yField.config?.custom as PanelFieldConfig | undefined;\n  const yScale = yFieldConfig?.scaleDistribution ?? { type: ScaleDistribution.Linear };\n  const yAxisReverse = Boolean(yAxisConfig.reverse);\n  const isSparseHeatmap = heatmapType === DataFrameType.HeatmapCells && !isHeatmapCellsDense(dataRef.current?.heatmap!);\n  const shouldUseLogScale = yScale.type !== ScaleDistribution.Linear || isSparseHeatmap;\n  const isOrdianalY = readHeatmapRowsCustomMeta(dataRef.current?.heatmap).yOrdinalDisplay != null;\n\n  // random to prevent syncing y in other heatmaps\n  // TODO: try to match TimeSeries y keygen algo to sync with TimeSeries panels (when not isOrdianalY)\n  const yScaleKey = 'y_' + (Math.random() + 1).toString(36).substring(7);\n\n  builder.addScale({\n    scaleKey: yScaleKey,\n    isTime: false,\n    // distribution: ScaleDistribution.Ordinal, // does not work with facets/scatter yet\n    orientation: ScaleOrientation.Vertical,\n    direction: yAxisReverse ? ScaleDirection.Down : ScaleDirection.Up,\n    // should be tweakable manually\n    distribution: shouldUseLogScale ? ScaleDistribution.Log : ScaleDistribution.Linear,\n    log: yScale.log ?? 2,\n    range:\n      // sparse already accounts for le/ge by explicit yMin & yMax cell bounds, so no need to expand y range\n      isSparseHeatmap\n        ? (u, dataMin, dataMax) => {\n            let scaleMin: number | null, scaleMax: number | null;\n\n            [scaleMin, scaleMax] = shouldUseLogScale\n              ? uPlot.rangeLog(dataMin, dataMax, (yScale.log ?? 2) as unknown as uPlot.Scale.LogBase, true)\n              : [dataMin, dataMax];\n\n            if (shouldUseLogScale && !isOrdianalY) {\n              let yExp = u.scales[yScaleKey].log!;\n              let log = yExp === 2 ? Math.log2 : Math.log10;\n\n              let { min: explicitMin, max: explicitMax } = yAxisConfig;\n\n              // guard against <= 0\n              if (explicitMin != null && explicitMin > 0) {\n                // snap to magnitude\n                let minLog = log(explicitMin);\n                scaleMin = yExp ** incrRoundDn(minLog, 1);\n              }\n\n              if (explicitMax != null && explicitMax > 0) {\n                let maxLog = log(explicitMax);\n                scaleMax = yExp ** incrRoundUp(maxLog, 1);\n              }\n            }\n\n            return [scaleMin, scaleMax];\n          }\n        : // dense and ordinal only have one of yMin|yMax|y, so expand range by one cell in the direction of le/ge/unknown\n          (u, dataMin, dataMax) => {\n            let scaleMin = dataMin,\n              scaleMax = dataMax;\n\n            let { min: explicitMin, max: explicitMax } = yAxisConfig;\n\n            // logarithmic expansion\n            if (shouldUseLogScale) {\n              let yExp = u.scales[yScaleKey].log!;\n\n              let minExpanded = false;\n              let maxExpanded = false;\n\n              let log = yExp === 2 ? Math.log2 : Math.log10;\n\n              if (ySizeDivisor !== 1) {\n                let minLog = log(dataMin);\n                let maxLog = log(dataMax);\n\n                if (!Number.isInteger(minLog)) {\n                  scaleMin = yExp ** incrRoundDn(minLog, 1);\n                  minExpanded = true;\n                }\n\n                if (!Number.isInteger(maxLog)) {\n                  scaleMax = yExp ** incrRoundUp(maxLog, 1);\n                  maxExpanded = true;\n                }\n              }\n\n              if (dataRef.current?.yLayout === HeatmapCellLayout.le) {\n                if (!minExpanded) {\n                  scaleMin /= yExp;\n                }\n              } else if (dataRef.current?.yLayout === HeatmapCellLayout.ge) {\n                if (!maxExpanded) {\n                  scaleMax *= yExp;\n                }\n              } else {\n                scaleMin /= yExp / 2;\n                scaleMax *= yExp / 2;\n              }\n\n              if (!isOrdianalY) {\n                // guard against <= 0\n                if (explicitMin != null && explicitMin > 0) {\n                  // snap down to magnitude\n                  let minLog = log(explicitMin);\n                  scaleMin = yExp ** incrRoundDn(minLog, 1);\n                }\n\n                if (explicitMax != null && explicitMax > 0) {\n                  let maxLog = log(explicitMax);\n                  scaleMax = yExp ** incrRoundUp(maxLog, 1);\n                }\n              }\n            }\n            // linear expansion\n            else {\n              let bucketSize = dataRef.current?.yBucketSize;\n\n              if (bucketSize === 0) {\n                bucketSize = 1;\n              }\n\n              if (bucketSize) {\n                if (dataRef.current?.yLayout === HeatmapCellLayout.le) {\n                  scaleMin -= bucketSize!;\n                } else if (dataRef.current?.yLayout === HeatmapCellLayout.ge) {\n                  scaleMax += bucketSize!;\n                } else {\n                  scaleMin -= bucketSize! / 2;\n                  scaleMax += bucketSize! / 2;\n                }\n              } else {\n                // how to expand scale range if inferred non-regular or log buckets?\n              }\n\n              if (!isOrdianalY) {\n                scaleMin = explicitMin ?? scaleMin;\n                scaleMax = explicitMax ?? scaleMax;\n              }\n            }\n\n            return [scaleMin, scaleMax];\n          },\n  });\n\n  const dispY = yField.display ?? getValueFormat('short');\n\n  builder.addAxis({\n    scaleKey: yScaleKey,\n    show: yAxisConfig.axisPlacement !== AxisPlacement.Hidden,\n    placement: yAxisConfig.axisPlacement || AxisPlacement.Left,\n    size: yAxisConfig.axisWidth || null,\n    label: yAxisConfig.axisLabel,\n    theme: theme,\n    formatValue: (v, decimals) => formattedValueToString(dispY(v, yField.config.decimals ?? decimals)),\n    splits: isOrdianalY\n      ? (self: uPlot) => {\n          const meta = readHeatmapRowsCustomMeta(dataRef.current?.heatmap);\n          if (!meta.yOrdinalDisplay) {\n            return [0, 1]; //?\n          }\n          let splits = meta.yOrdinalDisplay.map((v, idx) => idx);\n\n          switch (dataRef.current?.yLayout) {\n            case HeatmapCellLayout.le:\n              splits.unshift(-1);\n              break;\n            case HeatmapCellLayout.ge:\n              splits.push(splits.length);\n              break;\n          }\n\n          // Skip labels when the height is too small\n          if (self.height < 60) {\n            splits = [splits[0], splits[splits.length - 1]];\n          } else {\n            while (splits.length > 3 && (self.height - 15) / splits.length < 10) {\n              splits = splits.filter((v, idx) => idx % 2 === 0); // remove half the items\n            }\n          }\n          return splits;\n        }\n      : undefined,\n    values: isOrdianalY\n      ? (self: uPlot, splits) => {\n          const meta = readHeatmapRowsCustomMeta(dataRef.current?.heatmap);\n          if (meta.yOrdinalDisplay) {\n            return splits.map((v) =>\n              v < 0\n                ? meta.yMinDisplay ?? '' // Check prometheus style labels\n                : meta.yOrdinalDisplay[v] ?? ''\n            );\n          }\n          return splits;\n        }\n      : undefined,\n  });\n\n  const pathBuilder = isSparseHeatmap ? heatmapPathsSparse : heatmapPathsDense;\n\n  // heatmap layer\n  builder.addSeries({\n    facets: [\n      {\n        scale: xScaleKey,\n        auto: true,\n        sorted: 1,\n      },\n      {\n        scale: yScaleKey,\n        auto: true,\n      },\n    ],\n    pathBuilder: pathBuilder({\n      each: (u, seriesIdx, dataIdx, x, y, xSize, ySize) => {\n        qt.add({\n          x: x - u.bbox.left,\n          y: y - u.bbox.top,\n          w: xSize,\n          h: ySize,\n          sidx: seriesIdx,\n          didx: dataIdx,\n        });\n      },\n      gap: cellGap,\n      hideLE,\n      hideGE,\n      xAlign:\n        dataRef.current?.xLayout === HeatmapCellLayout.le\n          ? -1\n          : dataRef.current?.xLayout === HeatmapCellLayout.ge\n          ? 1\n          : 0,\n      yAlign: ((dataRef.current?.yLayout === HeatmapCellLayout.le\n        ? -1\n        : dataRef.current?.yLayout === HeatmapCellLayout.ge\n        ? 1\n        : 0) * (yAxisReverse ? -1 : 1)) as -1 | 0 | 1,\n      ySizeDivisor,\n      disp: {\n        fill: {\n          values: (u, seriesIdx) => {\n            let countFacetIdx = !isSparseHeatmap ? 2 : 3;\n            return valuesToFills(\n              u.data[seriesIdx][countFacetIdx] as unknown as number[],\n              palette,\n              dataRef.current?.minValue!,\n              dataRef.current?.maxValue!\n            );\n          },\n          index: palette,\n        },\n      },\n    }),\n    theme,\n    scaleKey: '', // facets' scales used (above)\n  });\n\n  // exemplars layer\n  builder.addSeries({\n    facets: [\n      {\n        scale: xScaleKey,\n        auto: true,\n        sorted: 1,\n      },\n      {\n        scale: yScaleKey,\n        auto: true,\n      },\n    ],\n    pathBuilder: heatmapPathsPoints(\n      {\n        each: (u, seriesIdx, dataIdx, x, y, xSize, ySize) => {\n          qt.add({\n            x: x - u.bbox.left,\n            y: y - u.bbox.top,\n            w: xSize,\n            h: ySize,\n            sidx: seriesIdx,\n            didx: dataIdx,\n          });\n        },\n      },\n      exemplarFillColor\n    ),\n    theme,\n    scaleKey: '', // facets' scales used (above)\n  });\n\n  const cursor: Cursor = {\n    drag: {\n      x: true,\n      y: false,\n      setScale: false,\n    },\n    dataIdx: (u, seriesIdx) => {\n      if (seriesIdx === 1) {\n        hRect = null;\n\n        let cx = u.cursor.left! * pxRatio;\n        let cy = u.cursor.top! * pxRatio;\n\n        qt.get(cx, cy, 1, 1, (o) => {\n          if (pointWithin(cx, cy, o.x, o.y, o.x + o.w, o.y + o.h)) {\n            hRect = o;\n          }\n        });\n      }\n\n      return hRect && seriesIdx === hRect.sidx ? hRect.didx : null;\n    },\n    points: {\n      fill: 'rgba(255,255,255, 0.3)',\n      bbox: (u, seriesIdx) => {\n        let isHovered = hRect && seriesIdx === hRect.sidx;\n\n        return {\n          left: isHovered ? hRect!.x / pxRatio : -10,\n          top: isHovered ? hRect!.y / pxRatio : -10,\n          width: isHovered ? hRect!.w / pxRatio : 0,\n          height: isHovered ? hRect!.h / pxRatio : 0,\n        };\n      },\n    },\n  };\n\n  if (sync && sync() !== DashboardCursorSync.Off) {\n    cursor.sync = {\n      key: '__global_',\n      scales: [xScaleKey, yScaleKey],\n      filters: {\n        pub: (type: string, src: uPlot, x: number, y: number, w: number, h: number, dataIdx: number) => {\n          if (x < 0) {\n            payload.point[xScaleUnit] = null;\n            eventBus.publish(new DataHoverClearEvent());\n          } else {\n            payload.point[xScaleUnit] = src.posToVal(x, xScaleKey);\n            eventBus.publish(hoverEvent);\n          }\n\n          return true;\n        },\n      },\n    };\n\n    builder.setSync();\n  }\n\n  builder.setCursor(cursor);\n\n  return builder;\n}\n\nconst CRISP_EDGES_GAP_MIN = 4;\n\nexport function heatmapPathsDense(opts: PathbuilderOpts) {\n  const { disp, each, gap = 1, hideLE = -Infinity, hideGE = Infinity, xAlign = 1, yAlign = 1, ySizeDivisor = 1 } = opts;\n\n  const pxRatio = devicePixelRatio;\n\n  const round = gap! >= CRISP_EDGES_GAP_MIN ? Math.round : (v: number) => v;\n\n  const cellGap = Math.round(gap! * pxRatio);\n\n  return (u: uPlot, seriesIdx: number) => {\n    uPlot.orient(\n      u,\n      seriesIdx,\n      (\n        series,\n        dataX,\n        dataY,\n        scaleX,\n        scaleY,\n        valToPosX,\n        valToPosY,\n        xOff,\n        yOff,\n        xDim,\n        yDim,\n        moveTo,\n        lineTo,\n        rect,\n        arc\n      ) => {\n        let d = u.data[seriesIdx];\n        const xs = d[0] as unknown as number[];\n        const ys = d[1] as unknown as number[];\n        const counts = d[2] as unknown as number[];\n        const dlen = xs.length;\n\n        // fill colors are mapped from interpolating densities / counts along some gradient\n        // (should be quantized to 64 colors/levels max. e.g. 16)\n        let fills = disp.fill.values(u, seriesIdx);\n        let fillPalette = disp.fill.index ?? [...new Set(fills)];\n\n        let fillPaths = fillPalette.map((color) => new Path2D());\n\n        // detect x and y bin qtys by detecting layout repetition in x & y data\n        let yBinQty = dlen - ys.lastIndexOf(ys[0]);\n        let xBinQty = dlen / yBinQty;\n        let yBinIncr = ys[1] - ys[0] || scaleY.max! - scaleY.min!;\n        let xBinIncr = xs[yBinQty] - xs[0];\n\n        // uniform tile sizes based on zoom level\n        let xSize: number;\n        let ySize: number;\n\n        if (scaleX.distr === 3) {\n          xSize = Math.abs(valToPosX(xs[0] * scaleX.log!, scaleX, xDim, xOff) - valToPosX(xs[0], scaleX, xDim, xOff));\n        } else {\n          xSize = Math.abs(valToPosX(xBinIncr, scaleX, xDim, xOff) - valToPosX(0, scaleX, xDim, xOff));\n        }\n\n        if (scaleY.distr === 3) {\n          ySize =\n            Math.abs(valToPosY(ys[0] * scaleY.log!, scaleY, yDim, yOff) - valToPosY(ys[0], scaleY, yDim, yOff)) /\n            ySizeDivisor;\n        } else {\n          ySize = Math.abs(valToPosY(yBinIncr, scaleY, yDim, yOff) - valToPosY(0, scaleY, yDim, yOff)) / ySizeDivisor;\n        }\n\n        // clamp min tile size to 1px\n        xSize = Math.max(1, round(xSize - cellGap));\n        ySize = Math.max(1, round(ySize - cellGap));\n\n        // bucket agg direction\n        // let xCeil = false;\n        // let yCeil = false;\n\n        let xOffset = xAlign === -1 ? -xSize : xAlign === 0 ? -xSize / 2 : 0;\n        let yOffset = yAlign === 1 ? -ySize : yAlign === 0 ? -ySize / 2 : 0;\n\n        // pre-compute x and y offsets\n        let cys = ys.slice(0, yBinQty).map((y) => round(valToPosY(y, scaleY, yDim, yOff) + yOffset));\n        let cxs = Array.from({ length: xBinQty }, (v, i) =>\n          round(valToPosX(xs[i * yBinQty], scaleX, xDim, xOff) + xOffset)\n        );\n\n        for (let i = 0; i < dlen; i++) {\n          if (counts[i] > hideLE && counts[i] < hideGE) {\n            let cx = cxs[~~(i / yBinQty)];\n            let cy = cys[i % yBinQty];\n\n            let fillPath = fillPaths[fills[i]];\n\n            rect(fillPath, cx, cy, xSize, ySize);\n\n            each(u, 1, i, cx, cy, xSize, ySize);\n          }\n        }\n\n        u.ctx.save();\n        //\tu.ctx.globalAlpha = 0.8;\n        u.ctx.rect(u.bbox.left, u.bbox.top, u.bbox.width, u.bbox.height);\n        u.ctx.clip();\n        fillPaths.forEach((p, i) => {\n          u.ctx.fillStyle = fillPalette[i];\n          u.ctx.fill(p);\n        });\n        u.ctx.restore();\n\n        return null;\n      }\n    );\n\n    return null;\n  };\n}\n\nexport function heatmapPathsPoints(opts: PointsBuilderOpts, exemplarColor: string) {\n  return (u: uPlot, seriesIdx: number) => {\n    uPlot.orient(\n      u,\n      seriesIdx,\n      (\n        series,\n        dataX,\n        dataY,\n        scaleX,\n        scaleY,\n        valToPosX,\n        valToPosY,\n        xOff,\n        yOff,\n        xDim,\n        yDim,\n        moveTo,\n        lineTo,\n        rect,\n        arc\n      ) => {\n        //console.time('heatmapPathsSparse');\n\n        [dataX, dataY] = dataY as unknown as number[][];\n\n        let points = new Path2D();\n        let fillPaths = [points];\n        let fillPalette = [exemplarColor ?? 'rgba(255,0,255,0.7)'];\n\n        for (let i = 0; i < dataX.length; i++) {\n          let yVal = dataY[i]!;\n          yVal -= 0.5; // center vertically in bucket (when tiles are le)\n          // y-randomize vertically to distribute exemplars in same bucket at same time\n          let randSign = Math.round(Math.random()) * 2 - 1;\n          yVal += randSign * 0.5 * Math.random();\n\n          let x = valToPosX(dataX[i], scaleX, xDim, xOff);\n          let y = valToPosY(yVal, scaleY, yDim, yOff);\n          let w = 8;\n          let h = 8;\n\n          rect(points, x - w / 2, y - h / 2, w, h);\n\n          opts.each(u, seriesIdx, i, x - w / 2, y - h / 2, w, h);\n        }\n\n        u.ctx.save();\n        u.ctx.rect(u.bbox.left, u.bbox.top, u.bbox.width, u.bbox.height);\n        u.ctx.clip();\n        fillPaths.forEach((p, i) => {\n          u.ctx.fillStyle = fillPalette[i];\n          u.ctx.fill(p);\n        });\n        u.ctx.restore();\n      }\n    );\n\n    return null;\n  };\n}\n// accepts xMax, yMin, yMax, count\n// xbinsize? x tile sizes are uniform?\nexport function heatmapPathsSparse(opts: PathbuilderOpts) {\n  const { disp, each, gap = 1, hideLE = -Infinity, hideGE = Infinity } = opts;\n\n  const pxRatio = devicePixelRatio;\n\n  const round = gap! >= CRISP_EDGES_GAP_MIN ? Math.round : (v: number) => v;\n\n  const cellGap = Math.round(gap! * pxRatio);\n\n  return (u: uPlot, seriesIdx: number) => {\n    uPlot.orient(\n      u,\n      seriesIdx,\n      (\n        series,\n        dataX,\n        dataY,\n        scaleX,\n        scaleY,\n        valToPosX,\n        valToPosY,\n        xOff,\n        yOff,\n        xDim,\n        yDim,\n        moveTo,\n        lineTo,\n        rect,\n        arc\n      ) => {\n        //console.time('heatmapPathsSparse');\n\n        let d = u.data[seriesIdx];\n        const xMaxs = d[0] as unknown as number[]; // xMax, do we get interval?\n        const yMins = d[1] as unknown as number[];\n        const yMaxs = d[2] as unknown as number[];\n        const counts = d[3] as unknown as number[];\n        const dlen = xMaxs.length;\n\n        // fill colors are mapped from interpolating densities / counts along some gradient\n        // (should be quantized to 64 colors/levels max. e.g. 16)\n        let fills = disp.fill.values(u, seriesIdx);\n        let fillPalette = disp.fill.index ?? [...new Set(fills)];\n\n        let fillPaths = fillPalette.map((color) => new Path2D());\n\n        // cache all tile bounds\n        let xOffs = new Map();\n        let yOffs = new Map();\n\n        for (let i = 0; i < xMaxs.length; i++) {\n          let xMax = xMaxs[i];\n          let yMin = yMins[i];\n          let yMax = yMaxs[i];\n\n          if (!xOffs.has(xMax)) {\n            xOffs.set(xMax, round(valToPosX(xMax, scaleX, xDim, xOff)));\n          }\n\n          if (!yOffs.has(yMin)) {\n            yOffs.set(yMin, round(valToPosY(yMin, scaleY, yDim, yOff)));\n          }\n\n          if (!yOffs.has(yMax)) {\n            yOffs.set(yMax, round(valToPosY(yMax, scaleY, yDim, yOff)));\n          }\n        }\n\n        // uniform x size (interval, step)\n        let xSizeUniform = xOffs.get(xMaxs.find((v) => v !== xMaxs[0])) - xOffs.get(xMaxs[0]);\n\n        for (let i = 0; i < dlen; i++) {\n          if (counts[i] <= hideLE || counts[i] >= hideGE) {\n            continue;\n          }\n\n          let xMax = xMaxs[i];\n          let yMin = yMins[i];\n          let yMax = yMaxs[i];\n\n          let xMaxPx = xOffs.get(xMax); // xSize is from interval, or inferred delta?\n          let yMinPx = yOffs.get(yMin);\n          let yMaxPx = yOffs.get(yMax);\n\n          let xSize = xSizeUniform;\n          let ySize = yMinPx - yMaxPx;\n\n          // clamp min tile size to 1px\n          xSize = Math.max(1, xSize - cellGap);\n          ySize = Math.max(1, ySize - cellGap);\n\n          let x = xMaxPx;\n          let y = yMinPx;\n\n          let fillPath = fillPaths[fills[i]];\n\n          rect(fillPath, x, y, xSize, ySize);\n\n          each(u, 1, i, x, y, xSize, ySize);\n        }\n\n        u.ctx.save();\n        //\tu.ctx.globalAlpha = 0.8;\n        u.ctx.rect(u.bbox.left, u.bbox.top, u.bbox.width, u.bbox.height);\n        u.ctx.clip();\n        fillPaths.forEach((p, i) => {\n          u.ctx.fillStyle = fillPalette[i];\n          u.ctx.fill(p);\n        });\n        u.ctx.restore();\n\n        //console.timeEnd('heatmapPathsSparse');\n      }\n    );\n\n    return null;\n  };\n}\n\nexport const boundedMinMax = (\n  values: number[],\n  minValue?: number,\n  maxValue?: number,\n  hideLE = -Infinity,\n  hideGE = Infinity\n) => {\n  if (minValue == null) {\n    minValue = Infinity;\n\n    for (let i = 0; i < values.length; i++) {\n      if (values[i] > hideLE && values[i] < hideGE) {\n        minValue = Math.min(minValue, values[i]);\n      }\n    }\n  }\n\n  if (maxValue == null) {\n    maxValue = -Infinity;\n\n    for (let i = 0; i < values.length; i++) {\n      if (values[i] > hideLE && values[i] < hideGE) {\n        maxValue = Math.max(maxValue, values[i]);\n      }\n    }\n  }\n\n  return [minValue, maxValue];\n};\n\nexport const valuesToFills = (values: number[], palette: string[], minValue: number, maxValue: number) => {\n  let range = Math.max(maxValue - minValue, 1);\n\n  let paletteSize = palette.length;\n\n  let indexedFills = Array(values.length);\n\n  for (let i = 0; i < values.length; i++) {\n    indexedFills[i] =\n      values[i] < minValue\n        ? 0\n        : values[i] > maxValue\n        ? paletteSize - 1\n        : Math.min(paletteSize - 1, Math.floor((paletteSize * (values[i] - minValue)) / range));\n  }\n\n  return indexedFills;\n};\n","import {\n  DataFrame,\n  DataFrameType,\n  Field,\n  FieldType,\n  formattedValueToString,\n  getDisplayProcessor,\n  GrafanaTheme2,\n  outerJoinDataFrames,\n  PanelData,\n  ValueFormatter,\n} from '@grafana/data';\nimport {\n  calculateHeatmapFromData,\n  isHeatmapCellsDense,\n  readHeatmapRowsCustomMeta,\n  rowsToCellsHeatmap,\n} from 'app/features/transformers/calculateHeatmap/heatmap';\nimport { HeatmapCellLayout } from 'app/features/transformers/calculateHeatmap/models.gen';\n\nimport { CellValues, PanelOptions } from './models.gen';\nimport { boundedMinMax } from './utils';\n\nexport interface HeatmapData {\n  heatmap?: DataFrame; // data we will render\n  exemplars?: DataFrame; // optionally linked exemplars\n  exemplarColor?: string;\n\n  xBucketSize?: number;\n  yBucketSize?: number;\n\n  xBucketCount?: number;\n  yBucketCount?: number;\n\n  xLayout?: HeatmapCellLayout;\n  yLayout?: HeatmapCellLayout;\n\n  // color scale range\n  minValue?: number;\n  maxValue?: number;\n\n  // Print a heatmap cell value\n  display?: (v: number) => string;\n\n  // Errors\n  warning?: string;\n}\n\nexport function prepareHeatmapData(data: PanelData, options: PanelOptions, theme: GrafanaTheme2): HeatmapData {\n  let frames = data.series;\n  if (!frames?.length) {\n    return {};\n  }\n\n  const exemplars = data.annotations?.find((f) => f.name === 'exemplar');\n\n  if (options.calculate) {\n    return getDenseHeatmapData(calculateHeatmapFromData(frames, options.calculation ?? {}), exemplars, options, theme);\n  }\n\n  // Check for known heatmap types\n  let rowsHeatmap: DataFrame | undefined = undefined;\n  for (const frame of frames) {\n    switch (frame.meta?.type) {\n      case DataFrameType.HeatmapCells:\n        return isHeatmapCellsDense(frame)\n          ? getDenseHeatmapData(frame, exemplars, options, theme)\n          : getSparseHeatmapData(frame, exemplars, options, theme);\n\n      case DataFrameType.HeatmapRows:\n        rowsHeatmap = frame; // the default format\n    }\n  }\n\n  // Everything past here assumes a field for each row in the heatmap (buckets)\n  if (!rowsHeatmap) {\n    if (frames.length > 1) {\n      rowsHeatmap = [\n        outerJoinDataFrames({\n          frames,\n        })!,\n      ][0];\n    } else {\n      rowsHeatmap = frames[0];\n    }\n  }\n\n  return getDenseHeatmapData(\n    rowsToCellsHeatmap({\n      unit: options.yAxis?.unit, // used to format the ordinal lookup values\n      decimals: options.yAxis?.decimals,\n      ...options.rowsFrame,\n      frame: rowsHeatmap,\n    }),\n    exemplars,\n    options,\n    theme\n  );\n}\n\nconst getSparseHeatmapData = (\n  frame: DataFrame,\n  exemplars: DataFrame | undefined,\n  options: PanelOptions,\n  theme: GrafanaTheme2\n): HeatmapData => {\n  if (frame.meta?.type !== DataFrameType.HeatmapCells || isHeatmapCellsDense(frame)) {\n    return {\n      warning: 'Expected sparse heatmap format',\n      heatmap: frame,\n    };\n  }\n\n  // y axis tick label display\n  updateFieldDisplay(frame.fields[1], options.yAxis, theme);\n\n  // cell value display\n  const disp = updateFieldDisplay(frame.fields[3], options.cellValues, theme);\n\n  let [minValue, maxValue] = boundedMinMax(\n    frame.fields[3].values.toArray(),\n    options.color.min,\n    options.color.max,\n    options.filterValues?.le,\n    options.filterValues?.ge\n  );\n\n  return {\n    heatmap: frame,\n    minValue,\n    maxValue,\n    exemplars,\n    display: (v) => formattedValueToString(disp(v)),\n  };\n};\n\nconst getDenseHeatmapData = (\n  frame: DataFrame,\n  exemplars: DataFrame | undefined,\n  options: PanelOptions,\n  theme: GrafanaTheme2\n): HeatmapData => {\n  if (frame.meta?.type !== DataFrameType.HeatmapCells) {\n    return {\n      warning: 'Expected heatmap scanlines format',\n      heatmap: frame,\n    };\n  }\n\n  if (frame.fields.length < 2 || frame.length < 2) {\n    return { heatmap: frame };\n  }\n\n  const meta = readHeatmapRowsCustomMeta(frame);\n  let xName: string | undefined = undefined;\n  let yName: string | undefined = undefined;\n  let valueField: Field | undefined = undefined;\n\n  // validate field display properties\n  for (const field of frame.fields) {\n    switch (field.name) {\n      case 'y':\n        yName = field.name;\n\n      case 'yMin':\n      case 'yMax': {\n        if (!yName) {\n          yName = field.name;\n        }\n        if (meta.yOrdinalDisplay == null) {\n          updateFieldDisplay(field, options.yAxis, theme);\n        }\n        break;\n      }\n\n      case 'x':\n      case 'xMin':\n      case 'xMax':\n        xName = field.name;\n        break;\n\n      default: {\n        if (field.type === FieldType.number && !valueField) {\n          valueField = field;\n        }\n      }\n    }\n  }\n\n  if (!yName) {\n    return { warning: 'Missing Y field', heatmap: frame };\n  }\n  if (!yName) {\n    return { warning: 'Missing X field', heatmap: frame };\n  }\n  if (!valueField) {\n    return { warning: 'Missing value field', heatmap: frame };\n  }\n\n  const disp = updateFieldDisplay(valueField, options.cellValues, theme);\n\n  // infer bucket sizes from data (for now)\n  // the 'heatmap-scanlines' dense frame format looks like:\n  // x:      1,1,1,1,2,2,2,2\n  // y:      3,4,5,6,3,4,5,6\n  // count:  0,0,0,7,0,3,0,1\n\n  const xs = frame.fields[0].values.toArray();\n  const ys = frame.fields[1].values.toArray();\n  const dlen = xs.length;\n\n  // below is literally copy/paste from the pathBuilder code in utils.ts\n  // detect x and y bin qtys by detecting layout repetition in x & y data\n  let yBinQty = dlen - ys.lastIndexOf(ys[0]);\n  let xBinQty = dlen / yBinQty;\n  let yBinIncr = ys[1] - ys[0];\n  let xBinIncr = xs[yBinQty] - xs[0];\n\n  let [minValue, maxValue] = boundedMinMax(\n    valueField.values.toArray(),\n    options.color.min,\n    options.color.max,\n    options.filterValues?.le,\n    options.filterValues?.ge\n  );\n\n  const data: HeatmapData = {\n    heatmap: frame,\n    exemplars: exemplars?.length ? exemplars : undefined,\n    xBucketSize: xBinIncr,\n    yBucketSize: yBinIncr,\n    xBucketCount: xBinQty,\n    yBucketCount: yBinQty,\n\n    minValue,\n    maxValue,\n\n    // TODO: improve heuristic\n    xLayout:\n      xName === 'xMax' ? HeatmapCellLayout.le : xName === 'xMin' ? HeatmapCellLayout.ge : HeatmapCellLayout.unknown,\n    yLayout:\n      yName === 'yMax' ? HeatmapCellLayout.le : yName === 'yMin' ? HeatmapCellLayout.ge : HeatmapCellLayout.unknown,\n\n    display: (v) => formattedValueToString(disp(v)),\n  };\n\n  return data;\n};\n\nfunction updateFieldDisplay(field: Field, opts: CellValues | undefined, theme: GrafanaTheme2): ValueFormatter {\n  if (opts?.unit?.length || opts?.decimals != null) {\n    const { unit, decimals } = opts;\n    field.display = undefined;\n    field.config = { ...field.config };\n    if (unit?.length) {\n      field.config.unit = unit;\n    }\n    if (decimals != null) {\n      field.config.decimals = decimals;\n    }\n  }\n  if (!field.display) {\n    field.display = getDisplayProcessor({ field, theme });\n  }\n  return field.display;\n}\n","//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// NOTE: This file will be auto generated from models.cue\n// It is currenty hand written but will serve as the target for cuetsy\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nimport { AxisConfig, AxisPlacement, HideableFieldConfig, ScaleDistributionConfig, VisibilityMode } from '@grafana/schema';\nimport { HeatmapCellLayout, HeatmapCalculationOptions } from 'app/features/transformers/calculateHeatmap/models.gen';\n\nexport const modelVersion = Object.freeze([1, 0]);\n\nexport enum HeatmapColorMode {\n  Opacity = 'opacity',\n  Scheme = 'scheme',\n}\n\nexport enum HeatmapColorScale {\n  Linear = 'linear',\n  Exponential = 'exponential',\n}\n\nexport interface HeatmapColorOptions {\n  mode: HeatmapColorMode;\n  scheme: string; // when in scheme mode -- the d3 scheme name\n  fill: string; // when opacity mode, the target color\n  scale: HeatmapColorScale; // for opacity mode\n  exponent: number; // when scale== sqrt\n  steps: number; // 2-128\n\n  reverse: boolean;\n\n  // Clamp the colors to the value range\n  min?: number;\n  max?: number;\n}\nexport interface YAxisConfig extends AxisConfig {\n  unit?: string;\n  reverse?: boolean;\n  decimals?: number;\n  // Only used when the axis is not ordinal\n  min?: number;\n  max?: number;\n}\n\nexport interface CellValues {\n  unit?: string;\n  decimals?: number;\n}\n\nexport interface FilterValueRange {\n  le?: number;\n  ge?: number;\n}\n\nexport interface HeatmapTooltip {\n  show: boolean;\n  yHistogram?: boolean;\n}\nexport interface HeatmapLegend {\n  show: boolean;\n}\n\nexport interface ExemplarConfig {\n  color: string;\n}\n\nexport interface RowsHeatmapOptions {\n  value?: string; // value field name\n  layout?: HeatmapCellLayout;\n}\n\nexport interface PanelOptions {\n  calculate?: boolean;\n  calculation?: HeatmapCalculationOptions;\n\n  color: HeatmapColorOptions;\n  filterValues?: FilterValueRange; // was hideZeroBuckets\n  rowsFrame?: RowsHeatmapOptions;\n  showValue: VisibilityMode;\n\n  cellGap?: number; // was cardPadding\n  cellRadius?: number; // was cardRadius (not used, but migrated from angular)\n  cellValues?: CellValues;\n\n  yAxis: YAxisConfig;\n\n  legend: HeatmapLegend;\n\n  tooltip: HeatmapTooltip;\n  exemplars: ExemplarConfig;\n}\n\nexport const defaultPanelOptions: PanelOptions = {\n  calculate: false,\n  color: {\n    mode: HeatmapColorMode.Scheme,\n    scheme: 'Oranges',\n    fill: 'dark-orange',\n    scale: HeatmapColorScale.Exponential,\n    reverse: false,\n    exponent: 0.5,\n    steps: 64,\n  },\n  rowsFrame: {\n    layout: HeatmapCellLayout.auto,\n  },\n  yAxis: {\n    axisPlacement: AxisPlacement.Left,\n  },\n  cellValues: {\n\n  },\n  showValue: VisibilityMode.Auto,\n  tooltip: {\n    show: true,\n    yHistogram: false,\n  },\n  legend: {\n    show: true,\n  },\n  exemplars: {\n    color: 'rgba(255,0,255,0.7)',\n  },\n  filterValues: {\n    le: 1e-9,\n  },\n  cellGap: 1,\n};\n\nexport interface PanelFieldConfig extends HideableFieldConfig {\n  scaleDistribution?: ScaleDistributionConfig;\n}\n\nexport const defaultPanelFieldConfig: PanelFieldConfig = {};\n","import * as d3 from 'd3';\nimport * as d3ScaleChromatic from 'd3-scale-chromatic';\nimport tinycolor from 'tinycolor2';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nimport { HeatmapColorOptions, defaultPanelOptions, HeatmapColorMode, HeatmapColorScale } from './models.gen';\n\n// https://observablehq.com/@d3/color-schemes?collection=@d3/d3-scale-chromatic\n\n// the previous heatmap panel used d3 deps and some code to interpolate to static 9-color palettes. here we just hard-code them for clarity.\n// if the need arises for configurable-sized palettes, we can bring back the deps & variable interpolation (see simplified code at end)\n\n// Schemes from d3-scale-chromatic\n// https://github.com/d3/d3-scale-chromatic\nexport const colorSchemes = [\n  // Diverging\n  { name: 'BrBG', invert: 'always' },\n  { name: 'PiYG', invert: 'always' },\n  { name: 'PRGn', invert: 'always' },\n  { name: 'PuOr', invert: 'always' },\n  { name: 'RdBu', invert: 'always' },\n  { name: 'RdGy', invert: 'always' },\n  { name: 'RdYlBu', invert: 'always' },\n  { name: 'RdYlGn', invert: 'always' },\n  { name: 'Spectral', invert: 'always' },\n\n  // Sequential (Single Hue)\n  { name: 'Blues', invert: 'dark' },\n  { name: 'Greens', invert: 'dark' },\n  { name: 'Greys', invert: 'dark' },\n  { name: 'Oranges', invert: 'dark' },\n  { name: 'Purples', invert: 'dark' },\n  { name: 'Reds', invert: 'dark' },\n\n  // Sequential (Multi-Hue)\n  { name: 'Turbo', invert: 'light' },\n  { name: 'Cividis', invert: 'light' },\n  { name: 'Viridis', invert: 'light' },\n  { name: 'Magma', invert: 'light' },\n  { name: 'Inferno', invert: 'light' },\n  { name: 'Plasma', invert: 'light' },\n  { name: 'Warm', invert: 'light' },\n  { name: 'Cool', invert: 'light' },\n  { name: 'Cubehelix', invert: 'light', name2: 'CubehelixDefault' },\n  { name: 'BuGn', invert: 'dark' },\n  { name: 'BuPu', invert: 'dark' },\n  { name: 'GnBu', invert: 'dark' },\n  { name: 'OrRd', invert: 'dark' },\n  { name: 'PuBuGn', invert: 'dark' },\n  { name: 'PuBu', invert: 'dark' },\n  { name: 'PuRd', invert: 'dark' },\n  { name: 'RdPu', invert: 'dark' },\n  { name: 'YlGnBu', invert: 'dark' },\n  { name: 'YlGn', invert: 'dark' },\n  { name: 'YlOrBr', invert: 'dark' },\n  { name: 'YlOrRd', invert: 'dark' },\n\n  // Cyclical\n  { name: 'Rainbow', invert: 'always' },\n  { name: 'Sinebow', invert: 'always' },\n];\n\ntype Interpolator = (t: number) => string;\n\nconst DEFAULT_SCHEME = colorSchemes.find((scheme) => scheme.name === 'Spectral');\n\nexport function quantizeScheme(opts: HeatmapColorOptions, theme: GrafanaTheme2): string[] {\n  const options = { ...defaultPanelOptions.color, ...opts };\n  const palette = [];\n  const steps = (options.steps ?? 128) - 1;\n\n  if (opts.mode === HeatmapColorMode.Opacity) {\n    const fill = tinycolor(theme.visualization.getColorByName(opts.fill)).toPercentageRgb();\n\n    const scale =\n      options.scale === HeatmapColorScale.Exponential\n        ? d3.scalePow().exponent(options.exponent).domain([0, 1]).range([0, 1])\n        : d3.scaleLinear().domain([0, 1]).range([0, 1]);\n\n    for (let i = 0; i <= steps; i++) {\n      fill.a = scale(i / steps);\n      palette.push(tinycolor(fill).toString('hex8'));\n    }\n  } else {\n    const scheme = colorSchemes.find((scheme) => scheme.name === options.scheme) ?? DEFAULT_SCHEME!;\n    let fnName = 'interpolate' + (scheme.name2 ?? scheme.name);\n    const interpolate: Interpolator = (d3ScaleChromatic as any)[fnName];\n\n    for (let i = 0; i <= steps; i++) {\n      let rgbStr = interpolate(i / steps);\n      let rgb =\n        rgbStr.indexOf('rgb') === 0\n          ? '#' + [...rgbStr.matchAll(/\\d+/g)].map((v) => (+v[0]).toString(16).padStart(2, '0')).join('')\n          : rgbStr;\n      palette.push(rgb);\n    }\n\n    if (\n      scheme.invert === 'always' ||\n      (scheme.invert === 'dark' && theme.isDark) ||\n      (scheme.invert === 'light' && theme.isLight)\n    ) {\n      palette.reverse();\n    }\n\n    if (opts.reverse) {\n      palette.reverse();\n    }\n  }\n\n  return palette;\n}\n","import { css } from '@emotion/css';\nimport React, { useCallback, useMemo, useRef, useState } from 'react';\n\nimport { DataFrameType, GrafanaTheme2, PanelProps, TimeRange } from '@grafana/data';\nimport { PanelDataErrorView } from '@grafana/runtime';\nimport { ScaleDistributionConfig } from '@grafana/schema';\nimport {\n  Portal,\n  ScaleDistribution,\n  UPlotChart,\n  usePanelContext,\n  useStyles2,\n  useTheme2,\n  VizLayout,\n  VizTooltipContainer,\n} from '@grafana/ui';\nimport { CloseButton } from 'app/core/components/CloseButton/CloseButton';\nimport { ColorScale } from 'app/core/components/ColorScale/ColorScale';\nimport { isHeatmapCellsDense, readHeatmapRowsCustomMeta } from 'app/features/transformers/calculateHeatmap/heatmap';\n\nimport { HeatmapHoverView } from './HeatmapHoverView';\nimport { prepareHeatmapData } from './fields';\nimport { PanelOptions } from './models.gen';\nimport { quantizeScheme } from './palettes';\nimport { HeatmapHoverEvent, prepConfig } from './utils';\n\ninterface HeatmapPanelProps extends PanelProps<PanelOptions> {}\n\nexport const HeatmapPanel: React.FC<HeatmapPanelProps> = ({\n  data,\n  id,\n  timeRange,\n  timeZone,\n  width,\n  height,\n  options,\n  fieldConfig,\n  eventBus,\n  onChangeTimeRange,\n  replaceVariables,\n}) => {\n  const theme = useTheme2();\n  const styles = useStyles2(getStyles);\n  const { sync } = usePanelContext();\n\n  // ugh\n  let timeRangeRef = useRef<TimeRange>(timeRange);\n  timeRangeRef.current = timeRange;\n\n  const info = useMemo(() => {\n    try {\n      return prepareHeatmapData(data, options, theme);\n    } catch (ex) {\n      return { warning: `${ex}` };\n    }\n  }, [data, options, theme]);\n\n  const facets = useMemo(() => {\n    let exemplarsXFacet: number[] = []; // \"Time\" field\n    let exemplarsyFacet: number[] = [];\n\n    const meta = readHeatmapRowsCustomMeta(info.heatmap);\n    if (info.exemplars?.length && meta.yMatchWithLabel) {\n      exemplarsXFacet = info.exemplars?.fields[0].values.toArray();\n\n      // ordinal/labeled heatmap-buckets?\n      const hasLabeledY = meta.yOrdinalDisplay != null;\n\n      if (hasLabeledY) {\n        let matchExemplarsBy = info.exemplars?.fields\n          .find((field) => field.name === meta.yMatchWithLabel)!\n          .values.toArray();\n        exemplarsyFacet = matchExemplarsBy.map((label) => meta.yOrdinalLabel?.indexOf(label)) as number[];\n      } else {\n        exemplarsyFacet = info.exemplars?.fields[1].values.toArray() as number[]; // \"Value\" field\n      }\n    }\n\n    return [null, info.heatmap?.fields.map((f) => f.values.toArray()), [exemplarsXFacet, exemplarsyFacet]];\n  }, [info.heatmap, info.exemplars]);\n\n  const palette = useMemo(() => quantizeScheme(options.color, theme), [options.color, theme]);\n\n  const [hover, setHover] = useState<HeatmapHoverEvent | undefined>(undefined);\n  const [shouldDisplayCloseButton, setShouldDisplayCloseButton] = useState<boolean>(false);\n  const isToolTipOpen = useRef<boolean>(false);\n\n  const onCloseToolTip = () => {\n    isToolTipOpen.current = false;\n    setShouldDisplayCloseButton(false);\n    onhover(null);\n  };\n\n  const onclick = () => {\n    isToolTipOpen.current = !isToolTipOpen.current;\n\n    // Linking into useState required to re-render tooltip\n    setShouldDisplayCloseButton(isToolTipOpen.current);\n  };\n\n  const onhover = useCallback(\n    (evt?: HeatmapHoverEvent | null) => {\n      setHover(evt ?? undefined);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [options, data.structureRev]\n  );\n\n  // ugh\n  const dataRef = useRef(info);\n  dataRef.current = info;\n\n  const builder = useMemo(() => {\n    const scaleConfig = dataRef.current?.heatmap?.fields[1].config?.custom\n      ?.scaleDistribution as ScaleDistributionConfig;\n    return prepConfig({\n      dataRef,\n      theme,\n      eventBus,\n      onhover: onhover,\n      onclick: options.tooltip.show ? onclick : null,\n      onzoom: (evt) => {\n        const delta = evt.xMax - evt.xMin;\n        if (delta > 1) {\n          onChangeTimeRange({ from: evt.xMin, to: evt.xMax });\n        }\n      },\n      isToolTipOpen,\n      timeZone,\n      getTimeRange: () => timeRangeRef.current,\n      sync,\n      palette,\n      cellGap: options.cellGap,\n      hideLE: options.filterValues?.le,\n      hideGE: options.filterValues?.ge,\n      exemplarColor: options.exemplars?.color ?? 'rgba(255,0,255,0.7)',\n      yAxisConfig: options.yAxis,\n      ySizeDivisor: scaleConfig?.type === ScaleDistribution.Log ? +(options.calculation?.yBuckets?.value || 1) : 1,\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [options, timeZone, data.structureRev]);\n\n  const renderLegend = () => {\n    if (!info.heatmap || !options.legend.show) {\n      return null;\n    }\n\n    let heatmapType = dataRef.current?.heatmap?.meta?.type;\n    let isSparseHeatmap = heatmapType === DataFrameType.HeatmapCells && !isHeatmapCellsDense(dataRef.current?.heatmap!);\n    let countFieldIdx = !isSparseHeatmap ? 2 : 3;\n    const countField = info.heatmap.fields[countFieldIdx];\n\n    let hoverValue: number | undefined = undefined;\n    // seriesIdx: 1 is heatmap layer; 2 is exemplar layer\n    if (hover && info.heatmap.fields && hover.seriesIdx === 1) {\n      hoverValue = countField.values.get(hover.dataIdx);\n    }\n\n    return (\n      <VizLayout.Legend placement=\"bottom\" maxHeight=\"20%\">\n        <div className={styles.colorScaleWrapper}>\n          <ColorScale\n            hoverValue={hoverValue}\n            colorPalette={palette}\n            min={dataRef.current.minValue!}\n            max={dataRef.current.maxValue!}\n            display={info.display}\n          />\n        </div>\n      </VizLayout.Legend>\n    );\n  };\n\n  if (info.warning || !info.heatmap) {\n    return (\n      <PanelDataErrorView\n        panelId={id}\n        fieldConfig={fieldConfig}\n        data={data}\n        needsNumberField={true}\n        message={info.warning}\n      />\n    );\n  }\n\n  return (\n    <>\n      <VizLayout width={width} height={height} legend={renderLegend()}>\n        {(vizWidth: number, vizHeight: number) => (\n          <UPlotChart config={builder} data={facets as any} width={vizWidth} height={vizHeight} timeRange={timeRange}>\n            {/*children ? children(config, alignedFrame) : null*/}\n          </UPlotChart>\n        )}\n      </VizLayout>\n      <Portal>\n        {hover && options.tooltip.show && (\n          <VizTooltipContainer\n            position={{ x: hover.pageX, y: hover.pageY }}\n            offset={{ x: 10, y: 10 }}\n            allowPointerEvents={isToolTipOpen.current}\n          >\n            {shouldDisplayCloseButton && (\n              <div\n                style={{\n                  width: '100%',\n                  display: 'flex',\n                  justifyContent: 'flex-end',\n                }}\n              >\n                <CloseButton\n                  onClick={onCloseToolTip}\n                  style={{\n                    position: 'relative',\n                    top: 'auto',\n                    right: 'auto',\n                    marginRight: 0,\n                  }}\n                />\n              </div>\n            )}\n            <HeatmapHoverView data={info} hover={hover} showHistogram={options.tooltip.yHistogram} />\n          </VizTooltipContainer>\n        )}\n      </Portal>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  colorScaleWrapper: css`\n    margin-left: 25px;\n    padding: 10px 0;\n    max-width: 300px;\n  `,\n});\n","import { FieldConfigSource, PanelModel, PanelTypeChangedHandler } from '@grafana/data';\nimport { AxisPlacement, ScaleDistribution, VisibilityMode } from '@grafana/schema';\nimport {\n  HeatmapCellLayout,\n  HeatmapCalculationMode,\n  HeatmapCalculationOptions,\n} from 'app/features/transformers/calculateHeatmap/models.gen';\n\nimport { PanelOptions, defaultPanelOptions, HeatmapColorMode } from './models.gen';\nimport { colorSchemes } from './palettes';\n\n/** Called when the version number changes */\nexport const heatmapMigrationHandler = (panel: PanelModel): Partial<PanelOptions> => {\n  // Migrating from angular\n  if (Object.keys(panel.options).length === 0) {\n    return heatmapChangedHandler(panel, 'heatmap', { angular: panel }, panel.fieldConfig);\n  }\n  return panel.options;\n};\n\n/**\n * This is called when the panel changes from another panel\n */\nexport const heatmapChangedHandler: PanelTypeChangedHandler = (panel, prevPluginId, prevOptions, prevFieldConfig) => {\n  if (prevPluginId === 'heatmap' && prevOptions.angular) {\n    const { fieldConfig, options } = angularToReactHeatmap({\n      ...prevOptions.angular,\n      fieldConfig: prevFieldConfig,\n    });\n    panel.fieldConfig = fieldConfig; // Mutates the incoming panel\n    return options;\n  }\n  // alpha for 8.5+, then beta at 9.0.1\n  if (prevPluginId === 'heatmap-new') {\n    const { bucketFrame, ...options } = panel.options;\n    if (bucketFrame) {\n      return { ...options, rowsFrame: bucketFrame };\n    }\n    return panel.options;\n  }\n  return {};\n};\n\nexport function angularToReactHeatmap(angular: any): { fieldConfig: FieldConfigSource; options: PanelOptions } {\n  const fieldConfig: FieldConfigSource = {\n    defaults: {},\n    overrides: [],\n  };\n\n  const calculate = angular.dataFormat === 'tsbuckets' ? false : true;\n  const calculation: HeatmapCalculationOptions = {\n    ...defaultPanelOptions.calculation,\n  };\n\n  const oldYAxis = { logBase: 1, ...angular.yAxis };\n\n  if (calculate) {\n    if (angular.xBucketSize) {\n      calculation.xBuckets = { mode: HeatmapCalculationMode.Size, value: `${angular.xBucketSize}` };\n    } else if (angular.xBucketNumber) {\n      calculation.xBuckets = { mode: HeatmapCalculationMode.Count, value: `${angular.xBucketNumber}` };\n    }\n\n    if (angular.yBucketSize) {\n      calculation.yBuckets = { mode: HeatmapCalculationMode.Size, value: `${angular.yBucketSize}` };\n    } else if (angular.xBucketNumber) {\n      calculation.yBuckets = { mode: HeatmapCalculationMode.Count, value: `${angular.yBucketNumber}` };\n    }\n\n    if (oldYAxis.logBase > 1) {\n      calculation.yBuckets = {\n        mode: HeatmapCalculationMode.Count,\n        value: +oldYAxis.splitFactor > 0 ? `${oldYAxis.splitFactor}` : undefined,\n        scale: {\n          type: ScaleDistribution.Log,\n          log: oldYAxis.logBase,\n        },\n      };\n    }\n  }\n\n  const cellGap = asNumber(angular.cards?.cardPadding, 2);\n  const options: PanelOptions = {\n    calculate,\n    calculation,\n    color: {\n      ...defaultPanelOptions.color,\n      steps: 128, // best match with existing colors\n    },\n    cellGap: cellGap ? cellGap : 1, // default to size 1\n    cellRadius: asNumber(angular.cards?.cardRound), // just to keep it\n    yAxis: {\n      axisPlacement: oldYAxis.show === false ? AxisPlacement.Hidden : AxisPlacement.Left,\n      reverse: Boolean(angular.reverseYBuckets),\n      axisWidth: asNumber(oldYAxis.width),\n      min: oldYAxis.min,\n      max: oldYAxis.max,\n      unit: oldYAxis.format,\n      decimals: oldYAxis.decimals,\n    },\n    cellValues: {\n      decimals: asNumber(angular.tooltipDecimals),\n    },\n    rowsFrame: {\n      layout: getHeatmapCellLayout(angular.yBucketBound),\n    },\n    legend: {\n      show: Boolean(angular.legend?.show),\n    },\n    showValue: VisibilityMode.Never,\n    tooltip: {\n      show: Boolean(angular.tooltip?.show),\n      yHistogram: Boolean(angular.tooltip?.showHistogram),\n    },\n    exemplars: {\n      ...defaultPanelOptions.exemplars,\n    },\n  };\n\n  if (angular.hideZeroBuckets) {\n    options.filterValues = { ...defaultPanelOptions.filterValues }; // min: 1e-9\n  }\n\n  // Migrate color options\n  const color = angular.color ?? {};\n  switch (color?.mode) {\n    case 'spectrum': {\n      options.color.mode = HeatmapColorMode.Scheme;\n\n      const current = color.colorScheme as string;\n      let scheme = colorSchemes.find((v) => v.name === current);\n      if (!scheme) {\n        scheme = colorSchemes.find((v) => current.indexOf(v.name) >= 0);\n      }\n      options.color.scheme = scheme ? scheme.name : defaultPanelOptions.color.scheme;\n      break;\n    }\n    case 'opacity': {\n      options.color.mode = HeatmapColorMode.Opacity;\n      options.color.scale = color.scale;\n      break;\n    }\n  }\n  options.color.fill = color.cardColor;\n  options.color.min = color.min;\n  options.color.max = color.max;\n\n  if (typeof color.min === 'number' && typeof color.max === 'number' && color.min > color.max) {\n    options.color.min = color.max;\n    options.color.max = color.min;\n    options.color.reverse = true;\n  }\n\n  return { fieldConfig, options };\n}\n\nfunction getHeatmapCellLayout(v?: string): HeatmapCellLayout {\n  switch (v) {\n    case 'upper':\n      return HeatmapCellLayout.ge;\n    case 'lower':\n      return HeatmapCellLayout.le;\n    case 'middle':\n      return HeatmapCellLayout.unknown;\n  }\n  return HeatmapCellLayout.auto;\n}\n\nfunction asNumber(v: any, defaultValue?: number): number | undefined {\n  if (v == null || v === '') {\n    return defaultValue;\n  }\n  const num = +v;\n  return isNaN(num) ? defaultValue : num;\n}\n","import React from 'react';\n\nimport { FieldConfigProperty, FieldType, identityOverrideProcessor, PanelData, PanelPlugin } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { AxisPlacement, GraphFieldConfig, ScaleDistribution, ScaleDistributionConfig } from '@grafana/schema';\nimport { addHideFrom, ScaleDistributionEditor } from '@grafana/ui/src/options/builder';\nimport { ColorScale } from 'app/core/components/ColorScale/ColorScale';\nimport { addHeatmapCalculationOptions } from 'app/features/transformers/calculateHeatmap/editor/helper';\nimport { readHeatmapRowsCustomMeta } from 'app/features/transformers/calculateHeatmap/heatmap';\nimport { HeatmapCellLayout } from 'app/features/transformers/calculateHeatmap/models.gen';\n\nimport { HeatmapPanel } from './HeatmapPanel';\nimport { prepareHeatmapData } from './fields';\nimport { heatmapChangedHandler, heatmapMigrationHandler } from './migrations';\nimport { PanelOptions, defaultPanelOptions, HeatmapColorMode, HeatmapColorScale } from './models.gen';\nimport { colorSchemes, quantizeScheme } from './palettes';\nimport { HeatmapSuggestionsSupplier } from './suggestions';\n\nexport const plugin = new PanelPlugin<PanelOptions, GraphFieldConfig>(HeatmapPanel)\n  .useFieldConfig({\n    disableStandardOptions: Object.values(FieldConfigProperty).filter((v) => v !== FieldConfigProperty.Links),\n    useCustomConfig: (builder) => {\n      builder.addCustomEditor<void, ScaleDistributionConfig>({\n        id: 'scaleDistribution',\n        path: 'scaleDistribution',\n        name: 'Y axis scale',\n        category: ['Heatmap'],\n        editor: ScaleDistributionEditor as any,\n        override: ScaleDistributionEditor as any,\n        defaultValue: { type: ScaleDistribution.Linear },\n        shouldApply: (f) => f.type === FieldType.number,\n        process: identityOverrideProcessor,\n        hideFromDefaults: true,\n      });\n      addHideFrom(builder); // for tooltip etc\n    },\n  })\n  .setPanelChangeHandler(heatmapChangedHandler)\n  .setMigrationHandler(heatmapMigrationHandler)\n  .setPanelOptions((builder, context) => {\n    const opts = context.options ?? defaultPanelOptions;\n\n    let isOrdinalY = false;\n\n    try {\n      const v = prepareHeatmapData({ series: context.data } as PanelData, opts, config.theme2);\n      isOrdinalY = readHeatmapRowsCustomMeta(v.heatmap).yOrdinalDisplay != null;\n    } catch {}\n\n    let category = ['Heatmap'];\n\n    builder.addRadio({\n      path: 'calculate',\n      name: 'Calculate from data',\n      defaultValue: defaultPanelOptions.calculate,\n      category,\n      settings: {\n        options: [\n          { label: 'Yes', value: true },\n          { label: 'No', value: false },\n        ],\n      },\n    });\n\n    if (opts.calculate) {\n      addHeatmapCalculationOptions('calculation.', builder, opts.calculation, category);\n    }\n\n    category = ['Y Axis'];\n\n    builder\n      .addRadio({\n        path: 'yAxis.axisPlacement',\n        name: 'Placement',\n        defaultValue: defaultPanelOptions.yAxis.axisPlacement ?? AxisPlacement.Left,\n        category,\n        settings: {\n          options: [\n            { label: 'Left', value: AxisPlacement.Left },\n            { label: 'Right', value: AxisPlacement.Right },\n            { label: 'Hidden', value: AxisPlacement.Hidden },\n          ],\n        },\n      })\n      .addUnitPicker({\n        category,\n        path: 'yAxis.unit',\n        name: 'Unit',\n        defaultValue: undefined,\n        settings: {\n          isClearable: true,\n        },\n      })\n      .addNumberInput({\n        category,\n        path: 'yAxis.decimals',\n        name: 'Decimals',\n        settings: {\n          placeholder: 'Auto',\n        },\n      });\n\n    if (!isOrdinalY) {\n      // if undefined, then show the min+max\n      builder\n        .addNumberInput({\n          path: 'yAxis.min',\n          name: 'Min value',\n          settings: {\n            placeholder: 'Auto',\n          },\n          category,\n        })\n        .addTextInput({\n          path: 'yAxis.max',\n          name: 'Max value',\n          settings: {\n            placeholder: 'Auto',\n          },\n          category,\n        });\n    }\n\n    builder\n      .addNumberInput({\n        path: 'yAxis.axisWidth',\n        name: 'Axis width',\n        defaultValue: defaultPanelOptions.yAxis.axisWidth,\n        settings: {\n          placeholder: 'Auto',\n          min: 5, // smaller should just be hidden\n        },\n        category,\n      })\n      .addTextInput({\n        path: 'yAxis.axisLabel',\n        name: 'Axis label',\n        defaultValue: defaultPanelOptions.yAxis.axisLabel,\n        settings: {\n          placeholder: 'Auto',\n        },\n        category,\n      });\n\n    if (!opts.calculate) {\n      builder.addRadio({\n        path: 'rowsFrame.layout',\n        name: 'Tick alignment',\n        defaultValue: defaultPanelOptions.rowsFrame?.layout ?? HeatmapCellLayout.auto,\n        category,\n        settings: {\n          options: [\n            { label: 'Auto', value: HeatmapCellLayout.auto },\n            { label: 'Top (LE)', value: HeatmapCellLayout.le },\n            { label: 'Middle', value: HeatmapCellLayout.unknown },\n            { label: 'Bottom (GE)', value: HeatmapCellLayout.ge },\n          ],\n        },\n      });\n    }\n    builder.addBooleanSwitch({\n      path: 'yAxis.reverse',\n      name: 'Reverse',\n      defaultValue: defaultPanelOptions.yAxis.reverse === true,\n      category,\n    });\n\n    category = ['Colors'];\n\n    builder.addRadio({\n      path: `color.mode`,\n      name: 'Mode',\n      defaultValue: defaultPanelOptions.color.mode,\n      category,\n      settings: {\n        options: [\n          { label: 'Scheme', value: HeatmapColorMode.Scheme },\n          { label: 'Opacity', value: HeatmapColorMode.Opacity },\n        ],\n      },\n    });\n\n    builder.addColorPicker({\n      path: `color.fill`,\n      name: 'Color',\n      defaultValue: defaultPanelOptions.color.fill,\n      category,\n      showIf: (opts) => opts.color.mode === HeatmapColorMode.Opacity,\n    });\n\n    builder.addRadio({\n      path: `color.scale`,\n      name: 'Scale',\n      defaultValue: defaultPanelOptions.color.scale,\n      category,\n      settings: {\n        options: [\n          { label: 'Exponential', value: HeatmapColorScale.Exponential },\n          { label: 'Linear', value: HeatmapColorScale.Linear },\n        ],\n      },\n      showIf: (opts) => opts.color.mode === HeatmapColorMode.Opacity,\n    });\n\n    builder.addSliderInput({\n      path: 'color.exponent',\n      name: 'Exponent',\n      defaultValue: defaultPanelOptions.color.exponent,\n      category,\n      settings: {\n        min: 0.1, // 1 for on/off?\n        max: 2,\n        step: 0.1,\n      },\n      showIf: (opts) =>\n        opts.color.mode === HeatmapColorMode.Opacity && opts.color.scale === HeatmapColorScale.Exponential,\n    });\n\n    builder.addSelect({\n      path: `color.scheme`,\n      name: 'Scheme',\n      description: '',\n      defaultValue: defaultPanelOptions.color.scheme,\n      category,\n      settings: {\n        options: colorSchemes.map((scheme) => ({\n          value: scheme.name,\n          label: scheme.name,\n          //description: 'Set a geometry field based on the results of other fields',\n        })),\n      },\n      showIf: (opts) => opts.color.mode !== HeatmapColorMode.Opacity,\n    });\n\n    builder\n      .addSliderInput({\n        path: 'color.steps',\n        name: 'Steps',\n        defaultValue: defaultPanelOptions.color.steps,\n        category,\n        settings: {\n          min: 2,\n          max: 128,\n          step: 1,\n        },\n      })\n      .addBooleanSwitch({\n        path: 'color.reverse',\n        name: 'Reverse',\n        defaultValue: defaultPanelOptions.color.reverse,\n        category,\n      })\n      .addCustomEditor({\n        id: '__scale__',\n        path: `__scale__`,\n        name: '',\n        category,\n        editor: () => {\n          const palette = quantizeScheme(opts.color, config.theme2);\n          return (\n            <div>\n              <ColorScale colorPalette={palette} min={1} max={100} />\n            </div>\n          );\n        },\n      });\n\n    builder\n      .addNumberInput({\n        path: 'color.min',\n        name: 'Start color scale from value',\n        defaultValue: defaultPanelOptions.color.min,\n        settings: {\n          placeholder: 'Auto (min)',\n        },\n        category,\n      })\n      .addNumberInput({\n        path: 'color.max',\n        name: 'End color scale at value',\n        defaultValue: defaultPanelOptions.color.max,\n        settings: {\n          placeholder: 'Auto (max)',\n        },\n        category,\n      });\n\n    category = ['Cell display'];\n\n    if (!opts.calculate) {\n      builder.addTextInput({\n        path: 'rowsFrame.value',\n        name: 'Value name',\n        defaultValue: defaultPanelOptions.rowsFrame?.value,\n        settings: {\n          placeholder: 'Value',\n        },\n        category,\n      });\n    }\n\n    builder\n      .addUnitPicker({\n        category,\n        path: 'cellValues.unit',\n        name: 'Unit',\n        defaultValue: undefined,\n        settings: {\n          isClearable: true,\n        },\n      })\n      .addNumberInput({\n        category,\n        path: 'cellValues.decimals',\n        name: 'Decimals',\n        settings: {\n          placeholder: 'Auto',\n        },\n      });\n\n    builder\n      // .addRadio({\n      //   path: 'showValue',\n      //   name: 'Show values',\n      //   defaultValue: defaultPanelOptions.showValue,\n      //   category,\n      //   settings: {\n      //     options: [\n      //       { value: VisibilityMode.Auto, label: 'Auto' },\n      //       { value: VisibilityMode.Always, label: 'Always' },\n      //       { value: VisibilityMode.Never, label: 'Never' },\n      //     ],\n      //   },\n      // })\n      .addSliderInput({\n        name: 'Cell gap',\n        path: 'cellGap',\n        defaultValue: defaultPanelOptions.cellGap,\n        category,\n        settings: {\n          min: 0,\n          max: 25,\n        },\n      })\n      .addNumberInput({\n        path: 'filterValues.le',\n        name: 'Hide cells with values <=',\n        defaultValue: defaultPanelOptions.filterValues?.le,\n        settings: {\n          placeholder: 'None',\n        },\n        category,\n      })\n      .addNumberInput({\n        path: 'filterValues.ge',\n        name: 'Hide cells with values >=',\n        defaultValue: defaultPanelOptions.filterValues?.ge,\n        settings: {\n          placeholder: 'None',\n        },\n        category,\n      });\n    // .addSliderInput({\n    //   name: 'Cell radius',\n    //   path: 'cellRadius',\n    //   defaultValue: defaultPanelOptions.cellRadius,\n    //   category,\n    //   settings: {\n    //     min: 0,\n    //     max: 100,\n    //   },\n    // })\n\n    category = ['Tooltip'];\n\n    builder.addBooleanSwitch({\n      path: 'tooltip.show',\n      name: 'Show tooltip',\n      defaultValue: defaultPanelOptions.tooltip.show,\n      category,\n    });\n\n    builder.addBooleanSwitch({\n      path: 'tooltip.yHistogram',\n      name: 'Show histogram (Y axis)',\n      defaultValue: defaultPanelOptions.tooltip.yHistogram,\n      category,\n      showIf: (opts) => opts.tooltip.show,\n    });\n\n    category = ['Legend'];\n    builder.addBooleanSwitch({\n      path: 'legend.show',\n      name: 'Show legend',\n      defaultValue: defaultPanelOptions.legend.show,\n      category,\n    });\n\n    category = ['Exemplars'];\n    builder.addColorPicker({\n      path: 'exemplars.color',\n      name: 'Color',\n      defaultValue: defaultPanelOptions.exemplars.color,\n      category,\n    });\n  })\n  .setSuggestionsSupplier(new HeatmapSuggestionsSupplier());\n","import { VisualizationSuggestionsBuilder } from '@grafana/data';\nimport { config } from '@grafana/runtime';\n\nimport { prepareHeatmapData } from './fields';\nimport { PanelOptions, defaultPanelOptions } from './models.gen';\n\nexport class HeatmapSuggestionsSupplier {\n  getSuggestionsForData(builder: VisualizationSuggestionsBuilder) {\n    const { dataSummary } = builder;\n\n    if (\n      !builder.data?.series ||\n      !dataSummary.hasData ||\n      dataSummary.timeFieldCount < 1 ||\n      dataSummary.numberFieldCount < 2 ||\n      dataSummary.numberFieldCount > 10\n    ) {\n      return;\n    }\n\n    const info = prepareHeatmapData(builder.data, defaultPanelOptions, config.theme2);\n    if (!info || info.warning) {\n      return;\n    }\n\n    builder.getListAppender<PanelOptions, {}>({\n      name: '',\n      pluginId: 'heatmap',\n      options: {},\n      fieldConfig: {\n        defaults: {\n          custom: {},\n        },\n        overrides: [],\n      },\n    });\n  }\n}\n"],"names":["ColorScale","colorPalette","min","max","display","hoverValue","useStopsPercentage","colors","setColors","useState","scaleHover","setScaleHover","isShown","value","percent","setPercent","theme","useTheme2","styles","getStyles","useEffect","getGradientStops","colorArray","stops","v","clampPercent100","className","scaleWrapper","onMouseMove","event","divOffset","nativeEvent","offsetX","offsetWidth","target","normPercentage","Math","floor","scaleValue","onMouseLeave","scaleGradient","undefined","followerContainer","follower","style","left","legendValues","colorCount","length","incr","per","color","push","gradientEnd","skip","ceil","gradientStops","Set","i","add","css","join","background","primary","text","HeatmapHoverView","props","hover","seriesIdx","DataHoverView","data","exemplars","rowIndex","dataIdx","HeatmapHoverCell","showHistogram","index","xField","heatmap","fields","yField","countField","xDisp","formattedValueToString","type","FieldType","tooltipTimeFormat","dashboard","getDashboardSrv","getCurrent","formatDate","xVals","values","toArray","yVals","countVals","yDispSrc","readHeatmapRowsCustomMeta","yOrdinalDisplay","yDisp","yValueIdx","yBucketCount","yMinIdx","yLayout","HeatmapCellLayout","yMaxIdx","yBucketMin","yBucketMax","xBucketMin","xBucketMax","xLayout","xBucketSize","count","visibleFields","filter","f","Boolean","config","custom","hideFrom","tooltip","links","linkLookup","field","getLinks","get","disp","numeric","calculatedValue","valueRowIndex","forEach","link","key","title","href","has","can","useRef","histCanWidth","round","devicePixelRatio","histCanHeight","histCtx","current","getContext","fromIdx","toIdx","maxCount","c","pHov","Path2D","pRest","j","pctY","pctX","rect","clearRect","fillStyle","fill","isSparse","meta","DataFrameType","isHeatmapCellsDense","width","height","ref","getFieldDisplayName","map","icon","onClick","heatmapPathsDense","opts","each","gap","hideLE","Infinity","hideGE","xAlign","yAlign","ySizeDivisor","pxRatio","cellGap","u","uPlot","series","dataX","dataY","scaleX","scaleY","valToPosX","valToPosY","xOff","yOff","xDim","yDim","moveTo","lineTo","arc","d","xs","ys","counts","dlen","xSize","ySize","fills","fillPalette","fillPaths","yBinQty","lastIndexOf","xBinQty","yBinIncr","xBinIncr","distr","abs","log","xOffset","yOffset","cys","slice","y","cxs","Array","from","cx","cy","ctx","save","bbox","top","clip","p","restore","heatmapPathsPoints","exemplarColor","points","yVal","random","x","w","h","heatmapPathsSparse","xMaxs","yMins","yMaxs","xOffs","Map","yOffs","xMax","yMin","yMax","set","xSizeUniform","find","xMaxPx","yMinPx","boundedMinMax","minValue","maxValue","valuesToFills","palette","range","paletteSize","indexedFills","prepareHeatmapData","options","frames","annotations","name","calculate","getDenseHeatmapData","calculateHeatmapFromData","calculation","rowsHeatmap","frame","getSparseHeatmapData","outerJoinDataFrames","rowsToCellsHeatmap","unit","yAxis","decimals","rowsFrame","warning","updateFieldDisplay","cellValues","filterValues","le","ge","xName","yName","valueField","yBucketSize","xBucketCount","getDisplayProcessor","Object","freeze","HeatmapColorMode","HeatmapColorScale","defaultPanelOptions","mode","Scheme","scheme","scale","Exponential","reverse","exponent","steps","layout","axisPlacement","AxisPlacement","showValue","VisibilityMode","show","yHistogram","legend","colorSchemes","invert","name2","DEFAULT_SCHEME","quantizeScheme","Opacity","tinycolor","visualization","getColorByName","toPercentageRgb","d3","scalePow","domain","scaleLinear","a","toString","fnName","interpolate","d3ScaleChromatic","rgbStr","rgb","indexOf","matchAll","padStart","isDark","isLight","colorScaleWrapper","heatmapChangedHandler","panel","prevPluginId","prevOptions","prevFieldConfig","angular","fieldConfig","defaults","overrides","dataFormat","oldYAxis","logBase","xBuckets","HeatmapCalculationMode","xBucketNumber","yBuckets","yBucketNumber","splitFactor","ScaleDistribution","asNumber","cards","cardPadding","cellRadius","cardRound","reverseYBuckets","axisWidth","format","tooltipDecimals","getHeatmapCellLayout","yBucketBound","hideZeroBuckets","colorScheme","cardColor","angularToReactHeatmap","bucketFrame","defaultValue","num","isNaN","plugin","PanelPlugin","id","timeRange","timeZone","eventBus","onChangeTimeRange","replaceVariables","useStyles2","sync","usePanelContext","timeRangeRef","info","useMemo","ex","facets","exemplarsXFacet","exemplarsyFacet","yMatchWithLabel","label","yOrdinalLabel","setHover","shouldDisplayCloseButton","setShouldDisplayCloseButton","isToolTipOpen","onclick","onhover","useCallback","evt","structureRev","dataRef","builder","scaleConfig","scaleDistribution","onzoom","getTimeRange","yAxisConfig","xScaleKey","xScaleUnit","heatmapType","exemplarFillColor","qt","hRect","UPlotConfigBuilder","addHook","root","querySelectorAll","el","assign","borderRadius","border","over","addEventListener","e","cursor","drag","_x","_y","xMin","posToVal","select","setSelect","scales","valueOf","to","queueMicrotask","setScale","r","payload","point","hoverEvent","DataHoverEvent","pendingOnleave","idxs","sel","publish","clearTimeout","pageX","pageY","setTimeout","Quadtree","clear","s","_paths","setMode","addScale","scaleKey","isTime","orientation","ScaleOrientation","direction","ScaleDirection","addAxis","placement","yFieldConfig","yScale","yAxisReverse","isSparseHeatmap","shouldUseLogScale","isOrdianalY","yScaleKey","substring","distribution","dataMin","dataMax","scaleMin","scaleMax","yExp","log2","log10","explicitMin","explicitMax","minLog","incrRoundDn","maxLog","incrRoundUp","minExpanded","maxExpanded","Number","isInteger","bucketSize","dispY","getValueFormat","size","axisLabel","formatValue","splits","self","idx","unshift","yMinDisplay","pathBuilder","addSeries","auto","sorted","sidx","didx","countFacetIdx","o","pointWithin","isHovered","DashboardCursorSync","filters","pub","src","DataHoverClearEvent","setSync","setCursor","prepConfig","PanelDataErrorView","panelId","needsNumberField","message","VizLayout","countFieldIdx","maxHeight","renderLegend","vizWidth","vizHeight","Portal","VizTooltipContainer","position","offset","allowPointerEvents","justifyContent","CloseButton","right","marginRight","useFieldConfig","disableStandardOptions","FieldConfigProperty","useCustomConfig","addCustomEditor","path","category","editor","ScaleDistributionEditor","override","shouldApply","process","identityOverrideProcessor","hideFromDefaults","addHideFrom","setPanelChangeHandler","setMigrationHandler","keys","setPanelOptions","context","isOrdinalY","addRadio","settings","addHeatmapCalculationOptions","addUnitPicker","isClearable","addNumberInput","placeholder","addTextInput","addBooleanSwitch","addColorPicker","showIf","Linear","addSliderInput","step","addSelect","description","setSuggestionsSupplier","getSuggestionsForData","dataSummary","hasData","timeFieldCount","numberFieldCount","getListAppender","pluginId"],"sourceRoot":""}