{"version":3,"file":"tempoPlugin.ae88a747ddcb19d9317b.js","mappings":"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","sources":["webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/QueryOptionGroup.tsx","webpack://grafana/./public/app/plugins/datasource/tempo/types.ts","webpack://grafana/./public/app/plugins/datasource/tempo/language_provider.ts","webpack://grafana/./public/app/plugins/datasource/tempo/traceql/mockedSearchResponse.ts","webpack://grafana/./public/app/plugins/datasource/tempo/datasource.ts","webpack://grafana/./public/app/plugins/datasource/tempo/traceql/TempoQueryBuilderOptions.tsx","webpack://grafana/./public/app/plugins/datasource/tempo/traceql/autocomplete.ts","webpack://grafana/./public/app/plugins/datasource/tempo/traceql/traceql.ts","webpack://grafana/./public/app/plugins/datasource/tempo/traceql/TraceQLEditor.tsx","webpack://grafana/./public/app/plugins/datasource/tempo/traceql/QueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/tempo/syntax.ts","webpack://grafana/./public/app/plugins/datasource/tempo/QueryEditor/NativeSearch.tsx","webpack://grafana/./public/app/plugins/datasource/tempo/QueryEditor/utils.ts","webpack://grafana/./public/app/plugins/datasource/tempo/QueryEditor/ServiceGraphSection.tsx","webpack://grafana/./public/app/plugins/datasource/tempo/QueryEditor/QueryField.tsx","webpack://grafana/./public/app/plugins/datasource/tempo/configuration/LokiSearchSettings.tsx","webpack://grafana/./public/app/plugins/datasource/tempo/configuration/QuerySettings.tsx","webpack://grafana/./public/app/plugins/datasource/tempo/configuration/SearchSettings.tsx","webpack://grafana/./public/app/plugins/datasource/tempo/configuration/ServiceGraphSettings.tsx","webpack://grafana/./public/app/plugins/datasource/tempo/module.ts","webpack://grafana/./public/app/plugins/datasource/tempo/configuration/ConfigEditor.tsx","webpack://grafana/./public/app/plugins/datasource/tempo/CheatSheet.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React from 'react';\nimport { useToggle } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { Icon, useStyles2 } from '@grafana/ui';\n\nexport interface Props {\n  title: string;\n  collapsedInfo: string[];\n  children: React.ReactNode;\n}\n\nexport function QueryOptionGroup({ title, children, collapsedInfo }: Props) {\n  const [isOpen, toggleOpen] = useToggle(false);\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Stack gap={0} direction=\"column\">\n      <div className={styles.header} onClick={toggleOpen} title=\"Click to edit options\">\n        <div className={styles.toggle}>\n          <Icon name={isOpen ? 'angle-down' : 'angle-right'} />\n        </div>\n        <h6 className={styles.title}>{title}</h6>\n        {!isOpen && (\n          <div className={styles.description}>\n            {collapsedInfo.map((x, i) => (\n              <span key={i}>{x}</span>\n            ))}\n          </div>\n        )}\n      </div>\n      {isOpen && <div className={styles.body}>{children}</div>}\n    </Stack>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    switchLabel: css({\n      color: theme.colors.text.secondary,\n      cursor: 'pointer',\n      fontSize: theme.typography.bodySmall.fontSize,\n      '&:hover': {\n        color: theme.colors.text.primary,\n      },\n    }),\n    header: css({\n      display: 'flex',\n      cursor: 'pointer',\n      alignItems: 'baseline',\n      color: theme.colors.text.primary,\n      '&:hover': {\n        background: theme.colors.emphasize(theme.colors.background.primary, 0.03),\n      },\n    }),\n    title: css({\n      flexGrow: 1,\n      overflow: 'hidden',\n      fontSize: theme.typography.bodySmall.fontSize,\n      fontWeight: theme.typography.fontWeightMedium,\n      margin: 0,\n    }),\n    description: css({\n      color: theme.colors.text.secondary,\n      fontSize: theme.typography.bodySmall.fontSize,\n      paddingLeft: theme.spacing(2),\n      gap: theme.spacing(2),\n      display: 'flex',\n    }),\n    body: css({\n      display: 'flex',\n      paddingTop: theme.spacing(2),\n      gap: theme.spacing(2),\n      flexWrap: 'wrap',\n    }),\n    toggle: css({\n      color: theme.colors.text.secondary,\n      marginRight: `${theme.spacing(1)}`,\n    }),\n  };\n};\n","import { DataQuery } from '@grafana/data';\nimport { DataSourceJsonData, KeyValue } from '@grafana/data/src';\nimport { NodeGraphOptions } from 'app/core/components/NodeGraphSettings';\nimport { TraceToLogsOptions } from 'app/core/components/TraceToLogs/TraceToLogsSettings';\n\nimport { LokiQuery } from '../loki/types';\n\nexport interface SearchQueryParams {\n  minDuration?: string;\n  maxDuration?: string;\n  limit?: number;\n  tags?: string;\n  start?: number;\n  end?: number;\n}\n\nexport interface TempoJsonData extends DataSourceJsonData {\n  tracesToLogs?: TraceToLogsOptions;\n  serviceMap?: {\n    datasourceUid?: string;\n  };\n  search?: {\n    hide?: boolean;\n  };\n  nodeGraph?: NodeGraphOptions;\n  lokiSearch?: {\n    datasourceUid?: string;\n  };\n  spanBar?: {\n    tag: string;\n  };\n  traceQuery?: {\n    timeShiftEnabled?: boolean;\n    spanStartTimeShift?: string;\n    spanEndTimeShift?: string;\n  };\n}\n\n// search = Loki search, nativeSearch = Tempo search for backwards compatibility\nexport type TempoQueryType = 'traceql' | 'search' | 'traceId' | 'serviceMap' | 'upload' | 'nativeSearch' | 'clear';\n\nexport interface TempoQuery extends DataQuery {\n  query: string;\n  // Query to find list of traces, e.g., via Loki\n  linkedQuery?: LokiQuery;\n  search?: string;\n  queryType: TempoQueryType;\n  serviceName?: string;\n  spanName?: string;\n  minDuration?: string;\n  maxDuration?: string;\n  limit?: number;\n  serviceMapQuery?: string;\n}\n\nexport interface MyDataSourceOptions extends DataSourceJsonData {}\n\nexport const defaultQuery: Partial<TempoQuery> = {};\n\nexport type TraceSearchMetadata = {\n  traceID: string;\n  rootServiceName: string;\n  rootTraceName: string;\n  startTimeUnixNano: string;\n  durationMs: number;\n  spanSets?: Spanset[];\n};\n\nexport type SearchMetrics = {\n  inspectedTraces?: number;\n  inspectedBytes?: number;\n  inspectedBlocks?: number;\n  skippedBlocks?: number;\n  skippedTraces?: number;\n  totalBlockBytes?: number;\n  spanSets?: Spanset[];\n};\n\nexport enum SpanKind {\n  UNSPECIFIED,\n  INTERNAL,\n  SERVER,\n  CLIENT,\n  PRODUCER,\n  CONSUMER,\n}\n\nexport type Span = {\n  traceId: string;\n  spanId: string;\n  traceState?: string;\n  parentSpanId?: string;\n  name: string;\n  kind: SpanKind;\n  startTimeUnixNano: number;\n  endTimeUnixNano: number;\n  attributes?: KeyValue[];\n  dropped_attributes_count?: number;\n};\n\nexport type Spanset = {\n  attributes: KeyValue[];\n  spans: Span[];\n};\n\nexport type SearchResponse = {\n  traces: TraceSearchMetadata[];\n  metrics: SearchMetrics;\n};\n","import { Value } from 'slate';\n\nimport { LanguageProvider, SelectableValue } from '@grafana/data';\nimport { CompletionItemGroup, TypeaheadInput, TypeaheadOutput } from '@grafana/ui';\n\nimport { TempoDatasource } from './datasource';\n\nexport default class TempoLanguageProvider extends LanguageProvider {\n  datasource: TempoDatasource;\n  tags?: string[];\n  constructor(datasource: TempoDatasource, initialValues?: any) {\n    super();\n\n    this.datasource = datasource;\n    Object.assign(this, initialValues);\n  }\n\n  request = async (url: string, params = {}) => {\n    const res = await this.datasource.metadataRequest(url, params);\n    return res?.data;\n  };\n\n  start = async () => {\n    if (!this.startTask) {\n      this.startTask = this.fetchTags().then(() => {\n        return [];\n      });\n    }\n\n    return this.startTask;\n  };\n\n  async fetchTags() {\n    const response = await this.request('/api/search/tags', []);\n    this.tags = response.tagNames;\n  }\n\n  getTags = () => {\n    return this.tags;\n  };\n\n  provideCompletionItems = async ({ text, value }: TypeaheadInput): Promise<TypeaheadOutput> => {\n    const emptyResult: TypeaheadOutput = { suggestions: [] };\n\n    if (!value) {\n      return emptyResult;\n    }\n\n    const query = value.endText.getText();\n    const isValue = query[query.indexOf(text) - 1] === '=';\n    if (isValue || text === '=') {\n      return this.getTagValueCompletionItems(value);\n    }\n    return this.getTagsCompletionItems();\n  };\n\n  getTagsCompletionItems = (): TypeaheadOutput => {\n    const { tags } = this;\n    const suggestions: CompletionItemGroup[] = [];\n\n    if (tags?.length) {\n      suggestions.push({\n        label: `Tag`,\n        items: tags.map((tag) => ({ label: tag })),\n      });\n    }\n\n    return { suggestions };\n  };\n\n  async getTagValueCompletionItems(value: Value) {\n    const tags = value.endText.getText().split(' ');\n\n    let tagName = tags[tags.length - 1] ?? '';\n    tagName = tagName.split('=')[0];\n\n    const response = await this.request(`/api/search/tag/${tagName}/values`, []);\n\n    const suggestions: CompletionItemGroup[] = [];\n\n    if (response && response.tagValues) {\n      suggestions.push({\n        label: `Tag Values`,\n        items: response.tagValues.map((tagValue: string) => ({ label: tagValue, insertText: `\"${tagValue}\"` })),\n      });\n    }\n    return { suggestions };\n  }\n\n  async getOptions(tag: string): Promise<Array<SelectableValue<string>>> {\n    const response = await this.request(`/api/search/tag/${tag}/values`);\n    let options: Array<SelectableValue<string>> = [];\n\n    if (response && response.tagValues) {\n      options = response.tagValues.map((v: string) => ({\n        value: v,\n        label: v,\n      }));\n    }\n\n    return options;\n  }\n}\n","import { v4 as uuidv4 } from 'uuid';\n\nimport { SearchResponse, Span, SpanKind, TraceSearchMetadata } from '../types';\n\nexport const mockedSearchResponse = (): SearchResponse => {\n  const traces: TraceSearchMetadata[] = [];\n  const attributes = [\n    { 'http.status.code': '500' },\n    { 'http.status.code': '200' },\n    { 'http.status.code': '404' },\n    { job: '\"test-job\"' },\n    { job: '\"main-job\"' },\n    { job: '\"long-job\"' },\n    { error: '\"lorem ipsum\"' },\n    { error: '\"something went wrong\"' },\n  ];\n\n  const tracesCount = Math.random() * 20 + 20;\n  for (let i = 0; i < tracesCount; i++) {\n    const attr = Math.floor(Math.random() * attributes.length);\n    const startTime = (Date.now() - Math.random() * (i + 1) * 100000) * 1000000;\n    const t: TraceSearchMetadata = {\n      traceID: uuidv4().replace(/-/, '').substring(0, 16),\n      rootServiceName: 'service' + i,\n      rootTraceName: 'trace' + i,\n      startTimeUnixNano: startTime.toString(10),\n      durationMs: Math.random() * 1000,\n      spanSets: [],\n    };\n\n    const spanAttributes = [];\n    for (let k = 0; k < Math.random() * 2; k++) {\n      const newAttr = Math.floor(Math.random() * attributes.length);\n      if (newAttr !== attr) {\n        spanAttributes.push(attributes[newAttr]);\n      }\n    }\n\n    const spans: Span[] = [];\n    for (let j = 0; j < Math.random() * 3 + 1; j++) {\n      spans.push({\n        traceId: t.traceID,\n        spanId: uuidv4().replace(/-/, '').substring(0, 16),\n        name: uuidv4().replace(/-/, '').substring(0, 6),\n        startTimeUnixNano: startTime,\n        endTimeUnixNano: startTime + Math.random() * 10000000,\n        kind: SpanKind.INTERNAL,\n        attributes: spanAttributes,\n      });\n    }\n    t.spanSets!.push({ spans, attributes: [attributes[attr]] });\n    traces.push(t);\n  }\n\n  return {\n    traces,\n    metrics: {\n      inspectedTraces: tracesCount,\n      inspectedBytes: 83720,\n    },\n  };\n};\n","import { identity, pick, pickBy, groupBy, startCase } from 'lodash';\nimport { EMPTY, from, lastValueFrom, merge, Observable, of, throwError } from 'rxjs';\nimport { catchError, concatMap, map, mergeMap, toArray } from 'rxjs/operators';\n\nimport {\n  DataQueryRequest,\n  DataQueryResponse,\n  DataQueryResponseData,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  dateTime,\n  FieldType,\n  isValidGoDuration,\n  LoadingState,\n  rangeUtil,\n  ScopedVars,\n} from '@grafana/data';\nimport {\n  config,\n  BackendSrvRequest,\n  DataSourceWithBackend,\n  getBackendSrv,\n  reportInteraction,\n  TemplateSrv,\n  getTemplateSrv,\n} from '@grafana/runtime';\nimport { SpanBarOptions } from '@jaegertracing/jaeger-ui-components';\nimport { NodeGraphOptions } from 'app/core/components/NodeGraphSettings';\nimport { TraceToLogsOptions } from 'app/core/components/TraceToLogs/TraceToLogsSettings';\nimport { serializeParams } from 'app/core/utils/fetch';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\n\nimport { LokiOptions } from '../loki/types';\nimport { PrometheusDatasource } from '../prometheus/datasource';\nimport { PromQuery } from '../prometheus/types';\n\nimport {\n  failedMetric,\n  histogramMetric,\n  mapPromMetricsToServiceMap,\n  serviceMapMetrics,\n  totalsMetric,\n  rateMetric,\n  durationMetric,\n  errorRateMetric,\n  defaultTableFilter,\n} from './graphTransform';\nimport TempoLanguageProvider from './language_provider';\nimport {\n  transformTrace,\n  transformTraceList,\n  transformFromOTLP as transformFromOTEL,\n  createTableFrameFromSearch,\n  createTableFrameFromTraceQlQuery,\n} from './resultTransformer';\nimport { mockedSearchResponse } from './traceql/mockedSearchResponse';\nimport { SearchQueryParams, TempoQuery, TempoJsonData } from './types';\n\nexport const DEFAULT_LIMIT = 20;\n\nexport class TempoDatasource extends DataSourceWithBackend<TempoQuery, TempoJsonData> {\n  tracesToLogs?: TraceToLogsOptions;\n  serviceMap?: {\n    datasourceUid?: string;\n  };\n  search?: {\n    hide?: boolean;\n  };\n  nodeGraph?: NodeGraphOptions;\n  lokiSearch?: {\n    datasourceUid?: string;\n  };\n  traceQuery?: {\n    timeShiftEnabled?: boolean;\n    spanStartTimeShift?: string;\n    spanEndTimeShift?: string;\n  };\n  uploadedJson?: string | ArrayBuffer | null = null;\n  spanBar?: SpanBarOptions;\n  languageProvider: TempoLanguageProvider;\n\n  constructor(\n    private instanceSettings: DataSourceInstanceSettings<TempoJsonData>,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv()\n  ) {\n    super(instanceSettings);\n    this.tracesToLogs = instanceSettings.jsonData.tracesToLogs;\n    this.serviceMap = instanceSettings.jsonData.serviceMap;\n    this.search = instanceSettings.jsonData.search;\n    this.nodeGraph = instanceSettings.jsonData.nodeGraph;\n    this.lokiSearch = instanceSettings.jsonData.lokiSearch;\n    this.traceQuery = instanceSettings.jsonData.traceQuery;\n    this.languageProvider = new TempoLanguageProvider(this);\n  }\n\n  query(options: DataQueryRequest<TempoQuery>): Observable<DataQueryResponse> {\n    const subQueries: Array<Observable<DataQueryResponse>> = [];\n    const filteredTargets = options.targets.filter((target) => !target.hide);\n    const targets: { [type: string]: TempoQuery[] } = groupBy(filteredTargets, (t) => t.queryType || 'traceId');\n\n    if (targets.clear) {\n      return of({ data: [], state: LoadingState.Done });\n    }\n\n    const logsDatasourceUid = this.getLokiSearchDS();\n\n    // Run search queries on linked datasource\n    if (logsDatasourceUid && targets.search?.length > 0) {\n      reportInteraction('grafana_traces_loki_search_queried', {\n        datasourceType: 'tempo',\n        app: options.app ?? '',\n        linkedQueryExpr: targets.search[0].linkedQuery?.expr ?? '',\n      });\n\n      const dsSrv = getDatasourceSrv();\n      subQueries.push(\n        from(dsSrv.get(logsDatasourceUid)).pipe(\n          mergeMap((linkedDatasource: DataSourceApi) => {\n            // Wrap linked query into a data request based on original request\n            const linkedRequest: DataQueryRequest = { ...options, targets: targets.search.map((t) => t.linkedQuery!) };\n            // Find trace matchers in derived fields of the linked datasource that's identical to this datasource\n            const settings: DataSourceInstanceSettings<LokiOptions> = (linkedDatasource as any).instanceSettings;\n            const traceLinkMatcher: string[] =\n              settings.jsonData.derivedFields\n                ?.filter((field) => field.datasourceUid === this.uid && field.matcherRegex)\n                .map((field) => field.matcherRegex) || [];\n\n            if (!traceLinkMatcher || traceLinkMatcher.length === 0) {\n              return throwError(\n                () =>\n                  new Error(\n                    'No Loki datasource configured for search. Set up Derived Fields for traces in a Loki datasource settings and link it to this Tempo datasource.'\n                  )\n              );\n            } else {\n              return (linkedDatasource.query(linkedRequest) as Observable<DataQueryResponse>).pipe(\n                map((response) =>\n                  response.error ? response : transformTraceList(response, this.uid, this.name, traceLinkMatcher)\n                )\n              );\n            }\n          })\n        )\n      );\n    }\n\n    if (targets.nativeSearch?.length) {\n      try {\n        reportInteraction('grafana_traces_search_queried', {\n          datasourceType: 'tempo',\n          app: options.app ?? '',\n          serviceName: targets.nativeSearch[0].serviceName ?? '',\n          spanName: targets.nativeSearch[0].spanName ?? '',\n          resultLimit: targets.nativeSearch[0].limit ?? '',\n          search: targets.nativeSearch[0].search ?? '',\n        });\n\n        const timeRange = { startTime: options.range.from.unix(), endTime: options.range.to.unix() };\n        const query = this.applyVariables(targets.nativeSearch[0], options.scopedVars);\n        const searchQuery = this.buildSearchQuery(query, timeRange);\n        subQueries.push(\n          this._request('/api/search', searchQuery).pipe(\n            map((response) => {\n              return {\n                data: [createTableFrameFromSearch(response.data.traces, this.instanceSettings)],\n              };\n            }),\n            catchError((error) => {\n              return of({ error: { message: error.data.message }, data: [] });\n            })\n          )\n        );\n      } catch (error) {\n        return of({ error: { message: error instanceof Error ? error.message : 'Unknown error occurred' }, data: [] });\n      }\n    }\n    if (targets.traceql?.length) {\n      try {\n        reportInteraction('grafana_traces_traceql_queried', {\n          datasourceType: 'tempo',\n          app: options.app ?? '',\n        });\n\n        subQueries.push(\n          of({\n            data: [createTableFrameFromTraceQlQuery(mockedSearchResponse().traces, this.instanceSettings)],\n          })\n        );\n      } catch (error) {\n        return of({ error: { message: error instanceof Error ? error.message : 'Unknown error occurred' }, data: [] });\n      }\n    }\n\n    if (targets.upload?.length) {\n      if (this.uploadedJson) {\n        reportInteraction('grafana_traces_json_file_uploaded', {\n          datasourceType: 'tempo',\n          app: options.app ?? '',\n        });\n\n        const jsonData = JSON.parse(this.uploadedJson as string);\n        const isTraceData = jsonData.batches;\n        const isServiceGraphData =\n          Array.isArray(jsonData) && jsonData.some((df) => df?.meta?.preferredVisualisationType === 'nodeGraph');\n\n        if (isTraceData) {\n          subQueries.push(of(transformFromOTEL(jsonData.batches, this.nodeGraph?.enabled)));\n        } else if (isServiceGraphData) {\n          subQueries.push(of({ data: jsonData, state: LoadingState.Done }));\n        } else {\n          subQueries.push(of({ error: { message: 'Unable to parse uploaded data.' }, data: [] }));\n        }\n      } else {\n        subQueries.push(of({ data: [], state: LoadingState.Done }));\n      }\n    }\n\n    if (this.serviceMap?.datasourceUid && targets.serviceMap?.length > 0) {\n      reportInteraction('grafana_traces_service_graph_queried', {\n        datasourceType: 'tempo',\n        app: options.app ?? '',\n        serviceMapQuery: targets.serviceMap[0].serviceMapQuery ?? '',\n      });\n\n      const dsId = this.serviceMap.datasourceUid;\n      const tempoDsUid = this.uid;\n      if (config.featureToggles.tempoApmTable) {\n        subQueries.push(\n          serviceMapQuery(options, dsId, tempoDsUid).pipe(\n            concatMap((result) =>\n              rateQuery(options, result, dsId).pipe(\n                concatMap((result) => errorAndDurationQuery(options, result, dsId, tempoDsUid))\n              )\n            )\n          )\n        );\n      } else {\n        subQueries.push(serviceMapQuery(options, dsId, tempoDsUid));\n      }\n    }\n\n    if (targets.traceId?.length > 0) {\n      reportInteraction('grafana_traces_traceID_queried', {\n        datasourceType: 'tempo',\n        app: options.app ?? '',\n        query: targets.traceId[0].query ?? '',\n      });\n\n      subQueries.push(this.handleTraceIdQuery(options, targets.traceId));\n    }\n\n    return merge(...subQueries);\n  }\n\n  applyTemplateVariables(query: TempoQuery, scopedVars: ScopedVars): Record<string, any> {\n    return this.applyVariables(query, scopedVars);\n  }\n\n  interpolateVariablesInQueries(queries: TempoQuery[], scopedVars: ScopedVars): TempoQuery[] {\n    if (!queries || queries.length === 0) {\n      return [];\n    }\n\n    return queries.map((query) => {\n      return {\n        ...query,\n        datasource: this.getRef(),\n        ...this.applyVariables(query, scopedVars),\n      };\n    });\n  }\n\n  applyVariables(query: TempoQuery, scopedVars: ScopedVars) {\n    const expandedQuery = { ...query };\n\n    if (query.linkedQuery) {\n      expandedQuery.linkedQuery = {\n        ...query.linkedQuery,\n        expr: this.templateSrv.replace(query.linkedQuery?.expr ?? '', scopedVars),\n      };\n    }\n\n    return {\n      ...expandedQuery,\n      query: this.templateSrv.replace(query.query ?? '', scopedVars),\n      serviceName: this.templateSrv.replace(query.serviceName ?? '', scopedVars),\n      spanName: this.templateSrv.replace(query.spanName ?? '', scopedVars),\n      search: this.templateSrv.replace(query.search ?? '', scopedVars),\n      minDuration: this.templateSrv.replace(query.minDuration ?? '', scopedVars),\n      maxDuration: this.templateSrv.replace(query.maxDuration ?? '', scopedVars),\n    };\n  }\n\n  /**\n   * Handles the simplest of the queries where we have just a trace id and return trace data for it.\n   * @param options\n   * @param targets\n   * @private\n   */\n  handleTraceIdQuery(options: DataQueryRequest<TempoQuery>, targets: TempoQuery[]): Observable<DataQueryResponse> {\n    const validTargets = targets.filter((t) => t.query).map((t) => ({ ...t, query: t.query.trim() }));\n    if (!validTargets.length) {\n      return EMPTY;\n    }\n\n    const traceRequest = this.traceIdQueryRequest(options, validTargets);\n\n    return super.query(traceRequest).pipe(\n      map((response) => {\n        if (response.error) {\n          return response;\n        }\n        return transformTrace(response, this.nodeGraph?.enabled);\n      })\n    );\n  }\n\n  traceIdQueryRequest(options: DataQueryRequest<TempoQuery>, targets: TempoQuery[]): DataQueryRequest<TempoQuery> {\n    const request = {\n      ...options,\n      targets,\n    };\n\n    if (this.traceQuery?.timeShiftEnabled) {\n      request.range = options.range && {\n        ...options.range,\n        from: options.range.from.subtract(\n          rangeUtil.intervalToMs(this.traceQuery?.spanStartTimeShift || '30m'),\n          'milliseconds'\n        ),\n        to: options.range.to.add(rangeUtil.intervalToMs(this.traceQuery?.spanEndTimeShift || '30m'), 'milliseconds'),\n      };\n    } else {\n      request.range = { from: dateTime(0), to: dateTime(0), raw: { from: dateTime(0), to: dateTime(0) } };\n    }\n\n    return request;\n  }\n\n  async metadataRequest(url: string, params = {}) {\n    return await lastValueFrom(this._request(url, params, { method: 'GET', hideFromInspector: true }));\n  }\n\n  private _request(apiUrl: string, data?: any, options?: Partial<BackendSrvRequest>): Observable<Record<string, any>> {\n    const params = data ? serializeParams(data) : '';\n    const url = `${this.instanceSettings.url}${apiUrl}${params.length ? `?${params}` : ''}`;\n    const req = { ...options, url };\n\n    return getBackendSrv().fetch(req);\n  }\n\n  async testDatasource(): Promise<any> {\n    const options: BackendSrvRequest = {\n      headers: {},\n      method: 'GET',\n      url: `${this.instanceSettings.url}/api/echo`,\n    };\n    const response = await lastValueFrom(getBackendSrv().fetch<any>(options));\n\n    if (response?.ok) {\n      return { status: 'success', message: 'Data source is working' };\n    }\n  }\n\n  getQueryDisplayText(query: TempoQuery) {\n    if (query.queryType === 'nativeSearch') {\n      let result = [];\n      for (const key of ['serviceName', 'spanName', 'search', 'minDuration', 'maxDuration', 'limit']) {\n        if (query.hasOwnProperty(key) && query[key as keyof TempoQuery]) {\n          result.push(`${startCase(key)}: ${query[key as keyof TempoQuery]}`);\n        }\n      }\n      return result.join(', ');\n    }\n    return query.query;\n  }\n\n  buildSearchQuery(query: TempoQuery, timeRange?: { startTime: number; endTime?: number }): SearchQueryParams {\n    let tags = query.search ?? '';\n\n    let tempoQuery = pick(query, ['minDuration', 'maxDuration', 'limit']);\n    // Remove empty properties\n    tempoQuery = pickBy(tempoQuery, identity);\n\n    if (query.serviceName) {\n      tags += ` service.name=\"${query.serviceName}\"`;\n    }\n    if (query.spanName) {\n      tags += ` name=\"${query.spanName}\"`;\n    }\n\n    // Set default limit\n    if (!tempoQuery.limit) {\n      tempoQuery.limit = DEFAULT_LIMIT;\n    }\n\n    // Validate query inputs and remove spaces if valid\n    if (tempoQuery.minDuration) {\n      tempoQuery.minDuration = this.templateSrv.replace(tempoQuery.minDuration ?? '');\n      if (!isValidGoDuration(tempoQuery.minDuration)) {\n        throw new Error('Please enter a valid min duration.');\n      }\n      tempoQuery.minDuration = tempoQuery.minDuration.replace(/\\s/g, '');\n    }\n    if (tempoQuery.maxDuration) {\n      tempoQuery.maxDuration = this.templateSrv.replace(tempoQuery.maxDuration ?? '');\n      if (!isValidGoDuration(tempoQuery.maxDuration)) {\n        throw new Error('Please enter a valid max duration.');\n      }\n      tempoQuery.maxDuration = tempoQuery.maxDuration.replace(/\\s/g, '');\n    }\n\n    if (!Number.isInteger(tempoQuery.limit) || tempoQuery.limit <= 0) {\n      throw new Error('Please enter a valid limit.');\n    }\n\n    let searchQuery: SearchQueryParams = { tags, ...tempoQuery };\n\n    if (timeRange) {\n      searchQuery.start = timeRange.startTime;\n      searchQuery.end = timeRange.endTime;\n    }\n\n    return searchQuery;\n  }\n\n  // Get linked loki search datasource. Fall back to legacy loki search/trace to logs config\n  getLokiSearchDS = (): string | undefined => {\n    const legacyLogsDatasourceUid =\n      this.tracesToLogs?.lokiSearch !== false && this.lokiSearch === undefined\n        ? this.tracesToLogs?.datasourceUid\n        : undefined;\n    return this.lokiSearch?.datasourceUid ?? legacyLogsDatasourceUid;\n  };\n}\n\nfunction queryPrometheus(request: DataQueryRequest<PromQuery>, datasourceUid: string) {\n  return from(getDatasourceSrv().get(datasourceUid)).pipe(\n    mergeMap((ds) => {\n      return (ds as PrometheusDatasource).query(request);\n    })\n  );\n}\n\nfunction serviceMapQuery(request: DataQueryRequest<TempoQuery>, datasourceUid: string, tempoDatasourceUid: string) {\n  const serviceMapRequest = makePromServiceMapRequest(request);\n\n  return queryPrometheus(serviceMapRequest, datasourceUid).pipe(\n    // Just collect all the responses first before processing into node graph data\n    toArray(),\n    map((responses: DataQueryResponse[]) => {\n      const errorRes = responses.find((res) => !!res.error);\n      if (errorRes) {\n        throw new Error(errorRes.error!.message);\n      }\n\n      const { nodes, edges } = mapPromMetricsToServiceMap(responses, request.range);\n\n      // No handling of multiple targets assume just one. NodeGraph does not support it anyway, but still should be\n      // fixed at some point.\n      nodes.refId = request.targets[0].refId;\n      edges.refId = request.targets[0].refId;\n\n      nodes.fields[0].config = getFieldConfig(\n        datasourceUid,\n        tempoDatasourceUid,\n        '__data.fields.id',\n        '__data.fields[0]'\n      );\n      edges.fields[0].config = getFieldConfig(\n        datasourceUid,\n        tempoDatasourceUid,\n        '__data.fields.target',\n        '__data.fields.target',\n        '__data.fields.source'\n      );\n\n      return {\n        data: [nodes, edges],\n        state: LoadingState.Done,\n      };\n    })\n  );\n}\n\nfunction rateQuery(\n  request: DataQueryRequest<TempoQuery>,\n  serviceMapResponse: DataQueryResponse,\n  datasourceUid: string\n) {\n  const serviceMapRequest = makePromServiceMapRequest(request);\n  serviceMapRequest.targets = makeApmRequest([buildExpr(rateMetric, defaultTableFilter, request)]);\n\n  return queryPrometheus(serviceMapRequest, datasourceUid).pipe(\n    toArray(),\n    map((responses: DataQueryResponse[]) => {\n      const errorRes = responses.find((res) => !!res.error);\n      if (errorRes) {\n        throw new Error(errorRes.error!.message);\n      }\n      return {\n        data: [responses[0]?.data ?? [], serviceMapResponse.data[0], serviceMapResponse.data[1]],\n        state: LoadingState.Done,\n      };\n    })\n  );\n}\n\n// we need the response from the rate query to get the rate span_name(s),\n// -> which determine the errorRate/duration span_name(s) we need to query\nfunction errorAndDurationQuery(\n  request: DataQueryRequest<TempoQuery>,\n  rateResponse: DataQueryResponse,\n  datasourceUid: string,\n  tempoDatasourceUid: string\n) {\n  let apmMetrics = [];\n  let errorRateBySpanName = '';\n  let durationsBySpanName: string[] = [];\n  const spanNames = rateResponse.data[0][0]?.fields[1]?.values.toArray() ?? [];\n\n  if (spanNames.length > 0) {\n    errorRateBySpanName = buildExpr(errorRateMetric, 'span_name=~\"' + spanNames.join('|') + '\"', request);\n    apmMetrics.push(errorRateBySpanName);\n    spanNames.map((name: string) => {\n      const metric = buildExpr(durationMetric, 'span_name=~\"' + name + '\"', request);\n      durationsBySpanName.push(metric);\n      apmMetrics.push(metric);\n    });\n  }\n\n  const serviceMapRequest = makePromServiceMapRequest(request);\n  serviceMapRequest.targets = makeApmRequest(apmMetrics);\n\n  return queryPrometheus(serviceMapRequest, datasourceUid).pipe(\n    // Just collect all the responses first before processing into node graph data\n    toArray(),\n    map((errorAndDurationResponse: DataQueryResponse[]) => {\n      const errorRes = errorAndDurationResponse.find((res) => !!res.error);\n      if (errorRes) {\n        throw new Error(errorRes.error!.message);\n      }\n\n      const apmTable = getApmTable(\n        request,\n        rateResponse,\n        errorAndDurationResponse[0],\n        errorRateBySpanName,\n        durationsBySpanName,\n        datasourceUid,\n        tempoDatasourceUid\n      );\n\n      if (apmTable.fields.length === 0) {\n        return {\n          data: [rateResponse.data[1], rateResponse.data[2]],\n          state: LoadingState.Done,\n        };\n      }\n\n      return {\n        data: [apmTable, rateResponse.data[1], rateResponse.data[2]],\n        state: LoadingState.Done,\n      };\n    })\n  );\n}\n\nfunction makePromLink(title: string, expr: string, datasourceUid: string, instant: boolean) {\n  return {\n    url: '',\n    title,\n    internal: {\n      query: {\n        expr: expr,\n        range: !instant,\n        exemplar: !instant,\n        instant: instant,\n      } as PromQuery,\n      datasourceUid,\n      datasourceName: getDatasourceSrv().getDataSourceSettingsByUid(datasourceUid)?.name ?? '',\n    },\n  };\n}\n\nexport function getFieldConfig(\n  datasourceUid: string,\n  tempoDatasourceUid: string,\n  targetField: string,\n  tempoField: string,\n  sourceField?: string\n) {\n  sourceField = sourceField ? `client=\"\\${${sourceField}}\",` : '';\n  return {\n    links: [\n      makePromLink(\n        'Request rate',\n        `sum by (client, server)(rate(${totalsMetric}{${sourceField}server=\"\\${${targetField}}\"}[$__rate_interval]))`,\n        datasourceUid,\n        false\n      ),\n      makePromLink(\n        'Request histogram',\n        `histogram_quantile(0.9, sum(rate(${histogramMetric}{${sourceField}server=\"\\${${targetField}}\"}[$__rate_interval])) by (le, client, server))`,\n        datasourceUid,\n        false\n      ),\n      makePromLink(\n        'Failed request rate',\n        `sum by (client, server)(rate(${failedMetric}{${sourceField}server=\"\\${${targetField}}\"}[$__rate_interval]))`,\n        datasourceUid,\n        false\n      ),\n      makeTempoLink('View traces', `\\${${tempoField}}`, '', tempoDatasourceUid),\n    ],\n  };\n}\n\nexport function makeTempoLink(title: string, serviceName: string, spanName: string, datasourceUid: string) {\n  let query = { queryType: 'nativeSearch' } as TempoQuery;\n  if (serviceName !== '') {\n    query.serviceName = serviceName;\n  }\n  if (spanName !== '') {\n    query.spanName = spanName;\n  }\n\n  return {\n    url: '',\n    title,\n    internal: {\n      query,\n      datasourceUid,\n      datasourceName: getDatasourceSrv().getDataSourceSettingsByUid(datasourceUid)?.name ?? '',\n    },\n  };\n}\n\nfunction makePromServiceMapRequest(options: DataQueryRequest<TempoQuery>): DataQueryRequest<PromQuery> {\n  return {\n    ...options,\n    targets: serviceMapMetrics.map((metric) => {\n      return {\n        format: 'table',\n        refId: metric,\n        // options.targets[0] is not correct here, but not sure what should happen if you have multiple queries for\n        // service map at the same time anyway\n        expr: `rate(${metric}${options.targets[0].serviceMapQuery || ''}[$__range])`,\n        instant: true,\n      };\n    }),\n  };\n}\n\nfunction getApmTable(\n  request: DataQueryRequest<TempoQuery>,\n  rateResponse: DataQueryResponse,\n  secondResponse: DataQueryResponse,\n  errorRateBySpanName: string,\n  durationsBySpanName: string[],\n  datasourceUid: string,\n  tempoDatasourceUid: string\n) {\n  let df: any = { fields: [] };\n  const rate = rateResponse.data[0]?.filter((x: { refId: string }) => {\n    return x.refId === buildExpr(rateMetric, defaultTableFilter, request);\n  });\n  const errorRate = secondResponse.data.filter((x) => {\n    return x.refId === errorRateBySpanName;\n  });\n  const duration = secondResponse.data.filter((x) => {\n    return durationsBySpanName.includes(x.refId);\n  });\n\n  if (rate.length > 0 && rate[0].fields?.length > 2) {\n    df.fields.push({\n      ...rate[0].fields[1],\n      name: 'Name',\n      config: {\n        filterable: false,\n      },\n    });\n\n    df.fields.push({\n      ...rate[0].fields[2],\n      name: 'Rate',\n      config: {\n        links: [\n          makePromLink(\n            'Rate',\n            buildLinkExpr(buildExpr(rateMetric, 'span_name=\"${__data.fields[0]}\"', request)),\n            datasourceUid,\n            false\n          ),\n        ],\n        decimals: 2,\n      },\n    });\n\n    df.fields.push({\n      ...rate[0].fields[2],\n      name: ' ',\n      labels: null,\n      config: {\n        color: {\n          mode: 'continuous-BlPu',\n        },\n        custom: {\n          displayMode: 'lcd-gauge',\n        },\n        decimals: 3,\n      },\n    });\n  }\n\n  if (errorRate.length > 0 && errorRate[0].fields?.length > 2) {\n    const errorRateNames = errorRate[0].fields[1]?.values.toArray() ?? [];\n    const errorRateValues = errorRate[0].fields[2]?.values.toArray() ?? [];\n    let errorRateObj: any = {};\n    errorRateNames.map((name: string, index: number) => {\n      errorRateObj[name] = { value: errorRateValues[index] };\n    });\n\n    const values = getRateAlignedValues({ ...rate }, errorRateObj);\n\n    df.fields.push({\n      ...errorRate[0].fields[2],\n      name: 'Error Rate',\n      values: values,\n      config: {\n        links: [\n          makePromLink(\n            'Error Rate',\n            buildLinkExpr(buildExpr(errorRateMetric, 'span_name=\"${__data.fields[0]}\"', request)),\n            datasourceUid,\n            false\n          ),\n        ],\n        decimals: 2,\n      },\n    });\n\n    df.fields.push({\n      ...errorRate[0].fields[2],\n      name: '  ',\n      values: values,\n      labels: null,\n      config: {\n        color: {\n          mode: 'continuous-RdYlGr',\n        },\n        custom: {\n          displayMode: 'lcd-gauge',\n        },\n        decimals: 3,\n      },\n    });\n  }\n\n  if (duration.length > 0 && duration[0].fields?.length > 1) {\n    let durationObj: any = {};\n    duration.map((d) => {\n      const delimiter = d.refId?.includes('span_name=~\"') ? 'span_name=~\"' : 'span_name=\"';\n      const name = d.refId?.split(delimiter)[1].split('\"}')[0];\n      durationObj[name] = { value: d.fields[1].values.toArray()[0] };\n    });\n\n    df.fields.push({\n      ...duration[0].fields[1],\n      name: 'Duration (p90)',\n      values: getRateAlignedValues({ ...rate }, durationObj),\n      config: {\n        links: [\n          makePromLink(\n            'Duration',\n            buildLinkExpr(buildExpr(durationMetric, 'span_name=\"${__data.fields[0]}\"', request)),\n            datasourceUid,\n            false\n          ),\n        ],\n        unit: 's',\n      },\n    });\n  }\n\n  if (df.fields.length > 0 && df.fields[0].values) {\n    df.fields.push({\n      name: 'Links',\n      type: FieldType.string,\n      values: df.fields[0].values.map(() => {\n        return 'Tempo';\n      }),\n      config: {\n        links: [makeTempoLink('Tempo', '', `\\${__data.fields[0]}`, tempoDatasourceUid)],\n      },\n    });\n  }\n\n  return df;\n}\n\nexport function buildExpr(\n  metric: { expr: string; params: string[] },\n  extraParams: string,\n  request: DataQueryRequest<TempoQuery>\n) {\n  let serviceMapQuery = request.targets[0]?.serviceMapQuery?.replace('{', '').replace('}', '') ?? '';\n  // map serviceGraph metric tags to APM metric tags\n  serviceMapQuery = serviceMapQuery.replace('client', 'service').replace('server', 'service');\n  const metricParams = serviceMapQuery.includes('span_name')\n    ? metric.params.concat(serviceMapQuery)\n    : metric.params\n        .concat(serviceMapQuery)\n        .concat(extraParams)\n        .filter((item: string) => item);\n  return metric.expr.replace('{}', '{' + metricParams.join(',') + '}');\n}\n\nexport function buildLinkExpr(expr: string) {\n  // don't want top 5 or by span name in links\n  expr = expr.replace('topk(5, ', '').replace(' by (span_name))', '');\n  return expr.replace('__range', '__rate_interval');\n}\n\n// query result frames can come back in any order\n// here we align the table col values to the same row name (rateName) across the table\nexport function getRateAlignedValues(\n  rateResp: DataQueryResponseData[],\n  objToAlign: { [x: string]: { value: string } }\n) {\n  const rateNames = rateResp[0]?.fields[1]?.values.toArray() ?? [];\n  let values: string[] = [];\n\n  for (let i = 0; i < rateNames.length; i++) {\n    if (Object.keys(objToAlign).includes(rateNames[i])) {\n      values.push(objToAlign[rateNames[i]].value);\n    } else {\n      values.push('0');\n    }\n  }\n\n  return values;\n}\n\nexport function makeApmRequest(metrics: any[]) {\n  return metrics.map((metric) => {\n    return {\n      refId: metric,\n      expr: metric,\n      instant: true,\n    };\n  });\n}\n","import React from 'react';\n\nimport { EditorField, EditorRow } from '@grafana/experimental';\nimport { AutoSizeInput } from '@grafana/ui';\nimport { QueryOptionGroup } from 'app/plugins/datasource/prometheus/querybuilder/shared/QueryOptionGroup';\n\nimport { DEFAULT_LIMIT } from '../datasource';\nimport { TempoQuery } from '../types';\n\ninterface Props {\n  onChange: (value: TempoQuery) => void;\n  query: Partial<TempoQuery> & TempoQuery;\n}\n\nexport const TempoQueryBuilderOptions = React.memo<Props>(({ onChange, query }) => {\n  const onLimitChange = (e: React.FormEvent<HTMLInputElement>) => {\n    onChange({ ...query, limit: parseInt(e.currentTarget.value, 10) });\n  };\n\n  return (\n    <>\n      <EditorRow>\n        <QueryOptionGroup title=\"Options\" collapsedInfo={[`Limit: ${query.limit || DEFAULT_LIMIT}`]}>\n          <EditorField label=\"Limit\" tooltip=\"Maximum number of traces to return.\">\n            <AutoSizeInput\n              className=\"width-4\"\n              placeholder=\"auto\"\n              type=\"number\"\n              min={1}\n              defaultValue={DEFAULT_LIMIT}\n              onCommitChange={onLimitChange}\n              value={query.limit}\n            />\n          </EditorField>\n        </QueryOptionGroup>\n      </EditorRow>\n    </>\n  );\n});\n\nTempoQueryBuilderOptions.displayName = 'TempoQueryBuilderOptions';\n","import { SelectableValue } from '@grafana/data';\nimport type { Monaco, monacoTypes } from '@grafana/ui';\n\nimport TempoLanguageProvider from '../language_provider';\n\ninterface Props {\n  languageProvider: TempoLanguageProvider;\n}\n\n/**\n * Class that implements CompletionItemProvider interface and allows us to provide suggestion for the Monaco\n * autocomplete system.\n */\nexport class CompletionProvider implements monacoTypes.languages.CompletionItemProvider {\n  languageProvider: TempoLanguageProvider;\n\n  constructor(props: Props) {\n    this.languageProvider = props.languageProvider;\n  }\n\n  triggerCharacters = ['{', '.', '[', '(', '=', '~', ' ', '\"'];\n\n  static readonly intrinsics: string[] = ['duration', 'name', 'status'];\n  static readonly scopes: string[] = ['resource', 'span'];\n  static readonly operators: string[] = ['=', '-', '+', '<', '>', '>=', '<=', '=~'];\n  static readonly logicalOps: string[] = ['&&', '||'];\n\n  // We set these directly and ae required for the provider to function.\n  monaco: Monaco | undefined;\n  editor: monacoTypes.editor.IStandaloneCodeEditor | undefined;\n\n  private tags: { [tag: string]: Set<string> } = {};\n  private cachedValues: { [key: string]: Array<SelectableValue<string>> } = {};\n\n  provideCompletionItems(\n    model: monacoTypes.editor.ITextModel,\n    position: monacoTypes.Position\n  ): monacoTypes.languages.ProviderResult<monacoTypes.languages.CompletionList> {\n    // Should not happen, this should not be called before it is initialized\n    if (!(this.monaco && this.editor)) {\n      throw new Error('provideCompletionItems called before CompletionProvider was initialized');\n    }\n\n    // if the model-id does not match, then this call is from a different editor-instance,\n    // not \"our instance\", so return nothing\n    if (this.editor.getModel()?.id !== model.id) {\n      return { suggestions: [] };\n    }\n\n    const { range, offset } = getRangeAndOffset(this.monaco, model, position);\n    const situation = this.getSituation(model.getValue(), offset);\n    const completionItems = this.getCompletions(situation);\n\n    return completionItems.then((items) => {\n      // monaco by-default alphabetically orders the items.\n      // to stop it, we use a number-as-string sortkey,\n      // so that monaco keeps the order we use\n      const maxIndexDigits = items.length.toString().length;\n      const suggestions: monacoTypes.languages.CompletionItem[] = items.map((item, index) => ({\n        kind: getMonacoCompletionItemKind(item.type, this.monaco!),\n        label: item.label,\n        insertText: item.insertText,\n        sortText: index.toString().padStart(maxIndexDigits, '0'), // to force the order we have\n        range,\n      }));\n      return { suggestions };\n    });\n  }\n\n  /**\n   * We expect the tags list data directly from the request and assign it an empty set here.\n   */\n  setTags(tags: string[]) {\n    tags.forEach((t) => (this.tags[t] = new Set<string>()));\n  }\n\n  private overrideTagName(tagName: string): string {\n    switch (tagName) {\n      case 'status':\n        return 'status.code';\n      default:\n        return tagName;\n    }\n  }\n\n  private async getTagValues(tagName: string): Promise<Array<SelectableValue<string>>> {\n    let tagValues: Array<SelectableValue<string>> = [];\n\n    if (this.cachedValues.hasOwnProperty(tagName)) {\n      tagValues = this.cachedValues[tagName];\n    } else {\n      tagValues = await this.languageProvider.getOptions(tagName);\n      this.cachedValues[tagName] = tagValues;\n    }\n    return tagValues;\n  }\n\n  /**\n   * Get suggestion based on the situation we are in like whether we should suggest tag names or values.\n   * @param situation\n   * @private\n   */\n  private async getCompletions(situation: Situation): Promise<Completion[]> {\n    if (!Object.keys(this.tags).length) {\n      return [];\n    }\n    switch (situation.type) {\n      // Not really sure what would make sense to suggest in this case so just leave it\n      case 'UNKNOWN': {\n        return [];\n      }\n      case 'EMPTY': {\n        return this.getScopesCompletions('{ ')\n          .concat(this.getIntrinsicsCompletions('{ '))\n          .concat(this.getTagsCompletions('{ .'));\n      }\n      case 'SPANSET_EMPTY':\n        return this.getScopesCompletions().concat(this.getIntrinsicsCompletions()).concat(this.getTagsCompletions('.'));\n      case 'SPANSET_IN_NAME':\n        return this.getScopesCompletions().concat(this.getIntrinsicsCompletions()).concat(this.getTagsCompletions());\n      case 'SPANSET_IN_NAME_SCOPE':\n        return this.getIntrinsicsCompletions().concat(this.getTagsCompletions());\n      case 'SPANSET_AFTER_NAME':\n        return CompletionProvider.operators.map((key) => ({\n          label: key,\n          insertText: key,\n          type: 'OPERATOR' as CompletionType,\n        }));\n      case 'SPANSET_IN_VALUE':\n        const tagName = this.overrideTagName(situation.tagName);\n        const tagValues = await this.getTagValues(tagName);\n        const items: Completion[] = [];\n        tagValues.forEach((val) => {\n          if (val?.label) {\n            items.push({\n              label: val.label,\n              insertText: situation.betweenQuotes ? val.label : `\"${val.label}\"`,\n              type: 'TAG_VALUE',\n            });\n          }\n        });\n        return items;\n      case 'SPANSET_AFTER_VALUE':\n        return CompletionProvider.logicalOps.concat('}').map((key) => ({\n          label: key,\n          insertText: key,\n          type: 'OPERATOR' as CompletionType,\n        }));\n      default:\n        throw new Error(`Unexpected situation ${situation}`);\n    }\n  }\n\n  private getTagsCompletions(prepend?: string): Completion[] {\n    return Object.keys(this.tags)\n      .sort((a, b) => a.localeCompare(b, undefined, { sensitivity: 'accent' }))\n      .map((key) => ({\n        label: key,\n        insertText: (prepend || '') + key,\n        type: 'TAG_NAME' as CompletionType,\n      }));\n  }\n\n  private getIntrinsicsCompletions(prepend?: string): Completion[] {\n    return CompletionProvider.intrinsics.map((key) => ({\n      label: key,\n      insertText: (prepend || '') + key,\n      type: 'KEYWORD' as CompletionType,\n    }));\n  }\n\n  private getScopesCompletions(prepend?: string): Completion[] {\n    return CompletionProvider.scopes.map((key) => ({\n      label: key,\n      insertText: (prepend || '') + key,\n      type: 'SCOPE' as CompletionType,\n    }));\n  }\n\n  private getSituationInSpanSet(textUntilCaret: string): Situation {\n    const nameRegex = /(?<name>[\\w./-]+)?/;\n    const opRegex = /(?<op>[!=+\\-<>]+)/;\n    // only allow spaces in the value if it's enclosed by quotes\n    const valueRegex = /(?<value>(?<open_quote>\")([^\"\\n&|]+)?(?<close_quote>\")?|([^\"\\n\\s&|]+))?/;\n\n    // prettier-ignore\n    const fullRegex = new RegExp(\n        '([\\\\s{])' +      // Space(s) or initial opening bracket {\n        '(' +                   // Open full set group\n        nameRegex.source +\n        '(?<space1>\\\\s*)' +     // Optional space(s) between name and operator\n        '(' +                   // Open operator + value group\n        opRegex.source +\n        '(?<space2>\\\\s*)' +     // Optional space(s) between operator and value\n        valueRegex.source +\n        ')?' +                  // Close operator + value group\n        ')' +                   // Close full set group\n        '(?<space3>\\\\s*)$'      // Optional space(s) at the end of the set\n    );\n\n    const matched = textUntilCaret.match(fullRegex);\n\n    if (matched) {\n      const nameFull = matched.groups?.name;\n      const op = matched.groups?.op;\n\n      if (!nameFull) {\n        return {\n          type: 'SPANSET_EMPTY',\n        };\n      }\n\n      const nameMatched = nameFull.match(/^(?<pre_dot>\\.)?(?<word>\\w[\\w./-]*\\w)(?<post_dot>\\.)?$/);\n\n      // We already have a (potentially partial) tag name so let's check if there's an operator declared\n      // { .tag_name|\n      if (!op) {\n        // There's no operator so we check if the name is one of the known scopes\n        // { resource.|\n        if (CompletionProvider.scopes.filter((w) => w === nameMatched?.groups?.word) && nameMatched?.groups?.post_dot) {\n          return {\n            type: 'SPANSET_IN_NAME_SCOPE',\n          };\n        }\n        // It's not one of the scopes, so we now check if we're after the name (there's a space after the word) or if we still have to autocomplete the rest of the name\n        // In case there's a space we start autocompleting the operators { .http.method |\n        // Otherwise we keep showing the tags/intrinsics/scopes list { .http.met|\n        return {\n          type: matched.groups?.space1 ? 'SPANSET_AFTER_NAME' : 'SPANSET_IN_NAME',\n        };\n      }\n\n      // In case there's a space after the full [name + operator + value] group we can start autocompleting logical operators or close the spanset\n      // To avoid triggering this situation when we are writing a space inside a string we check the state of the open and close quotes\n      // { .http.method = \"GET\" |\n      if (matched.groups?.space3 && matched.groups.open_quote === matched.groups.close_quote) {\n        return {\n          type: 'SPANSET_AFTER_VALUE',\n        };\n      }\n\n      // remove the scopes from the word to get accurate autocompletes\n      // Ex: 'span.host.name' won't resolve to any autocomplete values, but removing 'span.' results in 'host.name' which can have autocomplete values\n      const noScopeWord = CompletionProvider.scopes.reduce(\n        (result, word) => result.replace(`${word}.`, ''),\n        nameMatched?.groups?.word || ''\n      );\n\n      // We already have an operator and know that the set isn't complete so let's autocomplete the possible values for the tag name\n      // { .http.method = |\n      return {\n        type: 'SPANSET_IN_VALUE',\n        tagName: noScopeWord,\n        betweenQuotes: !!matched.groups?.open_quote,\n      };\n    }\n\n    return {\n      type: 'EMPTY',\n    };\n  }\n\n  /**\n   * Figure out where is the cursor and what kind of suggestions are appropriate.\n   * @param text\n   * @param offset\n   */\n  private getSituation(text: string, offset: number): Situation {\n    if (text === '' || offset === 0) {\n      return {\n        type: 'EMPTY',\n      };\n    }\n\n    const textUntilCaret = text.substring(0, offset);\n\n    // Check if we're inside a span set\n    let isInSpanSet = textUntilCaret.lastIndexOf('{') > textUntilCaret.lastIndexOf('}');\n    if (isInSpanSet) {\n      return this.getSituationInSpanSet(textUntilCaret);\n    }\n\n    // Will happen only if user writes something that isn't really a tag selector\n    return {\n      type: 'UNKNOWN',\n    };\n  }\n}\n\n/**\n * Get item kind which is used for icon next to the suggestion.\n * @param type\n * @param monaco\n */\nfunction getMonacoCompletionItemKind(type: CompletionType, monaco: Monaco): monacoTypes.languages.CompletionItemKind {\n  switch (type) {\n    case 'TAG_NAME':\n      return monaco.languages.CompletionItemKind.Enum;\n    case 'KEYWORD':\n      return monaco.languages.CompletionItemKind.Keyword;\n    case 'OPERATOR':\n      return monaco.languages.CompletionItemKind.Operator;\n    case 'TAG_VALUE':\n      return monaco.languages.CompletionItemKind.EnumMember;\n    case 'SCOPE':\n      return monaco.languages.CompletionItemKind.Class;\n    default:\n      throw new Error(`Unexpected CompletionType: ${type}`);\n  }\n}\n\nexport type CompletionType = 'TAG_NAME' | 'TAG_VALUE' | 'KEYWORD' | 'OPERATOR' | 'SCOPE';\ntype Completion = {\n  type: CompletionType;\n  label: string;\n  insertText: string;\n};\n\nexport type Tag = {\n  name: string;\n  value: string;\n};\n\nexport type Situation =\n  | {\n      type: 'UNKNOWN';\n    }\n  | {\n      type: 'EMPTY';\n    }\n  | {\n      type: 'SPANSET_EMPTY';\n    }\n  | {\n      type: 'SPANSET_AFTER_NAME';\n    }\n  | {\n      type: 'SPANSET_IN_NAME';\n    }\n  | {\n      type: 'SPANSET_IN_NAME_SCOPE';\n    }\n  | {\n      type: 'SPANSET_IN_VALUE';\n      tagName: string;\n      betweenQuotes: boolean;\n    }\n  | {\n      type: 'SPANSET_AFTER_VALUE';\n    };\n\nfunction getRangeAndOffset(monaco: Monaco, model: monacoTypes.editor.ITextModel, position: monacoTypes.Position) {\n  const word = model.getWordAtPosition(position);\n  const range =\n    word != null\n      ? monaco.Range.lift({\n          startLineNumber: position.lineNumber,\n          endLineNumber: position.lineNumber,\n          startColumn: word.startColumn,\n          endColumn: word.endColumn,\n        })\n      : monaco.Range.fromPositions(position);\n\n  // documentation says `position` will be \"adjusted\" in `getOffsetAt` so we clone it here just for sure.\n  const positionClone = {\n    column: position.column,\n    lineNumber: position.lineNumber,\n  };\n\n  const offset = model.getOffsetAt(positionClone);\n  return { offset, range };\n}\n","export const languageConfiguration = {\n  // the default separators except `@$`\n  wordPattern: /(-?\\d*\\.\\d\\w*)|([^`~!#%^&*()\\-=+\\[{\\]}\\\\|;:'\",.<>\\/?\\s]+)/g,\n  brackets: [\n    ['{', '}'],\n    ['(', ')'],\n  ],\n  autoClosingPairs: [\n    { open: '{', close: '}' },\n    { open: '(', close: ')' },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n  ],\n  surroundingPairs: [\n    { open: '{', close: '}' },\n    { open: '(', close: ')' },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n  ],\n  folding: {},\n};\n\nconst operators = ['=', '!=', '>', '<', '>=', '<=', '=~', '!~'];\n\nconst intrinsics = ['duration', 'name', 'status', 'parent'];\n\nconst scopes: string[] = ['resource', 'span'];\n\nconst keywords = intrinsics.concat(scopes);\n\nexport const language = {\n  ignoreCase: false,\n  defaultToken: '',\n  tokenPostfix: '.traceql',\n\n  keywords,\n  operators,\n\n  // we include these common regular expressions\n  symbols: /[=><!~?:&|+\\-*\\/^%]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  digits: /\\d+(_+\\d+)*/,\n  octaldigits: /[0-7]+(_+[0-7]+)*/,\n  binarydigits: /[0-1]+(_+[0-1]+)*/,\n  hexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,\n  integersuffix: /(ll|LL|u|U|l|L)?(ll|LL|u|U|l|L)?/,\n  floatsuffix: /[fFlL]?/,\n\n  tokenizer: {\n    root: [\n      // labels\n      [/[a-z_.][\\w./_-]*(?=\\s*(=|!=|>|<|>=|<=|=~|!~))/, 'tag'],\n\n      // all keywords have the same color\n      [\n        /[a-zA-Z_.]\\w*/,\n        {\n          cases: {\n            '@keywords': 'type',\n            '@default': 'identifier',\n          },\n        },\n      ],\n\n      // strings\n      [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], // non-teminated string\n      [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'], // non-teminated string\n      [/\"/, 'string', '@string_double'],\n      [/'/, 'string', '@string_single'],\n\n      // whitespace\n      { include: '@whitespace' },\n\n      // delimiters and operators\n      [/[{}()\\[\\]]/, '@brackets'],\n      [/[<>](?!@symbols)/, '@brackets'],\n      [\n        /@symbols/,\n        {\n          cases: {\n            '@operators': 'delimiter',\n            '@default': '',\n          },\n        },\n      ],\n\n      // numbers\n      [/\\d+/, 'number'],\n      [/\\d*\\d+[eE]([\\-+]?\\d+)?(@floatsuffix)/, 'number.float'],\n      [/\\d*\\.\\d+([eE][\\-+]?\\d+)?(@floatsuffix)/, 'number.float'],\n      [/0[xX][0-9a-fA-F']*[0-9a-fA-F](@integersuffix)/, 'number.hex'],\n      [/0[0-7']*[0-7](@integersuffix)/, 'number.octal'],\n      [/0[bB][0-1']*[0-1](@integersuffix)/, 'number.binary'],\n      [/\\d[\\d']*\\d(@integersuffix)/, 'number'],\n      [/\\d(@integersuffix)/, 'number'],\n    ],\n\n    string_double: [\n      [/[^\\\\\"]+/, 'string'],\n      [/@escapes/, 'string.escape'],\n      [/\\\\./, 'string.escape.invalid'],\n      [/\"/, 'string', '@pop'],\n    ],\n\n    string_single: [\n      [/[^\\\\']+/, 'string'],\n      [/@escapes/, 'string.escape'],\n      [/\\\\./, 'string.escape.invalid'],\n      [/'/, 'string', '@pop'],\n    ],\n\n    clauses: [\n      [/[^(,)]/, 'tag'],\n      [/\\)/, 'identifier', '@pop'],\n    ],\n\n    whitespace: [[/[ \\t\\r\\n]+/, 'white']],\n  },\n};\n\nexport const languageDefinition = {\n  id: 'traceql',\n  extensions: ['.traceql'],\n  aliases: ['tempo', 'traceql'],\n  mimetypes: [],\n  def: {\n    language,\n    languageConfiguration,\n  },\n};\n","import { css } from '@emotion/css';\nimport type { languages } from 'monaco-editor';\nimport React, { useEffect, useRef } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { CodeEditor, Monaco, useStyles2, monacoTypes } from '@grafana/ui';\n\nimport { createErrorNotification } from '../../../../core/copy/appNotification';\nimport { notifyApp } from '../../../../core/reducers/appNotification';\nimport { dispatch } from '../../../../store/store';\nimport { TempoDatasource } from '../datasource';\n\nimport { CompletionProvider } from './autocomplete';\nimport { languageDefinition } from './traceql';\n\ninterface Props {\n  value: string;\n  onChange: (val: string) => void;\n  onRunQuery: () => void;\n  datasource: TempoDatasource;\n}\n\nexport function TraceQLEditor(props: Props) {\n  const { onRunQuery } = props;\n  const setupAutocompleteFn = useAutocomplete(props.datasource);\n  const styles = useStyles2(getStyles);\n  return (\n    <CodeEditor\n      value={props.value}\n      language={langId}\n      onBlur={props.onChange}\n      height={'30px'}\n      containerStyles={styles.queryField}\n      monacoOptions={{\n        folding: false,\n        fontSize: 14,\n        lineNumbers: 'off',\n        overviewRulerLanes: 0,\n        renderLineHighlight: 'none',\n        scrollbar: {\n          vertical: 'hidden',\n          verticalScrollbarSize: 8, // used as \"padding-right\"\n          horizontal: 'hidden',\n          horizontalScrollbarSize: 0,\n        },\n        scrollBeyondLastLine: false,\n        wordWrap: 'on',\n      }}\n      onBeforeEditorMount={ensureTraceQL}\n      onEditorDidMount={(editor, monaco) => {\n        setupAutocompleteFn(editor, monaco);\n        setupActions(editor, monaco, onRunQuery);\n      }}\n    />\n  );\n}\n\nfunction setupActions(editor: monacoTypes.editor.IStandaloneCodeEditor, monaco: Monaco, onRunQuery: () => void) {\n  editor.addAction({\n    id: 'run-query',\n    label: 'Run Query',\n\n    keybindings: [monaco.KeyMod.Shift | monaco.KeyCode.Enter],\n\n    contextMenuGroupId: 'navigation',\n\n    contextMenuOrder: 1.5,\n\n    run: function () {\n      onRunQuery();\n    },\n  });\n}\n\n/**\n * Hook that returns function that will set up monaco autocomplete for the label selector\n * @param datasource\n */\nfunction useAutocomplete(datasource: TempoDatasource) {\n  // We need the provider ref so we can pass it the label/values data later. This is because we run the call for the\n  // values here but there is additional setup needed for the provider later on. We could run the getSeries() in the\n  // returned function but that is run after the monaco is mounted so would delay the request a bit when it does not\n  // need to.\n  const providerRef = useRef<CompletionProvider>(\n    new CompletionProvider({ languageProvider: datasource.languageProvider })\n  );\n\n  useEffect(() => {\n    const fetchTags = async () => {\n      try {\n        await datasource.languageProvider.start();\n        const tags = datasource.languageProvider.getTags();\n\n        if (tags) {\n          providerRef.current.setTags(tags);\n        }\n      } catch (error) {\n        if (error instanceof Error) {\n          dispatch(notifyApp(createErrorNotification('Error', error)));\n        }\n      }\n    };\n    fetchTags();\n  }, [datasource]);\n\n  const autocompleteDisposeFun = useRef<(() => void) | null>(null);\n  useEffect(() => {\n    // when we unmount, we unregister the autocomplete-function, if it was registered\n    return () => {\n      autocompleteDisposeFun.current?.();\n    };\n  }, []);\n\n  // This should be run in monaco onEditorDidMount\n  return (editor: monacoTypes.editor.IStandaloneCodeEditor, monaco: Monaco) => {\n    providerRef.current.editor = editor;\n    providerRef.current.monaco = monaco;\n\n    const { dispose } = monaco.languages.registerCompletionItemProvider(langId, providerRef.current);\n    autocompleteDisposeFun.current = dispose;\n  };\n}\n\n// we must only run the setup code once\nlet traceqlSetupDone = false;\nconst langId = 'traceql';\n\nfunction ensureTraceQL(monaco: Monaco) {\n  if (!traceqlSetupDone) {\n    traceqlSetupDone = true;\n    const { aliases, extensions, mimetypes, def } = languageDefinition;\n    monaco.languages.register({ id: langId, aliases, extensions, mimetypes });\n    monaco.languages.setMonarchTokensProvider(langId, def.language as languages.IMonarchLanguage);\n    monaco.languages.setLanguageConfiguration(langId, def.languageConfiguration as languages.LanguageConfiguration);\n  }\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    queryField: css`\n      border-radius: ${theme.shape.borderRadius()};\n      border: 1px solid ${theme.components.input.borderColor};\n      flex: 1;\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport { defaults } from 'lodash';\nimport React from 'react';\n\nimport { QueryEditorProps } from '@grafana/data';\nimport { InlineLabel, useStyles2 } from '@grafana/ui';\n\nimport { TempoDatasource } from '../datasource';\nimport { defaultQuery, MyDataSourceOptions, TempoQuery } from '../types';\n\nimport { TempoQueryBuilderOptions } from './TempoQueryBuilderOptions';\nimport { TraceQLEditor } from './TraceQLEditor';\n\ntype Props = QueryEditorProps<TempoDatasource, TempoQuery, MyDataSourceOptions>;\n\nexport function QueryEditor(props: Props) {\n  const styles = useStyles2(getStyles);\n  const query = defaults(props.query, defaultQuery);\n\n  const onEditorChange = (value: string) => {\n    props.onChange({ ...query, query: value });\n  };\n\n  return (\n    <>\n      <InlineLabel>\n        Build complex queries using TraceQL to select a list of traces.{' '}\n        <a\n          rel=\"noreferrer\"\n          target=\"_blank\"\n          href=\"https://github.com/grafana/tempo/blob/main/docs/design-proposals/2022-04%20TraceQL%20Concepts.md\"\n        >\n          Documentation\n        </a>\n      </InlineLabel>\n      <TraceQLEditor\n        value={query.query}\n        onChange={onEditorChange}\n        datasource={props.datasource}\n        onRunQuery={props.onRunQuery}\n      />\n      <div className={styles.optionsContainer}>\n        <TempoQueryBuilderOptions query={query} onChange={props.onChange} />\n      </div>\n    </>\n  );\n}\n\nconst getStyles = () => ({\n  optionsContainer: css`\n    margin-top: 10px;\n  `,\n});\n","import { Grammar } from 'prismjs';\n\nexport const tokenizer: Grammar = {\n  key: {\n    pattern: /[^\\s]+(?==)/,\n    alias: 'attr-name',\n  },\n  operator: /[=]/,\n  value: [\n    {\n      pattern: /\"(.+)\"/,\n    },\n    {\n      pattern: /[^\\s]+/,\n    },\n  ],\n};\n","import { css } from '@emotion/css';\nimport Prism from 'prismjs';\nimport React, { useCallback, useState, useEffect, useMemo } from 'react';\nimport { Node } from 'slate';\n\nimport { GrafanaTheme2, isValidGoDuration, SelectableValue, toOption } from '@grafana/data';\nimport { FetchError, getTemplateSrv, isFetchError, TemplateSrv } from '@grafana/runtime';\nimport {\n  InlineFieldRow,\n  InlineField,\n  Input,\n  QueryField,\n  SlatePrism,\n  BracesPlugin,\n  TypeaheadInput,\n  TypeaheadOutput,\n  Alert,\n  useStyles2,\n  fuzzyMatch,\n  Select,\n} from '@grafana/ui';\nimport { notifyApp } from 'app/core/actions';\nimport { createErrorNotification } from 'app/core/copy/appNotification';\nimport { dispatch } from 'app/store/store';\n\nimport { TempoDatasource } from '../datasource';\nimport TempoLanguageProvider from '../language_provider';\nimport { tokenizer } from '../syntax';\nimport { TempoQuery } from '../types';\n\ninterface Props {\n  datasource: TempoDatasource;\n  query: TempoQuery;\n  onChange: (value: TempoQuery) => void;\n  onBlur?: () => void;\n  onRunQuery: () => void;\n}\n\nconst PRISM_LANGUAGE = 'tempo';\nconst durationPlaceholder = 'e.g. 1.2s, 100ms';\nconst plugins = [\n  BracesPlugin(),\n  SlatePrism({\n    onlyIn: (node: Node) => node.object === 'block' && node.type === 'code_block',\n    getSyntax: () => PRISM_LANGUAGE,\n  }),\n];\n\nPrism.languages[PRISM_LANGUAGE] = tokenizer;\n\nconst NativeSearch = ({ datasource, query, onChange, onBlur, onRunQuery }: Props) => {\n  const styles = useStyles2(getStyles);\n  const languageProvider = useMemo(() => new TempoLanguageProvider(datasource), [datasource]);\n  const [hasSyntaxLoaded, setHasSyntaxLoaded] = useState(false);\n  const [serviceOptions, setServiceOptions] = useState<Array<SelectableValue<string>>>();\n  const [spanOptions, setSpanOptions] = useState<Array<SelectableValue<string>>>();\n  const [error, setError] = useState<Error | FetchError | null>(null);\n  const [inputErrors, setInputErrors] = useState<{ [key: string]: boolean }>({});\n  const [isLoading, setIsLoading] = useState<{\n    serviceName: boolean;\n    spanName: boolean;\n  }>({\n    serviceName: false,\n    spanName: false,\n  });\n\n  const loadOptions = useCallback(\n    async (name: string, query = '') => {\n      const lpName = name === 'serviceName' ? 'service.name' : 'name';\n      setIsLoading((prevValue) => ({ ...prevValue, [name]: true }));\n\n      try {\n        const options = await languageProvider.getOptions(lpName);\n        const filteredOptions = options.filter((item) => (item.value ? fuzzyMatch(item.value, query).found : false));\n        return filteredOptions;\n      } catch (error) {\n        if (isFetchError(error) && error?.status === 404) {\n          setError(error);\n        } else if (error instanceof Error) {\n          dispatch(notifyApp(createErrorNotification('Error', error)));\n        }\n        return [];\n      } finally {\n        setIsLoading((prevValue) => ({ ...prevValue, [name]: false }));\n      }\n    },\n    [languageProvider]\n  );\n\n  useEffect(() => {\n    const fetchOptions = async () => {\n      try {\n        const [services, spans] = await Promise.all([loadOptions('serviceName'), loadOptions('spanName')]);\n        if (query.serviceName && getTemplateSrv().containsTemplate(query.serviceName)) {\n          services.push(toOption(query.serviceName));\n        }\n        setServiceOptions(services);\n        if (query.spanName && getTemplateSrv().containsTemplate(query.spanName)) {\n          spans.push(toOption(query.spanName));\n        }\n        setSpanOptions(spans);\n      } catch (error) {\n        // Display message if Tempo is connected but search 404's\n        if (isFetchError(error) && error?.status === 404) {\n          setError(error);\n        } else if (error instanceof Error) {\n          dispatch(notifyApp(createErrorNotification('Error', error)));\n        }\n      }\n    };\n    fetchOptions();\n  }, [languageProvider, loadOptions, query.serviceName, query.spanName]);\n\n  useEffect(() => {\n    const fetchTags = async () => {\n      try {\n        await languageProvider.start();\n        setHasSyntaxLoaded(true);\n      } catch (error) {\n        if (error instanceof Error) {\n          dispatch(notifyApp(createErrorNotification('Error', error)));\n        }\n      }\n    };\n    fetchTags();\n  }, [languageProvider]);\n\n  const onTypeahead = async (typeahead: TypeaheadInput): Promise<TypeaheadOutput> => {\n    return await languageProvider.provideCompletionItems(typeahead);\n  };\n\n  const cleanText = (text: string) => {\n    const splittedText = text.split(/\\s+(?=([^\"]*\"[^\"]*\")*[^\"]*$)/g);\n    if (splittedText.length > 1) {\n      return splittedText[splittedText.length - 1];\n    }\n    return text;\n  };\n\n  const onKeyDown = (keyEvent: React.KeyboardEvent) => {\n    if (keyEvent.key === 'Enter' && (keyEvent.shiftKey || keyEvent.ctrlKey)) {\n      onRunQuery();\n    }\n  };\n\n  const onSpanNameChange = (v: SelectableValue<string>) => {\n    // If the 'x' icon is clicked to clear the selected span name, remove spanName from the query object.\n    if (!v) {\n      delete query.spanName;\n      return;\n    }\n    if (spanOptions?.find((obj) => obj.value === v.value)) {\n      onChange({\n        ...query,\n        spanName: v.value,\n      });\n    }\n  };\n\n  const templateSrv: TemplateSrv = getTemplateSrv();\n\n  return (\n    <>\n      <div className={styles.container}>\n        <InlineFieldRow>\n          <InlineField label=\"Service Name\" labelWidth={14} grow>\n            <Select\n              inputId=\"service\"\n              options={serviceOptions}\n              onOpenMenu={() => {\n                loadOptions('serviceName');\n              }}\n              isLoading={isLoading.serviceName}\n              value={serviceOptions?.find((v) => v?.value === query.serviceName) || undefined}\n              onChange={(v) => {\n                onChange({\n                  ...query,\n                  serviceName: v?.value || undefined,\n                });\n              }}\n              placeholder=\"Select a service\"\n              isClearable\n              onKeyDown={onKeyDown}\n              aria-label={'select-service-name'}\n              allowCustomValue={true}\n            />\n          </InlineField>\n        </InlineFieldRow>\n        <InlineFieldRow>\n          <InlineField label=\"Span Name\" labelWidth={14} grow>\n            <Select\n              inputId=\"spanName\"\n              options={spanOptions}\n              onOpenMenu={() => {\n                loadOptions('spanName');\n              }}\n              isLoading={isLoading.spanName}\n              onChange={onSpanNameChange}\n              placeholder=\"Select a span\"\n              isClearable\n              onKeyDown={onKeyDown}\n              aria-label={'select-span-name'}\n              allowCustomValue={true}\n            />\n          </InlineField>\n        </InlineFieldRow>\n        <InlineFieldRow>\n          <InlineField label=\"Tags\" labelWidth={14} grow tooltip=\"Values should be in logfmt.\">\n            <QueryField\n              additionalPlugins={plugins}\n              query={query.search}\n              onTypeahead={onTypeahead}\n              onBlur={onBlur}\n              onChange={(value) => {\n                onChange({\n                  ...query,\n                  search: value,\n                });\n              }}\n              placeholder=\"http.status_code=200 error=true\"\n              cleanText={cleanText}\n              onRunQuery={onRunQuery}\n              syntaxLoaded={hasSyntaxLoaded}\n              portalOrigin=\"tempo\"\n            />\n          </InlineField>\n        </InlineFieldRow>\n        <InlineFieldRow>\n          <InlineField label=\"Min Duration\" invalid={!!inputErrors.minDuration} labelWidth={14} grow>\n            <Input\n              id=\"minDuration\"\n              value={query.minDuration || ''}\n              placeholder={durationPlaceholder}\n              onBlur={() => {\n                const templatedMinDuration = templateSrv.replace(query.minDuration ?? '');\n                if (query.minDuration && !isValidGoDuration(templatedMinDuration)) {\n                  setInputErrors({ ...inputErrors, minDuration: true });\n                } else {\n                  setInputErrors({ ...inputErrors, minDuration: false });\n                }\n              }}\n              onChange={(v) =>\n                onChange({\n                  ...query,\n                  minDuration: v.currentTarget.value,\n                })\n              }\n              onKeyDown={onKeyDown}\n            />\n          </InlineField>\n        </InlineFieldRow>\n        <InlineFieldRow>\n          <InlineField label=\"Max Duration\" invalid={!!inputErrors.maxDuration} labelWidth={14} grow>\n            <Input\n              id=\"maxDuration\"\n              value={query.maxDuration || ''}\n              placeholder={durationPlaceholder}\n              onBlur={() => {\n                const templatedMaxDuration = templateSrv.replace(query.maxDuration ?? '');\n                if (query.maxDuration && !isValidGoDuration(templatedMaxDuration)) {\n                  setInputErrors({ ...inputErrors, maxDuration: true });\n                } else {\n                  setInputErrors({ ...inputErrors, maxDuration: false });\n                }\n              }}\n              onChange={(v) =>\n                onChange({\n                  ...query,\n                  maxDuration: v.currentTarget.value,\n                })\n              }\n              onKeyDown={onKeyDown}\n            />\n          </InlineField>\n        </InlineFieldRow>\n        <InlineFieldRow>\n          <InlineField\n            label=\"Limit\"\n            invalid={!!inputErrors.limit}\n            labelWidth={14}\n            grow\n            tooltip=\"Maximum number of returned results\"\n          >\n            <Input\n              id=\"limit\"\n              value={query.limit || ''}\n              type=\"number\"\n              onChange={(v) => {\n                let limit = v.currentTarget.value ? parseInt(v.currentTarget.value, 10) : undefined;\n                if (limit && (!Number.isInteger(limit) || limit <= 0)) {\n                  setInputErrors({ ...inputErrors, limit: true });\n                } else {\n                  setInputErrors({ ...inputErrors, limit: false });\n                }\n\n                onChange({\n                  ...query,\n                  limit: v.currentTarget.value ? parseInt(v.currentTarget.value, 10) : undefined,\n                });\n              }}\n              onKeyDown={onKeyDown}\n            />\n          </InlineField>\n        </InlineFieldRow>\n      </div>\n      {error ? (\n        <Alert title=\"Unable to connect to Tempo search\" severity=\"info\" className={styles.alert}>\n          Please ensure that Tempo is configured with search enabled. If you would like to hide this tab, you can\n          configure it in the <a href={`/datasources/edit/${datasource.uid}`}>datasource settings</a>.\n        </Alert>\n      ) : null}\n    </>\n  );\n};\n\nexport default NativeSearch;\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    max-width: 500px;\n  `,\n  alert: css`\n    max-width: 75ch;\n    margin-top: ${theme.spacing(2)};\n  `,\n});\n","import { DataSourceApi } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\n\nexport async function getDS(uid?: string): Promise<DataSourceApi | undefined> {\n  if (!uid) {\n    return undefined;\n  }\n\n  const dsSrv = getDataSourceSrv();\n  try {\n    return await dsSrv.get(uid);\n  } catch (error) {\n    console.error('Failed to load data source', error);\n    return undefined;\n  }\n}\n","import { css } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\nimport useAsync from 'react-use/lib/useAsync';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { Alert, InlineField, InlineFieldRow, useStyles2 } from '@grafana/ui';\n\nimport { AdHocFilter } from '../../../../features/variables/adhoc/picker/AdHocFilter';\nimport { AdHocVariableFilter } from '../../../../features/variables/types';\nimport { PrometheusDatasource } from '../../prometheus/datasource';\nimport { TempoQuery } from '../types';\n\nimport { getDS } from './utils';\n\nexport function ServiceGraphSection({\n  graphDatasourceUid,\n  query,\n  onChange,\n}: {\n  graphDatasourceUid?: string;\n  query: TempoQuery;\n  onChange: (value: TempoQuery) => void;\n}) {\n  const styles = useStyles2(getStyles);\n\n  const dsState = useAsync(() => getDS(graphDatasourceUid), [graphDatasourceUid]);\n\n  // Check if service graph metrics are being collected. If not, displays a warning\n  const [hasKeys, setHasKeys] = useState<boolean | undefined>(undefined);\n  useEffect(() => {\n    async function fn(ds: PrometheusDatasource) {\n      const keys = await ds.getTagKeys({\n        series: [\n          'traces_service_graph_request_server_seconds_sum',\n          'traces_service_graph_request_total',\n          'traces_service_graph_request_failed_total',\n        ],\n      });\n      setHasKeys(Boolean(keys.length));\n    }\n    if (!dsState.loading && dsState.value) {\n      fn(dsState.value as PrometheusDatasource);\n    }\n  }, [dsState]);\n\n  if (dsState.loading) {\n    return null;\n  }\n\n  const ds = dsState.value as PrometheusDatasource;\n\n  if (!graphDatasourceUid) {\n    return <div className=\"text-warning\">Please set up a service graph datasource in the datasource settings.</div>;\n  }\n\n  if (graphDatasourceUid && !ds) {\n    return (\n      <div className=\"text-warning\">\n        Service graph datasource is configured but the data source no longer exists. Please configure existing data\n        source to use the service graph functionality.\n      </div>\n    );\n  }\n  const filters = queryToFilter(query.serviceMapQuery || '');\n\n  return (\n    <div>\n      <InlineFieldRow>\n        <InlineField label=\"Filter\" labelWidth={14} grow>\n          <AdHocFilter\n            datasource={{ uid: graphDatasourceUid }}\n            filters={filters}\n            getTagKeysOptions={{\n              series: config.featureToggles.tempoApmTable\n                ? ['traces_service_graph_request_total', 'traces_spanmetrics_calls_total']\n                : ['traces_service_graph_request_total'],\n            }}\n            addFilter={(filter: AdHocVariableFilter) => {\n              onChange({\n                ...query,\n                serviceMapQuery: filtersToQuery([...filters, filter]),\n              });\n            }}\n            removeFilter={(index: number) => {\n              const newFilters = [...filters];\n              newFilters.splice(index, 1);\n              onChange({ ...query, serviceMapQuery: filtersToQuery(newFilters) });\n            }}\n            changeFilter={(index: number, filter: AdHocVariableFilter) => {\n              const newFilters = [...filters];\n              newFilters.splice(index, 1, filter);\n              onChange({ ...query, serviceMapQuery: filtersToQuery(newFilters) });\n            }}\n          />\n        </InlineField>\n      </InlineFieldRow>\n      {hasKeys === false ? (\n        <Alert title=\"No service graph data found\" severity=\"info\" className={styles.alert}>\n          Please ensure that service graph metrics are set up correctly according to the{' '}\n          <a\n            target=\"_blank\"\n            rel=\"noreferrer noopener\"\n            href=\"https://grafana.com/docs/tempo/next/grafana-agent/service-graphs/\"\n          >\n            Tempo documentation\n          </a>\n          .\n        </Alert>\n      ) : null}\n    </div>\n  );\n}\n\nfunction queryToFilter(query: string): AdHocVariableFilter[] {\n  let match;\n  let filters: AdHocVariableFilter[] = [];\n  const re = /([\\w_]+)(=|!=|<|>|=~|!~)\"(.*?)\"/g;\n  while ((match = re.exec(query)) !== null) {\n    filters.push({\n      key: match[1],\n      operator: match[2],\n      value: match[3],\n      condition: '',\n    });\n  }\n  return filters;\n}\n\nfunction filtersToQuery(filters: AdHocVariableFilter[]): string {\n  return `{${filters.map((f) => `${f.key}${f.operator}\"${f.value}\"`).join(',')}}`;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  alert: css`\n    max-width: 75ch;\n    margin-top: ${theme.spacing(2)};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\nimport useAsync from 'react-use/lib/useAsync';\n\nimport { QueryEditorProps, SelectableValue } from '@grafana/data';\nimport { config, reportInteraction } from '@grafana/runtime';\nimport {\n  FileDropzone,\n  InlineField,\n  InlineFieldRow,\n  InlineLabel,\n  QueryField,\n  RadioButtonGroup,\n  Themeable2,\n  withTheme2,\n} from '@grafana/ui';\n\nimport { LokiQueryField } from '../../loki/components/LokiQueryField';\nimport { LokiDatasource } from '../../loki/datasource';\nimport { LokiQuery } from '../../loki/types';\nimport { TempoDatasource } from '../datasource';\nimport { QueryEditor } from '../traceql/QueryEditor';\nimport { TempoQuery, TempoQueryType } from '../types';\n\nimport NativeSearch from './NativeSearch';\nimport { ServiceGraphSection } from './ServiceGraphSection';\nimport { getDS } from './utils';\n\ninterface Props extends QueryEditorProps<TempoDatasource, TempoQuery>, Themeable2 {}\n\nconst DEFAULT_QUERY_TYPE: TempoQueryType = 'traceId';\n\nclass TempoQueryFieldComponent extends React.PureComponent<Props> {\n  constructor(props: Props) {\n    super(props);\n  }\n\n  // Set the default query type when the component mounts.\n  // Also do this if queryType is 'clear' (which is the case when the user changes the query type)\n  // otherwise if the user changes the query type and refreshes the page, no query type will be selected\n  // which is inconsistent with how the UI was originally when they selected the Tempo data source.\n  async componentDidMount() {\n    if (!this.props.query.queryType || this.props.query.queryType === 'clear') {\n      this.props.onChange({\n        ...this.props.query,\n        queryType: DEFAULT_QUERY_TYPE,\n      });\n    }\n  }\n\n  onChangeLinkedQuery = (value: LokiQuery) => {\n    const { query, onChange } = this.props;\n    onChange({\n      ...query,\n      linkedQuery: { ...value, refId: 'linked' },\n    });\n  };\n\n  onRunLinkedQuery = () => {\n    this.props.onRunQuery();\n  };\n\n  onClearResults = () => {\n    // Run clear query to clear results\n    const { onChange, query, onRunQuery } = this.props;\n    onChange({\n      ...query,\n      queryType: 'clear',\n    });\n    onRunQuery();\n  };\n\n  render() {\n    const { query, onChange, datasource, app } = this.props;\n\n    const logsDatasourceUid = datasource.getLokiSearchDS();\n\n    const graphDatasourceUid = datasource.serviceMap?.datasourceUid;\n\n    const queryTypeOptions: Array<SelectableValue<TempoQueryType>> = [\n      { value: 'traceId', label: 'TraceID' },\n      { value: 'upload', label: 'JSON File' },\n      { value: 'serviceMap', label: 'Service Graph' },\n    ];\n\n    if (!datasource?.search?.hide) {\n      queryTypeOptions.unshift({ value: 'nativeSearch', label: 'Search' });\n    }\n\n    if (logsDatasourceUid) {\n      if (datasource?.search?.hide) {\n        // Place at beginning as Search if no native search\n        queryTypeOptions.unshift({ value: 'search', label: 'Search' });\n      } else {\n        // Place at end as Loki Search if native search is enabled\n        queryTypeOptions.push({ value: 'search', label: 'Loki Search' });\n      }\n    }\n\n    if (config.featureToggles.traceqlEditor) {\n      queryTypeOptions.push({ value: 'traceql', label: 'TraceQL' });\n    }\n\n    return (\n      <>\n        <InlineFieldRow>\n          <InlineField label=\"Query type\">\n            <RadioButtonGroup<TempoQueryType>\n              options={queryTypeOptions}\n              value={query.queryType}\n              onChange={(v) => {\n                reportInteraction('grafana_traces_query_type_changed', {\n                  datasourceType: 'tempo',\n                  app: app ?? '',\n                  newQueryType: v,\n                  previousQueryType: query.queryType ?? '',\n                });\n\n                this.onClearResults();\n\n                onChange({\n                  ...query,\n                  queryType: v,\n                });\n              }}\n              size=\"md\"\n            />\n          </InlineField>\n        </InlineFieldRow>\n        {query.queryType === 'search' && (\n          <SearchSection\n            logsDatasourceUid={logsDatasourceUid}\n            query={query}\n            onRunQuery={this.onRunLinkedQuery}\n            onChange={this.onChangeLinkedQuery}\n          />\n        )}\n        {query.queryType === 'nativeSearch' && (\n          <NativeSearch\n            datasource={this.props.datasource}\n            query={query}\n            onChange={onChange}\n            onBlur={this.props.onBlur}\n            onRunQuery={this.props.onRunQuery}\n          />\n        )}\n        {query.queryType === 'upload' && (\n          <div className={css({ padding: this.props.theme.spacing(2) })}>\n            <FileDropzone\n              options={{ multiple: false }}\n              onLoad={(result) => {\n                this.props.datasource.uploadedJson = result;\n                this.props.onRunQuery();\n              }}\n            />\n          </div>\n        )}\n        {query.queryType === 'traceId' && (\n          <InlineFieldRow>\n            <InlineField label=\"Trace ID\" labelWidth={14} grow>\n              <QueryField\n                query={query.query}\n                onChange={(val) => {\n                  onChange({\n                    ...query,\n                    query: val,\n                    queryType: 'traceId',\n                    linkedQuery: undefined,\n                  });\n                }}\n                onBlur={this.props.onBlur}\n                onRunQuery={this.props.onRunQuery}\n                placeholder={'Enter a Trace ID (run with Shift+Enter)'}\n                portalOrigin=\"tempo\"\n              />\n            </InlineField>\n          </InlineFieldRow>\n        )}\n        {query.queryType === 'serviceMap' && (\n          <ServiceGraphSection graphDatasourceUid={graphDatasourceUid} query={query} onChange={onChange} />\n        )}\n        {query.queryType === 'traceql' && (\n          <QueryEditor\n            datasource={this.props.datasource}\n            query={query}\n            onRunQuery={this.props.onRunQuery}\n            onChange={onChange}\n          />\n        )}\n      </>\n    );\n  }\n}\n\ninterface SearchSectionProps {\n  logsDatasourceUid?: string;\n  onChange: (value: LokiQuery) => void;\n  onRunQuery: () => void;\n  query: TempoQuery;\n}\nfunction SearchSection({ logsDatasourceUid, onChange, onRunQuery, query }: SearchSectionProps) {\n  const dsState = useAsync(() => getDS(logsDatasourceUid), [logsDatasourceUid]);\n  if (dsState.loading) {\n    return null;\n  }\n\n  const ds = dsState.value as LokiDatasource;\n\n  if (ds) {\n    return (\n      <>\n        <InlineLabel>Tempo uses {ds.name} to find traces.</InlineLabel>\n        <LokiQueryField\n          datasource={ds}\n          onChange={onChange}\n          onRunQuery={onRunQuery}\n          query={query.linkedQuery ?? ({ refId: 'linked' } as any)}\n          history={[]}\n        />\n      </>\n    );\n  }\n\n  if (!logsDatasourceUid) {\n    return <div className=\"text-warning\">Please set up a Loki search datasource in the datasource settings.</div>;\n  }\n\n  if (logsDatasourceUid && !ds) {\n    return (\n      <div className=\"text-warning\">\n        Loki search datasource is configured but the data source no longer exists. Please configure existing data source\n        to use the search.\n      </div>\n    );\n  }\n\n  return null;\n}\n\nexport const TempoQueryField = withTheme2(TempoQueryFieldComponent);\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { DataSourcePluginOptionsEditorProps, GrafanaTheme, updateDatasourcePluginJsonDataOption } from '@grafana/data';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { Button, InlineField, InlineFieldRow, useStyles } from '@grafana/ui';\n\nimport { TempoJsonData } from '../types';\n\ninterface Props extends DataSourcePluginOptionsEditorProps<TempoJsonData> {}\n\nexport function LokiSearchSettings({ options, onOptionsChange }: Props) {\n  const styles = useStyles(getStyles);\n\n  // Default to the trace to logs datasource if configured and loki search was enabled\n  // but only if jsonData.lokiSearch hasn't been set\n  const legacyDatasource =\n    options.jsonData.tracesToLogs?.lokiSearch !== false ? options.jsonData.tracesToLogs?.datasourceUid : undefined;\n  if (legacyDatasource && options.jsonData.lokiSearch === undefined) {\n    updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'lokiSearch', {\n      datasourceUid: legacyDatasource,\n    });\n  }\n\n  return (\n    <div className={css({ width: '100%' })}>\n      <h3 className=\"page-heading\">Loki Search</h3>\n\n      <div className={styles.infoText}>\n        Select a Loki datasource to search for traces. Derived fields must be configured in the Loki data source.\n      </div>\n\n      <InlineFieldRow className={styles.row}>\n        <InlineField tooltip=\"The Loki data source with the service graph data\" label=\"Data source\" labelWidth={26}>\n          <DataSourcePicker\n            inputId=\"loki-search-data-source-picker\"\n            pluginId=\"loki\"\n            current={options.jsonData.lokiSearch?.datasourceUid}\n            noDefault={true}\n            width={40}\n            onChange={(ds) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'lokiSearch', {\n                datasourceUid: ds.uid,\n              })\n            }\n          />\n        </InlineField>\n        {options.jsonData.lokiSearch?.datasourceUid ? (\n          <Button\n            type={'button'}\n            variant={'secondary'}\n            size={'sm'}\n            fill={'text'}\n            onClick={() => {\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'lokiSearch', {\n                datasourceUid: undefined,\n              });\n            }}\n          >\n            Clear\n          </Button>\n        ) : null}\n      </InlineFieldRow>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  infoText: css`\n    label: infoText;\n    padding-bottom: ${theme.spacing.md};\n    color: ${theme.colors.textSemiWeak};\n  `,\n\n  row: css`\n    label: row;\n    align-items: baseline;\n  `,\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { DataSourcePluginOptionsEditorProps, updateDatasourcePluginJsonDataOption } from '@grafana/data';\nimport { InlineField, InlineFieldRow, InlineSwitch, Input, useStyles } from '@grafana/ui';\n\nimport { TempoJsonData } from '../types';\n\ninterface Props extends DataSourcePluginOptionsEditorProps<TempoJsonData> {}\n\nexport function QuerySettings({ options, onOptionsChange }: Props) {\n  const styles = useStyles(getStyles);\n\n  return (\n    <div className={styles.container}>\n      <h3 className=\"page-heading\">TraceID Query</h3>\n      <InlineField\n        label=\"Use time range in query\"\n        tooltip=\"The time range is ignored by default when querying by TraceID but can be used when there are performance issues or timeouts since it will narrow down the search to the defined range. Default is disabled.\"\n        labelWidth={26}\n      >\n        <InlineSwitch\n          id=\"enable-time-shift\"\n          value={options.jsonData.traceQuery?.timeShiftEnabled || false}\n          onChange={(event) => {\n            updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'traceQuery', {\n              ...options.jsonData.traceQuery,\n              timeShiftEnabled: event.currentTarget.checked,\n            });\n          }}\n        />\n      </InlineField>\n      <InlineFieldRow>\n        <InlineField\n          label=\"Time shift for start of search\"\n          labelWidth={26}\n          disabled={!options.jsonData.traceQuery?.timeShiftEnabled}\n          grow\n          tooltip=\"Shifts the start of the time range when searching by TraceID. This is needed as searching for traces can return traces that do not fully fall into the search time range, so we recommend using higher time shifts for longer traces. Default 30m (Time units can be used here, for example: 5s, 1m, 3h)\"\n        >\n          <Input\n            type=\"text\"\n            placeholder=\"30m\"\n            width={40}\n            onChange={(v) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'traceQuery', {\n                ...options.jsonData.traceQuery,\n                spanStartTimeShift: v.currentTarget.value,\n              })\n            }\n            value={options.jsonData.traceQuery?.spanStartTimeShift || ''}\n          />\n        </InlineField>\n      </InlineFieldRow>\n      <InlineFieldRow>\n        <InlineField\n          label=\"Time shift for end of search\"\n          labelWidth={26}\n          disabled={!options.jsonData.traceQuery?.timeShiftEnabled}\n          grow\n          tooltip=\"Shifts the end of the time range when searching by TraceID. This is needed as searching for traces can return traces that do not fully fall into the search time range, so we recommend using higher time shifts for longer traces. Default 30m (Time units can be used here, for example: 5s, 1m, 3h)\"\n        >\n          <Input\n            type=\"text\"\n            placeholder=\"30m\"\n            width={40}\n            onChange={(v) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'traceQuery', {\n                ...options.jsonData.traceQuery,\n                spanEndTimeShift: v.currentTarget.value,\n              })\n            }\n            value={options.jsonData.traceQuery?.spanEndTimeShift || ''}\n          />\n        </InlineField>\n      </InlineFieldRow>\n    </div>\n  );\n}\n\nconst getStyles = () => ({\n  container: css`\n    label: container;\n    width: 100%;\n  `,\n  row: css`\n    label: row;\n    align-items: baseline;\n  `,\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { DataSourcePluginOptionsEditorProps, updateDatasourcePluginJsonDataOption } from '@grafana/data';\nimport { InlineField, InlineFieldRow, InlineSwitch, useStyles } from '@grafana/ui';\n\nimport { TempoJsonData } from '../types';\n\ninterface Props extends DataSourcePluginOptionsEditorProps<TempoJsonData> {}\n\nexport function SearchSettings({ options, onOptionsChange }: Props) {\n  const styles = useStyles(getStyles);\n\n  return (\n    <div className={styles.container}>\n      <h3 className=\"page-heading\">Search</h3>\n      <InlineFieldRow className={styles.row}>\n        <InlineField tooltip=\"Removes the Search tab from the Tempo query editor.\" label=\"Hide search\" labelWidth={26}>\n          <InlineSwitch\n            id=\"hideSearch\"\n            value={options.jsonData.search?.hide}\n            onChange={(event: React.SyntheticEvent<HTMLInputElement>) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'search', {\n                ...options.jsonData.search,\n                hide: event.currentTarget.checked,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n    </div>\n  );\n}\n\nconst getStyles = () => ({\n  container: css`\n    label: container;\n    width: 100%;\n  `,\n  row: css`\n    label: row;\n    align-items: baseline;\n  `,\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { DataSourcePluginOptionsEditorProps, GrafanaTheme, updateDatasourcePluginJsonDataOption } from '@grafana/data';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { Button, InlineField, InlineFieldRow, useStyles } from '@grafana/ui';\n\nimport { TempoJsonData } from '../types';\n\ninterface Props extends DataSourcePluginOptionsEditorProps<TempoJsonData> {}\n\nexport function ServiceGraphSettings({ options, onOptionsChange }: Props) {\n  const styles = useStyles(getStyles);\n\n  return (\n    <div className={css({ width: '100%' })}>\n      <h3 className=\"page-heading\">Service Graph</h3>\n\n      <div className={styles.infoText}>\n        To allow querying service graph data you have to select a Prometheus instance where the data is stored.\n      </div>\n\n      <InlineFieldRow className={styles.row}>\n        <InlineField\n          tooltip=\"The Prometheus data source with the service graph data\"\n          label=\"Data source\"\n          labelWidth={26}\n        >\n          <DataSourcePicker\n            inputId=\"service-graph-data-source-picker\"\n            pluginId=\"prometheus\"\n            current={options.jsonData.serviceMap?.datasourceUid}\n            noDefault={true}\n            width={40}\n            onChange={(ds) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'serviceMap', {\n                datasourceUid: ds.uid,\n              })\n            }\n          />\n        </InlineField>\n        {options.jsonData.serviceMap?.datasourceUid ? (\n          <Button\n            type={'button'}\n            variant={'secondary'}\n            size={'sm'}\n            fill={'text'}\n            onClick={() => {\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'serviceMap', {\n                datasourceUid: undefined,\n              });\n            }}\n          >\n            Clear\n          </Button>\n        ) : null}\n      </InlineFieldRow>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  infoText: css`\n    label: infoText;\n    padding-bottom: ${theme.spacing.md};\n    color: ${theme.colors.textSemiWeak};\n  `,\n\n  row: css`\n    label: row;\n    align-items: baseline;\n  `,\n});\n","import { DataSourcePlugin } from '@grafana/data';\n\nimport CheatSheet from './CheatSheet';\nimport { TempoQueryField } from './QueryEditor/QueryField';\nimport { ConfigEditor } from './configuration/ConfigEditor';\nimport { TempoDatasource } from './datasource';\n\nexport const plugin = new DataSourcePlugin(TempoDatasource)\n  .setQueryEditor(TempoQueryField)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditorHelp(CheatSheet);\n","import React from 'react';\n\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { DataSourceHttpSettings } from '@grafana/ui';\nimport { SpanBarSettings } from '@jaegertracing/jaeger-ui-components';\nimport { NodeGraphSettings } from 'app/core/components/NodeGraphSettings';\nimport { TraceToLogsSettings } from 'app/core/components/TraceToLogs/TraceToLogsSettings';\nimport { TraceToMetricsSettings } from 'app/core/components/TraceToMetrics/TraceToMetricsSettings';\n\nimport { LokiSearchSettings } from './LokiSearchSettings';\nimport { QuerySettings } from './QuerySettings';\nimport { SearchSettings } from './SearchSettings';\nimport { ServiceGraphSettings } from './ServiceGraphSettings';\n\nexport type Props = DataSourcePluginOptionsEditorProps;\n\nexport const ConfigEditor = ({ options, onOptionsChange }: Props) => {\n  return (\n    <>\n      <DataSourceHttpSettings\n        defaultUrl=\"http://tempo\"\n        dataSourceConfig={options}\n        showAccessOptions={false}\n        onChange={onOptionsChange}\n      />\n\n      <div className=\"gf-form-group\">\n        <TraceToLogsSettings options={options} onOptionsChange={onOptionsChange} />\n      </div>\n\n      {config.featureToggles.traceToMetrics ? (\n        <div className=\"gf-form-group\">\n          <TraceToMetricsSettings options={options} onOptionsChange={onOptionsChange} />\n        </div>\n      ) : null}\n\n      <div className=\"gf-form-group\">\n        <ServiceGraphSettings options={options} onOptionsChange={onOptionsChange} />\n      </div>\n\n      <div className=\"gf-form-group\">\n        <SearchSettings options={options} onOptionsChange={onOptionsChange} />\n      </div>\n\n      <div className=\"gf-form-group\">\n        <NodeGraphSettings options={options} onOptionsChange={onOptionsChange} />\n      </div>\n\n      <div className=\"gf-form-group\">\n        <LokiSearchSettings options={options} onOptionsChange={onOptionsChange} />\n      </div>\n\n      <div className=\"gf-form-group\">\n        <QuerySettings options={options} onOptionsChange={onOptionsChange} />\n      </div>\n\n      <div className=\"gf-form-group\">\n        <SpanBarSettings options={options} onOptionsChange={onOptionsChange} />\n      </div>\n    </>\n  );\n};\n","import React from 'react';\n\nexport default function CheatSheet() {\n  return (\n    <div>\n      <h2 id=\"tempo-cheat-sheet\">Tempo Cheat Sheet</h2>\n      <p>\n        Tempo is a trace id lookup store. Enter a trace id in the above field and hit “Run Query” to retrieve your\n        trace. Tempo is generally paired with other datasources such as Loki or Prometheus to find traces.\n      </p>\n      <p>\n        Here are some{' '}\n        <a href=\"https://grafana.com/docs/tempo/latest/guides/instrumentation/\" target=\"blank\">\n          instrumentation examples\n        </a>{' '}\n        to get you started with trace discovery through logs and metrics (exemplars).\n      </p>\n    </div>\n  );\n}\n"],"names":["QueryOptionGroup","title","children","collapsedInfo","isOpen","toggleOpen","useToggle","styles","useStyles2","getStyles","Stack","gap","direction","className","header","onClick","toggle","name","description","map","x","i","body","theme","switchLabel","css","color","colors","text","secondary","cursor","fontSize","typography","bodySmall","primary","display","alignItems","background","emphasize","flexGrow","overflow","fontWeight","fontWeightMedium","margin","paddingLeft","spacing","paddingTop","flexWrap","marginRight","defaultQuery","SpanKind","TempoLanguageProvider","LanguageProvider","constructor","datasource","initialValues","super","async","url","params","res","metadataRequest","data","this","startTask","fetchTags","then","tags","value","suggestions","query","endText","getText","indexOf","getTagValueCompletionItems","getTagsCompletionItems","length","push","label","items","tag","Object","assign","response","request","tagNames","split","tagName","tagValues","tagValue","insertText","options","v","mockedSearchResponse","traces","attributes","job","error","tracesCount","Math","random","attr","floor","startTime","Date","now","t","traceID","uuidv4","replace","substring","rootServiceName","rootTraceName","startTimeUnixNano","toString","durationMs","spanSets","spanAttributes","k","newAttr","spans","j","traceId","spanId","endTimeUnixNano","kind","INTERNAL","metrics","inspectedTraces","inspectedBytes","TempoDatasource","DataSourceWithBackend","instanceSettings","templateSrv","getTemplateSrv","legacyLogsDatasourceUid","tracesToLogs","lokiSearch","undefined","datasourceUid","jsonData","serviceMap","search","nodeGraph","traceQuery","languageProvider","subQueries","filteredTargets","targets","filter","target","hide","groupBy","queryType","clear","of","state","LoadingState","logsDatasourceUid","getLokiSearchDS","reportInteraction","datasourceType","app","linkedQueryExpr","linkedQuery","expr","dsSrv","getDatasourceSrv","from","get","pipe","mergeMap","linkedDatasource","linkedRequest","traceLinkMatcher","derivedFields","field","uid","matcherRegex","transformTraceList","throwError","Error","nativeSearch","serviceName","spanName","resultLimit","limit","timeRange","range","unix","endTime","to","applyVariables","scopedVars","searchQuery","buildSearchQuery","_request","createTableFrameFromSearch","catchError","message","traceql","createTableFrameFromTraceQlQuery","upload","uploadedJson","JSON","parse","isTraceData","batches","isServiceGraphData","Array","isArray","some","df","meta","preferredVisualisationType","transformFromOTEL","enabled","serviceMapQuery","dsId","tempoDsUid","config","concatMap","result","serviceMapResponse","serviceMapRequest","makePromServiceMapRequest","makeApmRequest","buildExpr","rateMetric","defaultTableFilter","queryPrometheus","toArray","responses","errorRes","find","rateQuery","rateResponse","tempoDatasourceUid","apmMetrics","errorRateBySpanName","durationsBySpanName","spanNames","fields","values","errorRateMetric","join","metric","durationMetric","errorAndDurationResponse","apmTable","secondResponse","rate","refId","errorRate","duration","includes","filterable","links","makePromLink","buildLinkExpr","decimals","labels","mode","custom","displayMode","errorRateNames","errorRateValues","errorRateObj","index","getRateAlignedValues","durationObj","d","delimiter","unit","type","FieldType","makeTempoLink","getApmTable","errorAndDurationQuery","handleTraceIdQuery","merge","applyTemplateVariables","interpolateVariablesInQueries","queries","getRef","expandedQuery","minDuration","maxDuration","validTargets","trim","EMPTY","traceRequest","traceIdQueryRequest","transformTrace","timeShiftEnabled","subtract","rangeUtil","spanStartTimeShift","add","spanEndTimeShift","dateTime","raw","lastValueFrom","method","hideFromInspector","apiUrl","serializeParams","req","getBackendSrv","fetch","headers","ok","status","getQueryDisplayText","key","hasOwnProperty","startCase","tempoQuery","pick","pickBy","identity","isValidGoDuration","Number","isInteger","start","end","ds","nodes","edges","mapPromMetricsToServiceMap","getFieldConfig","instant","internal","exemplar","datasourceName","getDataSourceSettingsByUid","targetField","tempoField","sourceField","totalsMetric","histogramMetric","failedMetric","serviceMapMetrics","format","extraParams","metricParams","concat","item","rateResp","objToAlign","rateNames","keys","TempoQueryBuilderOptions","React","onChange","EditorRow","EditorField","tooltip","AutoSizeInput","placeholder","min","defaultValue","onCommitChange","e","parseInt","currentTarget","displayName","CompletionProvider","props","provideCompletionItems","model","position","monaco","editor","getModel","id","offset","word","getWordAtPosition","Range","lift","startLineNumber","lineNumber","endLineNumber","startColumn","endColumn","fromPositions","positionClone","column","getOffsetAt","getRangeAndOffset","situation","getSituation","getValue","getCompletions","maxIndexDigits","getMonacoCompletionItemKind","sortText","padStart","setTags","forEach","Set","overrideTagName","cachedValues","getOptions","getScopesCompletions","getIntrinsicsCompletions","getTagsCompletions","operators","getTagValues","val","betweenQuotes","logicalOps","prepend","sort","a","b","localeCompare","sensitivity","intrinsics","scopes","getSituationInSpanSet","textUntilCaret","fullRegex","RegExp","source","matched","match","nameFull","groups","op","nameMatched","w","post_dot","space1","space3","open_quote","close_quote","reduce","lastIndexOf","languages","CompletionItemKind","Enum","Keyword","Operator","EnumMember","Class","languageDefinition","extensions","aliases","mimetypes","def","language","ignoreCase","defaultToken","tokenPostfix","keywords","symbols","escapes","digits","octaldigits","binarydigits","hexdigits","integersuffix","floatsuffix","tokenizer","root","cases","include","string_double","string_single","clauses","whitespace","languageConfiguration","wordPattern","brackets","autoClosingPairs","open","close","surroundingPairs","folding","TraceQLEditor","onRunQuery","setupAutocompleteFn","providerRef","useRef","useEffect","getTags","current","dispatch","notifyApp","createErrorNotification","autocompleteDisposeFun","dispose","registerCompletionItemProvider","langId","useAutocomplete","CodeEditor","onBlur","height","containerStyles","queryField","monacoOptions","lineNumbers","overviewRulerLanes","renderLineHighlight","scrollbar","vertical","verticalScrollbarSize","horizontal","horizontalScrollbarSize","scrollBeyondLastLine","wordWrap","onBeforeEditorMount","ensureTraceQL","onEditorDidMount","addAction","keybindings","KeyMod","Shift","KeyCode","Enter","contextMenuGroupId","contextMenuOrder","run","setupActions","traceqlSetupDone","register","setMonarchTokensProvider","setLanguageConfiguration","shape","borderRadius","components","input","borderColor","QueryEditor","defaults","InlineLabel","rel","href","optionsContainer","PRISM_LANGUAGE","durationPlaceholder","plugins","BracesPlugin","SlatePrism","onlyIn","node","object","getSyntax","Prism","pattern","alias","operator","useMemo","hasSyntaxLoaded","setHasSyntaxLoaded","useState","serviceOptions","setServiceOptions","spanOptions","setSpanOptions","setError","inputErrors","setInputErrors","isLoading","setIsLoading","loadOptions","useCallback","lpName","prevValue","fuzzyMatch","found","isFetchError","services","Promise","all","containsTemplate","toOption","fetchOptions","onKeyDown","keyEvent","shiftKey","ctrlKey","container","InlineFieldRow","InlineField","labelWidth","grow","Select","inputId","onOpenMenu","isClearable","allowCustomValue","obj","QueryField","additionalPlugins","onTypeahead","typeahead","cleanText","splittedText","syntaxLoaded","portalOrigin","invalid","Input","I","templatedMinDuration","templatedMaxDuration","Alert","severity","alert","getDS","getDataSourceSrv","console","ServiceGraphSection","graphDatasourceUid","dsState","useAsync","hasKeys","setHasKeys","loading","getTagKeys","series","Boolean","fn","filters","re","exec","condition","queryToFilter","AdHocFilter","getTagKeysOptions","addFilter","filtersToQuery","removeFilter","newFilters","splice","changeFilter","f","TempoQueryFieldComponent","render","queryTypeOptions","unshift","RadioButtonGroup","newQueryType","previousQueryType","onClearResults","size","SearchSection","onRunLinkedQuery","onChangeLinkedQuery","padding","FileDropzone","multiple","onLoad","LokiQueryField","history","TempoQueryField","withTheme2","LokiSearchSettings","onOptionsChange","useStyles","legacyDatasource","updateDatasourcePluginJsonDataOption","width","infoText","row","DataSourcePicker","pluginId","noDefault","Button","variant","fill","md","textSemiWeak","QuerySettings","event","checked","disabled","SearchSettings","ServiceGraphSettings","plugin","DataSourcePlugin","setQueryEditor","setConfigEditor","DataSourceHttpSettings","defaultUrl","dataSourceConfig","showAccessOptions","TraceToLogsSettings","TraceToMetricsSettings","NodeGraphSettings","setQueryEditorHelp"],"sourceRoot":""}