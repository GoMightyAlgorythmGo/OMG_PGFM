{"version":3,"file":"ServiceAccountsPage.63175dcab765a2e43439.js","mappings":"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","sources":["webpack://grafana/./public/app/features/serviceaccounts/components/ServiceAccountsListItem.tsx","webpack://grafana/./public/app/features/serviceaccounts/ServiceAccountsListPage.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport React, { memo } from 'react';\n\nimport { GrafanaTheme2, OrgRole } from '@grafana/data';\nimport { Button, HorizontalGroup, Icon, IconButton, useStyles2 } from '@grafana/ui';\nimport { UserRolePicker } from 'app/core/components/RolePicker/UserRolePicker';\nimport { contextSrv } from 'app/core/core';\nimport { OrgRolePicker } from 'app/features/admin/OrgRolePicker';\nimport { AccessControlAction, Role, ServiceAccountDTO } from 'app/types';\n\ntype ServiceAccountListItemProps = {\n  serviceAccount: ServiceAccountDTO;\n  onRoleChange: (role: OrgRole, serviceAccount: ServiceAccountDTO) => void;\n  roleOptions: Role[];\n  onRemoveButtonClick: (serviceAccount: ServiceAccountDTO) => void;\n  onDisable: (serviceAccount: ServiceAccountDTO) => void;\n  onEnable: (serviceAccount: ServiceAccountDTO) => void;\n  onAddTokenClick: (serviceAccount: ServiceAccountDTO) => void;\n};\n\nconst getServiceAccountsAriaLabel = (name: string) => {\n  return `Edit service account's ${name} details`;\n};\n\nconst ServiceAccountListItem = memo(\n  ({\n    serviceAccount,\n    onRoleChange,\n    roleOptions,\n    onRemoveButtonClick,\n    onDisable,\n    onEnable,\n    onAddTokenClick,\n  }: ServiceAccountListItemProps) => {\n    const editUrl = `org/serviceaccounts/${serviceAccount.id}`;\n    const styles = useStyles2(getStyles);\n    const canUpdateRole = contextSrv.hasPermissionInMetadata(AccessControlAction.ServiceAccountsWrite, serviceAccount);\n    const displayRolePicker =\n      contextSrv.hasPermission(AccessControlAction.ActionRolesList) &&\n      contextSrv.hasPermission(AccessControlAction.ActionUserRolesList);\n\n    return (\n      <tr key={serviceAccount.id} className={cx({ [styles.disabled]: serviceAccount.isDisabled })}>\n        <td className=\"width-4 text-center link-td\">\n          <a href={editUrl} aria-label={getServiceAccountsAriaLabel(serviceAccount.name)}>\n            <img\n              className=\"filter-table__avatar\"\n              src={serviceAccount.avatarUrl}\n              alt={`Avatar for user ${serviceAccount.name}`}\n            />\n          </a>\n        </td>\n        <td className=\"link-td max-width-10\">\n          <a\n            className=\"ellipsis\"\n            href={editUrl}\n            title={serviceAccount.name}\n            aria-label={getServiceAccountsAriaLabel(serviceAccount.name)}\n          >\n            {serviceAccount.name}\n          </a>\n        </td>\n        <td className=\"link-td max-width-10\">\n          <a\n            className={styles.accountId}\n            href={editUrl}\n            title={serviceAccount.login}\n            aria-label={getServiceAccountsAriaLabel(serviceAccount.name)}\n          >\n            {serviceAccount.login}\n          </a>\n        </td>\n        {contextSrv.licensedAccessControlEnabled() ? (\n          <td>\n            {displayRolePicker && (\n              <UserRolePicker\n                userId={serviceAccount.id}\n                orgId={serviceAccount.orgId}\n                basicRole={serviceAccount.role}\n                onBasicRoleChange={(newRole) => onRoleChange(newRole, serviceAccount)}\n                roleOptions={roleOptions}\n                basicRoleDisabled={!canUpdateRole}\n                disabled={serviceAccount.isDisabled}\n              />\n            )}\n          </td>\n        ) : (\n          <td>\n            <OrgRolePicker\n              aria-label=\"Role\"\n              value={serviceAccount.role}\n              disabled={!canUpdateRole || serviceAccount.isDisabled}\n              onChange={(newRole) => onRoleChange(newRole, serviceAccount)}\n            />\n          </td>\n        )}\n        <td className=\"link-td max-width-10\">\n          <a\n            className=\"ellipsis\"\n            href={editUrl}\n            title=\"Tokens\"\n            aria-label={getServiceAccountsAriaLabel(serviceAccount.name)}\n          >\n            <div className={cx(styles.tokensInfo, { [styles.tokensInfoSecondary]: !serviceAccount.tokens })}>\n              <span>\n                <Icon name=\"key-skeleton-alt\"></Icon>\n              </span>\n              {serviceAccount.tokens || 'No tokens'}\n            </div>\n          </a>\n        </td>\n        <td>\n          <HorizontalGroup justify=\"flex-end\">\n            {contextSrv.hasPermission(AccessControlAction.ServiceAccountsWrite) && !serviceAccount.tokens && (\n              <Button onClick={() => onAddTokenClick(serviceAccount)} disabled={serviceAccount.isDisabled}>\n                Add token\n              </Button>\n            )}\n            {contextSrv.hasPermissionInMetadata(AccessControlAction.ServiceAccountsWrite, serviceAccount) &&\n              (serviceAccount.isDisabled ? (\n                <Button variant=\"primary\" onClick={() => onEnable(serviceAccount)}>\n                  Enable\n                </Button>\n              ) : (\n                <Button variant=\"secondary\" onClick={() => onDisable(serviceAccount)}>\n                  Disable\n                </Button>\n              ))}\n            {contextSrv.hasPermissionInMetadata(AccessControlAction.ServiceAccountsDelete, serviceAccount) && (\n              <IconButton\n                className={styles.deleteButton}\n                name=\"trash-alt\"\n                size=\"md\"\n                onClick={() => onRemoveButtonClick(serviceAccount)}\n                aria-label={`Delete service account ${serviceAccount.name}`}\n              />\n            )}\n          </HorizontalGroup>\n        </td>\n      </tr>\n    );\n  }\n);\nServiceAccountListItem.displayName = 'ServiceAccountListItem';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    iconRow: css`\n      svg {\n        margin-left: ${theme.spacing(0.5)};\n      }\n    `,\n    accountId: cx(\n      'ellipsis',\n      css`\n        color: ${theme.colors.text.secondary};\n      `\n    ),\n    deleteButton: css`\n      color: ${theme.colors.text.secondary};\n    `,\n    tokensInfo: css`\n      span {\n        margin-right: ${theme.spacing(1)};\n      }\n    `,\n    tokensInfoSecondary: css`\n      color: ${theme.colors.text.secondary};\n    `,\n    disabled: css`\n      td a {\n        color: ${theme.colors.text.secondary};\n      }\n    `,\n  };\n};\n\nexport default ServiceAccountListItem;\n","import { css, cx } from '@emotion/css';\nimport pluralize from 'pluralize';\nimport React, { useEffect, useState } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { GrafanaTheme2, OrgRole } from '@grafana/data';\nimport { Alert, ConfirmModal, FilterInput, Icon, LinkButton, RadioButtonGroup, Tooltip, useStyles2 } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { Page } from 'app/core/components/Page/Page';\nimport PageLoader from 'app/core/components/PageLoader/PageLoader';\nimport { contextSrv } from 'app/core/core';\nimport { StoreState, ServiceAccountDTO, AccessControlAction, ServiceAccountStateFilter } from 'app/types';\n\nimport { CreateTokenModal, ServiceAccountToken } from './components/CreateTokenModal';\nimport ServiceAccountListItem from './components/ServiceAccountsListItem';\nimport {\n  changeQuery,\n  fetchACOptions,\n  fetchServiceAccounts,\n  deleteServiceAccount,\n  updateServiceAccount,\n  changeStateFilter,\n  createServiceAccountToken,\n  getApiKeysMigrationStatus,\n  getApiKeysMigrationInfo,\n  closeApiKeysMigrationInfo,\n} from './state/actions';\n\ninterface OwnProps {}\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    ...state.serviceAccounts,\n  };\n}\n\nconst mapDispatchToProps = {\n  changeQuery,\n  fetchACOptions,\n  fetchServiceAccounts,\n  deleteServiceAccount,\n  updateServiceAccount,\n  changeStateFilter,\n  createServiceAccountToken,\n  getApiKeysMigrationStatus,\n  getApiKeysMigrationInfo,\n  closeApiKeysMigrationInfo,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport const ServiceAccountsListPageUnconnected = ({\n  serviceAccounts,\n  isLoading,\n  roleOptions,\n  query,\n  serviceAccountStateFilter,\n  apiKeysMigrated,\n  showApiKeysMigrationInfo,\n  changeQuery,\n  fetchACOptions,\n  fetchServiceAccounts,\n  deleteServiceAccount,\n  updateServiceAccount,\n  changeStateFilter,\n  createServiceAccountToken,\n  getApiKeysMigrationStatus,\n  getApiKeysMigrationInfo,\n  closeApiKeysMigrationInfo,\n}: Props): JSX.Element => {\n  const styles = useStyles2(getStyles);\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  const [isRemoveModalOpen, setIsRemoveModalOpen] = useState(false);\n  const [isDisableModalOpen, setIsDisableModalOpen] = useState(false);\n  const [newToken, setNewToken] = useState('');\n  const [currentServiceAccount, setCurrentServiceAccount] = useState<ServiceAccountDTO | null>(null);\n\n  useEffect(() => {\n    fetchServiceAccounts({ withLoadingIndicator: true });\n    getApiKeysMigrationStatus();\n    getApiKeysMigrationInfo();\n    if (contextSrv.licensedAccessControlEnabled()) {\n      fetchACOptions();\n    }\n  }, [fetchACOptions, fetchServiceAccounts, getApiKeysMigrationStatus, getApiKeysMigrationInfo]);\n\n  const noServiceAccountsCreated =\n    serviceAccounts.length === 0 && serviceAccountStateFilter === ServiceAccountStateFilter.All && !query;\n\n  const onRoleChange = async (role: OrgRole, serviceAccount: ServiceAccountDTO) => {\n    const updatedServiceAccount = { ...serviceAccount, role: role };\n    updateServiceAccount(updatedServiceAccount);\n    if (contextSrv.licensedAccessControlEnabled()) {\n      fetchACOptions();\n    }\n  };\n\n  const onQueryChange = (value: string) => {\n    changeQuery(value);\n  };\n\n  const onStateFilterChange = (value: ServiceAccountStateFilter) => {\n    changeStateFilter(value);\n  };\n\n  const onRemoveButtonClick = (serviceAccount: ServiceAccountDTO) => {\n    setCurrentServiceAccount(serviceAccount);\n    setIsRemoveModalOpen(true);\n  };\n\n  const onServiceAccountRemove = async () => {\n    if (currentServiceAccount) {\n      deleteServiceAccount(currentServiceAccount.id);\n    }\n    onRemoveModalClose();\n  };\n\n  const onDisableButtonClick = (serviceAccount: ServiceAccountDTO) => {\n    setCurrentServiceAccount(serviceAccount);\n    setIsDisableModalOpen(true);\n  };\n\n  const onDisable = () => {\n    if (currentServiceAccount) {\n      updateServiceAccount({ ...currentServiceAccount, isDisabled: true });\n    }\n    onDisableModalClose();\n  };\n\n  const onEnable = (serviceAccount: ServiceAccountDTO) => {\n    updateServiceAccount({ ...serviceAccount, isDisabled: false });\n  };\n\n  const onTokenAdd = (serviceAccount: ServiceAccountDTO) => {\n    setCurrentServiceAccount(serviceAccount);\n    setIsAddModalOpen(true);\n  };\n\n  const onTokenCreate = async (token: ServiceAccountToken) => {\n    if (currentServiceAccount) {\n      createServiceAccountToken(currentServiceAccount.id, token, setNewToken);\n    }\n  };\n\n  const onAddModalClose = () => {\n    setIsAddModalOpen(false);\n    setCurrentServiceAccount(null);\n    setNewToken('');\n  };\n\n  const onRemoveModalClose = () => {\n    setIsRemoveModalOpen(false);\n    setCurrentServiceAccount(null);\n  };\n\n  const onDisableModalClose = () => {\n    setIsDisableModalOpen(false);\n    setCurrentServiceAccount(null);\n  };\n\n  const onMigrationInfoClose = () => {\n    closeApiKeysMigrationInfo();\n  };\n\n  const docsLink = (\n    <a\n      className=\"external-link\"\n      href=\"https://grafana.com/docs/grafana/latest/administration/service-accounts/\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      here.\n    </a>\n  );\n  const subTitle = (\n    <span>\n      Service accounts and their tokens can be used to authenticate against the Grafana API. Find out more {docsLink}\n    </span>\n  );\n\n  return (\n    <Page navId=\"serviceaccounts\" subTitle={subTitle}>\n      <Page.Contents>\n        {apiKeysMigrated && showApiKeysMigrationInfo && (\n          <Alert\n            title=\"API keys migrated to Service accounts. Your keys are now called tokens and live inside respective service\n          accounts. Learn more.\"\n            severity=\"success\"\n            onRemove={onMigrationInfoClose}\n          ></Alert>\n        )}\n        <Page.OldNavOnly>\n          <div className={styles.pageHeader}>\n            <h2>Service accounts</h2>\n            <div className={styles.apiKeyInfoLabel}>\n              <Tooltip\n                placement=\"bottom\"\n                interactive\n                content={<>API keys are now service accounts with tokens. Find out more {docsLink}</>}\n              >\n                <Icon name=\"question-circle\" />\n              </Tooltip>\n              <span>Looking for API keys?</span>\n            </div>\n          </div>\n        </Page.OldNavOnly>\n        <div className=\"page-action-bar\">\n          <div className=\"gf-form gf-form--grow\">\n            <FilterInput\n              placeholder=\"Search service account by name\"\n              value={query}\n              onChange={onQueryChange}\n              width={50}\n            />\n          </div>\n          <RadioButtonGroup\n            options={[\n              { label: 'All', value: ServiceAccountStateFilter.All },\n              { label: 'With expired tokens', value: ServiceAccountStateFilter.WithExpiredTokens },\n              { label: 'Disabled', value: ServiceAccountStateFilter.Disabled },\n            ]}\n            onChange={onStateFilterChange}\n            value={serviceAccountStateFilter}\n            className={styles.filter}\n          />\n          {!noServiceAccountsCreated && contextSrv.hasPermission(AccessControlAction.ServiceAccountsCreate) && (\n            <LinkButton href=\"org/serviceaccounts/create\" variant=\"primary\">\n              Add service account\n            </LinkButton>\n          )}\n        </div>\n        {isLoading && <PageLoader />}\n        {!isLoading && noServiceAccountsCreated && (\n          <>\n            <EmptyListCTA\n              title=\"You haven't created any service accounts yet.\"\n              buttonIcon=\"key-skeleton-alt\"\n              buttonLink=\"org/serviceaccounts/create\"\n              buttonTitle=\"Add service account\"\n              buttonDisabled={!contextSrv.hasPermission(AccessControlAction.ServiceAccountsCreate)}\n              proTip=\"Remember, you can provide specific permissions for API access to other applications.\"\n              proTipLink=\"\"\n              proTipLinkTitle=\"\"\n              proTipTarget=\"_blank\"\n            />\n          </>\n        )}\n\n        {!isLoading && serviceAccounts.length !== 0 && (\n          <>\n            <div className={cx(styles.table, 'admin-list-table')}>\n              <table className=\"filter-table filter-table--hover\">\n                <thead>\n                  <tr>\n                    <th></th>\n                    <th>Account</th>\n                    <th>ID</th>\n                    <th>Roles</th>\n                    <th>Tokens</th>\n                    <th style={{ width: '34px' }} />\n                  </tr>\n                </thead>\n                <tbody>\n                  {serviceAccounts.map((serviceAccount: ServiceAccountDTO) => (\n                    <ServiceAccountListItem\n                      serviceAccount={serviceAccount}\n                      key={serviceAccount.id}\n                      roleOptions={roleOptions}\n                      onRoleChange={onRoleChange}\n                      onRemoveButtonClick={onRemoveButtonClick}\n                      onDisable={onDisableButtonClick}\n                      onEnable={onEnable}\n                      onAddTokenClick={onTokenAdd}\n                    />\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </>\n        )}\n        {currentServiceAccount && (\n          <>\n            <ConfirmModal\n              isOpen={isRemoveModalOpen}\n              body={`Are you sure you want to delete '${currentServiceAccount.name}'${\n                !!currentServiceAccount.tokens\n                  ? ` and ${currentServiceAccount.tokens} accompanying ${pluralize(\n                      'token',\n                      currentServiceAccount.tokens\n                    )}`\n                  : ''\n              }?`}\n              confirmText=\"Delete\"\n              title=\"Delete service account\"\n              onConfirm={onServiceAccountRemove}\n              onDismiss={onRemoveModalClose}\n            />\n            <ConfirmModal\n              isOpen={isDisableModalOpen}\n              title=\"Disable service account\"\n              body={`Are you sure you want to disable '${currentServiceAccount.name}'?`}\n              confirmText=\"Disable service account\"\n              onConfirm={onDisable}\n              onDismiss={onDisableModalClose}\n            />\n            <CreateTokenModal\n              isOpen={isAddModalOpen}\n              token={newToken}\n              serviceAccountLogin={currentServiceAccount.login}\n              onCreateToken={onTokenCreate}\n              onClose={onAddModalClose}\n            />\n          </>\n        )}\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    table: css`\n      margin-top: ${theme.spacing(3)};\n    `,\n    filter: css`\n      margin: 0 ${theme.spacing(1)};\n    `,\n    row: css`\n      display: flex;\n      align-items: center;\n      height: 100% !important;\n\n      a {\n        padding: ${theme.spacing(0.5)} 0 !important;\n      }\n    `,\n    unitTooltip: css`\n      display: flex;\n      flex-direction: column;\n    `,\n    unitItem: css`\n      cursor: pointer;\n      padding: ${theme.spacing(0.5)} 0;\n      margin-right: ${theme.spacing(1)};\n    `,\n    disabled: css`\n      color: ${theme.colors.text.disabled};\n    `,\n    link: css`\n      color: inherit;\n      cursor: pointer;\n      text-decoration: underline;\n    `,\n    pageHeader: css`\n      display: flex;\n      margin-bottom: ${theme.spacing(2)};\n    `,\n    apiKeyInfoLabel: css`\n      margin-left: ${theme.spacing(1)};\n      line-height: 2.2;\n      flex-grow: 1;\n      color: ${theme.colors.text.secondary};\n\n      span {\n        padding: ${theme.spacing(0.5)};\n      }\n    `,\n    filterDelimiter: css`\n      flex-grow: 1;\n    `,\n  };\n};\n\nconst ServiceAccountsListPage = connector(ServiceAccountsListPageUnconnected);\nexport default ServiceAccountsListPage;\n"],"names":["getServiceAccountsAriaLabel","name","ServiceAccountListItem","memo","serviceAccount","onRoleChange","roleOptions","onRemoveButtonClick","onDisable","onEnable","onAddTokenClick","editUrl","id","styles","useStyles2","getStyles","canUpdateRole","contextSrv","AccessControlAction","displayRolePicker","className","cx","disabled","isDisabled","href","src","avatarUrl","alt","title","accountId","login","UserRolePicker","userId","orgId","basicRole","role","onBasicRoleChange","newRole","basicRoleDisabled","OrgRolePicker","value","onChange","tokensInfo","tokensInfoSecondary","tokens","Icon","justify","Button","onClick","variant","IconButton","deleteButton","size","displayName","theme","iconRow","css","spacing","colors","text","secondary","mapDispatchToProps","changeQuery","fetchACOptions","fetchServiceAccounts","deleteServiceAccount","updateServiceAccount","changeStateFilter","createServiceAccountToken","getApiKeysMigrationStatus","getApiKeysMigrationInfo","closeApiKeysMigrationInfo","connector","connect","state","serviceAccounts","ServiceAccountsListPageUnconnected","isLoading","query","serviceAccountStateFilter","apiKeysMigrated","showApiKeysMigrationInfo","isAddModalOpen","setIsAddModalOpen","useState","isRemoveModalOpen","setIsRemoveModalOpen","isDisableModalOpen","setIsDisableModalOpen","newToken","setNewToken","currentServiceAccount","setCurrentServiceAccount","useEffect","withLoadingIndicator","noServiceAccountsCreated","length","ServiceAccountStateFilter","async","updatedServiceAccount","onDisableButtonClick","onTokenAdd","onRemoveModalClose","onDisableModalClose","docsLink","target","rel","subTitle","Page","navId","Alert","severity","onRemove","pageHeader","apiKeyInfoLabel","Tooltip","placement","interactive","content","FilterInput","placeholder","width","RadioButtonGroup","options","label","filter","PageLoader","EmptyListCTA","buttonIcon","buttonLink","buttonTitle","buttonDisabled","proTip","proTipLink","proTipLinkTitle","proTipTarget","table","style","map","ConfirmModal","isOpen","body","pluralize","confirmText","onConfirm","onDismiss","CreateTokenModal","token","serviceAccountLogin","onCreateToken","onClose","row","unitTooltip","unitItem","link","filterDelimiter"],"sourceRoot":""}