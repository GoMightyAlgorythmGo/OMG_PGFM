{"version":3,"file":"postgresPlugin.0fe841f0c289ee1cf341.js","mappings":"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","sources":["webpack://grafana/./public/app/angular/AngularLocationWrapper.ts","webpack://grafana/./public/app/angular/panel/metrics_panel_ctrl.ts","webpack://grafana/./public/app/angular/panel/panel_ctrl.ts","webpack://grafana/./public/app/angular/panel/query_ctrl.ts","webpack://grafana/./public/app/features/plugins/sql/components/configuration/ConnectionLimits.tsx","webpack://grafana/./public/app/features/plugins/sql/components/configuration/TLSSecretsConfig.tsx","webpack://grafana/./public/app/plugins/datasource/postgres/types.ts","webpack://grafana/./public/app/plugins/datasource/postgres/postgres_query_model.ts","webpack://grafana/./public/app/plugins/datasource/postgres/response_parser.ts","webpack://grafana/./public/app/plugins/datasource/postgres/datasource.ts","webpack://grafana/./public/app/plugins/datasource/postgres/configuration/useAutoDetectFeatures.ts","webpack://grafana/./public/app/plugins/datasource/postgres/configuration/ConfigurationEditor.tsx","webpack://grafana/./public/app/plugins/datasource/postgres/meta_query.ts","webpack://grafana/./public/app/angular/components/sql_part/sql_part.ts","webpack://grafana/./public/app/plugins/datasource/postgres/sql_part.ts","webpack://grafana/./public/app/plugins/datasource/postgres/query_ctrl.ts","webpack://grafana/./public/app/plugins/datasource/postgres/module.ts","webpack://grafana/./public/app/plugins/sdk.ts","webpack://grafana/./.yarn/__virtual__/react-use-virtual-0c21d950b6/3/opt/drone/yarncache/react-use-npm-17.4.0-0ef4521544-0889da919b.zip/node_modules/react-use/esm/useCustomCompareEffect.js","webpack://grafana/./.yarn/__virtual__/react-use-virtual-0c21d950b6/3/opt/drone/yarncache/react-use-npm-17.4.0-0ef4521544-0889da919b.zip/node_modules/react-use/esm/misc/isDeepEqual.js","webpack://grafana/./.yarn/__virtual__/react-use-virtual-0c21d950b6/3/opt/drone/yarncache/react-use-npm-17.4.0-0ef4521544-0889da919b.zip/node_modules/react-use/esm/useDeepCompareEffect.js","webpack://grafana/../../opt/drone/yarncache/fast-deep-equal-npm-3.1.3-790edcfcf5-e21a9d8d84.zip/node_modules/fast-deep-equal/react.js"],"sourcesContent":["import { deprecationWarning, urlUtil } from '@grafana/data';\nimport { locationSearchToObject, locationService, navigationLogger } from '@grafana/runtime';\n\n// Ref: https://github.com/angular/angular.js/blob/ae8e903edf88a83fedd116ae02c0628bf72b150c/src/ng/location.js#L5\nconst DEFAULT_PORTS: Record<string, number> = { http: 80, https: 443, ftp: 21 };\n\nexport class AngularLocationWrapper {\n  constructor() {\n    this.absUrl = this.wrapInDeprecationWarning(this.absUrl);\n    this.hash = this.wrapInDeprecationWarning(this.hash);\n    this.host = this.wrapInDeprecationWarning(this.host);\n    this.path = this.wrapInDeprecationWarning(this.path);\n    this.port = this.wrapInDeprecationWarning(this.port, 'window.location');\n    this.protocol = this.wrapInDeprecationWarning(this.protocol, 'window.location');\n    this.replace = this.wrapInDeprecationWarning(this.replace);\n    this.search = this.wrapInDeprecationWarning(this.search);\n    this.state = this.wrapInDeprecationWarning(this.state);\n    this.url = this.wrapInDeprecationWarning(this.url);\n  }\n\n  wrapInDeprecationWarning(fn: Function, replacement?: string) {\n    let self = this;\n\n    return function wrapper() {\n      deprecationWarning('$location', fn.name, replacement || 'locationService');\n      return fn.apply(self, arguments);\n    };\n  }\n\n  absUrl(): string {\n    return `${window.location.origin}${this.url()}`;\n  }\n\n  hash(newHash?: string | null) {\n    navigationLogger('AngularLocationWrapper', false, 'Angular compat layer: hash');\n\n    if (!newHash) {\n      return locationService.getLocation().hash.slice(1);\n    } else {\n      throw new Error('AngularLocationWrapper method not implemented.');\n    }\n  }\n\n  host(): string {\n    return new URL(window.location.href).hostname;\n  }\n\n  path(pathname?: any) {\n    navigationLogger('AngularLocationWrapper', false, 'Angular compat layer: path');\n\n    const location = locationService.getLocation();\n\n    if (pathname !== undefined && pathname !== null) {\n      let parsedPath = String(pathname);\n      parsedPath = parsedPath.startsWith('/') ? parsedPath : `/${parsedPath}`;\n      const url = new URL(`${window.location.origin}${parsedPath}`);\n\n      locationService.push({\n        pathname: url.pathname,\n        search: url.search.length > 0 ? url.search : location.search,\n        hash: url.hash.length > 0 ? url.hash : location.hash,\n      });\n      return this;\n    }\n\n    if (pathname === null) {\n      locationService.push('/');\n      return this;\n    }\n\n    return location.pathname;\n  }\n\n  port(): number | null {\n    const url = new URL(window.location.href);\n    return parseInt(url.port, 10) || DEFAULT_PORTS[url.protocol] || null;\n  }\n\n  protocol(): string {\n    return new URL(window.location.href).protocol.slice(0, -1);\n  }\n\n  replace() {\n    throw new Error('AngularLocationWrapper method not implemented.');\n  }\n\n  search(search?: any, paramValue?: any) {\n    navigationLogger('AngularLocationWrapper', false, 'Angular compat layer: search');\n    if (!search) {\n      return locationService.getSearchObject();\n    }\n\n    if (search && arguments.length > 1) {\n      locationService.partial({\n        [search]: paramValue,\n      });\n\n      return this;\n    }\n\n    if (search) {\n      let newQuery;\n\n      if (typeof search === 'object') {\n        newQuery = { ...search };\n      } else {\n        newQuery = locationSearchToObject(search);\n      }\n\n      for (const key of Object.keys(newQuery)) {\n        // removing params with null | undefined\n        if (newQuery[key] === null || newQuery[key] === undefined) {\n          delete newQuery[key];\n        }\n      }\n\n      const updatedUrl = urlUtil.renderUrl(locationService.getLocation().pathname, newQuery);\n      locationService.push(updatedUrl);\n    }\n\n    return this;\n  }\n\n  state(state?: any) {\n    navigationLogger('AngularLocationWrapper', false, 'Angular compat layer: state');\n    throw new Error('AngularLocationWrapper method not implemented.');\n  }\n\n  url(newUrl?: any) {\n    navigationLogger('AngularLocationWrapper', false, 'Angular compat layer: url');\n\n    if (newUrl !== undefined) {\n      if (newUrl.startsWith('#')) {\n        locationService.push({ ...locationService.getLocation(), hash: newUrl });\n      } else if (newUrl.startsWith('?')) {\n        locationService.push({ ...locationService.getLocation(), search: newUrl });\n      } else if (newUrl.trim().length === 0) {\n        locationService.push('/');\n      } else {\n        locationService.push(newUrl);\n      }\n\n      return locationService;\n    }\n\n    const location = locationService.getLocation();\n    return `${location.pathname}${location.search}${location.hash}`;\n  }\n}\n","import { isArray } from 'lodash';\nimport { Unsubscribable } from 'rxjs';\n\nimport {\n  DataFrame,\n  DataQueryResponse,\n  DataSourceApi,\n  LegacyResponseData,\n  LoadingState,\n  PanelData,\n  PanelEvents,\n  TimeRange,\n  toDataFrameDTO,\n  toLegacyResponseData,\n} from '@grafana/data';\nimport { PanelCtrl } from 'app/angular/panel/panel_ctrl';\nimport { ContextSrv } from 'app/core/services/context_srv';\nimport { PanelModel } from 'app/features/dashboard/state';\nimport { applyPanelTimeOverrides } from 'app/features/dashboard/utils/panel';\n\nimport { PanelQueryRunner } from '../../features/query/state/PanelQueryRunner';\n\nclass MetricsPanelCtrl extends PanelCtrl {\n  declare datasource: DataSourceApi;\n  declare range: TimeRange;\n\n  contextSrv: ContextSrv;\n  datasourceSrv: any;\n  timeSrv: any;\n  templateSrv: any;\n  interval: any;\n  intervalMs: any;\n  resolution: any;\n  timeInfo?: string;\n  skipDataOnInit = false;\n  dataList: LegacyResponseData[] = [];\n  querySubscription?: Unsubscribable | null;\n  useDataFrames = false;\n  panelData?: PanelData;\n\n  constructor($scope: any, $injector: any) {\n    super($scope, $injector);\n\n    this.contextSrv = $injector.get('contextSrv');\n    this.datasourceSrv = $injector.get('datasourceSrv');\n    this.timeSrv = $injector.get('timeSrv');\n    this.templateSrv = $injector.get('templateSrv');\n    this.panel.datasource = this.panel.datasource || null;\n\n    this.events.on(PanelEvents.refresh, this.onMetricsPanelRefresh.bind(this));\n    this.events.on(PanelEvents.panelTeardown, this.onPanelTearDown.bind(this));\n    this.events.on(PanelEvents.componentDidMount, this.onMetricsPanelMounted.bind(this));\n  }\n\n  private onMetricsPanelMounted() {\n    const queryRunner = this.panel.getQueryRunner() as PanelQueryRunner;\n    this.querySubscription = queryRunner\n      .getData({ withTransforms: true, withFieldConfig: true })\n      .subscribe(this.panelDataObserver);\n  }\n\n  private onPanelTearDown() {\n    if (this.querySubscription) {\n      this.querySubscription.unsubscribe();\n      this.querySubscription = null;\n    }\n  }\n\n  private onMetricsPanelRefresh() {\n    // ignore fetching data if another panel is in fullscreen\n    if (this.otherPanelInFullscreenMode()) {\n      return;\n    }\n\n    // if we have snapshot data use that\n    if (this.panel.snapshotData) {\n      this.updateTimeRange();\n      let data = this.panel.snapshotData;\n      // backward compatibility\n      if (!isArray(data)) {\n        data = data.data;\n      }\n\n      this.panelData = {\n        state: LoadingState.Done,\n        series: data,\n        timeRange: this.range,\n      };\n\n      // Defer panel rendering till the next digest cycle.\n      // For some reason snapshot panels don't init at this time, so this helps to avoid rendering issues.\n      return this.$timeout(() => {\n        this.events.emit(PanelEvents.dataSnapshotLoad, data);\n      });\n    }\n\n    // clear loading/error state\n    delete this.error;\n    this.loading = true;\n\n    // load datasource service\n    return this.datasourceSrv\n      .get(this.panel.datasource, this.panel.scopedVars)\n      .then(this.issueQueries.bind(this))\n      .catch((err: any) => {\n        this.processDataError(err);\n      });\n  }\n\n  processDataError(err: any) {\n    // if canceled  keep loading set to true\n    if (err.cancelled) {\n      console.log('Panel request cancelled', err);\n      return;\n    }\n\n    this.error = err.message || 'Request Error';\n\n    if (err.data) {\n      if (err.data.message) {\n        this.error = err.data.message;\n      } else if (err.data.error) {\n        this.error = err.data.error;\n      }\n    }\n\n    this.angularDirtyCheck();\n  }\n\n  angularDirtyCheck() {\n    if (!this.$scope.$root.$$phase) {\n      this.$scope.$digest();\n    }\n  }\n\n  // Updates the response with information from the stream\n  panelDataObserver = {\n    next: (data: PanelData) => {\n      this.panelData = data;\n\n      if (data.state === LoadingState.Error) {\n        this.loading = false;\n        this.processDataError(data.error);\n      }\n\n      // Ignore data in loading state\n      if (data.state === LoadingState.Loading) {\n        this.loading = true;\n        this.angularDirtyCheck();\n        return;\n      }\n\n      if (data.request) {\n        const { timeInfo } = data.request;\n        if (timeInfo) {\n          this.timeInfo = timeInfo;\n        }\n      }\n\n      if (data.timeRange) {\n        this.range = data.timeRange;\n      }\n\n      if (this.useDataFrames) {\n        this.handleDataFrames(data.series);\n      } else {\n        // Make the results look as if they came directly from a <6.2 datasource request\n        const legacy = data.series.map((v) => toLegacyResponseData(v));\n        this.handleQueryResult({ data: legacy });\n      }\n\n      this.angularDirtyCheck();\n    },\n  };\n\n  updateTimeRange(datasource?: DataSourceApi) {\n    this.datasource = datasource || this.datasource;\n    this.range = this.timeSrv.timeRange();\n\n    const newTimeData = applyPanelTimeOverrides(this.panel, this.range);\n    this.timeInfo = newTimeData.timeInfo;\n    this.range = newTimeData.timeRange;\n  }\n\n  issueQueries(datasource: DataSourceApi) {\n    this.updateTimeRange(datasource);\n\n    this.datasource = datasource;\n\n    const panel = this.panel as PanelModel;\n    const queryRunner = panel.getQueryRunner();\n\n    return queryRunner.run({\n      datasource: panel.datasource,\n      queries: panel.targets,\n      panelId: panel.id,\n      dashboardId: this.dashboard.id,\n      timezone: this.dashboard.getTimezone(),\n      timeInfo: this.timeInfo,\n      timeRange: this.range,\n      maxDataPoints: panel.maxDataPoints || this.width,\n      minInterval: panel.interval,\n      scopedVars: panel.scopedVars,\n      cacheTimeout: panel.cacheTimeout,\n      transformations: panel.transformations,\n    });\n  }\n\n  handleDataFrames(data: DataFrame[]) {\n    this.loading = false;\n\n    if (this.dashboard && this.dashboard.snapshot) {\n      this.panel.snapshotData = data.map((frame) => toDataFrameDTO(frame));\n    }\n\n    try {\n      this.events.emit(PanelEvents.dataFramesReceived, data);\n    } catch (err) {\n      this.processDataError(err);\n    }\n  }\n\n  handleQueryResult(result: DataQueryResponse) {\n    this.loading = false;\n\n    if (this.dashboard.snapshot) {\n      this.panel.snapshotData = result.data;\n    }\n\n    if (!result || !result.data) {\n      console.log('Data source query result invalid, missing data field:', result);\n      result = { data: [] };\n    }\n\n    try {\n      this.events.emit(PanelEvents.dataReceived, result.data);\n    } catch (err) {\n      this.processDataError(err);\n    }\n  }\n}\n\nexport { MetricsPanelCtrl };\n","import { auto } from 'angular';\nimport { isString } from 'lodash';\n\nimport {\n  AppEvent,\n  PanelEvents,\n  PanelPluginMeta,\n  AngularPanelMenuItem,\n  EventBusExtended,\n  EventBusSrv,\n} from '@grafana/data';\nimport { AngularLocationWrapper } from 'app/angular/AngularLocationWrapper';\nimport config from 'app/core/config';\nimport { profiler } from 'app/core/core';\n\nimport { DashboardModel } from '../../features/dashboard/state';\n\nexport class PanelCtrl {\n  panel: any;\n  error: any;\n  declare dashboard: DashboardModel;\n  pluginName = '';\n  pluginId = '';\n  editorTabs: any;\n  $scope: any;\n  $injector: auto.IInjectorService;\n  $timeout: any;\n  editModeInitiated = false;\n  declare height: number;\n  declare width: number;\n  containerHeight: any;\n  events: EventBusExtended;\n  loading = false;\n  timing: any;\n  $location: AngularLocationWrapper;\n\n  constructor($scope: any, $injector: auto.IInjectorService) {\n    this.panel = this.panel ?? $scope.$parent.panel;\n    this.dashboard = this.dashboard ?? $scope.$parent.dashboard;\n    this.$injector = $injector;\n    this.$scope = $scope;\n    this.$timeout = $injector.get('$timeout');\n    this.editorTabs = [];\n    this.$location = new AngularLocationWrapper();\n    this.events = new EventBusSrv();\n    this.timing = {}; // not used but here to not break plugins\n\n    const plugin = config.panels[this.panel.type];\n    if (plugin) {\n      this.pluginId = plugin.id;\n      this.pluginName = plugin.name;\n    }\n\n    $scope.$on(PanelEvents.componentDidMount.name, () => this.panelDidMount());\n  }\n\n  panelDidMount() {\n    this.events.emit(PanelEvents.componentDidMount);\n    this.events.emit(PanelEvents.initialized);\n    this.dashboard.panelInitialized(this.panel);\n  }\n\n  renderingCompleted() {\n    profiler.renderingCompleted();\n  }\n\n  refresh() {\n    this.panel.refresh();\n  }\n\n  publishAppEvent<T>(event: AppEvent<T>, payload?: T) {\n    this.$scope.$root.appEvent(event, payload);\n  }\n\n  initEditMode() {\n    if (!this.editModeInitiated) {\n      this.editModeInitiated = true;\n      this.events.emit(PanelEvents.editModeInitialized);\n    }\n  }\n\n  addEditorTab(title: string, directiveFn: any, index?: number, icon?: any) {\n    const editorTab = { title, directiveFn, icon };\n\n    if (isString(directiveFn)) {\n      editorTab.directiveFn = () => {\n        return { templateUrl: directiveFn };\n      };\n    }\n\n    if (index) {\n      this.editorTabs.splice(index, 0, editorTab);\n    } else {\n      this.editorTabs.push(editorTab);\n    }\n  }\n\n  getExtendedMenu() {\n    const menu: AngularPanelMenuItem[] = [];\n    this.events.emit(PanelEvents.initPanelActions, menu);\n    return menu;\n  }\n\n  // Override in sub-class to add items before extended menu\n  async getAdditionalMenuItems(): Promise<any[]> {\n    return [];\n  }\n\n  otherPanelInFullscreenMode() {\n    return this.dashboard.otherPanelInFullscreen(this.panel);\n  }\n\n  render(payload?: any) {\n    this.events.emit(PanelEvents.render, payload);\n  }\n\n  // overriden from react\n  onPluginTypeChange = (plugin: PanelPluginMeta) => {};\n}\n","import { auto } from 'angular';\nimport { indexOf } from 'lodash';\n\nexport class QueryCtrl<T = any> {\n  target!: T;\n  datasource!: any;\n  panelCtrl!: any;\n  panel: any;\n  hasRawMode!: boolean;\n  error?: string | null;\n  isLastQuery: boolean;\n\n  constructor(public $scope: any, public $injector: auto.IInjectorService) {\n    this.panelCtrl = this.panelCtrl ?? $scope.ctrl.panelCtrl;\n    this.target = this.target ?? $scope.ctrl.target;\n    this.datasource = this.datasource ?? $scope.ctrl.datasource;\n    this.panel = this.panelCtrl?.panel ?? $scope.ctrl.panelCtrl.panel;\n    this.isLastQuery = indexOf(this.panel.targets, this.target) === this.panel.targets.length - 1;\n  }\n\n  refresh() {\n    this.panelCtrl.refresh();\n  }\n}\n","import React from 'react';\n\nimport { FieldSet, InlineField } from '@grafana/ui';\nimport { NumberInput } from 'app/core/components/OptionsUI/NumberInput';\n\nimport { SQLConnectionLimits } from '../../types';\n\ninterface Props<T> {\n  onPropertyChanged: (property: keyof T, value?: number) => void;\n  labelWidth: number;\n  jsonData: SQLConnectionLimits;\n}\n\nexport const ConnectionLimits = <T extends SQLConnectionLimits>(props: Props<T>) => {\n  const { onPropertyChanged, labelWidth, jsonData } = props;\n\n  const onJSONDataNumberChanged = (property: keyof SQLConnectionLimits) => {\n    return (number?: number) => {\n      if (onPropertyChanged) {\n        onPropertyChanged(property, number);\n      }\n    };\n  };\n\n  return (\n    <FieldSet label=\"Connection limits\">\n      <InlineField\n        tooltip={\n          <span>\n            The maximum number of open connections to the database.If <i>Max idle connections</i> is greater than 0 and\n            the <i>Max open connections</i> is less than <i>Max idle connections</i>, then\n            <i>Max idle connections</i> will be reduced to match the <i>Max open connections</i> limit. If set to 0,\n            there is no limit on the number of open connections.\n          </span>\n        }\n        labelWidth={labelWidth}\n        label=\"Max open\"\n      >\n        <NumberInput\n          placeholder=\"unlimited\"\n          value={jsonData.maxOpenConns}\n          onChange={onJSONDataNumberChanged('maxOpenConns')}\n        ></NumberInput>\n      </InlineField>\n      <InlineField\n        tooltip={\n          <span>\n            The maximum number of connections in the idle connection pool.If <i>Max open connections</i> is greater than\n            0 but less than the <i>Max idle connections</i>, then the <i>Max idle connections</i> will be reduced to\n            match the <i>Max open connections</i> limit. If set to 0, no idle connections are retained.\n          </span>\n        }\n        labelWidth={labelWidth}\n        label=\"Max idle\"\n      >\n        <NumberInput\n          placeholder=\"2\"\n          value={jsonData.maxIdleConns}\n          onChange={onJSONDataNumberChanged('maxIdleConns')}\n        ></NumberInput>\n      </InlineField>\n      <InlineField\n        tooltip=\"The maximum amount of time in seconds a connection may be reused. If set to 0, connections are reused forever.\"\n        labelWidth={labelWidth}\n        label=\"Max lifetime\"\n      >\n        <NumberInput\n          placeholder=\"14400\"\n          value={jsonData.connMaxLifetime}\n          onChange={onJSONDataNumberChanged('connMaxLifetime')}\n        ></NumberInput>\n      </InlineField>\n    </FieldSet>\n  );\n};\n","import React from 'react';\n\nimport {\n  DataSourceJsonData,\n  DataSourcePluginOptionsEditorProps,\n  KeyValue,\n  onUpdateDatasourceSecureJsonDataOption,\n  updateDatasourcePluginResetOption,\n} from '@grafana/data';\nimport { InlineField, SecretTextArea } from '@grafana/ui';\n\nexport interface Props<T extends DataSourceJsonData, S> {\n  editorProps: DataSourcePluginOptionsEditorProps<T, S>;\n  showCACert?: boolean;\n  showKeyPair?: boolean;\n  secureJsonFields?: KeyValue<Boolean>;\n  labelWidth?: number;\n}\n\nexport const TLSSecretsConfig = <T extends DataSourceJsonData, S extends {} = {}>(props: Props<T, S>) => {\n  const { labelWidth, editorProps, showCACert, showKeyPair = true } = props;\n  const { secureJsonFields } = editorProps.options;\n  return (\n    <>\n      {showKeyPair ? (\n        <InlineField\n          tooltip={\n            <span>To authenticate with an TLS/SSL client certificate, provide the client certificate here.</span>\n          }\n          labelWidth={labelWidth}\n          label=\"TLS/SSL Client Certificate\"\n        >\n          <SecretTextArea\n            placeholder=\"Begins with -----BEGIN CERTIFICATE-----\"\n            cols={45}\n            rows={7}\n            isConfigured={secureJsonFields && secureJsonFields.tlsClientCert}\n            onChange={onUpdateDatasourceSecureJsonDataOption(editorProps, 'tlsClientCert')}\n            onReset={() => {\n              updateDatasourcePluginResetOption(editorProps, 'tlsClientCert');\n            }}\n          ></SecretTextArea>\n        </InlineField>\n      ) : null}\n      {showCACert ? (\n        <InlineField\n          tooltip={<span>If the selected TLS/SSL mode requires a server root certificate, provide it here.</span>}\n          labelWidth={labelWidth}\n          label=\"TLS/SSL Root Certificate\"\n        >\n          <SecretTextArea\n            placeholder=\"Begins with -----BEGIN CERTIFICATE-----\"\n            cols={45}\n            rows={7}\n            isConfigured={secureJsonFields && secureJsonFields.tlsCACert}\n            onChange={onUpdateDatasourceSecureJsonDataOption(editorProps, 'tlsCACert')}\n            onReset={() => {\n              updateDatasourcePluginResetOption(editorProps, 'tlsCACert');\n            }}\n          ></SecretTextArea>\n        </InlineField>\n      ) : null}\n      {showKeyPair ? (\n        <InlineField\n          tooltip={<span>To authenticate with a client TLS/SSL certificate, provide the key here.</span>}\n          labelWidth={labelWidth}\n          label=\"TLS/SSL Client Key\"\n        >\n          <SecretTextArea\n            placeholder=\"Begins with -----BEGIN RSA PRIVATE KEY-----\"\n            cols={45}\n            rows={7}\n            isConfigured={secureJsonFields && secureJsonFields.tlsClientKey}\n            onChange={onUpdateDatasourceSecureJsonDataOption(editorProps, 'tlsClientKey')}\n            onReset={() => {\n              updateDatasourcePluginResetOption(editorProps, 'tlsClientKey');\n            }}\n          ></SecretTextArea>\n        </InlineField>\n      ) : null}\n    </>\n  );\n};\n","import { DataQuery, DataSourceJsonData } from '@grafana/data';\nimport { SQLConnectionLimits } from 'app/features/plugins/sql/types';\n\nexport enum PostgresTLSModes {\n  disable = 'disable',\n  require = 'require',\n  verifyCA = 'verify-ca',\n  verifyFull = 'verify-full',\n}\n\nexport enum PostgresTLSMethods {\n  filePath = 'file-path',\n  fileContent = 'file-content',\n}\nexport interface PostgresOptions extends DataSourceJsonData, SQLConnectionLimits {\n  url: string;\n  timeInterval: string;\n  database: string;\n  user: string;\n  tlsConfigurationMethod: PostgresTLSMethods;\n  sslmode: PostgresTLSModes;\n  sslRootCertFile: string;\n  sslCertFile: string;\n  sslKeyFile: string;\n  postgresVersion: number;\n  timescaledb: boolean;\n}\n\nexport interface SecureJsonData {\n  password: string;\n}\n\nexport type ResultFormat = 'time_series' | 'table';\nexport interface PostgresQuery extends DataQuery {\n  alias?: string;\n  format?: ResultFormat;\n  rawSql?: any;\n}\n\nexport interface PostgresQueryForInterpolation {\n  alias?: any;\n  format?: any;\n  rawSql?: any;\n  refId: any;\n  hide?: any;\n}\n","import { find, map } from 'lodash';\n\nimport { ScopedVars } from '@grafana/data';\nimport { TemplateSrv } from '@grafana/runtime';\n\nexport default class PostgresQueryModel {\n  target: any;\n  templateSrv: any;\n  scopedVars: any;\n\n  /** @ngInject */\n  constructor(target: any, templateSrv?: TemplateSrv, scopedVars?: ScopedVars) {\n    this.target = target;\n    this.templateSrv = templateSrv;\n    this.scopedVars = scopedVars;\n\n    target.format = target.format || 'time_series';\n    target.timeColumn = target.timeColumn || 'time';\n    target.metricColumn = target.metricColumn || 'none';\n\n    target.group = target.group || [];\n    target.where = target.where || [{ type: 'macro', name: '$__timeFilter', params: [] }];\n    target.select = target.select || [[{ type: 'column', params: ['value'] }]];\n\n    // handle pre query gui panels gracefully\n    if (!('rawQuery' in this.target)) {\n      if ('rawSql' in target) {\n        // pre query gui panel\n        target.rawQuery = true;\n      } else {\n        // new panel\n        target.rawQuery = false;\n      }\n    }\n\n    // give interpolateQueryStr access to this\n    this.interpolateQueryStr = this.interpolateQueryStr.bind(this);\n  }\n\n  // remove identifier quoting from identifier to use in metadata queries\n  unquoteIdentifier(value: string) {\n    if (value[0] === '\"' && value[value.length - 1] === '\"') {\n      return value.substring(1, value.length - 1).replace(/\"\"/g, '\"');\n    } else {\n      return value;\n    }\n  }\n\n  quoteIdentifier(value: any) {\n    return '\"' + String(value).replace(/\"/g, '\"\"') + '\"';\n  }\n\n  quoteLiteral(value: any) {\n    return \"'\" + String(value).replace(/'/g, \"''\") + \"'\";\n  }\n\n  escapeLiteral(value: any) {\n    return String(value).replace(/'/g, \"''\");\n  }\n\n  hasTimeGroup() {\n    return find(this.target.group, (g: any) => g.type === 'time');\n  }\n\n  hasMetricColumn() {\n    return this.target.metricColumn !== 'none';\n  }\n\n  interpolateQueryStr(value: any, variable: { multi: any; includeAll: any }, defaultFormatFn: any) {\n    // if no multi or include all do not regexEscape\n    if (!variable.multi && !variable.includeAll) {\n      return this.escapeLiteral(value);\n    }\n\n    if (typeof value === 'string') {\n      return this.quoteLiteral(value);\n    }\n\n    const escapedValues = map(value, this.quoteLiteral);\n    return escapedValues.join(',');\n  }\n\n  render(interpolate?: any) {\n    const target = this.target;\n\n    // new query with no table set yet\n    if (!this.target.rawQuery && !('table' in this.target)) {\n      return '';\n    }\n\n    if (!target.rawQuery) {\n      target.rawSql = this.buildQuery();\n    }\n\n    if (interpolate) {\n      return this.templateSrv.replace(target.rawSql, this.scopedVars, this.interpolateQueryStr);\n    } else {\n      return target.rawSql;\n    }\n  }\n\n  hasUnixEpochTimecolumn() {\n    return ['int4', 'int8', 'float4', 'float8', 'numeric'].indexOf(this.target.timeColumnType) > -1;\n  }\n\n  buildTimeColumn(alias = true) {\n    const timeGroup = this.hasTimeGroup();\n    let query;\n    let macro = '$__timeGroup';\n\n    if (timeGroup) {\n      let args;\n      if (timeGroup.params.length > 1 && timeGroup.params[1] !== 'none') {\n        args = timeGroup.params.join(',');\n      } else {\n        args = timeGroup.params[0];\n      }\n      if (this.hasUnixEpochTimecolumn()) {\n        macro = '$__unixEpochGroup';\n      }\n      if (alias) {\n        macro += 'Alias';\n      }\n      query = macro + '(' + this.target.timeColumn + ',' + args + ')';\n    } else {\n      query = this.target.timeColumn;\n      if (alias) {\n        query += ' AS \"time\"';\n      }\n    }\n\n    return query;\n  }\n\n  buildMetricColumn() {\n    if (this.hasMetricColumn()) {\n      return this.target.metricColumn + ' AS metric';\n    }\n\n    return '';\n  }\n\n  buildValueColumns() {\n    let query = '';\n    for (const column of this.target.select) {\n      query += ',\\n  ' + this.buildValueColumn(column);\n    }\n\n    return query;\n  }\n\n  buildValueColumn(column: any) {\n    let query = '';\n\n    const columnName: any = find(column, (g: any) => g.type === 'column');\n    query = columnName.params[0];\n\n    const aggregate: any = find(column, (g: any) => g.type === 'aggregate' || g.type === 'percentile');\n    const windows: any = find(column, (g: any) => g.type === 'window' || g.type === 'moving_window');\n\n    if (aggregate) {\n      const func = aggregate.params[0];\n      switch (aggregate.type) {\n        case 'aggregate':\n          if (func === 'first' || func === 'last') {\n            query = func + '(' + query + ',' + this.target.timeColumn + ')';\n          } else {\n            query = func + '(' + query + ')';\n          }\n          break;\n        case 'percentile':\n          query = func + '(' + aggregate.params[1] + ') WITHIN GROUP (ORDER BY ' + query + ')';\n          break;\n      }\n    }\n\n    if (windows) {\n      const overParts = [];\n      if (this.hasMetricColumn()) {\n        overParts.push('PARTITION BY ' + this.target.metricColumn);\n      }\n      overParts.push('ORDER BY ' + this.buildTimeColumn(false));\n\n      const over = overParts.join(' ');\n      let curr: string;\n      let prev: string;\n      switch (windows.type) {\n        case 'window':\n          switch (windows.params[0]) {\n            case 'delta':\n              curr = query;\n              prev = 'lag(' + curr + ') OVER (' + over + ')';\n              query = curr + ' - ' + prev;\n              break;\n            case 'increase':\n              curr = query;\n              prev = 'lag(' + curr + ') OVER (' + over + ')';\n              query = '(CASE WHEN ' + curr + ' >= ' + prev + ' THEN ' + curr + ' - ' + prev;\n              query += ' WHEN ' + prev + ' IS NULL THEN NULL ELSE ' + curr + ' END)';\n              break;\n            case 'rate':\n              let timeColumn = this.target.timeColumn;\n              if (aggregate) {\n                timeColumn = 'min(' + timeColumn + ')';\n              }\n\n              curr = query;\n              prev = 'lag(' + curr + ') OVER (' + over + ')';\n              query = '(CASE WHEN ' + curr + ' >= ' + prev + ' THEN ' + curr + ' - ' + prev;\n              query += ' WHEN ' + prev + ' IS NULL THEN NULL ELSE ' + curr + ' END)';\n              query += '/extract(epoch from ' + timeColumn + ' - lag(' + timeColumn + ') OVER (' + over + '))';\n              break;\n            default:\n              query = windows.params[0] + '(' + query + ') OVER (' + over + ')';\n              break;\n          }\n          break;\n        case 'moving_window':\n          query = windows.params[0] + '(' + query + ') OVER (' + over + ' ROWS ' + windows.params[1] + ' PRECEDING)';\n          break;\n      }\n    }\n\n    const alias: any = find(column, (g: any) => g.type === 'alias');\n    if (alias) {\n      query += ' AS ' + this.quoteIdentifier(alias.params[0]);\n    }\n\n    return query;\n  }\n\n  buildWhereClause() {\n    let query = '';\n    const conditions = map(this.target.where, (tag, index) => {\n      switch (tag.type) {\n        case 'macro':\n          return tag.name + '(' + this.target.timeColumn + ')';\n          break;\n        case 'expression':\n          return tag.params.join(' ');\n          break;\n      }\n    });\n\n    if (conditions.length > 0) {\n      query = '\\nWHERE\\n  ' + conditions.join(' AND\\n  ');\n    }\n\n    return query;\n  }\n\n  buildGroupClause() {\n    let query = '';\n    let groupSection = '';\n\n    for (let i = 0; i < this.target.group.length; i++) {\n      const part = this.target.group[i];\n      if (i > 0) {\n        groupSection += ', ';\n      }\n      if (part.type === 'time') {\n        groupSection += '1';\n      } else {\n        groupSection += part.params[0];\n      }\n    }\n\n    if (groupSection.length) {\n      query = '\\nGROUP BY ' + groupSection;\n      if (this.hasMetricColumn()) {\n        query += ',2';\n      }\n    }\n    return query;\n  }\n\n  buildQuery() {\n    let query = 'SELECT';\n\n    query += '\\n  ' + this.buildTimeColumn();\n    if (this.hasMetricColumn()) {\n      query += ',\\n  ' + this.buildMetricColumn();\n    }\n    query += this.buildValueColumns();\n\n    query += '\\nFROM ' + this.target.table;\n\n    query += this.buildWhereClause();\n    query += this.buildGroupClause();\n\n    query += '\\nORDER BY 1';\n    if (this.hasMetricColumn()) {\n      query += ',2';\n    }\n\n    return query;\n  }\n}\n","import { uniqBy } from 'lodash';\n\nimport { AnnotationEvent, DataFrame, MetricFindValue } from '@grafana/data';\nimport { BackendDataSourceResponse, FetchResponse, toDataQueryResponse } from '@grafana/runtime';\n\nexport default class ResponseParser {\n  transformMetricFindResponse(raw: FetchResponse<BackendDataSourceResponse>): MetricFindValue[] {\n    const frames = toDataQueryResponse(raw).data as DataFrame[];\n\n    if (!frames || !frames.length) {\n      return [];\n    }\n\n    const frame = frames[0];\n\n    const values: MetricFindValue[] = [];\n    const textField = frame.fields.find((f) => f.name === '__text');\n    const valueField = frame.fields.find((f) => f.name === '__value');\n\n    if (textField && valueField) {\n      for (let i = 0; i < textField.values.length; i++) {\n        values.push({ text: '' + textField.values.get(i), value: '' + valueField.values.get(i) });\n      }\n    } else {\n      values.push(\n        ...frame.fields\n          .flatMap((f) => f.values.toArray())\n          .map((v) => ({\n            text: v,\n          }))\n      );\n    }\n\n    return uniqBy(values, 'text');\n  }\n\n  async transformAnnotationResponse(options: any, data: BackendDataSourceResponse): Promise<AnnotationEvent[]> {\n    const frames = toDataQueryResponse({ data: data }).data as DataFrame[];\n    if (!frames || !frames.length) {\n      return [];\n    }\n    const frame = frames[0];\n    const timeField = frame.fields.find((f) => f.name === 'time');\n\n    if (!timeField) {\n      throw new Error('Missing mandatory time column (with time column alias) in annotation query');\n    }\n\n    const timeEndField = frame.fields.find((f) => f.name === 'timeend');\n    const textField = frame.fields.find((f) => f.name === 'text');\n    const tagsField = frame.fields.find((f) => f.name === 'tags');\n\n    const list: AnnotationEvent[] = [];\n    for (let i = 0; i < frame.length; i++) {\n      const timeEnd = timeEndField && timeEndField.values.get(i) ? Math.floor(timeEndField.values.get(i)) : undefined;\n      list.push({\n        annotation: options.annotation,\n        time: Math.floor(timeField.values.get(i)),\n        timeEnd,\n        text: textField && textField.values.get(i) ? textField.values.get(i) : '',\n        tags:\n          tagsField && tagsField.values.get(i)\n            ? tagsField.values\n                .get(i)\n                .trim()\n                .split(/\\s*,\\s*/)\n            : [],\n      });\n    }\n\n    return list;\n  }\n}\n","import { map as _map } from 'lodash';\nimport { lastValueFrom, of } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\nimport { AnnotationEvent, DataSourceInstanceSettings, MetricFindValue, ScopedVars, TimeRange } from '@grafana/data';\nimport { BackendDataSourceResponse, DataSourceWithBackend, FetchResponse, getBackendSrv } from '@grafana/runtime';\nimport { toTestingStatus } from '@grafana/runtime/src/utils/queryResponse';\nimport { getTemplateSrv, TemplateSrv } from 'app/features/templating/template_srv';\nimport PostgresQueryModel from 'app/plugins/datasource/postgres/postgres_query_model';\n\nimport { getSearchFilterScopedVar } from '../../../features/variables/utils';\n\nimport ResponseParser from './response_parser';\nimport { PostgresOptions, PostgresQuery, PostgresQueryForInterpolation } from './types';\n\nexport class PostgresDatasource extends DataSourceWithBackend<PostgresQuery, PostgresOptions> {\n  id: any;\n  name: any;\n  jsonData: any;\n  responseParser: ResponseParser;\n  queryModel: PostgresQueryModel;\n  interval: string;\n\n  constructor(\n    instanceSettings: DataSourceInstanceSettings<PostgresOptions>,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv()\n  ) {\n    super(instanceSettings);\n    this.name = instanceSettings.name;\n    this.id = instanceSettings.id;\n    this.jsonData = instanceSettings.jsonData;\n    this.responseParser = new ResponseParser();\n    this.queryModel = new PostgresQueryModel({});\n    const settingsData = instanceSettings.jsonData || ({} as PostgresOptions);\n    this.interval = settingsData.timeInterval || '1m';\n  }\n\n  interpolateVariable = (value: string | string[], variable: { multi: any; includeAll: any }) => {\n    if (typeof value === 'string') {\n      if (variable.multi || variable.includeAll) {\n        return this.queryModel.quoteLiteral(value);\n      } else {\n        return value;\n      }\n    }\n\n    if (typeof value === 'number') {\n      return value;\n    }\n\n    const quotedValues = _map(value, (v) => {\n      return this.queryModel.quoteLiteral(v);\n    });\n    return quotedValues.join(',');\n  };\n\n  interpolateVariablesInQueries(\n    queries: PostgresQueryForInterpolation[],\n    scopedVars: ScopedVars\n  ): PostgresQueryForInterpolation[] {\n    let expandedQueries = queries;\n    if (queries && queries.length > 0) {\n      expandedQueries = queries.map((query) => {\n        const expandedQuery = {\n          ...query,\n          datasource: this.getRef(),\n          rawSql: this.templateSrv.replace(query.rawSql, scopedVars, this.interpolateVariable),\n          rawQuery: true,\n        };\n        return expandedQuery;\n      });\n    }\n    return expandedQueries;\n  }\n\n  filterQuery(query: PostgresQuery): boolean {\n    return !query.hide;\n  }\n\n  applyTemplateVariables(target: PostgresQuery, scopedVars: ScopedVars): Record<string, any> {\n    const queryModel = new PostgresQueryModel(target, this.templateSrv, scopedVars);\n    return {\n      refId: target.refId,\n      datasource: this.getRef(),\n      rawSql: queryModel.render(this.interpolateVariable),\n      format: target.format,\n    };\n  }\n\n  async annotationQuery(options: any): Promise<AnnotationEvent[]> {\n    if (!options.annotation.rawQuery) {\n      return Promise.reject({\n        message: 'Query missing in annotation definition',\n      });\n    }\n\n    const query = {\n      refId: options.annotation.name,\n      datasource: this.getRef(),\n      rawSql: this.templateSrv.replace(options.annotation.rawQuery, options.scopedVars, this.interpolateVariable),\n      format: 'table',\n    };\n\n    return lastValueFrom(\n      getBackendSrv()\n        .fetch<BackendDataSourceResponse>({\n          url: '/api/ds/query',\n          method: 'POST',\n          data: {\n            from: options.range.from.valueOf().toString(),\n            to: options.range.to.valueOf().toString(),\n            queries: [query],\n          },\n          requestId: options.annotation.name,\n        })\n        .pipe(\n          map(\n            async (res: FetchResponse<BackendDataSourceResponse>) =>\n              await this.responseParser.transformAnnotationResponse(options, res.data)\n          )\n        )\n    );\n  }\n\n  metricFindQuery(query: string, optionalOptions: any): Promise<MetricFindValue[]> {\n    let refId = 'tempvar';\n    if (optionalOptions && optionalOptions.variable && optionalOptions.variable.name) {\n      refId = optionalOptions.variable.name;\n    }\n\n    const rawSql = this.templateSrv.replace(\n      query,\n      getSearchFilterScopedVar({ query, wildcardChar: '%', options: optionalOptions }),\n      this.interpolateVariable\n    );\n\n    const interpolatedQuery = {\n      refId: refId,\n      datasource: this.getRef(),\n      rawSql,\n      format: 'table',\n    };\n\n    const range = optionalOptions?.range as TimeRange;\n\n    return lastValueFrom(\n      getBackendSrv()\n        .fetch<BackendDataSourceResponse>({\n          url: '/api/ds/query',\n          method: 'POST',\n          data: {\n            from: range?.from?.valueOf()?.toString(),\n            to: range?.to?.valueOf()?.toString(),\n            queries: [interpolatedQuery],\n          },\n          requestId: refId,\n        })\n        .pipe(\n          map((rsp) => {\n            return this.responseParser.transformMetricFindResponse(rsp);\n          }),\n          catchError((err) => {\n            return of([]);\n          })\n        )\n    );\n  }\n\n  private _metaRequest(rawSql: string) {\n    const refId = 'meta';\n    const query = {\n      refId: refId,\n      datasource: this.getRef(),\n      rawSql,\n      format: 'table',\n    };\n    return getBackendSrv().fetch<BackendDataSourceResponse>({\n      url: '/api/ds/query',\n      method: 'POST',\n      data: {\n        queries: [query],\n      },\n      requestId: refId,\n    });\n  }\n\n  async getVersion(): Promise<string> {\n    const value = await lastValueFrom(this._metaRequest(\"SELECT current_setting('server_version_num')::int/100\"));\n    const results = value.data.results['meta'];\n    if (results.frames) {\n      // This returns number\n      return (results.frames[0].data?.values[0] as number[])[0].toString();\n    }\n    return '';\n  }\n\n  async getTimescaleDBVersion(): Promise<string[] | undefined> {\n    const value = await lastValueFrom(\n      this._metaRequest(\"SELECT extversion FROM pg_extension WHERE extname = 'timescaledb'\")\n    );\n    const results = value.data.results['meta'];\n    if (results.frames) {\n      return results.frames[0].data?.values[0][0] as string[];\n    }\n    return undefined;\n  }\n\n  testDatasource(): Promise<any> {\n    return lastValueFrom(this._metaRequest('SELECT 1'))\n      .then(() => {\n        return { status: 'success', message: 'Database Connection OK' };\n      })\n      .catch((err: any) => {\n        return toTestingStatus(err);\n      });\n  }\n\n  targetContainsTemplate(target: any) {\n    let rawSql = '';\n\n    if (target.rawQuery) {\n      rawSql = target.rawSql;\n    } else {\n      const query = new PostgresQueryModel(target);\n      rawSql = query.buildQuery();\n    }\n\n    rawSql = rawSql.replace('$__', '');\n\n    return this.templateSrv.containsTemplate(rawSql);\n  }\n}\n","import { Dispatch, SetStateAction, useState } from 'react';\nimport { useDeepCompareEffect } from 'react-use';\n\nimport {\n  DataSourcePluginOptionsEditorProps,\n  DataSourceSettings,\n  SelectableValue,\n  updateDatasourcePluginJsonDataOption,\n  updateDatasourcePluginOption,\n} from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\n\nimport { PostgresDatasource } from '../datasource';\nimport { PostgresOptions, PostgresTLSModes, SecureJsonData } from '../types';\n\nimport { postgresVersions } from './ConfigurationEditor';\n\ntype Options = {\n  props: DataSourcePluginOptionsEditorProps<PostgresOptions, SecureJsonData>;\n  setVersionOptions: Dispatch<SetStateAction<Array<SelectableValue<number>>>>;\n};\n\nexport function useAutoDetectFeatures({ props, setVersionOptions }: Options) {\n  const [saved, setSaved] = useState(false);\n  const { options, onOptionsChange } = props;\n\n  useDeepCompareEffect(() => {\n    const getVersion = async () => {\n      if (!saved) {\n        // We need to save the datasource before we can get the version so we can query the database with the options we have.\n        const result = await getBackendSrv().put<{ datasource: DataSourceSettings }>(\n          `/api/datasources/${options.id}`,\n          options\n        );\n\n        setSaved(true);\n        // This is needed or else we get an error when we try to save the datasource.\n        updateDatasourcePluginOption({ options, onOptionsChange }, 'version', result.datasource.version);\n      } else {\n        const datasource = await getDatasourceSrv().loadDatasource(options.name);\n\n        if (datasource instanceof PostgresDatasource) {\n          const version = await datasource.getVersion();\n          const versionNumber = parseInt(version, 10);\n\n          // timescaledb is only available for 9.6+\n          if (versionNumber >= 906 && !options.jsonData.timescaledb) {\n            const timescaledbVersion = await datasource.getTimescaleDBVersion();\n            if (timescaledbVersion?.length) {\n              updateDatasourcePluginJsonDataOption({ options, onOptionsChange }, 'timescaledb', true);\n            }\n          }\n          const major = Math.trunc(versionNumber / 100);\n          const minor = versionNumber % 100;\n          let name = String(major);\n          if (versionNumber < 1000) {\n            name = String(major) + '.' + String(minor);\n          }\n          if (!postgresVersions.find((p) => p.value === versionNumber)) {\n            setVersionOptions((prev) => [...prev, { label: name, value: versionNumber }]);\n          }\n          if (options.jsonData.postgresVersion === undefined || options.jsonData.postgresVersion !== versionNumber) {\n            updateDatasourcePluginJsonDataOption({ options, onOptionsChange }, 'postgresVersion', versionNumber);\n          }\n        }\n      }\n    };\n    // This logic is only going to run when we create a new datasource\n    if (isValidConfig(options)) {\n      getVersion();\n    }\n  }, [options, saved, setVersionOptions]);\n}\n\nfunction isValidConfig(options: DataSourceSettings<PostgresOptions, SecureJsonData>) {\n  return (\n    options.url &&\n    options.database &&\n    options.user &&\n    (options.secureJsonData?.password || options.secureJsonFields?.password) &&\n    (options.jsonData.sslmode === PostgresTLSModes.disable ||\n      (options.jsonData.sslCertFile && options.jsonData.sslKeyFile && options.jsonData.sslRootCertFile)) &&\n    !options.jsonData.postgresVersion &&\n    !options.readOnly\n  );\n}\n","import React, { SyntheticEvent, useState } from 'react';\n\nimport {\n  DataSourcePluginOptionsEditorProps,\n  onUpdateDatasourceJsonDataOption,\n  onUpdateDatasourceSecureJsonDataOption,\n  SelectableValue,\n  updateDatasourcePluginJsonDataOption,\n  updateDatasourcePluginResetOption,\n} from '@grafana/data';\nimport { Alert, InlineSwitch, FieldSet, InlineField, InlineFieldRow, Input, Select, SecretInput } from '@grafana/ui';\nimport { ConnectionLimits } from 'app/features/plugins/sql/components/configuration/ConnectionLimits';\nimport { TLSSecretsConfig } from 'app/features/plugins/sql/components/configuration/TLSSecretsConfig';\n\nimport { PostgresOptions, PostgresTLSMethods, PostgresTLSModes, SecureJsonData } from '../types';\n\nimport { useAutoDetectFeatures } from './useAutoDetectFeatures';\n\nexport const postgresVersions: Array<SelectableValue<number>> = [\n  { label: '9.0', value: 900 },\n  { label: '9.1', value: 901 },\n  { label: '9.2', value: 902 },\n  { label: '9.3', value: 903 },\n  { label: '9.4', value: 904 },\n  { label: '9.5', value: 905 },\n  { label: '9.6', value: 906 },\n  { label: '10', value: 1000 },\n  { label: '11', value: 1100 },\n  { label: '12', value: 1200 },\n  { label: '13', value: 1300 },\n  { label: '14', value: 1400 },\n  { label: '15', value: 1500 },\n];\n\nexport const PostgresConfigEditor = (props: DataSourcePluginOptionsEditorProps<PostgresOptions, SecureJsonData>) => {\n  const [versionOptions, setVersionOptions] = useState(postgresVersions);\n\n  useAutoDetectFeatures({ props, setVersionOptions });\n\n  const { options, onOptionsChange } = props;\n  const jsonData = options.jsonData;\n\n  const onResetPassword = () => {\n    updateDatasourcePluginResetOption(props, 'password');\n  };\n\n  const tlsModes: Array<SelectableValue<PostgresTLSModes>> = [\n    { value: PostgresTLSModes.disable, label: 'disable' },\n    { value: PostgresTLSModes.require, label: 'require' },\n    { value: PostgresTLSModes.verifyCA, label: 'verify-ca' },\n    { value: PostgresTLSModes.verifyFull, label: 'verify-full' },\n  ];\n\n  const tlsMethods: Array<SelectableValue<PostgresTLSMethods>> = [\n    { value: PostgresTLSMethods.filePath, label: 'File system path' },\n    { value: PostgresTLSMethods.fileContent, label: 'Certificate content' },\n  ];\n\n  const onJSONDataOptionSelected = (property: keyof PostgresOptions) => {\n    return (value: SelectableValue) => {\n      updateDatasourcePluginJsonDataOption(props, property, value.value);\n    };\n  };\n\n  const onTimeScaleDBChanged = (event: SyntheticEvent<HTMLInputElement>) => {\n    updateDatasourcePluginJsonDataOption(props, 'timescaledb', event.currentTarget.checked);\n  };\n\n  const onDSOptionChanged = (property: keyof PostgresOptions) => {\n    return (event: SyntheticEvent<HTMLInputElement>) => {\n      onOptionsChange({ ...options, ...{ [property]: event.currentTarget.value } });\n    };\n  };\n\n  const labelWidthSSLDetails = 25;\n  const labelWidthConnection = 20;\n  const labelWidthShort = 20;\n\n  return (\n    <>\n      <FieldSet label=\"PostgreSQL Connection\" width={400}>\n        <InlineField labelWidth={labelWidthConnection} label=\"Host\">\n          <Input\n            width={40}\n            name=\"host\"\n            type=\"text\"\n            value={options.url || ''}\n            placeholder=\"localhost:5432\"\n            onChange={onDSOptionChanged('url')}\n          ></Input>\n        </InlineField>\n        <InlineField labelWidth={labelWidthConnection} label=\"Database\">\n          <Input\n            width={40}\n            name=\"database\"\n            value={options.database || ''}\n            placeholder=\"database name\"\n            onChange={onDSOptionChanged('database')}\n          ></Input>\n        </InlineField>\n        <InlineFieldRow>\n          <InlineField labelWidth={labelWidthConnection} label=\"User\">\n            <Input value={options.user || ''} placeholder=\"user\" onChange={onDSOptionChanged('user')}></Input>\n          </InlineField>\n          <InlineField label=\"Password\">\n            <SecretInput\n              placeholder=\"Password\"\n              isConfigured={options.secureJsonFields?.password}\n              onReset={onResetPassword}\n              onBlur={onUpdateDatasourceSecureJsonDataOption(props, 'password')}\n            ></SecretInput>\n          </InlineField>\n        </InlineFieldRow>\n        <InlineField\n          labelWidth={labelWidthConnection}\n          label=\"TLS/SSL Mode\"\n          htmlFor=\"tlsMode\"\n          tooltip=\"This option determines whether or with what priority a secure TLS/SSL TCP/IP connection will be negotiated with the server.\"\n        >\n          <Select\n            options={tlsModes}\n            inputId=\"tlsMode\"\n            value={jsonData.sslmode || PostgresTLSModes.verifyFull}\n            onChange={onJSONDataOptionSelected('sslmode')}\n          ></Select>\n        </InlineField>\n        {options.jsonData.sslmode !== PostgresTLSModes.disable ? (\n          <InlineField\n            labelWidth={labelWidthConnection}\n            label=\"TLS/SSL Method\"\n            htmlFor=\"tlsMethod\"\n            tooltip={\n              <span>\n                This option determines how TLS/SSL certifications are configured. Selecting <i>File system path</i> will\n                allow you to configure certificates by specifying paths to existing certificates on the local file\n                system where Grafana is running. Be sure that the file is readable by the user executing the Grafana\n                process.\n                <br />\n                <br />\n                Selecting <i>Certificate content</i> will allow you to configure certificates by specifying its content.\n                The content will be stored encrypted in Grafana&apos;s database. When connecting to the database the\n                certificates will be written as files to Grafana&apos;s configured data path on the local file system.\n              </span>\n            }\n          >\n            <Select\n              options={tlsMethods}\n              inputId=\"tlsMethod\"\n              value={jsonData.tlsConfigurationMethod || PostgresTLSMethods.filePath}\n              onChange={onJSONDataOptionSelected('tlsConfigurationMethod')}\n            ></Select>\n          </InlineField>\n        ) : null}\n      </FieldSet>\n\n      {options.jsonData.sslmode !== 'disable' ? (\n        <FieldSet label=\"TLS/SSL Auth Details\">\n          {options.jsonData.tlsConfigurationMethod === PostgresTLSMethods.fileContent ? (\n            <TLSSecretsConfig editorProps={props} labelWidth={labelWidthSSLDetails}></TLSSecretsConfig>\n          ) : (\n            <>\n              <InlineField\n                tooltip={\n                  <span>\n                    If the selected TLS/SSL mode requires a server root certificate, provide the path to the file here.\n                  </span>\n                }\n                labelWidth={labelWidthSSLDetails}\n                label=\"TLS/SSL Root Certificate\"\n              >\n                <Input\n                  value={jsonData.sslRootCertFile || ''}\n                  onChange={onUpdateDatasourceJsonDataOption(props, 'sslRootCertFile')}\n                  placeholder=\"TLS/SSL root cert file\"\n                ></Input>\n              </InlineField>\n              <InlineField\n                tooltip={\n                  <span>\n                    To authenticate with an TLS/SSL client certificate, provide the path to the file here. Be sure that\n                    the file is readable by the user executing the grafana process.\n                  </span>\n                }\n                labelWidth={labelWidthSSLDetails}\n                label=\"TLS/SSL Client Certificate\"\n              >\n                <Input\n                  value={jsonData.sslCertFile || ''}\n                  onChange={onUpdateDatasourceJsonDataOption(props, 'sslCertFile')}\n                  placeholder=\"TLS/SSL client cert file\"\n                ></Input>\n              </InlineField>\n              <InlineField\n                tooltip={\n                  <span>\n                    To authenticate with a client TLS/SSL certificate, provide the path to the corresponding key file\n                    here. Be sure that the file is <i>only</i> readable by the user executing the grafana process.\n                  </span>\n                }\n                labelWidth={labelWidthSSLDetails}\n                label=\"TLS/SSL Client Key\"\n              >\n                <Input\n                  value={jsonData.sslKeyFile || ''}\n                  onChange={onUpdateDatasourceJsonDataOption(props, 'sslKeyFile')}\n                  placeholder=\"TLS/SSL client key file\"\n                ></Input>\n              </InlineField>\n            </>\n          )}\n        </FieldSet>\n      ) : null}\n\n      <ConnectionLimits\n        labelWidth={labelWidthShort}\n        jsonData={jsonData}\n        onPropertyChanged={(property, value) => {\n          updateDatasourcePluginJsonDataOption(props, property, value);\n        }}\n      ></ConnectionLimits>\n\n      <FieldSet label=\"PostgreSQL details\">\n        <InlineField\n          tooltip=\"This option controls what functions are available in the PostgreSQL query builder\"\n          labelWidth={labelWidthShort}\n          htmlFor=\"postgresVersion\"\n          label=\"Version\"\n        >\n          <Select\n            value={jsonData.postgresVersion || 903}\n            inputId=\"postgresVersion\"\n            onChange={onJSONDataOptionSelected('postgresVersion')}\n            options={versionOptions}\n          ></Select>\n        </InlineField>\n        <InlineField\n          tooltip={\n            <span>\n              TimescaleDB is a time-series database built as a PostgreSQL extension. If enabled, Grafana will use\n              <code>time_bucket</code> in the <code>$__timeGroup</code> macro and display TimescaleDB specific aggregate\n              functions in the query builder.\n            </span>\n          }\n          labelWidth={labelWidthShort}\n          label=\"TimescaleDB\"\n          htmlFor=\"timescaledb\"\n        >\n          <InlineSwitch\n            id=\"timescaledb\"\n            value={jsonData.timescaledb || false}\n            onChange={onTimeScaleDBChanged}\n          ></InlineSwitch>\n        </InlineField>\n        <InlineField\n          tooltip={\n            <span>\n              A lower limit for the auto group by time interval. Recommended to be set to write frequency, for example\n              <code>1m</code> if your data is written every minute.\n            </span>\n          }\n          labelWidth={labelWidthShort}\n          label=\"Min time interval\"\n        >\n          <Input\n            placeholder=\"1m\"\n            value={jsonData.timeInterval || ''}\n            onChange={onUpdateDatasourceJsonDataOption(props, 'timeInterval')}\n          ></Input>\n        </InlineField>\n      </FieldSet>\n\n      <Alert title=\"User Permission\" severity=\"info\">\n        The database user should only be granted SELECT permissions on the specified database &amp; tables you want to\n        query. Grafana does not validate that queries are safe so queries can contain any SQL statement. For example,\n        statements like <code>DELETE FROM user;</code> and <code>DROP TABLE user;</code> would be executed. To protect\n        against this we <strong>Highly</strong> recommend you create a specific PostgreSQL user with restricted\n        permissions.\n      </Alert>\n    </>\n  );\n};\n","import QueryModel from './postgres_query_model';\n\nexport class PostgresMetaQuery {\n  constructor(private target: { table: string; timeColumn: string }, private queryModel: QueryModel) {}\n\n  getOperators(datatype: string) {\n    switch (datatype) {\n      case 'float4':\n      case 'float8': {\n        return ['=', '!=', '<', '<=', '>', '>='];\n      }\n      case 'text':\n      case 'varchar':\n      case 'char': {\n        return ['=', '!=', '<', '<=', '>', '>=', 'IN', 'NOT IN', 'LIKE', 'NOT LIKE', '~', '~*', '!~', '!~*'];\n      }\n      default: {\n        return ['=', '!=', '<', '<=', '>', '>=', 'IN', 'NOT IN'];\n      }\n    }\n  }\n\n  // quote identifier as literal to use in metadata queries\n  quoteIdentAsLiteral(value: string) {\n    return this.queryModel.quoteLiteral(this.queryModel.unquoteIdentifier(value));\n  }\n\n  findMetricTable() {\n    // query that returns first table found that has a timestamp(tz) column and a float column\n    let query = `\nSELECT\n\tquote_ident(table_name) as table_name,\n\t( SELECT\n\t    quote_ident(column_name) as column_name\n\t  FROM information_schema.columns c\n    WHERE\n      c.table_schema = t.table_schema AND\n      c.table_name = t.table_name AND\n      udt_name IN ('timestamptz','timestamp')\n    ORDER BY ordinal_position LIMIT 1\n  ) AS time_column,\n  ( SELECT\n      quote_ident(column_name) AS column_name\n    FROM information_schema.columns c\n    WHERE\n      c.table_schema = t.table_schema AND\n      c.table_name = t.table_name AND\n      udt_name='float8'\n    ORDER BY ordinal_position LIMIT 1\n  ) AS value_column\nFROM information_schema.tables t\nWHERE `;\n    query += this.buildSchemaConstraint();\n    query += ` AND\n  EXISTS\n  ( SELECT 1\n    FROM information_schema.columns c\n    WHERE\n      c.table_schema = t.table_schema AND\n      c.table_name = t.table_name AND\n      udt_name IN ('timestamptz','timestamp')\n  ) AND\n  EXISTS\n  ( SELECT 1\n    FROM information_schema.columns c\n    WHERE\n      c.table_schema = t.table_schema AND\n      c.table_name = t.table_name AND\n      udt_name='float8'\n  )\nLIMIT 1\n;`;\n    return query;\n  }\n\n  buildSchemaConstraint() {\n    // quote_ident protects hyphenated schemes\n    const query = `\nquote_ident(table_schema) IN (\n  SELECT\n    CASE WHEN trim(s[i]) = '\"$user\"' THEN user ELSE trim(s[i]) END\n  FROM\n    generate_series(\n      array_lower(string_to_array(current_setting('search_path'),','),1),\n      array_upper(string_to_array(current_setting('search_path'),','),1)\n    ) as i,\n    string_to_array(current_setting('search_path'),',') s\n)`;\n    return query;\n  }\n\n  buildTableConstraint(table: string) {\n    let query = '';\n\n    // check for schema qualified table\n    if (table.includes('.')) {\n      const parts = table.split('.');\n      query = 'table_schema = ' + this.quoteIdentAsLiteral(parts[0]);\n      query += ' AND table_name = ' + this.quoteIdentAsLiteral(parts[1]);\n      return query;\n    } else {\n      query = this.buildSchemaConstraint();\n      query += ' AND table_name = ' + this.quoteIdentAsLiteral(table);\n\n      return query;\n    }\n  }\n\n  buildTableQuery() {\n    let query = 'SELECT quote_ident(table_name) FROM information_schema.tables WHERE ';\n    query += this.buildSchemaConstraint();\n    query += ' ORDER BY table_name';\n    return query;\n  }\n\n  buildColumnQuery(type?: string) {\n    let query = 'SELECT quote_ident(column_name) FROM information_schema.columns WHERE ';\n    query += this.buildTableConstraint(this.target.table);\n\n    switch (type) {\n      case 'time': {\n        query +=\n          \" AND data_type IN ('timestamp without time zone','timestamp with time zone','bigint','integer','double precision','real')\";\n        break;\n      }\n      case 'metric': {\n        query += \" AND data_type IN ('text','character','character varying')\";\n        break;\n      }\n      case 'value': {\n        query += \" AND data_type IN ('bigint','integer','double precision','real','numeric')\";\n        query += ' AND column_name <> ' + this.quoteIdentAsLiteral(this.target.timeColumn);\n        break;\n      }\n      case 'group': {\n        query += \" AND data_type IN ('text','character','character varying','uuid')\";\n        break;\n      }\n    }\n\n    query += ' ORDER BY column_name';\n\n    return query;\n  }\n\n  buildValueQuery(column: string) {\n    let query = 'SELECT DISTINCT quote_literal(' + column + ')';\n    query += ' FROM ' + this.target.table;\n    query += ' WHERE $__timeFilter(' + this.target.timeColumn + ')';\n    query += ' AND ' + column + ' IS NOT NULL';\n    query += ' ORDER BY 1 LIMIT 100';\n    return query;\n  }\n\n  buildDatatypeQuery(column: string) {\n    let query = 'SELECT udt_name FROM information_schema.columns WHERE ';\n    query += this.buildTableConstraint(this.target.table);\n    query += ' AND column_name = ' + this.quoteIdentAsLiteral(column);\n    return query;\n  }\n\n  buildAggregateQuery() {\n    let query = 'SELECT DISTINCT proname FROM pg_aggregate ';\n    query += 'INNER JOIN pg_proc ON pg_aggregate.aggfnoid = pg_proc.oid ';\n    query += 'INNER JOIN pg_type ON pg_type.oid=pg_proc.prorettype ';\n    query += \"WHERE pronargs=1 AND typname IN ('float8') AND aggkind='n' ORDER BY 1\";\n    return query;\n  }\n}\n","import { clone } from 'lodash';\n\nexport class SqlPartDef {\n  type: string;\n  style: string;\n  label: string;\n  params: any[];\n  defaultParams: any[];\n  wrapOpen: string;\n  wrapClose: string;\n  separator: string;\n\n  constructor(options: any) {\n    this.type = options.type;\n    if (options.label) {\n      this.label = options.label;\n    } else {\n      this.label = this.type[0].toUpperCase() + this.type.substring(1) + ':';\n    }\n    this.style = options.style;\n    if (this.style === 'function') {\n      this.wrapOpen = '(';\n      this.wrapClose = ')';\n      this.separator = ', ';\n    } else {\n      this.wrapOpen = ' ';\n      this.wrapClose = ' ';\n      this.separator = ' ';\n    }\n    this.params = options.params;\n    this.defaultParams = options.defaultParams;\n  }\n}\n\nexport class SqlPart {\n  part: any;\n  def: SqlPartDef;\n  params: any[];\n  label: string;\n  name: string;\n  datatype: string;\n\n  constructor(part: any, def: any) {\n    this.part = part;\n    this.def = def;\n    if (!this.def) {\n      throw { message: 'Could not find sql part ' + part.type };\n    }\n\n    this.datatype = part.datatype;\n\n    if (part.name) {\n      this.name = part.name;\n      this.label = def.label + ' ' + part.name;\n    } else {\n      this.name = '';\n      this.label = def.label;\n    }\n\n    part.params = part.params || clone(this.def.defaultParams);\n    this.params = part.params;\n  }\n\n  updateParam(strValue: string, index: number) {\n    // handle optional parameters\n    if (strValue === '' && this.def.params[index].optional) {\n      this.params.splice(index, 1);\n    } else {\n      this.params[index] = strValue;\n    }\n\n    this.part.params = this.params;\n  }\n}\n","import { SqlPartDef, SqlPart } from 'app/angular/components/sql_part/sql_part';\n\nconst index: any[] = [];\n\nfunction createPart(part: any): any {\n  const def = index[part.type];\n  if (!def) {\n    return null;\n  }\n\n  return new SqlPart(part, def);\n}\n\nfunction register(options: any) {\n  index[options.type] = new SqlPartDef(options);\n}\n\nregister({\n  type: 'column',\n  style: 'label',\n  params: [{ type: 'column', dynamicLookup: true }],\n  defaultParams: ['value'],\n});\n\nregister({\n  type: 'expression',\n  style: 'expression',\n  label: 'Expr:',\n  params: [\n    { name: 'left', type: 'string', dynamicLookup: true },\n    { name: 'op', type: 'string', dynamicLookup: true },\n    { name: 'right', type: 'string', dynamicLookup: true },\n  ],\n  defaultParams: ['value', '=', 'value'],\n});\n\nregister({\n  type: 'macro',\n  style: 'label',\n  label: 'Macro:',\n  params: [],\n  defaultParams: [],\n});\n\nregister({\n  type: 'aggregate',\n  style: 'label',\n  params: [\n    {\n      name: 'name',\n      type: 'string',\n      options: [],\n      baseOptions: ['avg', 'count', 'min', 'max', 'sum', 'stddev', 'variance'],\n      timescaleOptions: ['first', 'last'],\n    },\n  ],\n  defaultParams: ['avg'],\n});\n\nregister({\n  type: 'percentile',\n  label: 'Aggregate:',\n  style: 'label',\n  params: [\n    {\n      name: 'name',\n      type: 'string',\n      options: ['percentile_cont', 'percentile_disc'],\n    },\n    {\n      name: 'fraction',\n      type: 'number',\n      options: ['0.5', '0.75', '0.9', '0.95', '0.99'],\n    },\n  ],\n  defaultParams: ['percentile_cont', '0.95'],\n});\n\nregister({\n  type: 'alias',\n  style: 'label',\n  params: [{ name: 'name', type: 'string', quote: 'double' }],\n  defaultParams: ['alias'],\n});\n\nregister({\n  type: 'time',\n  style: 'function',\n  label: 'time',\n  params: [\n    {\n      name: 'interval',\n      type: 'interval',\n      options: ['$__interval', '1s', '10s', '1m', '5m', '10m', '15m', '1h'],\n    },\n    {\n      name: 'fill',\n      type: 'string',\n      options: ['none', 'NULL', 'previous', '0'],\n    },\n  ],\n  defaultParams: ['$__interval', 'none'],\n});\n\nregister({\n  type: 'window',\n  style: 'label',\n  params: [\n    {\n      name: 'function',\n      type: 'string',\n      options: ['delta', 'increase', 'rate', 'sum'],\n    },\n  ],\n  defaultParams: ['increase'],\n});\n\nregister({\n  type: 'moving_window',\n  style: 'label',\n  label: 'Moving Window:',\n  params: [\n    {\n      name: 'function',\n      type: 'string',\n      options: ['avg'],\n    },\n    {\n      name: 'window_size',\n      type: 'number',\n      options: ['3', '5', '7', '10', '20'],\n    },\n  ],\n  defaultParams: ['avg', '5'],\n});\n\nexport default {\n  create: createPart,\n};\n","import { auto } from 'angular';\nimport { clone, filter, find, findIndex, indexOf, map } from 'lodash';\n\nimport { PanelEvents, QueryResultMeta } from '@grafana/data';\nimport { TemplateSrv } from '@grafana/runtime';\nimport { SqlPart } from 'app/angular/components/sql_part/sql_part';\nimport appEvents from 'app/core/app_events';\nimport { VariableWithMultiSupport } from 'app/features/variables/types';\nimport { QueryCtrl } from 'app/plugins/sdk';\nimport { ShowConfirmModalEvent } from 'app/types/events';\n\nimport { PostgresMetaQuery } from './meta_query';\nimport PostgresQueryModel from './postgres_query_model';\nimport sqlPart from './sql_part';\n\nconst defaultQuery = `SELECT\n  $__time(time_column),\n  value1\nFROM\n  metric_table\nWHERE\n  $__timeFilter(time_column)\n`;\n\nexport class PostgresQueryCtrl extends QueryCtrl {\n  static templateUrl = 'partials/query.editor.html';\n\n  formats: any[];\n  queryModel: PostgresQueryModel;\n  metaBuilder: PostgresMetaQuery;\n  lastQueryMeta?: QueryResultMeta;\n  lastQueryError?: string;\n  showHelp = false;\n  tableSegment: any;\n  whereAdd: any;\n  timeColumnSegment: any;\n  metricColumnSegment: any;\n  selectMenu: any[] = [];\n  selectParts: SqlPart[][] = [[]];\n  groupParts: SqlPart[] = [];\n  whereParts: SqlPart[] = [];\n  groupAdd: any;\n\n  /** @ngInject */\n  constructor(\n    $scope: any,\n    $injector: auto.IInjectorService,\n    private templateSrv: TemplateSrv,\n    private uiSegmentSrv: any\n  ) {\n    super($scope, $injector);\n    this.target = this.target;\n    this.queryModel = new PostgresQueryModel(this.target, templateSrv, this.panel.scopedVars);\n    this.metaBuilder = new PostgresMetaQuery(this.target, this.queryModel);\n    this.updateProjection();\n\n    this.formats = [\n      { text: 'Time series', value: 'time_series' },\n      { text: 'Table', value: 'table' },\n    ];\n\n    if (!this.target.rawSql) {\n      // special handling when in table panel\n      if (this.panelCtrl.panel.type === 'table') {\n        this.target.format = 'table';\n        this.target.rawSql = 'SELECT 1';\n        this.target.rawQuery = true;\n      } else {\n        this.target.rawSql = defaultQuery;\n        this.datasource.metricFindQuery(this.metaBuilder.findMetricTable()).then((result: any) => {\n          if (result.length > 0) {\n            this.target.table = result[0].text;\n            let segment = this.uiSegmentSrv.newSegment(this.target.table);\n            this.tableSegment.html = segment.html;\n            this.tableSegment.value = segment.value;\n\n            this.target.timeColumn = result[1].text;\n            segment = this.uiSegmentSrv.newSegment(this.target.timeColumn);\n            this.timeColumnSegment.html = segment.html;\n            this.timeColumnSegment.value = segment.value;\n\n            this.target.timeColumnType = 'timestamp';\n            this.target.select = [[{ type: 'column', params: [result[2].text] }]];\n            this.updateProjection();\n            this.updateRawSqlAndRefresh();\n          }\n        });\n      }\n    }\n\n    if (!this.target.table) {\n      this.tableSegment = uiSegmentSrv.newSegment({ value: 'select table', fake: true });\n    } else {\n      this.tableSegment = uiSegmentSrv.newSegment(this.target.table);\n    }\n\n    this.timeColumnSegment = uiSegmentSrv.newSegment(this.target.timeColumn);\n    this.metricColumnSegment = uiSegmentSrv.newSegment(this.target.metricColumn);\n\n    this.buildSelectMenu();\n    this.whereAdd = this.uiSegmentSrv.newPlusButton();\n    this.groupAdd = this.uiSegmentSrv.newPlusButton();\n\n    this.panelCtrl.events.on(PanelEvents.dataReceived, this.onDataReceived.bind(this), $scope);\n    this.panelCtrl.events.on(PanelEvents.dataError, this.onDataError.bind(this), $scope);\n  }\n\n  updateRawSqlAndRefresh() {\n    if (!this.target.rawQuery) {\n      this.target.rawSql = this.queryModel.buildQuery();\n    }\n\n    this.panelCtrl.refresh();\n  }\n\n  timescaleAggCheck() {\n    const aggIndex = this.findAggregateIndex(this.selectParts[0]);\n\n    // add or remove TimescaleDB aggregate functions as needed\n    if (aggIndex !== -1) {\n      const baseOpts = this.selectParts[0][aggIndex].def.params[0].baseOptions;\n      const timescaleOpts = baseOpts.concat(this.selectParts[0][aggIndex].def.params[0].timescaleOptions);\n\n      if (this.datasource.jsonData.timescaledb === true) {\n        this.selectParts[0][aggIndex].def.params[0].options = timescaleOpts;\n      } else {\n        this.selectParts[0][aggIndex].def.params[0].options = baseOpts;\n      }\n    }\n  }\n\n  updateProjection() {\n    this.selectParts = map(this.target.select, (parts: any) => {\n      return map(parts, sqlPart.create).filter((n) => n);\n    });\n    this.timescaleAggCheck();\n    this.whereParts = map(this.target.where, sqlPart.create).filter((n) => n);\n    this.groupParts = map(this.target.group, sqlPart.create).filter((n) => n);\n  }\n\n  updatePersistedParts() {\n    this.target.select = map(this.selectParts, (selectParts) => {\n      return map(selectParts, (part: any) => {\n        return { type: part.def.type, datatype: part.datatype, params: part.params };\n      });\n    });\n    this.timescaleAggCheck();\n    this.target.where = map(this.whereParts, (part: any) => {\n      return { type: part.def.type, datatype: part.datatype, name: part.name, params: part.params };\n    });\n    this.target.group = map(this.groupParts, (part: any) => {\n      return { type: part.def.type, datatype: part.datatype, params: part.params };\n    });\n  }\n\n  buildSelectMenu() {\n    this.selectMenu = [];\n    const aggregates = {\n      text: 'Aggregate Functions',\n      value: 'aggregate',\n      submenu: [\n        { text: 'Average', value: 'avg' },\n        { text: 'Count', value: 'count' },\n        { text: 'Maximum', value: 'max' },\n        { text: 'Minimum', value: 'min' },\n        { text: 'Sum', value: 'sum' },\n        { text: 'Standard deviation', value: 'stddev' },\n        { text: 'Variance', value: 'variance' },\n      ],\n    };\n\n    // first and last aggregate are timescaledb specific\n    if (this.datasource.jsonData.timescaledb === true) {\n      aggregates.submenu.push({ text: 'First', value: 'first' });\n      aggregates.submenu.push({ text: 'Last', value: 'last' });\n    }\n\n    this.selectMenu.push(aggregates);\n\n    // ordered set aggregates require postgres 9.4+\n    if (this.datasource.jsonData.postgresVersion >= 904) {\n      const aggregates2 = {\n        text: 'Ordered-Set Aggregate Functions',\n        value: 'percentile',\n        submenu: [\n          { text: 'Percentile (continuous)', value: 'percentile_cont' },\n          { text: 'Percentile (discrete)', value: 'percentile_disc' },\n        ],\n      };\n      this.selectMenu.push(aggregates2);\n    }\n\n    const windows = {\n      text: 'Window Functions',\n      value: 'window',\n      submenu: [\n        { text: 'Delta', value: 'delta' },\n        { text: 'Increase', value: 'increase' },\n        { text: 'Rate', value: 'rate' },\n        { text: 'Sum', value: 'sum' },\n        { text: 'Moving Average', value: 'avg', type: 'moving_window' },\n      ],\n    };\n    this.selectMenu.push(windows);\n\n    this.selectMenu.push({ text: 'Alias', value: 'alias' });\n    this.selectMenu.push({ text: 'Column', value: 'column' });\n  }\n\n  toggleEditorMode() {\n    if (this.target.rawQuery) {\n      appEvents.publish(\n        new ShowConfirmModalEvent({\n          title: 'Warning',\n          text2: 'Switching to query builder may overwrite your raw SQL.',\n          icon: 'exclamation-triangle',\n          yesText: 'Switch',\n          onConfirm: () => {\n            // This could be called from React, so wrap in $evalAsync.\n            // Will then either run as part of the current digest cycle or trigger a new one.\n            this.$scope.$evalAsync(() => {\n              this.target.rawQuery = !this.target.rawQuery;\n            });\n          },\n        })\n      );\n    } else {\n      // This could be called from React, so wrap in $evalAsync.\n      // Will then either run as part of the current digest cycle or trigger a new one.\n      this.$scope.$evalAsync(() => {\n        this.target.rawQuery = !this.target.rawQuery;\n      });\n    }\n  }\n\n  resetPlusButton(button: { html: any; value: any; type: any; fake: any }) {\n    const plusButton = this.uiSegmentSrv.newPlusButton();\n    button.html = plusButton.html;\n    button.value = plusButton.value;\n    button.type = plusButton.type;\n    button.fake = plusButton.fake;\n  }\n\n  getTableSegments() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildTableQuery())\n      .then(this.transformToSegments({}))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  tableChanged() {\n    this.target.table = this.tableSegment.value;\n    this.target.where = [];\n    this.target.group = [];\n    this.updateProjection();\n\n    const segment = this.uiSegmentSrv.newSegment('none');\n    this.metricColumnSegment.html = segment.html;\n    this.metricColumnSegment.value = segment.value;\n    this.target.metricColumn = 'none';\n\n    const task1 = this.datasource.metricFindQuery(this.metaBuilder.buildColumnQuery('time')).then((result: any) => {\n      // check if time column is still valid\n      if (result.length > 0 && !find(result, (r: any) => r.text === this.target.timeColumn)) {\n        const segment = this.uiSegmentSrv.newSegment(result[0].text);\n        this.timeColumnSegment.html = segment.html;\n        this.timeColumnSegment.value = segment.value;\n      }\n      return this.timeColumnChanged(false);\n    });\n    const task2 = this.datasource.metricFindQuery(this.metaBuilder.buildColumnQuery('value')).then((result: any) => {\n      if (result.length > 0) {\n        this.target.select = [[{ type: 'column', params: [result[0].text] }]];\n        this.updateProjection();\n      }\n    });\n\n    Promise.all([task1, task2]).then(() => {\n      this.updateRawSqlAndRefresh();\n    });\n  }\n\n  getTimeColumnSegments() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildColumnQuery('time'))\n      .then(this.transformToSegments({}))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  timeColumnChanged(refresh?: boolean) {\n    this.target.timeColumn = this.timeColumnSegment.value;\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildDatatypeQuery(this.target.timeColumn))\n      .then((result: any) => {\n        if (result.length === 1) {\n          if (this.target.timeColumnType !== result[0].text) {\n            this.target.timeColumnType = result[0].text;\n          }\n          let partModel;\n          if (this.queryModel.hasUnixEpochTimecolumn()) {\n            partModel = sqlPart.create({ type: 'macro', name: '$__unixEpochFilter', params: [] });\n          } else {\n            partModel = sqlPart.create({ type: 'macro', name: '$__timeFilter', params: [] });\n          }\n\n          if (this.whereParts.length >= 1 && this.whereParts[0].def.type === 'macro') {\n            // replace current macro\n            this.whereParts[0] = partModel;\n          } else {\n            this.whereParts.splice(0, 0, partModel);\n          }\n        }\n\n        this.updatePersistedParts();\n        if (refresh !== false) {\n          this.updateRawSqlAndRefresh();\n        }\n      });\n  }\n\n  getMetricColumnSegments() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildColumnQuery('metric'))\n      .then(this.transformToSegments({ addNone: true }))\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  metricColumnChanged() {\n    this.target.metricColumn = this.metricColumnSegment.value;\n    this.updateRawSqlAndRefresh();\n  }\n\n  onDataReceived(dataList: any) {\n    this.lastQueryError = undefined;\n    this.lastQueryMeta = dataList[0]?.meta;\n  }\n\n  onDataError(err: any) {\n    if (err.data && err.data.results) {\n      const queryRes = err.data.results[this.target.refId];\n      if (queryRes) {\n        this.lastQueryError = queryRes.error;\n      }\n    }\n  }\n\n  transformToSegments(config: { addNone?: any; addTemplateVars?: any; templateQuoter?: any }) {\n    return (results: any) => {\n      const segments = map(results, (segment) => {\n        return this.uiSegmentSrv.newSegment({\n          value: segment.text,\n          expandable: segment.expandable,\n        });\n      });\n\n      if (config.addTemplateVars) {\n        for (const variable of this.templateSrv.getVariables()) {\n          let value;\n          value = '$' + variable.name;\n          if (config.templateQuoter && (variable as unknown as VariableWithMultiSupport).multi === false) {\n            value = config.templateQuoter(value);\n          }\n\n          segments.unshift(\n            this.uiSegmentSrv.newSegment({\n              type: 'template',\n              value: value,\n              expandable: true,\n            })\n          );\n        }\n      }\n\n      if (config.addNone) {\n        segments.unshift(this.uiSegmentSrv.newSegment({ type: 'template', value: 'none', expandable: true }));\n      }\n\n      return segments;\n    };\n  }\n\n  findAggregateIndex(selectParts: any) {\n    return findIndex(selectParts, (p: any) => p.def.type === 'aggregate' || p.def.type === 'percentile');\n  }\n\n  findWindowIndex(selectParts: any) {\n    return findIndex(selectParts, (p: any) => p.def.type === 'window' || p.def.type === 'moving_window');\n  }\n\n  addSelectPart(selectParts: any[], item: { value: any }, subItem: { type: any; value: any }) {\n    let partType = item.value;\n    if (subItem && subItem.type) {\n      partType = subItem.type;\n    }\n    let partModel = sqlPart.create({ type: partType });\n    if (subItem) {\n      partModel.params[0] = subItem.value;\n    }\n    let addAlias = false;\n\n    switch (partType) {\n      case 'column':\n        const parts = map(selectParts, (part: any) => {\n          return sqlPart.create({ type: part.def.type, params: clone(part.params) });\n        });\n        this.selectParts.push(parts);\n        break;\n      case 'percentile':\n      case 'aggregate':\n        // add group by if no group by yet\n        if (this.target.group.length === 0) {\n          this.addGroup('time', '$__interval');\n        }\n        const aggIndex = this.findAggregateIndex(selectParts);\n        if (aggIndex !== -1) {\n          // replace current aggregation\n          selectParts[aggIndex] = partModel;\n        } else {\n          selectParts.splice(1, 0, partModel);\n        }\n        if (!find(selectParts, (p: any) => p.def.type === 'alias')) {\n          addAlias = true;\n        }\n        break;\n      case 'moving_window':\n      case 'window':\n        const windowIndex = this.findWindowIndex(selectParts);\n        if (windowIndex !== -1) {\n          // replace current window function\n          selectParts[windowIndex] = partModel;\n        } else {\n          const aggIndex = this.findAggregateIndex(selectParts);\n          if (aggIndex !== -1) {\n            selectParts.splice(aggIndex + 1, 0, partModel);\n          } else {\n            selectParts.splice(1, 0, partModel);\n          }\n        }\n        if (!find(selectParts, (p: any) => p.def.type === 'alias')) {\n          addAlias = true;\n        }\n        break;\n      case 'alias':\n        addAlias = true;\n        break;\n    }\n\n    if (addAlias) {\n      // set initial alias name to column name\n      partModel = sqlPart.create({ type: 'alias', params: [selectParts[0].params[0].replace(/\"/g, '')] });\n      if (selectParts[selectParts.length - 1].def.type === 'alias') {\n        selectParts[selectParts.length - 1] = partModel;\n      } else {\n        selectParts.push(partModel);\n      }\n    }\n\n    this.updatePersistedParts();\n    this.updateRawSqlAndRefresh();\n  }\n\n  removeSelectPart(selectParts: any, part: { def: { type: string } }) {\n    if (part.def.type === 'column') {\n      // remove all parts of column unless its last column\n      if (this.selectParts.length > 1) {\n        const modelsIndex = indexOf(this.selectParts, selectParts);\n        this.selectParts.splice(modelsIndex, 1);\n      }\n    } else {\n      const partIndex = indexOf(selectParts, part);\n      selectParts.splice(partIndex, 1);\n    }\n\n    this.updatePersistedParts();\n  }\n\n  handleSelectPartEvent(selectParts: any, part: { def: any }, evt: { name: any }) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        switch (part.def.type) {\n          case 'aggregate':\n            return this.datasource\n              .metricFindQuery(this.metaBuilder.buildAggregateQuery())\n              .then(this.transformToSegments({}))\n              .catch(this.handleQueryError.bind(this));\n          case 'column':\n            return this.datasource\n              .metricFindQuery(this.metaBuilder.buildColumnQuery('value'))\n              .then(this.transformToSegments({}))\n              .catch(this.handleQueryError.bind(this));\n        }\n      }\n      case 'part-param-changed': {\n        this.updatePersistedParts();\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'action': {\n        this.removeSelectPart(selectParts, part);\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return Promise.resolve([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  handleGroupPartEvent(part: any, index: any, evt: { name: any }) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        return this.datasource\n          .metricFindQuery(this.metaBuilder.buildColumnQuery())\n          .then(this.transformToSegments({}))\n          .catch(this.handleQueryError.bind(this));\n      }\n      case 'part-param-changed': {\n        this.updatePersistedParts();\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'action': {\n        this.removeGroup(part, index);\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return Promise.resolve([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  addGroup(partType: string, value: string) {\n    let params = [value];\n    if (partType === 'time') {\n      params = ['$__interval', 'none'];\n    }\n    const partModel = sqlPart.create({ type: partType, params: params });\n\n    if (partType === 'time') {\n      // put timeGroup at start\n      this.groupParts.splice(0, 0, partModel);\n    } else {\n      this.groupParts.push(partModel);\n    }\n\n    // add aggregates when adding group by\n    for (const selectParts of this.selectParts) {\n      if (!selectParts.some((part) => part.def.type === 'aggregate')) {\n        const aggregate = sqlPart.create({ type: 'aggregate', params: ['avg'] });\n        selectParts.splice(1, 0, aggregate);\n        if (!selectParts.some((part) => part.def.type === 'alias')) {\n          const alias = sqlPart.create({ type: 'alias', params: [selectParts[0].part.params[0]] });\n          selectParts.push(alias);\n        }\n      }\n    }\n\n    this.updatePersistedParts();\n  }\n\n  removeGroup(part: { def: { type: string } }, index: number) {\n    if (part.def.type === 'time') {\n      // remove aggregations\n      this.selectParts = map(this.selectParts, (s: any) => {\n        return filter(s, (part: any) => {\n          if (part.def.type === 'aggregate' || part.def.type === 'percentile') {\n            return false;\n          }\n          return true;\n        });\n      });\n    }\n\n    this.groupParts.splice(index, 1);\n    this.updatePersistedParts();\n  }\n\n  handleWherePartEvent(whereParts: any, part: any, evt: any, index: any) {\n    switch (evt.name) {\n      case 'get-param-options': {\n        switch (evt.param.name) {\n          case 'left':\n            return this.datasource\n              .metricFindQuery(this.metaBuilder.buildColumnQuery())\n              .then(this.transformToSegments({}))\n              .catch(this.handleQueryError.bind(this));\n          case 'right':\n            if (['int4', 'int8', 'float4', 'float8', 'timestamp', 'timestamptz'].indexOf(part.datatype) > -1) {\n              // don't do value lookups for numerical fields\n              return Promise.resolve([]);\n            } else {\n              return this.datasource\n                .metricFindQuery(this.metaBuilder.buildValueQuery(part.params[0]))\n                .then(\n                  this.transformToSegments({\n                    addTemplateVars: true,\n                    templateQuoter: (v: string) => {\n                      return this.queryModel.quoteLiteral(v);\n                    },\n                  })\n                )\n                .catch(this.handleQueryError.bind(this));\n            }\n          case 'op':\n            return Promise.resolve(this.uiSegmentSrv.newOperators(this.metaBuilder.getOperators(part.datatype)));\n          default:\n            return Promise.resolve([]);\n        }\n      }\n      case 'part-param-changed': {\n        this.updatePersistedParts();\n        this.datasource.metricFindQuery(this.metaBuilder.buildDatatypeQuery(part.params[0])).then((d: any) => {\n          if (d.length === 1) {\n            part.datatype = d[0].text;\n          }\n        });\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'action': {\n        // remove element\n        whereParts.splice(index, 1);\n        this.updatePersistedParts();\n        this.updateRawSqlAndRefresh();\n        break;\n      }\n      case 'get-part-actions': {\n        return Promise.resolve([{ text: 'Remove', value: 'remove-part' }]);\n      }\n    }\n  }\n\n  getWhereOptions() {\n    const options = [];\n    if (this.queryModel.hasUnixEpochTimecolumn()) {\n      options.push(this.uiSegmentSrv.newSegment({ type: 'macro', value: '$__unixEpochFilter' }));\n    } else {\n      options.push(this.uiSegmentSrv.newSegment({ type: 'macro', value: '$__timeFilter' }));\n    }\n    options.push(this.uiSegmentSrv.newSegment({ type: 'expression', value: 'Expression' }));\n    return Promise.resolve(options);\n  }\n\n  addWhereAction(part: any, index: any) {\n    switch (this.whereAdd.type) {\n      case 'macro': {\n        const partModel = sqlPart.create({ type: 'macro', name: this.whereAdd.value, params: [] });\n        if (this.whereParts.length >= 1 && this.whereParts[0].def.type === 'macro') {\n          // replace current macro\n          this.whereParts[0] = partModel;\n        } else {\n          this.whereParts.splice(0, 0, partModel);\n        }\n        break;\n      }\n      default: {\n        this.whereParts.push(sqlPart.create({ type: 'expression', params: ['value', '=', 'value'] }));\n      }\n    }\n\n    this.updatePersistedParts();\n    this.resetPlusButton(this.whereAdd);\n    this.updateRawSqlAndRefresh();\n  }\n\n  getGroupOptions() {\n    return this.datasource\n      .metricFindQuery(this.metaBuilder.buildColumnQuery('group'))\n      .then((tags: any) => {\n        const options = [];\n        if (!this.queryModel.hasTimeGroup()) {\n          options.push(this.uiSegmentSrv.newSegment({ type: 'time', value: 'time($__interval,none)' }));\n        }\n        for (const tag of tags) {\n          options.push(this.uiSegmentSrv.newSegment({ type: 'column', value: tag.text }));\n        }\n        return options;\n      })\n      .catch(this.handleQueryError.bind(this));\n  }\n\n  addGroupAction() {\n    this.addGroup(this.groupAdd.type, this.groupAdd.value);\n    this.resetPlusButton(this.groupAdd);\n    this.updateRawSqlAndRefresh();\n  }\n\n  handleQueryError(err: any): any[] {\n    this.error = err.message || 'Failed to issue metric query';\n    return [];\n  }\n}\n","import { DataSourcePlugin } from '@grafana/data';\n\nimport { PostgresConfigEditor } from './configuration/ConfigurationEditor';\nimport { PostgresDatasource } from './datasource';\nimport { PostgresQueryCtrl } from './query_ctrl';\nimport { PostgresOptions, PostgresQuery, SecureJsonData } from './types';\n\nconst defaultQuery = `SELECT\n  extract(epoch from time_column) AS time,\n  text_column as text,\n  tags_column as tags\nFROM\n  metric_table\nWHERE\n  $__timeFilter(time_column)\n`;\n\nclass PostgresAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n\n  declare annotation: any;\n\n  /** @ngInject */\n  constructor($scope: any) {\n    this.annotation = $scope.ctrl.annotation;\n    this.annotation.rawQuery = this.annotation.rawQuery || defaultQuery;\n  }\n}\n\nexport const plugin = new DataSourcePlugin<PostgresDatasource, PostgresQuery, PostgresOptions, SecureJsonData>(\n  PostgresDatasource\n)\n  .setQueryCtrl(PostgresQueryCtrl)\n  .setConfigEditor(PostgresConfigEditor)\n  .setAnnotationQueryCtrl(PostgresAnnotationsQueryCtrl);\n","import { makeClassES5Compatible } from '@grafana/data';\nimport { loadPluginCss } from '@grafana/runtime';\nimport { MetricsPanelCtrl as MetricsPanelCtrlES6 } from 'app/angular/panel/metrics_panel_ctrl';\nimport { PanelCtrl as PanelCtrlES6 } from 'app/angular/panel/panel_ctrl';\nimport { QueryCtrl as QueryCtrlES6 } from 'app/angular/panel/query_ctrl';\n\nconst PanelCtrl = makeClassES5Compatible(PanelCtrlES6);\nconst MetricsPanelCtrl = makeClassES5Compatible(MetricsPanelCtrlES6);\nconst QueryCtrl = makeClassES5Compatible(QueryCtrlES6);\n\nexport { PanelCtrl, MetricsPanelCtrl, QueryCtrl, loadPluginCss };\n","import { useEffect, useRef } from 'react';\nvar isPrimitive = function (val) { return val !== Object(val); };\nvar useCustomCompareEffect = function (effect, deps, depsEqual) {\n    if (process.env.NODE_ENV !== 'production') {\n        if (!(deps instanceof Array) || !deps.length) {\n            console.warn('`useCustomCompareEffect` should not be used with no dependencies. Use React.useEffect instead.');\n        }\n        if (deps.every(isPrimitive)) {\n            console.warn('`useCustomCompareEffect` should not be used with dependencies that are all primitive values. Use React.useEffect instead.');\n        }\n        if (typeof depsEqual !== 'function') {\n            console.warn('`useCustomCompareEffect` should be used with depsEqual callback for comparing deps list');\n        }\n    }\n    var ref = useRef(undefined);\n    if (!ref.current || !depsEqual(deps, ref.current)) {\n        ref.current = deps;\n    }\n    useEffect(effect, ref.current);\n};\nexport default useCustomCompareEffect;\n","import isDeepEqualReact from 'fast-deep-equal/react';\nexport default isDeepEqualReact;\n","import useCustomCompareEffect from './useCustomCompareEffect';\nimport isDeepEqual from './misc/isDeepEqual';\nvar isPrimitive = function (val) { return val !== Object(val); };\nvar useDeepCompareEffect = function (effect, deps) {\n    if (process.env.NODE_ENV !== 'production') {\n        if (!(deps instanceof Array) || !deps.length) {\n            console.warn('`useDeepCompareEffect` should not be used with no dependencies. Use React.useEffect instead.');\n        }\n        if (deps.every(isPrimitive)) {\n            console.warn('`useDeepCompareEffect` should not be used with dependencies that are all primitive values. Use React.useEffect instead.');\n        }\n    }\n    useCustomCompareEffect(effect, deps, isDeepEqual);\n};\nexport default useDeepCompareEffect;\n","'use strict';\n\n// do not edit .js files directly - edit src/index.jst\n\n\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (key === '_owner' && a.$$typeof) {\n        // React-specific: avoid traversing React elements' _owner.\n        //  _owner contains circular references\n        // and is not needed when comparing the actual elements (and not their owners)\n        continue;\n      }\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n"],"names":["DEFAULT_PORTS","http","https","ftp","AngularLocationWrapper","constructor","this","absUrl","wrapInDeprecationWarning","hash","host","path","port","protocol","replace","search","state","url","fn","replacement","self","deprecationWarning","name","apply","arguments","window","location","origin","newHash","navigationLogger","Error","locationService","slice","URL","href","hostname","pathname","parsedPath","String","startsWith","length","parseInt","paramValue","newQuery","locationSearchToObject","key","Object","keys","undefined","updatedUrl","urlUtil","newUrl","trim","MetricsPanelCtrl","PanelCtrl","$scope","$injector","super","next","data","panelData","LoadingState","loading","processDataError","error","angularDirtyCheck","request","timeInfo","timeRange","range","useDataFrames","handleDataFrames","series","legacy","map","v","toLegacyResponseData","handleQueryResult","contextSrv","get","datasourceSrv","timeSrv","templateSrv","panel","datasource","events","on","PanelEvents","onMetricsPanelRefresh","bind","onPanelTearDown","onMetricsPanelMounted","queryRunner","getQueryRunner","querySubscription","getData","withTransforms","withFieldConfig","subscribe","panelDataObserver","unsubscribe","otherPanelInFullscreenMode","snapshotData","updateTimeRange","isArray","$timeout","emit","scopedVars","then","issueQueries","catch","err","cancelled","console","log","message","$root","$$phase","$digest","newTimeData","applyPanelTimeOverrides","run","queries","targets","panelId","id","dashboardId","dashboard","timezone","getTimezone","maxDataPoints","width","minInterval","interval","cacheTimeout","transformations","snapshot","frame","toDataFrameDTO","result","plugin","$parent","editorTabs","$location","EventBusSrv","timing","config","type","pluginId","pluginName","$on","panelDidMount","panelInitialized","renderingCompleted","profiler","refresh","publishAppEvent","event","payload","appEvent","initEditMode","editModeInitiated","addEditorTab","title","directiveFn","index","icon","editorTab","isString","templateUrl","splice","push","getExtendedMenu","menu","otherPanelInFullscreen","render","QueryCtrl","panelCtrl","ctrl","target","isLastQuery","indexOf","ConnectionLimits","props","onPropertyChanged","labelWidth","jsonData","onJSONDataNumberChanged","property","number","label","tooltip","placeholder","value","maxOpenConns","onChange","maxIdleConns","connMaxLifetime","TLSSecretsConfig","editorProps","showCACert","showKeyPair","secureJsonFields","options","cols","rows","isConfigured","tlsClientCert","onUpdateDatasourceSecureJsonDataOption","onReset","updateDatasourcePluginResetOption","tlsCACert","tlsClientKey","PostgresTLSModes","PostgresTLSMethods","PostgresQueryModel","format","timeColumn","metricColumn","group","where","params","select","rawQuery","interpolateQueryStr","unquoteIdentifier","substring","quoteIdentifier","quoteLiteral","escapeLiteral","hasTimeGroup","find","g","hasMetricColumn","variable","defaultFormatFn","multi","includeAll","join","interpolate","rawSql","buildQuery","hasUnixEpochTimecolumn","timeColumnType","buildTimeColumn","alias","timeGroup","query","macro","args","buildMetricColumn","buildValueColumns","column","buildValueColumn","aggregate","windows","func","overParts","over","curr","prev","buildWhereClause","conditions","tag","buildGroupClause","groupSection","i","part","table","ResponseParser","transformMetricFindResponse","raw","frames","toDataQueryResponse","values","textField","fields","f","valueField","text","flatMap","toArray","uniqBy","timeField","timeEndField","tagsField","list","timeEnd","Math","floor","annotation","time","tags","split","PostgresDatasource","DataSourceWithBackend","instanceSettings","getTemplateSrv","queryModel","_map","responseParser","settingsData","timeInterval","interpolateVariablesInQueries","expandedQueries","getRef","interpolateVariable","filterQuery","hide","applyTemplateVariables","refId","Promise","reject","lastValueFrom","getBackendSrv","fetch","method","from","valueOf","toString","to","requestId","pipe","async","transformAnnotationResponse","res","metricFindQuery","optionalOptions","getSearchFilterScopedVar","wildcardChar","interpolatedQuery","rsp","catchError","of","_metaRequest","results","testDatasource","status","toTestingStatus","targetContainsTemplate","containsTemplate","useAutoDetectFeatures","setVersionOptions","saved","setSaved","useState","onOptionsChange","useDeepCompareEffect","database","user","secureJsonData","password","sslmode","disable","sslCertFile","sslKeyFile","sslRootCertFile","postgresVersion","readOnly","isValidConfig","getDatasourceSrv","loadDatasource","version","getVersion","versionNumber","timescaledb","timescaledbVersion","getTimescaleDBVersion","updateDatasourcePluginJsonDataOption","major","trunc","minor","postgresVersions","p","put","updateDatasourcePluginOption","PostgresMetaQuery","getOperators","datatype","quoteIdentAsLiteral","findMetricTable","buildSchemaConstraint","buildTableConstraint","includes","parts","buildTableQuery","buildColumnQuery","buildValueQuery","buildDatatypeQuery","buildAggregateQuery","SqlPartDef","toUpperCase","style","wrapOpen","wrapClose","separator","defaultParams","SqlPart","def","clone","updateParam","strValue","optional","register","dynamicLookup","baseOptions","timescaleOptions","quote","create","PostgresQueryCtrl","uiSegmentSrv","metaBuilder","updateProjection","formats","segment","newSegment","tableSegment","html","timeColumnSegment","updateRawSqlAndRefresh","fake","metricColumnSegment","buildSelectMenu","whereAdd","newPlusButton","groupAdd","onDataReceived","onDataError","timescaleAggCheck","aggIndex","findAggregateIndex","selectParts","baseOpts","timescaleOpts","concat","sqlPart","filter","n","whereParts","groupParts","updatePersistedParts","selectMenu","aggregates","submenu","aggregates2","toggleEditorMode","appEvents","ShowConfirmModalEvent","text2","yesText","onConfirm","$evalAsync","resetPlusButton","button","plusButton","getTableSegments","transformToSegments","handleQueryError","tableChanged","task1","r","timeColumnChanged","task2","all","getTimeColumnSegments","partModel","getMetricColumnSegments","addNone","metricColumnChanged","dataList","lastQueryError","lastQueryMeta","meta","queryRes","segments","expandable","addTemplateVars","getVariables","templateQuoter","unshift","findIndex","findWindowIndex","addSelectPart","item","subItem","partType","addAlias","addGroup","windowIndex","removeSelectPart","modelsIndex","partIndex","handleSelectPartEvent","evt","resolve","handleGroupPartEvent","removeGroup","some","s","handleWherePartEvent","param","newOperators","d","getWhereOptions","addWhereAction","getGroupOptions","addGroupAction","PostgresAnnotationsQueryCtrl","DataSourcePlugin","setQueryCtrl","setConfigEditor","versionOptions","tlsModes","require","verifyCA","verifyFull","tlsMethods","filePath","fileContent","onJSONDataOptionSelected","onDSOptionChanged","currentTarget","FieldSet","InlineField","Input","I","InlineFieldRow","SecretInput","onBlur","htmlFor","Select","inputId","tlsConfigurationMethod","onUpdateDatasourceJsonDataOption","checked","Alert","severity","setAnnotationQueryCtrl","makeClassES5Compatible","PanelCtrlES6","MetricsPanelCtrlES6","QueryCtrlES6","effect","deps","depsEqual","ref","useRef","current","useEffect","isDeepEqual","module","exports","equal","a","b","Array","RegExp","source","flags","prototype","hasOwnProperty","call","$$typeof"],"sourceRoot":""}