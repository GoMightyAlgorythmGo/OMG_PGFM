{"version":3,"file":"elasticsearchPlugin.da08164816098f4c83d5.js","mappings":"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","sources":["webpack://grafana/./public/app/core/utils/types.ts","webpack://grafana/./public/app/plugins/datasource/elasticsearch/hooks/useStatelessReducer.ts","webpack://grafana/./public/app/plugins/datasource/elasticsearch/components/QueryEditor/MetricAggregationsEditor/SettingsEditor/BucketScriptSettingsEditor/utils.ts","webpack://grafana/./public/app/plugins/datasource/elasticsearch/components/QueryEditor/MetricAggregationsEditor/aggregations.ts","webpack://grafana/./public/app/plugins/datasource/elasticsearch/components/QueryEditor/MetricAggregationsEditor/utils.ts","webpack://grafana/./public/app/plugins/datasource/elasticsearch/queryDef.ts","webpack://grafana/./public/app/plugins/datasource/elasticsearch/utils.ts","webpack://grafana/./public/app/plugins/datasource/elasticsearch/components/QueryEditor/MetricAggregationsEditor/state/actions.ts","webpack://grafana/./public/app/plugins/datasource/elasticsearch/components/QueryEditor/state.ts","webpack://grafana/./public/app/plugins/datasource/elasticsearch/components/QueryEditor/BucketAggregationsEditor/SettingsEditor/FiltersSettingsEditor/utils.ts","webpack://grafana/./public/app/plugins/datasource/elasticsearch/components/QueryEditor/BucketAggregationsEditor/utils.ts","webpack://grafana/./public/app/plugins/datasource/elasticsearch/components/QueryEditor/BucketAggregationsEditor/state/actions.ts","webpack://grafana/./public/app/plugins/datasource/elasticsearch/components/QueryEditor/MetricAggregationsEditor/state/reducer.ts","webpack://grafana/./public/app/plugins/datasource/elasticsearch/components/QueryEditor/ElasticsearchQueryContext.tsx","webpack://grafana/./public/app/plugins/datasource/elasticsearch/components/QueryEditor/BucketAggregationsEditor/state/reducer.ts","webpack://grafana/./public/app/plugins/datasource/elasticsearch/hooks/useNextId.ts","webpack://grafana/./public/app/plugins/datasource/elasticsearch/components/IconButton.tsx","webpack://grafana/./public/app/plugins/datasource/elasticsearch/components/QueryEditor/QueryEditorRow.tsx","webpack://grafana/./public/app/plugins/datasource/elasticsearch/components/QueryEditor/BucketAggregationsEditor/aggregations.ts","webpack://grafana/./public/app/plugins/datasource/elasticsearch/hooks/useFields.ts","webpack://grafana/./public/app/plugins/datasource/elasticsearch/components/QueryEditor/styles.ts","webpack://grafana/./public/app/plugins/datasource/elasticsearch/components/QueryEditor/SettingsEditorContainer.tsx","webpack://grafana/./public/app/plugins/datasource/elasticsearch/components/hooks/useCreatableSelectPersistedBehaviour.ts","webpack://grafana/./public/app/plugins/datasource/elasticsearch/components/QueryEditor/BucketAggregationsEditor/SettingsEditor/DateHistogramSettingsEditor.tsx","webpack://grafana/./public/app/plugins/datasource/elasticsearch/components/AddRemove.tsx","webpack://grafana/./public/app/plugins/datasource/elasticsearch/components/QueryEditor/BucketAggregationsEditor/SettingsEditor/FiltersSettingsEditor/state/actions.ts","webpack://grafana/./public/app/plugins/datasource/elasticsearch/components/QueryEditor/BucketAggregationsEditor/SettingsEditor/FiltersSettingsEditor/state/reducer.ts","webpack://grafana/./public/app/plugins/datasource/elasticsearch/components/QueryEditor/BucketAggregationsEditor/SettingsEditor/FiltersSettingsEditor/index.tsx","webpack://grafana/./public/app/plugins/datasource/elasticsearch/components/QueryEditor/BucketAggregationsEditor/SettingsEditor/TermsSettingsEditor.tsx","webpack://grafana/./public/app/plugins/datasource/elasticsearch/components/QueryEditor/BucketAggregationsEditor/SettingsEditor/useDescription.ts","webpack://grafana/./public/app/plugins/datasource/elasticsearch/components/QueryEditor/BucketAggregationsEditor/SettingsEditor/index.tsx","webpack://grafana/./public/app/plugins/datasource/elasticsearch/components/QueryEditor/BucketAggregationsEditor/BucketAggregationEditor.tsx","webpack://grafana/./public/app/plugins/datasource/elasticsearch/components/QueryEditor/BucketAggregationsEditor/index.tsx","webpack://grafana/./public/app/plugins/datasource/elasticsearch/components/MetricPicker.tsx","webpack://grafana/./public/app/plugins/datasource/elasticsearch/components/QueryEditor/MetricAggregationsEditor/SettingsEditor/SettingField.tsx","webpack://grafana/./public/app/plugins/datasource/elasticsearch/components/QueryEditor/MetricAggregationsEditor/SettingsEditor/BucketScriptSettingsEditor/state/actions.ts","webpack://grafana/./public/app/plugins/datasource/elasticsearch/components/QueryEditor/MetricAggregationsEditor/SettingsEditor/BucketScriptSettingsEditor/state/reducer.ts","webpack://grafana/./public/app/plugins/datasource/elasticsearch/components/QueryEditor/MetricAggregationsEditor/SettingsEditor/BucketScriptSettingsEditor/index.tsx","webpack://grafana/./public/app/plugins/datasource/elasticsearch/components/QueryEditor/MetricAggregationsEditor/SettingsEditor/MovingAverageSettingsEditor.tsx","webpack://grafana/./public/app/plugins/datasource/elasticsearch/components/QueryEditor/MetricAggregationsEditor/SettingsEditor/TopMetricsSettingsEditor.tsx","webpack://grafana/./public/app/plugins/datasource/elasticsearch/components/QueryEditor/MetricAggregationsEditor/SettingsEditor/index.tsx","webpack://grafana/./public/app/plugins/datasource/elasticsearch/components/QueryEditor/MetricAggregationsEditor/SettingsEditor/useDescription.ts","webpack://grafana/./public/app/plugins/datasource/elasticsearch/components/QueryEditor/MetricAggregationsEditor/MetricEditor.tsx","webpack://grafana/./public/app/plugins/datasource/elasticsearch/components/QueryEditor/MetricAggregationsEditor/styles.ts","webpack://grafana/./public/app/plugins/datasource/elasticsearch/components/QueryEditor/MetricAggregationsEditor/index.tsx","webpack://grafana/./public/app/plugins/datasource/elasticsearch/components/QueryEditor/index.tsx","webpack://grafana/./public/app/plugins/datasource/elasticsearch/configuration/DataLink.tsx","webpack://grafana/./public/app/plugins/datasource/elasticsearch/configuration/DataLinks.tsx","webpack://grafana/./public/app/plugins/datasource/elasticsearch/configuration/ElasticDetails.tsx","webpack://grafana/./public/app/plugins/datasource/elasticsearch/configuration/LogsConfig.tsx","webpack://grafana/./public/app/plugins/datasource/elasticsearch/configuration/utils.ts","webpack://grafana/./public/app/plugins/datasource/elasticsearch/IndexPattern.ts","webpack://grafana/./public/app/plugins/datasource/elasticsearch/LanguageProvider.ts","webpack://grafana/./public/app/plugins/datasource/elasticsearch/QueryBuilder.ts","webpack://grafana/./public/app/plugins/datasource/elasticsearch/components/QueryEditor/AnnotationQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/elasticsearch/elastic_response.ts","webpack://grafana/./public/app/plugins/datasource/elasticsearch/datasource.ts","webpack://grafana/./public/app/plugins/datasource/elasticsearch/module.ts","webpack://grafana/./public/app/plugins/datasource/elasticsearch/configuration/ConfigEditor.tsx"],"sourcesContent":["type Truthy<T> = T extends false | '' | 0 | null | undefined ? never : T;\n\nexport const isTruthy = <T>(value: T): value is Truthy<T> => Boolean(value);\n","import { Action } from '@reduxjs/toolkit';\nimport { createContext, useCallback, useContext } from 'react';\n\nexport type Reducer<S, A extends Action> = (state: S, action: A) => S;\n\nexport const combineReducers =\n  <S, A extends Action = Action>(reducers: { [P in keyof S]: Reducer<S[P], A> }) =>\n  (state: S, action: A): Partial<S> => {\n    const newState = {} as S;\n    for (const key in reducers) {\n      newState[key] = reducers[key](state[key], action);\n    }\n    return newState;\n  };\n\nexport const useStatelessReducer = <State, A = Action>(\n  onChange: (value: State) => void,\n  state: State,\n  reducer: (state: State, action: A) => State\n) => {\n  const dispatch = useCallback(\n    (action: A) => {\n      onChange(reducer(state, action));\n    },\n    [onChange, state, reducer]\n  );\n\n  return dispatch;\n};\n\nexport const DispatchContext = createContext<((action: Action) => void) | undefined>(undefined);\n\nexport const useDispatch = <T extends Action = Action>(): ((action: T) => void) => {\n  const dispatch = useContext(DispatchContext);\n\n  if (!dispatch) {\n    throw new Error('Use DispatchContext first.');\n  }\n\n  return dispatch;\n};\n","import { PipelineVariable } from '../../aggregations';\n\nexport const defaultPipelineVariable = (name: string): PipelineVariable => ({ name, pipelineAgg: '' });\n\n/**\n * Given an array of pipeline variables generates a new unique pipeline variable name in the form of `var{n}`.\n * The value for `n` is calculated based on the variables names in pipelineVars matching `var{n}`.\n */\nexport const generatePipelineVariableName = (pipelineVars: PipelineVariable[]): string =>\n  `var${Math.max(0, ...pipelineVars.map((v) => parseInt(v.name.match('^var(\\\\d+)$')?.[1] || '0', 10))) + 1}`;\n","import { metricAggregationConfig } from './utils';\n\nexport type PipelineMetricAggregationType =\n  | 'moving_avg'\n  | 'moving_fn'\n  | 'derivative'\n  | 'serial_diff'\n  | 'cumulative_sum'\n  | 'bucket_script';\n\nexport type MetricAggregationType =\n  | 'count'\n  | 'avg'\n  | 'sum'\n  | 'min'\n  | 'max'\n  | 'extended_stats'\n  | 'percentiles'\n  | 'cardinality'\n  | 'raw_document'\n  | 'raw_data'\n  | 'logs'\n  | 'rate'\n  | 'top_metrics'\n  | PipelineMetricAggregationType;\n\ninterface BaseMetricAggregation {\n  id: string;\n  type: MetricAggregationType;\n  hide?: boolean;\n}\n\nexport interface PipelineVariable {\n  name: string;\n  pipelineAgg: string;\n}\n\nexport interface MetricAggregationWithField extends BaseMetricAggregation {\n  field?: string;\n}\n\nexport interface MetricAggregationWithMissingSupport extends BaseMetricAggregation {\n  settings?: {\n    missing?: string;\n  };\n}\n\ntype InlineScript = string | { inline?: string };\nexport interface MetricAggregationWithInlineScript extends BaseMetricAggregation {\n  settings?: {\n    script?: InlineScript;\n  };\n}\n\nexport interface Count extends BaseMetricAggregation {\n  type: 'count';\n}\n\nexport interface Average\n  extends MetricAggregationWithField,\n    MetricAggregationWithMissingSupport,\n    MetricAggregationWithInlineScript {\n  type: 'avg';\n  settings?: {\n    script?: InlineScript;\n    missing?: string;\n  };\n}\n\nexport interface Sum extends MetricAggregationWithField, MetricAggregationWithInlineScript {\n  type: 'sum';\n  settings?: {\n    script?: InlineScript;\n    missing?: string;\n  };\n}\n\nexport interface Max extends MetricAggregationWithField, MetricAggregationWithInlineScript {\n  type: 'max';\n  settings?: {\n    script?: InlineScript;\n    missing?: string;\n  };\n}\n\nexport interface Min extends MetricAggregationWithField, MetricAggregationWithInlineScript {\n  type: 'min';\n  settings?: {\n    script?: InlineScript;\n    missing?: string;\n  };\n}\n\nexport type ExtendedStatMetaType =\n  | 'avg'\n  | 'min'\n  | 'max'\n  | 'sum'\n  | 'count'\n  | 'std_deviation'\n  | 'std_deviation_bounds_upper'\n  | 'std_deviation_bounds_lower';\nexport interface ExtendedStat {\n  label: string;\n  value: ExtendedStatMetaType;\n}\n\nexport interface ExtendedStats extends MetricAggregationWithField, MetricAggregationWithInlineScript {\n  type: 'extended_stats';\n  settings?: {\n    script?: InlineScript;\n    missing?: string;\n    sigma?: string;\n  };\n  meta?: {\n    [P in ExtendedStatMetaType]?: boolean;\n  };\n}\n\nexport interface Percentiles extends MetricAggregationWithField, MetricAggregationWithInlineScript {\n  type: 'percentiles';\n  settings?: {\n    percents?: string[];\n    script?: InlineScript;\n    missing?: string;\n  };\n}\n\nexport interface UniqueCount extends MetricAggregationWithField {\n  type: 'cardinality';\n  settings?: {\n    precision_threshold?: string;\n    missing?: string;\n  };\n}\n\nexport interface RawDocument extends BaseMetricAggregation {\n  type: 'raw_document';\n  settings?: {\n    size?: string;\n  };\n}\n\nexport interface RawData extends BaseMetricAggregation {\n  type: 'raw_data';\n  settings?: {\n    size?: string;\n  };\n}\n\nexport interface Logs extends BaseMetricAggregation {\n  type: 'logs';\n  settings?: {\n    limit?: string;\n  };\n}\n\nexport interface Rate extends MetricAggregationWithField {\n  type: 'rate';\n  settings?: {\n    unit?: string;\n    mode?: string;\n  };\n}\n\nexport interface BasePipelineMetricAggregation extends MetricAggregationWithField {\n  type: PipelineMetricAggregationType;\n  pipelineAgg?: string;\n}\n\nexport interface PipelineMetricAggregationWithMultipleBucketPaths extends BaseMetricAggregation {\n  type: PipelineMetricAggregationType;\n  pipelineVariables?: PipelineVariable[];\n}\n\nexport type MovingAverageModel = 'simple' | 'linear' | 'ewma' | 'holt' | 'holt_winters';\n\nexport interface MovingAverageModelOption {\n  label: string;\n  value: MovingAverageModel;\n}\n\nexport interface BaseMovingAverageModelSettings {\n  model: MovingAverageModel;\n  window: string;\n  predict: string;\n}\n\nexport interface MovingAverageSimpleModelSettings extends BaseMovingAverageModelSettings {\n  model: 'simple';\n}\n\nexport interface MovingAverageLinearModelSettings extends BaseMovingAverageModelSettings {\n  model: 'linear';\n}\n\nexport interface MovingAverageEWMAModelSettings extends BaseMovingAverageModelSettings {\n  model: 'ewma';\n  settings?: {\n    alpha?: string;\n  };\n  minimize: boolean;\n}\n\nexport interface MovingAverageHoltModelSettings extends BaseMovingAverageModelSettings {\n  model: 'holt';\n  settings: {\n    alpha?: string;\n    beta?: string;\n  };\n  minimize: boolean;\n}\n\nexport interface MovingAverageHoltWintersModelSettings extends BaseMovingAverageModelSettings {\n  model: 'holt_winters';\n  settings: {\n    alpha?: string;\n    beta?: string;\n    gamma?: string;\n    period?: string;\n    pad?: boolean;\n  };\n  minimize: boolean;\n}\n\nexport type MovingAverageModelSettings<T extends MovingAverageModel = MovingAverageModel> = Partial<\n  Extract<\n    | MovingAverageSimpleModelSettings\n    | MovingAverageLinearModelSettings\n    | MovingAverageEWMAModelSettings\n    | MovingAverageHoltModelSettings\n    | MovingAverageHoltWintersModelSettings,\n    { model: T }\n  >\n>;\n\nexport interface MovingAverage<T extends MovingAverageModel = MovingAverageModel>\n  extends BasePipelineMetricAggregation {\n  type: 'moving_avg';\n  settings?: MovingAverageModelSettings<T>;\n}\n\nexport const isEWMAMovingAverage = (metric: MovingAverage | MovingAverage<'ewma'>): metric is MovingAverage<'ewma'> =>\n  metric.settings?.model === 'ewma';\n\nexport const isHoltMovingAverage = (metric: MovingAverage | MovingAverage<'holt'>): metric is MovingAverage<'holt'> =>\n  metric.settings?.model === 'holt';\n\nexport const isHoltWintersMovingAverage = (\n  metric: MovingAverage | MovingAverage<'holt_winters'>\n): metric is MovingAverage<'holt_winters'> => metric.settings?.model === 'holt_winters';\n\nexport const isMovingAverageWithModelSettings = (\n  metric: MovingAverage\n): metric is MovingAverage<'ewma'> | MovingAverage<'holt'> | MovingAverage<'holt_winters'> =>\n  ['holt', 'ewma', 'holt_winters'].includes(metric.settings?.model || '');\n\nexport interface MovingFunction extends BasePipelineMetricAggregation {\n  type: 'moving_fn';\n  settings?: {\n    window?: string;\n    script?: InlineScript;\n    shift?: string;\n  };\n}\n\nexport interface Derivative extends BasePipelineMetricAggregation {\n  type: 'derivative';\n  settings?: {\n    unit?: string;\n  };\n}\n\nexport interface SerialDiff extends BasePipelineMetricAggregation {\n  type: 'serial_diff';\n  settings?: {\n    lag?: string;\n  };\n}\n\nexport interface CumulativeSum extends BasePipelineMetricAggregation {\n  type: 'cumulative_sum';\n  settings?: {\n    format?: string;\n  };\n}\n\nexport interface BucketScript extends PipelineMetricAggregationWithMultipleBucketPaths {\n  type: 'bucket_script';\n  settings?: {\n    script?: InlineScript;\n  };\n}\n\nexport interface TopMetrics extends BaseMetricAggregation {\n  type: 'top_metrics';\n  settings?: {\n    order?: string;\n    orderBy?: string;\n    metrics?: string[];\n  };\n}\n\ntype PipelineMetricAggregation = MovingAverage | Derivative | CumulativeSum | BucketScript;\n\nexport type MetricAggregationWithSettings =\n  | BucketScript\n  | CumulativeSum\n  | Derivative\n  | SerialDiff\n  | RawData\n  | RawDocument\n  | UniqueCount\n  | Percentiles\n  | ExtendedStats\n  | Min\n  | Max\n  | Sum\n  | Average\n  | MovingAverage\n  | MovingFunction\n  | Logs\n  | Rate\n  | TopMetrics;\n\nexport type MetricAggregationWithMeta = ExtendedStats;\n\nexport type MetricAggregation = Count | PipelineMetricAggregation | MetricAggregationWithSettings;\n\n// Guards\n// Given the structure of the aggregations (ie. `settings` field being always optional) we cannot\n// determine types based solely on objects' properties, therefore we use `metricAggregationConfig` as the\n// source of truth.\n\n/**\n * Checks if `metric` requires a field (either referring to a document or another aggregation)\n * @param metric\n */\nexport const isMetricAggregationWithField = (\n  metric: BaseMetricAggregation | MetricAggregationWithField\n): metric is MetricAggregationWithField => metricAggregationConfig[metric.type].requiresField;\n\nexport const isPipelineAggregation = (\n  metric: BaseMetricAggregation | PipelineMetricAggregation\n): metric is PipelineMetricAggregation => metricAggregationConfig[metric.type].isPipelineAgg;\n\nexport const isPipelineAggregationWithMultipleBucketPaths = (\n  metric: BaseMetricAggregation | PipelineMetricAggregationWithMultipleBucketPaths\n): metric is PipelineMetricAggregationWithMultipleBucketPaths =>\n  metricAggregationConfig[metric.type].supportsMultipleBucketPaths;\n\nexport const isMetricAggregationWithMissingSupport = (\n  metric: BaseMetricAggregation | MetricAggregationWithMissingSupport\n): metric is MetricAggregationWithMissingSupport => metricAggregationConfig[metric.type].supportsMissing;\n\nexport const isMetricAggregationWithSettings = (\n  metric: BaseMetricAggregation | MetricAggregationWithSettings\n): metric is MetricAggregationWithSettings => metricAggregationConfig[metric.type].hasSettings;\n\nexport const isMetricAggregationWithMeta = (\n  metric: BaseMetricAggregation | MetricAggregationWithMeta\n): metric is MetricAggregationWithMeta => metricAggregationConfig[metric.type].hasMeta;\n\nexport const isMetricAggregationWithInlineScript = (\n  metric: BaseMetricAggregation | MetricAggregationWithInlineScript\n): metric is MetricAggregationWithInlineScript => metricAggregationConfig[metric.type].supportsInlineScript;\n\nexport const METRIC_AGGREGATION_TYPES: MetricAggregationType[] = [\n  'count',\n  'avg',\n  'sum',\n  'min',\n  'max',\n  'extended_stats',\n  'percentiles',\n  'cardinality',\n  'raw_document',\n  'raw_data',\n  'logs',\n  'moving_avg',\n  'moving_fn',\n  'derivative',\n  'serial_diff',\n  'cumulative_sum',\n  'bucket_script',\n  'rate',\n  'top_metrics',\n];\n\nexport const isMetricAggregationType = (s: MetricAggregationType | string): s is MetricAggregationType =>\n  METRIC_AGGREGATION_TYPES.includes(s as MetricAggregationType);\n","import { MetricsConfiguration } from '../../../types';\n\nimport {\n  defaultPipelineVariable,\n  generatePipelineVariableName,\n} from './SettingsEditor/BucketScriptSettingsEditor/utils';\nimport {\n  isMetricAggregationWithField,\n  isPipelineAggregationWithMultipleBucketPaths,\n  MetricAggregation,\n  PipelineMetricAggregationType,\n} from './aggregations';\n\nexport const metricAggregationConfig: MetricsConfiguration = {\n  count: {\n    label: 'Count',\n    requiresField: false,\n    isPipelineAgg: false,\n    supportsMissing: false,\n    supportsMultipleBucketPaths: false,\n    hasSettings: false,\n    hasMeta: false,\n    supportsInlineScript: false,\n    defaults: {},\n  },\n  avg: {\n    label: 'Average',\n    requiresField: true,\n    supportsInlineScript: true,\n    supportsMissing: true,\n    isPipelineAgg: false,\n    supportsMultipleBucketPaths: false,\n    hasSettings: true,\n    hasMeta: false,\n    defaults: {},\n  },\n  sum: {\n    label: 'Sum',\n    requiresField: true,\n    supportsInlineScript: true,\n    supportsMissing: true,\n    isPipelineAgg: false,\n    supportsMultipleBucketPaths: false,\n    hasSettings: true,\n    hasMeta: false,\n    defaults: {},\n  },\n  max: {\n    label: 'Max',\n    requiresField: true,\n    supportsInlineScript: true,\n    supportsMissing: true,\n    isPipelineAgg: false,\n    supportsMultipleBucketPaths: false,\n    hasSettings: true,\n    hasMeta: false,\n    defaults: {},\n  },\n  min: {\n    label: 'Min',\n    requiresField: true,\n    supportsInlineScript: true,\n    supportsMissing: true,\n    isPipelineAgg: false,\n    supportsMultipleBucketPaths: false,\n    hasSettings: true,\n    hasMeta: false,\n    defaults: {},\n  },\n  extended_stats: {\n    label: 'Extended Stats',\n    requiresField: true,\n    supportsMissing: true,\n    supportsInlineScript: true,\n    isPipelineAgg: false,\n    supportsMultipleBucketPaths: false,\n    hasSettings: true,\n    hasMeta: true,\n    defaults: {\n      meta: {\n        std_deviation_bounds_lower: true,\n        std_deviation_bounds_upper: true,\n      },\n    },\n  },\n  percentiles: {\n    label: 'Percentiles',\n    requiresField: true,\n    supportsMissing: true,\n    supportsInlineScript: true,\n    isPipelineAgg: false,\n    supportsMultipleBucketPaths: false,\n    hasSettings: true,\n    hasMeta: false,\n    defaults: {\n      settings: {\n        percents: ['25', '50', '75', '95', '99'],\n      },\n    },\n  },\n  cardinality: {\n    label: 'Unique Count',\n    requiresField: true,\n    supportsMissing: true,\n    isPipelineAgg: false,\n    supportsMultipleBucketPaths: false,\n    hasSettings: true,\n    supportsInlineScript: false,\n    hasMeta: false,\n    defaults: {},\n  },\n  moving_avg: {\n    // deprecated in 6.4.0, removed in 8.0.0,\n    // recommended replacement is moving_fn\n    label: 'Moving Average',\n    requiresField: true,\n    isPipelineAgg: true,\n    versionRange: '<8.0.0',\n    supportsMissing: false,\n    supportsMultipleBucketPaths: false,\n    hasSettings: true,\n    supportsInlineScript: false,\n    hasMeta: false,\n    defaults: {\n      settings: {\n        model: 'simple',\n        window: '5',\n      },\n    },\n  },\n  moving_fn: {\n    // TODO: Check this\n    label: 'Moving Function',\n    requiresField: true,\n    isPipelineAgg: true,\n    supportsMultipleBucketPaths: false,\n    supportsInlineScript: false,\n    supportsMissing: false,\n    hasMeta: false,\n    hasSettings: true,\n    defaults: {},\n  },\n  derivative: {\n    label: 'Derivative',\n    requiresField: true,\n    isPipelineAgg: true,\n    supportsMissing: false,\n    supportsMultipleBucketPaths: false,\n    hasSettings: true,\n    supportsInlineScript: false,\n    hasMeta: false,\n    defaults: {},\n  },\n  serial_diff: {\n    label: 'Serial Difference',\n    requiresField: true,\n    isPipelineAgg: true,\n    supportsMissing: false,\n    supportsMultipleBucketPaths: false,\n    hasSettings: true,\n    supportsInlineScript: false,\n    hasMeta: false,\n    defaults: {\n      settings: {\n        lag: '1',\n      },\n    },\n  },\n  cumulative_sum: {\n    label: 'Cumulative Sum',\n    requiresField: true,\n    isPipelineAgg: true,\n    supportsMissing: false,\n    supportsMultipleBucketPaths: false,\n    hasSettings: true,\n    supportsInlineScript: false,\n    hasMeta: false,\n    defaults: {},\n  },\n  bucket_script: {\n    label: 'Bucket Script',\n    requiresField: false,\n    isPipelineAgg: true,\n    supportsMissing: false,\n    supportsMultipleBucketPaths: true,\n    hasSettings: true,\n    supportsInlineScript: false,\n    hasMeta: false,\n    defaults: {\n      pipelineVariables: [defaultPipelineVariable(generatePipelineVariableName([]))],\n    },\n  },\n  raw_document: {\n    label: 'Raw Document (legacy)',\n    requiresField: false,\n    isSingleMetric: true,\n    isPipelineAgg: false,\n    supportsMissing: false,\n    supportsMultipleBucketPaths: false,\n    hasSettings: true,\n    supportsInlineScript: false,\n    hasMeta: false,\n    defaults: {\n      settings: {\n        size: '500',\n      },\n    },\n  },\n  raw_data: {\n    label: 'Raw Data',\n    requiresField: false,\n    isSingleMetric: true,\n    isPipelineAgg: false,\n    supportsMissing: false,\n    supportsMultipleBucketPaths: false,\n    hasSettings: true,\n    supportsInlineScript: false,\n    hasMeta: false,\n    defaults: {\n      settings: {\n        size: '500',\n      },\n    },\n  },\n  logs: {\n    label: 'Logs',\n    requiresField: false,\n    isPipelineAgg: false,\n    supportsMissing: false,\n    supportsMultipleBucketPaths: false,\n    hasSettings: true,\n    isSingleMetric: true,\n    supportsInlineScript: false,\n    hasMeta: false,\n    defaults: {\n      settings: {\n        limit: '500',\n      },\n    },\n  },\n  top_metrics: {\n    label: 'Top Metrics',\n    xpack: true,\n    requiresField: false,\n    isPipelineAgg: false,\n    supportsMissing: false,\n    supportsMultipleBucketPaths: false,\n    hasSettings: true,\n    supportsInlineScript: false,\n    hasMeta: false,\n    defaults: {\n      settings: {\n        order: 'desc',\n      },\n    },\n  },\n  rate: {\n    label: 'Rate',\n    xpack: true,\n    requiresField: true,\n    isPipelineAgg: false,\n    supportsMissing: false,\n    supportsMultipleBucketPaths: false,\n    hasSettings: true,\n    supportsInlineScript: true,\n    hasMeta: false,\n    defaults: {},\n  },\n};\n\ninterface PipelineOption {\n  label: string;\n  default?: string | number | boolean;\n}\n\ntype PipelineOptions = {\n  [K in PipelineMetricAggregationType]: PipelineOption[];\n};\n\nexport const pipelineOptions: PipelineOptions = {\n  moving_avg: [\n    { label: 'window', default: 5 },\n    { label: 'model', default: 'simple' },\n    { label: 'predict' },\n    { label: 'minimize', default: false },\n  ],\n  moving_fn: [{ label: 'window', default: 5 }, { label: 'script' }],\n  derivative: [{ label: 'unit' }],\n  serial_diff: [{ label: 'lag' }],\n  cumulative_sum: [{ label: 'format' }],\n  bucket_script: [],\n};\n\n/**\n * Given a metric `MetricA` and an array of metrics, returns all children of `MetricA`.\n * `MetricB` is considered a child of `MetricA` if `MetricA` is referenced by `MetricB` in its `field` attribute\n * (`MetricA.id === MetricB.field`) or in its pipeline aggregation variables (for bucket_scripts).\n * @param metric\n * @param metrics\n */\nexport const getChildren = (metric: MetricAggregation, metrics: MetricAggregation[]): MetricAggregation[] => {\n  const children = metrics.filter((m) => {\n    // TODO: Check this.\n    if (isPipelineAggregationWithMultipleBucketPaths(m)) {\n      return m.pipelineVariables?.some((pv) => pv.pipelineAgg === metric.id);\n    }\n\n    return isMetricAggregationWithField(m) && metric.id === m.field;\n  });\n\n  return [...children, ...children.flatMap((child) => getChildren(child, metrics))];\n};\n","import { DateHistogram } from './components/QueryEditor/BucketAggregationsEditor/aggregations';\nimport {\n  ExtendedStat,\n  MetricAggregation,\n  MovingAverageModelOption,\n  MetricAggregationType,\n} from './components/QueryEditor/MetricAggregationsEditor/aggregations';\nimport { metricAggregationConfig, pipelineOptions } from './components/QueryEditor/MetricAggregationsEditor/utils';\nimport { ElasticsearchQuery } from './types';\n\nexport const extendedStats: ExtendedStat[] = [\n  { label: 'Avg', value: 'avg' },\n  { label: 'Min', value: 'min' },\n  { label: 'Max', value: 'max' },\n  { label: 'Sum', value: 'sum' },\n  { label: 'Count', value: 'count' },\n  { label: 'Std Dev', value: 'std_deviation' },\n  { label: 'Std Dev Upper', value: 'std_deviation_bounds_upper' },\n  { label: 'Std Dev Lower', value: 'std_deviation_bounds_lower' },\n];\n\nexport const movingAvgModelOptions: MovingAverageModelOption[] = [\n  { label: 'Simple', value: 'simple' },\n  { label: 'Linear', value: 'linear' },\n  { label: 'Exponentially Weighted', value: 'ewma' },\n  { label: 'Holt Linear', value: 'holt' },\n  { label: 'Holt Winters', value: 'holt_winters' },\n];\n\nexport const highlightTags = {\n  pre: '@HIGHLIGHT@',\n  post: '@/HIGHLIGHT@',\n};\n\nexport function defaultMetricAgg(id = '1'): MetricAggregation {\n  return { type: 'count', id };\n}\n\nexport function defaultBucketAgg(id = '1'): DateHistogram {\n  return { type: 'date_histogram', id, settings: { interval: 'auto' } };\n}\n\nexport const findMetricById = (metrics: MetricAggregation[], id: MetricAggregation['id']) =>\n  metrics.find((metric) => metric.id === id);\n\nexport function hasMetricOfType(target: ElasticsearchQuery, type: MetricAggregationType): boolean {\n  return !!target?.metrics?.some((m) => m.type === type);\n}\n\n// Even if we have type guards when building a query, we currently have no way of getting this information from the response.\n// We should try to find a better (type safe) way of doing the following 2.\nexport function isPipelineAgg(metricType: MetricAggregationType) {\n  return metricType in pipelineOptions;\n}\n\nexport function isPipelineAggWithMultipleBucketPaths(metricType: MetricAggregationType) {\n  return !!metricAggregationConfig[metricType].supportsMultipleBucketPaths;\n}\n","import { valid, gte } from 'semver';\n\nimport {\n  isMetricAggregationWithField,\n  MetricAggregation,\n  MetricAggregationWithInlineScript,\n} from './components/QueryEditor/MetricAggregationsEditor/aggregations';\nimport { metricAggregationConfig } from './components/QueryEditor/MetricAggregationsEditor/utils';\n\nexport const describeMetric = (metric: MetricAggregation) => {\n  if (!isMetricAggregationWithField(metric)) {\n    return metricAggregationConfig[metric.type].label;\n  }\n\n  // TODO: field might be undefined\n  return `${metricAggregationConfig[metric.type].label} ${metric.field}`;\n};\n\n/**\n * Utility function to clean up aggregations settings objects.\n * It removes nullish values and empty strings, array and objects\n * recursing over nested objects (not arrays).\n * @param obj\n */\nexport const removeEmpty = <T extends {}>(obj: T): Partial<T> =>\n  Object.entries(obj).reduce((acc, [key, value]) => {\n    // Removing nullish values (null & undefined)\n    if (value == null) {\n      return { ...acc };\n    }\n\n    // Removing empty arrays (This won't recurse the array)\n    if (Array.isArray(value) && value.length === 0) {\n      return { ...acc };\n    }\n\n    // Removing empty strings\n    if (typeof value === 'string' && value.length === 0) {\n      return { ...acc };\n    }\n\n    // Recursing over nested objects\n    if (!Array.isArray(value) && typeof value === 'object') {\n      const cleanObj = removeEmpty(value);\n\n      if (Object.keys(cleanObj).length === 0) {\n        return { ...acc };\n      }\n\n      return { ...acc, [key]: cleanObj };\n    }\n\n    return {\n      ...acc,\n      [key]: value,\n    };\n  }, {});\n\n/**\n *  This function converts an order by string to the correct metric id For example,\n *  if the user uses the standard deviation extended stat for the order by,\n *  the value would be \"1[std_deviation]\" and this would return \"1\"\n */\nexport const convertOrderByToMetricId = (orderBy: string): string | undefined => {\n  const metricIdMatches = orderBy.match(/^(\\d+)/);\n  return metricIdMatches ? metricIdMatches[1] : void 0;\n};\n\n/** Gets the actual script value for metrics that support inline scripts.\n *\n *  This is needed because the `script` is a bit polymorphic.\n *  when creating a query with Grafana < 7.4 it was stored as:\n * ```json\n * {\n *    \"settings\": {\n *      \"script\": {\n *        \"inline\": \"value\"\n *      }\n *    }\n * }\n * ```\n *\n * while from 7.4 it's stored as\n * ```json\n * {\n *    \"settings\": {\n *      \"script\": \"value\"\n *    }\n * }\n * ```\n *\n * This allows us to access both formats and support both queries created before 7.4 and after.\n */\nexport const getScriptValue = (metric: MetricAggregationWithInlineScript) =>\n  (typeof metric.settings?.script === 'object' ? metric.settings?.script?.inline : metric.settings?.script) || '';\n\n/**\n * Coerces the version to a valid semver string.\n * It takes care of also converting from the legacy format (numeric) to the new one.\n * @param version\n */\nexport const coerceESVersion = (version: string | number | undefined): string => {\n  if (typeof version === 'string') {\n    return valid(version) || '8.0.0';\n  }\n\n  switch (version) {\n    case 2:\n      return '2.0.0';\n    case 5:\n      return '5.0.0';\n    case 56:\n      return '5.6.0';\n    case 60:\n      return '6.0.0';\n    case 70:\n      return '7.0.0';\n    default:\n      return '8.0.0';\n  }\n};\n\nexport const isSupportedVersion = (version: string): boolean => {\n  if (gte(version, '7.10.0')) {\n    return true;\n  }\n\n  return false;\n};\n","import { createAction } from '@reduxjs/toolkit';\n\nimport { MetricAggregation, MetricAggregationWithMeta, MetricAggregationWithSettings } from '../aggregations';\n\nexport const addMetric = createAction<MetricAggregation['id']>('@metrics/add');\nexport const removeMetric = createAction<MetricAggregation['id']>('@metrics/remove');\nexport const toggleMetricVisibility = createAction<MetricAggregation['id']>('@metrics/toggle_visibility');\nexport const changeMetricField = createAction<{ id: MetricAggregation['id']; field: string }>('@metrics/change_field');\nexport const changeMetricType = createAction<{ id: MetricAggregation['id']; type: MetricAggregation['type'] }>(\n  '@metrics/change_type'\n);\nexport const changeMetricAttribute = createAction<{ metric: MetricAggregation; attribute: string; newValue: any }>(\n  '@metrics/change_attr'\n);\nexport const changeMetricSetting = createAction<{\n  metric: MetricAggregationWithSettings;\n  settingName: string;\n  newValue: any;\n}>('@metrics/change_setting');\nexport const changeMetricMeta = createAction<{\n  metric: MetricAggregationWithMeta;\n  meta: string;\n  newValue: any;\n}>('@metrics/change_meta');\n","import { Action, createAction } from '@reduxjs/toolkit';\n\nimport { ElasticsearchQuery } from '../../types';\n\n/**\n * When the `initQuery` Action is dispatched, the query gets populated with default values where values are not present.\n * This means it won't override any existing value in place, but just ensure the query is in a \"runnable\" state.\n */\nexport const initQuery = createAction('init');\n\nexport const changeQuery = createAction<ElasticsearchQuery['query']>('change_query');\n\nexport const changeAliasPattern = createAction<ElasticsearchQuery['alias']>('change_alias_pattern');\n\nexport const queryReducer = (prevQuery: ElasticsearchQuery['query'], action: Action) => {\n  if (changeQuery.match(action)) {\n    return action.payload;\n  }\n\n  if (initQuery.match(action)) {\n    return prevQuery || '';\n  }\n\n  return prevQuery;\n};\n\nexport const aliasPatternReducer = (prevAliasPattern: ElasticsearchQuery['alias'], action: Action) => {\n  if (changeAliasPattern.match(action)) {\n    return action.payload;\n  }\n\n  if (initQuery.match(action)) {\n    return prevAliasPattern || '';\n  }\n\n  return prevAliasPattern;\n};\n","import { Filter } from '../../aggregations';\n\nexport const defaultFilter = (): Filter => ({ label: '', query: '*' });\n","import { InternalTimeZones, SelectableValue } from '@grafana/data';\n\nimport { BucketsConfiguration } from '../../../types';\n\nimport { defaultFilter } from './SettingsEditor/FiltersSettingsEditor/utils';\n\nexport const bucketAggregationConfig: BucketsConfiguration = {\n  terms: {\n    label: 'Terms',\n    requiresField: true,\n    defaultSettings: {\n      min_doc_count: '1',\n      size: '10',\n      order: 'desc',\n      orderBy: '_term',\n    },\n  },\n  filters: {\n    label: 'Filters',\n    requiresField: false,\n    defaultSettings: {\n      filters: [defaultFilter()],\n    },\n  },\n  geohash_grid: {\n    label: 'Geo Hash Grid',\n    requiresField: true,\n    defaultSettings: {\n      precision: '3',\n    },\n  },\n  date_histogram: {\n    label: 'Date Histogram',\n    requiresField: true,\n    defaultSettings: {\n      interval: 'auto',\n      min_doc_count: '0',\n      trimEdges: '0',\n      timeZone: InternalTimeZones.utc,\n    },\n  },\n  histogram: {\n    label: 'Histogram',\n    requiresField: true,\n    defaultSettings: {\n      interval: '1000',\n      min_doc_count: '0',\n    },\n  },\n};\n\nexport const orderByOptions: Array<SelectableValue<string>> = [\n  { label: 'Term value', value: '_term' },\n  { label: 'Doc Count', value: '_count' },\n];\n\nexport const orderOptions: Array<SelectableValue<string>> = [\n  { label: 'Top', value: 'desc' },\n  { label: 'Bottom', value: 'asc' },\n];\n\nexport const sizeOptions = [\n  { label: 'No limit', value: '0' },\n  { label: '1', value: '1' },\n  { label: '2', value: '2' },\n  { label: '3', value: '3' },\n  { label: '5', value: '5' },\n  { label: '10', value: '10' },\n  { label: '15', value: '15' },\n  { label: '20', value: '20' },\n];\n","import { createAction } from '@reduxjs/toolkit';\n\nimport { BucketAggregation, BucketAggregationType, BucketAggregationWithField } from '../aggregations';\n\nexport const addBucketAggregation = createAction<BucketAggregation['id']>('@bucketAggs/add');\nexport const removeBucketAggregation = createAction<BucketAggregation['id']>('@bucketAggs/remove');\nexport const changeBucketAggregationType = createAction<{\n  id: BucketAggregation['id'];\n  newType: BucketAggregationType;\n}>('@bucketAggs/change_type');\nexport const changeBucketAggregationField = createAction<{\n  id: BucketAggregation['id'];\n  newField: BucketAggregationWithField['field'];\n}>('@bucketAggs/change_field');\nexport const changeBucketAggregationSetting = createAction<{\n  bucketAgg: BucketAggregation;\n  settingName: string;\n  newValue: any;\n}>('@bucketAggs/change_setting');\n","import { Action } from '@reduxjs/toolkit';\n\nimport { defaultMetricAgg } from '../../../../queryDef';\nimport { ElasticsearchQuery } from '../../../../types';\nimport { removeEmpty } from '../../../../utils';\nimport { initQuery } from '../../state';\nimport {\n  isMetricAggregationWithMeta,\n  isMetricAggregationWithSettings,\n  isPipelineAggregation,\n  MetricAggregation,\n} from '../aggregations';\nimport { getChildren, metricAggregationConfig } from '../utils';\n\nimport {\n  addMetric,\n  changeMetricAttribute,\n  changeMetricField,\n  changeMetricMeta,\n  changeMetricSetting,\n  changeMetricType,\n  removeMetric,\n  toggleMetricVisibility,\n} from './actions';\n\nexport const reducer = (state: ElasticsearchQuery['metrics'], action: Action): ElasticsearchQuery['metrics'] => {\n  if (addMetric.match(action)) {\n    return [...state!, defaultMetricAgg(action.payload)];\n  }\n\n  if (removeMetric.match(action)) {\n    const metricToRemove = state!.find((m) => m.id === action.payload)!;\n    const metricsToRemove = [metricToRemove, ...getChildren(metricToRemove, state!)];\n    const resultingMetrics = state!.filter((metric) => !metricsToRemove.some((toRemove) => toRemove.id === metric.id));\n    if (resultingMetrics.length === 0) {\n      return [defaultMetricAgg('1')];\n    }\n    return resultingMetrics;\n  }\n\n  if (changeMetricType.match(action)) {\n    return state!\n      .filter((metric) =>\n        // When the new metric type is `isSingleMetric` we remove all other metrics from the query\n        // leaving only the current one.\n        !!metricAggregationConfig[action.payload.type].isSingleMetric ? metric.id === action.payload.id : true\n      )\n      .map((metric) => {\n        if (metric.id !== action.payload.id) {\n          return metric;\n        }\n\n        /*\n        TODO: The previous version of the query editor was keeping some of the old metric's configurations\n        in the new selected one (such as field or some settings).\n        It the future would be nice to have the same behavior but it's hard without a proper definition,\n        as Elasticsearch will error sometimes if some settings are not compatible.\n      */\n        return {\n          id: metric.id,\n          type: action.payload.type,\n          ...metricAggregationConfig[action.payload.type].defaults,\n        } as MetricAggregation;\n      });\n  }\n\n  if (changeMetricField.match(action)) {\n    return state!.map((metric) => {\n      if (metric.id !== action.payload.id) {\n        return metric;\n      }\n\n      const newMetric = {\n        ...metric,\n        field: action.payload.field,\n      };\n\n      if (isPipelineAggregation(metric)) {\n        return { ...newMetric, pipelineAgg: action.payload.field };\n      }\n\n      return newMetric;\n    });\n  }\n\n  if (toggleMetricVisibility.match(action)) {\n    return state!.map((metric) => {\n      if (metric.id !== action.payload) {\n        return metric;\n      }\n\n      return {\n        ...metric,\n        hide: !metric.hide,\n      };\n    });\n  }\n\n  if (changeMetricSetting.match(action)) {\n    return state!.map((metric) => {\n      if (metric.id !== action.payload.metric.id) {\n        return metric;\n      }\n\n      // TODO: Here, instead of this if statement, we should assert that metric is MetricAggregationWithSettings\n      if (isMetricAggregationWithSettings(metric)) {\n        const newSettings = removeEmpty({\n          ...metric.settings,\n          [action.payload.settingName]: action.payload.newValue,\n        });\n\n        return {\n          ...metric,\n          settings: {\n            ...newSettings,\n          },\n        };\n      }\n\n      // This should never happen.\n      return metric;\n    });\n  }\n\n  if (changeMetricMeta.match(action)) {\n    return state!.map((metric) => {\n      if (metric.id !== action.payload.metric.id) {\n        return metric;\n      }\n\n      // TODO: Here, instead of this if statement, we should assert that metric is MetricAggregationWithMeta\n      if (isMetricAggregationWithMeta(metric)) {\n        return {\n          ...metric,\n          meta: {\n            ...metric.meta,\n            [action.payload.meta]: action.payload.newValue,\n          },\n        };\n      }\n\n      // This should never happen.\n      return metric;\n    });\n  }\n\n  if (changeMetricAttribute.match(action)) {\n    return state!.map((metric) => {\n      if (metric.id !== action.payload.metric.id) {\n        return metric;\n      }\n\n      return {\n        ...metric,\n        [action.payload.attribute]: action.payload.newValue,\n      };\n    });\n  }\n\n  if (initQuery.match(action)) {\n    if (state?.length || 0 > 0) {\n      return state;\n    }\n    return [defaultMetricAgg('1')];\n  }\n\n  return state;\n};\n","import React, { Context, createContext, PropsWithChildren, useCallback, useContext, useEffect, useState } from 'react';\n\nimport { TimeRange } from '@grafana/data';\n\nimport { ElasticDatasource } from '../../datasource';\nimport { combineReducers, useStatelessReducer, DispatchContext } from '../../hooks/useStatelessReducer';\nimport { ElasticsearchQuery } from '../../types';\n\nimport { createReducer as createBucketAggsReducer } from './BucketAggregationsEditor/state/reducer';\nimport { reducer as metricsReducer } from './MetricAggregationsEditor/state/reducer';\nimport { aliasPatternReducer, queryReducer, initQuery } from './state';\n\nconst DatasourceContext = createContext<ElasticDatasource | undefined>(undefined);\nconst QueryContext = createContext<ElasticsearchQuery | undefined>(undefined);\nconst RangeContext = createContext<TimeRange | undefined>(undefined);\n\ninterface Props {\n  query: ElasticsearchQuery;\n  onChange: (query: ElasticsearchQuery) => void;\n  onRunQuery: () => void;\n  datasource: ElasticDatasource;\n  range: TimeRange;\n}\n\nexport const ElasticsearchProvider = ({\n  children,\n  onChange,\n  onRunQuery,\n  query,\n  datasource,\n  range,\n}: PropsWithChildren<Props>) => {\n  const onStateChange = useCallback(\n    (query: ElasticsearchQuery) => {\n      onChange(query);\n      onRunQuery();\n    },\n    [onChange, onRunQuery]\n  );\n\n  const reducer = combineReducers<Pick<ElasticsearchQuery, 'query' | 'alias' | 'metrics' | 'bucketAggs'>>({\n    query: queryReducer,\n    alias: aliasPatternReducer,\n    metrics: metricsReducer,\n    bucketAggs: createBucketAggsReducer(datasource.timeField),\n  });\n\n  const dispatch = useStatelessReducer(\n    // timeField is part of the query model, but its value is always set to be the one from datasource settings.\n    (newState) => onStateChange({ ...query, ...newState, timeField: datasource.timeField }),\n    query,\n    reducer\n  );\n\n  const isUninitialized = !query.metrics || !query.bucketAggs || query.query === undefined;\n\n  const [shouldRunInit, setShouldRunInit] = useState(isUninitialized);\n\n  // This initializes the query by dispatching an init action to each reducer.\n  // useStatelessReducer will then call `onChange` with the newly generated query\n  useEffect(() => {\n    if (shouldRunInit) {\n      dispatch(initQuery());\n      setShouldRunInit(false);\n    }\n  }, [shouldRunInit, dispatch]);\n\n  if (isUninitialized) {\n    return null;\n  }\n\n  return (\n    <DatasourceContext.Provider value={datasource}>\n      <QueryContext.Provider value={query}>\n        <RangeContext.Provider value={range}>\n          <DispatchContext.Provider value={dispatch}>{children}</DispatchContext.Provider>\n        </RangeContext.Provider>\n      </QueryContext.Provider>\n    </DatasourceContext.Provider>\n  );\n};\n\ninterface GetHook {\n  <T>(context: Context<T>): () => NonNullable<T>;\n}\n\nconst getHook: GetHook = (c) => () => {\n  const contextValue = useContext(c);\n\n  if (!contextValue) {\n    throw new Error('use ElasticsearchProvider first.');\n  }\n\n  return contextValue as NonNullable<typeof contextValue>;\n};\n\nexport const useQuery = getHook(QueryContext);\nexport const useDatasource = getHook(DatasourceContext);\nexport const useRange = getHook(RangeContext);\n","import { Action } from '@reduxjs/toolkit';\n\nimport { defaultBucketAgg } from '../../../../queryDef';\nimport { ElasticsearchQuery } from '../../../../types';\nimport { removeEmpty } from '../../../../utils';\nimport { changeMetricType } from '../../MetricAggregationsEditor/state/actions';\nimport { metricAggregationConfig } from '../../MetricAggregationsEditor/utils';\nimport { initQuery } from '../../state';\nimport { BucketAggregation, Terms } from '../aggregations';\nimport { bucketAggregationConfig } from '../utils';\n\nimport {\n  addBucketAggregation,\n  changeBucketAggregationField,\n  changeBucketAggregationSetting,\n  changeBucketAggregationType,\n  removeBucketAggregation,\n} from './actions';\n\nexport const createReducer =\n  (defaultTimeField: string) =>\n  (state: ElasticsearchQuery['bucketAggs'], action: Action): ElasticsearchQuery['bucketAggs'] => {\n    if (addBucketAggregation.match(action)) {\n      const newAgg: Terms = {\n        id: action.payload,\n        type: 'terms',\n        settings: bucketAggregationConfig['terms'].defaultSettings,\n      };\n\n      // If the last bucket aggregation is a `date_histogram` we add the new one before it.\n      const lastAgg = state![state!.length - 1];\n      if (lastAgg?.type === 'date_histogram') {\n        return [...state!.slice(0, state!.length - 1), newAgg, lastAgg];\n      }\n\n      return [...state!, newAgg];\n    }\n\n    if (removeBucketAggregation.match(action)) {\n      return state!.filter((bucketAgg) => bucketAgg.id !== action.payload);\n    }\n\n    if (changeBucketAggregationType.match(action)) {\n      return state!.map((bucketAgg) => {\n        if (bucketAgg.id !== action.payload.id) {\n          return bucketAgg;\n        }\n\n        /*\n        TODO: The previous version of the query editor was keeping some of the old bucket aggregation's configurations\n        in the new selected one (such as field or some settings).\n        It the future would be nice to have the same behavior but it's hard without a proper definition,\n        as Elasticsearch will error sometimes if some settings are not compatible.\n      */\n        return {\n          id: bucketAgg.id,\n          type: action.payload.newType,\n          settings: bucketAggregationConfig[action.payload.newType].defaultSettings,\n        } as BucketAggregation;\n      });\n    }\n\n    if (changeBucketAggregationField.match(action)) {\n      return state!.map((bucketAgg) => {\n        if (bucketAgg.id !== action.payload.id) {\n          return bucketAgg;\n        }\n\n        return {\n          ...bucketAgg,\n          field: action.payload.newField,\n        };\n      });\n    }\n\n    if (changeMetricType.match(action)) {\n      // If we are switching to a metric which requires the absence of bucket aggregations\n      // we remove all of them.\n      if (metricAggregationConfig[action.payload.type].isSingleMetric) {\n        return [];\n      } else if (state!.length === 0) {\n        // Else, if there are no bucket aggregations we restore a default one.\n        // This happens when switching from a metric that requires the absence of bucket aggregations to\n        // one that requires it.\n        return [{ ...defaultBucketAgg('2'), field: defaultTimeField }];\n      }\n      return state;\n    }\n\n    if (changeBucketAggregationSetting.match(action)) {\n      return state!.map((bucketAgg) => {\n        if (bucketAgg.id !== action.payload.bucketAgg.id) {\n          return bucketAgg;\n        }\n\n        const newSettings = removeEmpty({\n          ...bucketAgg.settings,\n          [action.payload.settingName]: action.payload.newValue,\n        });\n\n        return {\n          ...bucketAgg,\n          settings: {\n            ...newSettings,\n          },\n        };\n      });\n    }\n\n    if (initQuery.match(action)) {\n      if (state?.length || 0 > 0) {\n        return state;\n      }\n\n      return [{ ...defaultBucketAgg('2'), field: defaultTimeField }];\n    }\n\n    return state;\n  };\n","import { useMemo } from 'react';\n\nimport { BucketAggregation } from '../components/QueryEditor/BucketAggregationsEditor/aggregations';\nimport { useQuery } from '../components/QueryEditor/ElasticsearchQueryContext';\nimport { MetricAggregation } from '../components/QueryEditor/MetricAggregationsEditor/aggregations';\n\nconst toId = <T extends { id: unknown }>(e: T): T['id'] => e.id;\n\nconst toInt = (idString: string) => parseInt(idString, 10);\n\nexport const useNextId = (): MetricAggregation['id'] | BucketAggregation['id'] => {\n  const { metrics, bucketAggs } = useQuery();\n\n  return useMemo(\n    () =>\n      (Math.max(...[...(metrics?.map(toId) || ['0']), ...(bucketAggs?.map(toId) || ['0'])].map(toInt)) + 1).toString(),\n    [metrics, bucketAggs]\n  );\n};\n","import { cx, css } from '@emotion/css';\nimport React, { ComponentProps, ButtonHTMLAttributes } from 'react';\n\nimport { Icon } from '@grafana/ui';\n\nconst SROnly = css`\n  clip: rect(0 0 0 0);\n  clip-path: inset(50%);\n  height: 1px;\n  overflow: hidden;\n  position: absolute;\n  white-space: nowrap;\n  width: 1px;\n`;\n\ninterface Props {\n  iconName: ComponentProps<typeof Icon>['name'];\n  onClick: () => void;\n  className?: string;\n  label: string;\n}\n\nexport const IconButton = ({\n  iconName,\n  onClick,\n  className,\n  label,\n  ...buttonProps\n}: Props & ButtonHTMLAttributes<HTMLButtonElement>) => (\n  <button className={cx('gf-form-label gf-form-label--btn query-part', className)} onClick={onClick} {...buttonProps}>\n    <span className={SROnly}>{label}</span>\n    <Icon name={iconName} aria-hidden=\"true\" />\n  </button>\n);\n","import { css } from '@emotion/css';\nimport { noop } from 'lodash';\nimport React, { PropsWithChildren } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { IconButton, InlineFieldRow, InlineLabel, InlineSegmentGroup, useStyles2 } from '@grafana/ui';\n\ninterface Props {\n  label: string;\n  onRemoveClick?: false | (() => void);\n  onHideClick?: false | (() => void);\n  hidden?: boolean;\n}\n\nexport const QueryEditorRow = ({\n  children,\n  label,\n  onRemoveClick,\n  onHideClick,\n  hidden = false,\n}: PropsWithChildren<Props>) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <InlineFieldRow>\n      <InlineSegmentGroup>\n        <InlineLabel width={17} as=\"div\">\n          <span>{label}</span>\n          <span className={styles.iconWrapper}>\n            {onHideClick && (\n              <IconButton\n                name={hidden ? 'eye-slash' : 'eye'}\n                onClick={onHideClick}\n                size=\"sm\"\n                aria-pressed={hidden}\n                aria-label=\"hide metric\"\n                className={styles.icon}\n                type=\"button\"\n              />\n            )}\n            <IconButton\n              name=\"trash-alt\"\n              size=\"sm\"\n              className={styles.icon}\n              onClick={onRemoveClick || noop}\n              disabled={!onRemoveClick}\n              aria-label=\"remove metric\"\n              type=\"button\"\n            />\n          </span>\n        </InlineLabel>\n      </InlineSegmentGroup>\n      {children}\n    </InlineFieldRow>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    iconWrapper: css`\n      display: flex;\n    `,\n    icon: css`\n      color: ${theme.colors.text.secondary};\n      margin-left: ${theme.spacing(0.25)};\n    `,\n  };\n};\n","import { bucketAggregationConfig } from './utils';\n\nexport type BucketAggregationType = 'terms' | 'filters' | 'geohash_grid' | 'date_histogram' | 'histogram';\n\ninterface BaseBucketAggregation {\n  id: string;\n  type: BucketAggregationType;\n  settings?: Record<string, unknown>;\n}\n\nexport interface BucketAggregationWithField extends BaseBucketAggregation {\n  field?: string;\n}\n\nexport interface DateHistogram extends BucketAggregationWithField {\n  type: 'date_histogram';\n  settings?: {\n    interval?: string;\n    min_doc_count?: string;\n    trimEdges?: string;\n    offset?: string;\n    timeZone?: string;\n  };\n}\n\nexport interface Histogram extends BucketAggregationWithField {\n  type: 'histogram';\n  settings?: {\n    interval?: string;\n    min_doc_count?: string;\n  };\n}\n\ntype TermsOrder = 'desc' | 'asc';\n\nexport interface Terms extends BucketAggregationWithField {\n  type: 'terms';\n  settings?: {\n    order?: TermsOrder;\n    size?: string;\n    min_doc_count?: string;\n    orderBy?: string;\n    missing?: string;\n  };\n}\n\nexport type Filter = {\n  query: string;\n  label: string;\n};\nexport interface Filters extends BaseBucketAggregation {\n  type: 'filters';\n  settings?: {\n    filters?: Filter[];\n  };\n}\n\ninterface GeoHashGrid extends BucketAggregationWithField {\n  type: 'geohash_grid';\n  settings?: {\n    precision?: string;\n  };\n}\n\nexport type BucketAggregation = DateHistogram | Histogram | Terms | Filters | GeoHashGrid;\n\nexport const isBucketAggregationWithField = (\n  bucketAgg: BucketAggregation | BucketAggregationWithField\n): bucketAgg is BucketAggregationWithField => bucketAggregationConfig[bucketAgg.type].requiresField;\n\nexport const BUCKET_AGGREGATION_TYPES: BucketAggregationType[] = [\n  'date_histogram',\n  'histogram',\n  'terms',\n  'filters',\n  'geohash_grid',\n];\n\nexport const isBucketAggregationType = (s: BucketAggregationType | string): s is BucketAggregationType =>\n  BUCKET_AGGREGATION_TYPES.includes(s as BucketAggregationType);\n","import { lastValueFrom } from 'rxjs';\n\nimport { MetricFindValue, SelectableValue } from '@grafana/data';\n\nimport {\n  BucketAggregationType,\n  isBucketAggregationType,\n} from '../components/QueryEditor/BucketAggregationsEditor/aggregations';\nimport { useDatasource, useRange } from '../components/QueryEditor/ElasticsearchQueryContext';\nimport {\n  isMetricAggregationType,\n  MetricAggregationType,\n} from '../components/QueryEditor/MetricAggregationsEditor/aggregations';\n\ntype AggregationType = BucketAggregationType | MetricAggregationType;\n\nconst getFilter = (type: AggregationType) => {\n  if (isMetricAggregationType(type)) {\n    switch (type) {\n      case 'cardinality':\n        return [];\n      case 'top_metrics':\n        // top_metrics was introduced in 7.7 where `metrics` only supported number:\n        // https://www.elastic.co/guide/en/elasticsearch/reference/7.7/search-aggregations-metrics-top-metrics.html#_metrics\n        // TODO: starting from 7.11 it supports ips and keywords as well:\n        // https://www.elastic.co/guide/en/elasticsearch/reference/7.11/search-aggregations-metrics-top-metrics.html#_metrics\n        return ['number'];\n      default:\n        return ['number'];\n    }\n  }\n\n  if (isBucketAggregationType(type)) {\n    switch (type) {\n      case 'date_histogram':\n        return ['date'];\n      case 'geohash_grid':\n        return ['geo_point'];\n      case 'histogram':\n        return ['number'];\n      default:\n        return [];\n    }\n  }\n\n  return [];\n};\n\nconst toSelectableValue = ({ text }: MetricFindValue): SelectableValue<string> => ({\n  label: text,\n  value: text,\n});\n\n/**\n * Returns a function to query the configured datasource for autocomplete values for the specified aggregation type or data types.\n * Each aggregation can be run on different types, for example avg only operates on numeric fields, geohash_grid only on geo_point fields.\n * If an aggregation type is provided, the promise will resolve with all fields suitable to be used as a field for the given aggregation.\n * If an array of types is providem the promise will resolve with all the fields matching the provided types.\n * @param aggregationType the type of aggregation to get fields for\n */\nexport const useFields = (type: AggregationType | string[]) => {\n  const datasource = useDatasource();\n  const range = useRange();\n  const filter = Array.isArray(type) ? type : getFilter(type);\n  let rawFields: MetricFindValue[];\n\n  return async (q?: string) => {\n    // _mapping doesn't support filtering, we avoid sending a request everytime q changes\n    if (!rawFields) {\n      rawFields = await lastValueFrom(datasource.getFields(filter, range));\n    }\n\n    return rawFields.filter(({ text }) => q === undefined || text.includes(q)).map(toSelectableValue);\n  };\n};\n","import { css } from '@emotion/css';\n\nexport const segmentStyles = css`\n  min-width: 150px;\n`;\n","import { css, cx } from '@emotion/css';\nimport React, { PropsWithChildren, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, InlineSegmentGroup, useTheme2 } from '@grafana/ui';\n\nimport { segmentStyles } from './styles';\n\nconst getStyles = (theme: GrafanaTheme2, hidden: boolean) => {\n  return {\n    wrapper: css`\n      max-width: 500px;\n      display: flex;\n      flex-direction: column;\n    `,\n    settingsWrapper: css`\n      padding-top: ${theme.spacing(0.5)};\n    `,\n    icon: css`\n      margin-right: ${theme.spacing(0.5)};\n    `,\n    button: css`\n      justify-content: start;\n      ${hidden &&\n      css`\n        color: ${theme.colors.text.disabled};\n      `}\n    `,\n  };\n};\n\ninterface Props {\n  label: string;\n  hidden?: boolean;\n}\n\nexport const SettingsEditorContainer = ({ label, children, hidden = false }: PropsWithChildren<Props>) => {\n  const [open, setOpen] = useState(false);\n\n  const theme = useTheme2();\n  const styles = getStyles(theme, hidden);\n\n  return (\n    <InlineSegmentGroup>\n      <div className={cx(styles.wrapper)}>\n        <button\n          className={cx('gf-form-label query-part', styles.button, segmentStyles)}\n          onClick={() => setOpen(!open)}\n          aria-expanded={open}\n          type=\"button\"\n        >\n          <Icon name={open ? 'angle-down' : 'angle-right'} aria-hidden=\"true\" className={styles.icon} />\n          {label}\n        </button>\n\n        {open && <div className={styles.settingsWrapper}>{children}</div>}\n      </div>\n    </InlineSegmentGroup>\n  );\n};\n","import { useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\n\nconst hasValue =\n  <T extends SelectableValue>(searchValue: T['value']) =>\n  ({ value }: T) =>\n    value === searchValue;\n\nconst getInitialState = (initialOptions: SelectableValue[], initialValue?: string): SelectableValue[] => {\n  if (initialValue === undefined || initialOptions.some(hasValue(initialValue))) {\n    return initialOptions;\n  }\n\n  return [\n    ...initialOptions,\n    {\n      value: initialValue,\n      label: initialValue,\n    },\n  ];\n};\n\ninterface Params {\n  options: SelectableValue[];\n  value?: string;\n  onChange: (s: SelectableValue<string>) => void;\n}\n\n/**\n * Creates the Props needed by Select to handle custom values and handles custom value creation\n * and the initial value when it is not present in the option array.\n */\nexport const useCreatableSelectPersistedBehaviour = ({ options: initialOptions, value, onChange }: Params) => {\n  const [options, setOptions] = useState(getInitialState(initialOptions, value));\n\n  const addOption = (newValue: string) => setOptions([...options, { value: newValue, label: newValue }]);\n\n  return {\n    onCreateOption: (value: string) => {\n      addOption(value);\n      onChange({ value });\n    },\n    onChange,\n    allowCustomValue: true,\n    options,\n    value,\n  };\n};\n","import { uniqueId } from 'lodash';\nimport React, { useRef } from 'react';\nimport { GroupBase, OptionsOrGroups } from 'react-select';\n\nimport { InternalTimeZones, SelectableValue } from '@grafana/data';\nimport { InlineField, Input, Select, TimeZonePicker } from '@grafana/ui';\n\nimport { useDispatch } from '../../../../hooks/useStatelessReducer';\nimport { useCreatableSelectPersistedBehaviour } from '../../../hooks/useCreatableSelectPersistedBehaviour';\nimport { DateHistogram } from '../aggregations';\nimport { changeBucketAggregationSetting } from '../state/actions';\nimport { bucketAggregationConfig } from '../utils';\n\nimport { inlineFieldProps } from '.';\n\nconst defaultIntervalOptions: Array<SelectableValue<string>> = [\n  { label: 'auto', value: 'auto' },\n  { label: '10s', value: '10s' },\n  { label: '1m', value: '1m' },\n  { label: '5m', value: '5m' },\n  { label: '10m', value: '10m' },\n  { label: '20m', value: '20m' },\n  { label: '1h', value: '1h' },\n  { label: '1d', value: '1d' },\n];\n\nconst hasValue =\n  (searchValue: string) =>\n  ({ value }: SelectableValue<string>) =>\n    value === searchValue;\n\nconst isValidNewOption = (\n  inputValue: string,\n  _: SelectableValue<string> | null,\n  options: OptionsOrGroups<unknown, GroupBase<unknown>>\n) => {\n  // TODO: would be extremely nice here to allow only template variables and values that are\n  // valid date histogram's Interval options\n  const valueExists = (options as Array<SelectableValue<string>>).some(hasValue(inputValue));\n  // we also don't want users to create \"empty\" values\n  return !valueExists && inputValue.trim().length > 0;\n};\n\nconst optionStartsWithValue = (option: SelectableValue<string>, value: string) =>\n  option.value?.startsWith(value) || false;\n\ninterface Props {\n  bucketAgg: DateHistogram;\n}\n\nexport const DateHistogramSettingsEditor = ({ bucketAgg }: Props) => {\n  const dispatch = useDispatch();\n  const { current: baseId } = useRef(uniqueId('es-date_histogram-'));\n\n  const handleIntervalChange = ({ value }: SelectableValue<string>) =>\n    dispatch(changeBucketAggregationSetting({ bucketAgg, settingName: 'interval', newValue: value }));\n\n  return (\n    <>\n      <InlineField label=\"Interval\" {...inlineFieldProps}>\n        <Select\n          inputId={uniqueId('es-date_histogram-interval')}\n          isValidNewOption={isValidNewOption}\n          filterOption={optionStartsWithValue}\n          {...useCreatableSelectPersistedBehaviour({\n            options: defaultIntervalOptions,\n            value: bucketAgg.settings?.interval || bucketAggregationConfig.date_histogram.defaultSettings?.interval,\n            onChange: handleIntervalChange,\n          })}\n        />\n      </InlineField>\n\n      <InlineField label=\"Min Doc Count\" {...inlineFieldProps}>\n        <Input\n          id={`${baseId}-min_doc_count`}\n          onBlur={(e) =>\n            dispatch(\n              changeBucketAggregationSetting({ bucketAgg, settingName: 'min_doc_count', newValue: e.target.value })\n            )\n          }\n          defaultValue={\n            bucketAgg.settings?.min_doc_count || bucketAggregationConfig.date_histogram.defaultSettings?.min_doc_count\n          }\n        />\n      </InlineField>\n\n      <InlineField label=\"Trim Edges\" {...inlineFieldProps} tooltip=\"Trim the edges on the timeseries datapoints\">\n        <Input\n          id={`${baseId}-trime_edges`}\n          onBlur={(e) =>\n            dispatch(changeBucketAggregationSetting({ bucketAgg, settingName: 'trimEdges', newValue: e.target.value }))\n          }\n          defaultValue={\n            bucketAgg.settings?.trimEdges || bucketAggregationConfig.date_histogram.defaultSettings?.trimEdges\n          }\n        />\n      </InlineField>\n\n      <InlineField\n        label=\"Offset\"\n        {...inlineFieldProps}\n        tooltip=\"Change the start value of each bucket by the specified positive (+) or negative offset (-) duration, such as 1h for an hour, or 1d for a day\"\n      >\n        <Input\n          id={`${baseId}-offset`}\n          onBlur={(e) =>\n            dispatch(changeBucketAggregationSetting({ bucketAgg, settingName: 'offset', newValue: e.target.value }))\n          }\n          defaultValue={bucketAgg.settings?.offset || bucketAggregationConfig.date_histogram.defaultSettings?.offset}\n        />\n      </InlineField>\n\n      <InlineField label=\"Timezone\" {...inlineFieldProps}>\n        <TimeZonePicker\n          value={bucketAgg.settings?.timeZone || bucketAggregationConfig.date_histogram.defaultSettings?.timeZone}\n          includeInternal={[InternalTimeZones.utc]}\n          onChange={(timeZone) => {\n            dispatch(changeBucketAggregationSetting({ bucketAgg, settingName: 'timeZone', newValue: timeZone }));\n          }}\n        />\n      </InlineField>\n    </>\n  );\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { IconButton } from './IconButton';\n\ninterface Props {\n  index: number;\n  elements: any[];\n  onAdd: () => void;\n  onRemove: () => void;\n}\n\n/**\n * A component used to show add & remove buttons for mutable lists of values. Wether to show or not the add or the remove buttons\n * depends on the `index` and `elements` props. This enforces a consistent experience whenever this pattern is used.\n */\nexport const AddRemove = ({ index, onAdd, onRemove, elements }: Props) => {\n  return (\n    <div\n      className={css`\n        display: flex;\n      `}\n    >\n      {index === 0 && <IconButton iconName=\"plus\" onClick={onAdd} label=\"add\" />}\n\n      {elements.length >= 2 && <IconButton iconName=\"minus\" onClick={onRemove} label=\"remove\" />}\n    </div>\n  );\n};\n","import { createAction } from '@reduxjs/toolkit';\n\nimport { Filter } from '../../../aggregations';\n\nexport const addFilter = createAction('@bucketAggregations/filter/add');\nexport const removeFilter = createAction<number>('@bucketAggregations/filter/remove');\nexport const changeFilter = createAction<{ index: number; filter: Filter }>('@bucketAggregations/filter/change');\n","import { Action } from 'redux';\n\nimport { Filter } from '../../../aggregations';\nimport { defaultFilter } from '../utils';\n\nimport { addFilter, changeFilter, removeFilter } from './actions';\n\nexport const reducer = (state: Filter[] = [], action: Action) => {\n  if (addFilter.match(action)) {\n    return [...state, defaultFilter()];\n  }\n\n  if (removeFilter.match(action)) {\n    return state.slice(0, action.payload).concat(state.slice(action.payload + 1));\n  }\n\n  if (changeFilter.match(action)) {\n    return state.map((filter, index) => {\n      if (index !== action.payload.index) {\n        return filter;\n      }\n\n      return action.payload.filter;\n    });\n  }\n\n  return state;\n};\n","import { css } from '@emotion/css';\nimport { uniqueId } from 'lodash';\nimport React, { useEffect, useRef } from 'react';\n\nimport { InlineField, Input, QueryField } from '@grafana/ui';\n\nimport { useDispatch, useStatelessReducer } from '../../../../../hooks/useStatelessReducer';\nimport { AddRemove } from '../../../../AddRemove';\nimport { Filters } from '../../aggregations';\nimport { changeBucketAggregationSetting } from '../../state/actions';\n\nimport { addFilter, changeFilter, removeFilter } from './state/actions';\nimport { reducer as filtersReducer } from './state/reducer';\n\ninterface Props {\n  bucketAgg: Filters;\n}\n\nexport const FiltersSettingsEditor = ({ bucketAgg }: Props) => {\n  const { current: baseId } = useRef(uniqueId('es-filters-'));\n\n  const upperStateDispatch = useDispatch();\n\n  const dispatch = useStatelessReducer(\n    (newValue) => upperStateDispatch(changeBucketAggregationSetting({ bucketAgg, settingName: 'filters', newValue })),\n    bucketAgg.settings?.filters,\n    filtersReducer\n  );\n\n  // The model might not have filters (or an empty array of filters) in it because of the way it was built in previous versions of the datasource.\n  // If this is the case we add a default one.\n  useEffect(() => {\n    if (!bucketAgg.settings?.filters?.length) {\n      dispatch(addFilter());\n    }\n  }, [dispatch, bucketAgg.settings?.filters?.length]);\n\n  return (\n    <>\n      <div\n        className={css`\n          display: flex;\n          flex-direction: column;\n        `}\n      >\n        {bucketAgg.settings?.filters!.map((filter, index) => (\n          <div\n            key={index}\n            className={css`\n              display: flex;\n            `}\n          >\n            <InlineField label=\"Query\" labelWidth={8}>\n              <div\n                className={css`\n                  width: 150px;\n                `}\n              >\n                <QueryField\n                  placeholder=\"Lucene Query\"\n                  portalOrigin=\"elasticsearch\"\n                  onBlur={() => {}}\n                  onChange={(query) => dispatch(changeFilter({ index, filter: { ...filter, query } }))}\n                  query={filter.query}\n                />\n              </div>\n            </InlineField>\n            <InlineField label=\"Label\" labelWidth={8}>\n              <Input\n                width={16}\n                id={`${baseId}-label-${index}`}\n                placeholder=\"Label\"\n                onBlur={(e) => dispatch(changeFilter({ index, filter: { ...filter, label: e.target.value } }))}\n                defaultValue={filter.label}\n              />\n            </InlineField>\n            <AddRemove\n              index={index}\n              elements={bucketAgg.settings?.filters || []}\n              onAdd={() => dispatch(addFilter())}\n              onRemove={() => dispatch(removeFilter(index))}\n            />\n          </div>\n        ))}\n      </div>\n    </>\n  );\n};\n","import { uniqueId } from 'lodash';\nimport React, { useRef } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { InlineField, Select, Input } from '@grafana/ui';\n\nimport { useDispatch } from '../../../../hooks/useStatelessReducer';\nimport { describeMetric } from '../../../../utils';\nimport { useCreatableSelectPersistedBehaviour } from '../../../hooks/useCreatableSelectPersistedBehaviour';\nimport { useQuery } from '../../ElasticsearchQueryContext';\nimport {\n  ExtendedStatMetaType,\n  ExtendedStats,\n  isPipelineAggregation,\n  MetricAggregation,\n  Percentiles,\n} from '../../MetricAggregationsEditor/aggregations';\nimport { Terms } from '../aggregations';\nimport { changeBucketAggregationSetting } from '../state/actions';\nimport { bucketAggregationConfig, orderByOptions, orderOptions, sizeOptions } from '../utils';\n\nimport { inlineFieldProps } from '.';\n\ninterface Props {\n  bucketAgg: Terms;\n}\n\nexport const TermsSettingsEditor = ({ bucketAgg }: Props) => {\n  const { metrics } = useQuery();\n  const orderBy = createOrderByOptions(metrics);\n  const { current: baseId } = useRef(uniqueId('es-terms-'));\n\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <InlineField label=\"Order\" {...inlineFieldProps}>\n        <Select\n          inputId={`${baseId}-order`}\n          onChange={(e) =>\n            dispatch(changeBucketAggregationSetting({ bucketAgg, settingName: 'order', newValue: e.value }))\n          }\n          options={orderOptions}\n          value={bucketAgg.settings?.order || bucketAggregationConfig.terms.defaultSettings?.order}\n        />\n      </InlineField>\n\n      <InlineField label=\"Size\" {...inlineFieldProps}>\n        <Select\n          inputId={`${baseId}-size`}\n          // TODO: isValidNewOption should only allow numbers & template variables\n          {...useCreatableSelectPersistedBehaviour({\n            options: sizeOptions,\n            value: bucketAgg.settings?.size || bucketAggregationConfig.terms.defaultSettings?.size,\n            onChange({ value }) {\n              dispatch(changeBucketAggregationSetting({ bucketAgg, settingName: 'size', newValue: value }));\n            },\n          })}\n        />\n      </InlineField>\n\n      <InlineField label=\"Min Doc Count\" {...inlineFieldProps}>\n        <Input\n          id={`${baseId}-min_doc_count`}\n          onBlur={(e) =>\n            dispatch(\n              changeBucketAggregationSetting({ bucketAgg, settingName: 'min_doc_count', newValue: e.target.value })\n            )\n          }\n          defaultValue={\n            bucketAgg.settings?.min_doc_count || bucketAggregationConfig.terms.defaultSettings?.min_doc_count\n          }\n        />\n      </InlineField>\n\n      <InlineField label=\"Order By\" {...inlineFieldProps}>\n        <Select\n          inputId={`${baseId}-order_by`}\n          onChange={(e) =>\n            dispatch(changeBucketAggregationSetting({ bucketAgg, settingName: 'orderBy', newValue: e.value }))\n          }\n          options={orderBy}\n          value={bucketAgg.settings?.orderBy || bucketAggregationConfig.terms.defaultSettings?.orderBy}\n        />\n      </InlineField>\n\n      <InlineField label=\"Missing\" {...inlineFieldProps}>\n        <Input\n          id={`${baseId}-missing`}\n          onBlur={(e) =>\n            dispatch(changeBucketAggregationSetting({ bucketAgg, settingName: 'missing', newValue: e.target.value }))\n          }\n          defaultValue={bucketAgg.settings?.missing || bucketAggregationConfig.terms.defaultSettings?.missing}\n        />\n      </InlineField>\n    </>\n  );\n};\n\n/**\n * This returns the valid options for each of the enabled extended stat\n */\nfunction createOrderByOptionsForExtendedStats(metric: ExtendedStats): SelectableValue<string> {\n  if (!metric.meta) {\n    return [];\n  }\n  const metaKeys = Object.keys(metric.meta) as ExtendedStatMetaType[];\n  return metaKeys\n    .filter((key) => metric.meta?.[key])\n    .map((key) => {\n      let method = key as string;\n      // The bucket path for std_deviation_bounds.lower and std_deviation_bounds.upper\n      // is accessed via std_lower and std_upper, respectively.\n      if (key === 'std_deviation_bounds_lower') {\n        method = 'std_lower';\n      }\n      if (key === 'std_deviation_bounds_upper') {\n        method = 'std_upper';\n      }\n      return { label: `${describeMetric(metric)} (${method})`, value: `${metric.id}[${method}]` };\n    });\n}\n\n/**\n * This returns the valid options for each of the percents listed in the percentile settings\n */\nfunction createOrderByOptionsForPercentiles(metric: Percentiles): Array<SelectableValue<string>> {\n  if (!metric.settings?.percents) {\n    return [];\n  }\n  return metric.settings.percents.map((percent) => {\n    // The bucket path for percentile numbers is appended with a `.0` if the number is whole\n    // otherwise you have to use the actual value.\n    const percentString = /^\\d+\\.\\d+/.test(`${percent}`) ? percent : `${percent}.0`;\n    return { label: `${describeMetric(metric)} (${percent})`, value: `${metric.id}[${percentString}]` };\n  });\n}\n\nfunction isValidOrderTarget(metric: MetricAggregation) {\n  return (\n    // top metrics can't be used for ordering\n    metric.type !== 'top_metrics' &&\n    // pipeline aggregations can't be used for ordering: https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-terms-aggregation.html#search-aggregations-bucket-terms-aggregation-order\n    !isPipelineAggregation(metric)\n  );\n}\n\n/**\n * This creates all the valid order by options based on the metrics\n */\nexport const createOrderByOptions = (metrics: MetricAggregation[] = []): Array<SelectableValue<string>> => {\n  const metricOptions = metrics.filter(isValidOrderTarget).flatMap((metric) => {\n    if (metric.type === 'extended_stats') {\n      return createOrderByOptionsForExtendedStats(metric);\n    } else if (metric.type === 'percentiles') {\n      return createOrderByOptionsForPercentiles(metric);\n    } else {\n      return { label: describeMetric(metric), value: metric.id };\n    }\n  });\n  return [...orderByOptions, ...metricOptions];\n};\n","import { describeMetric, convertOrderByToMetricId } from '../../../../utils';\nimport { useQuery } from '../../ElasticsearchQueryContext';\nimport { BucketAggregation } from '../aggregations';\nimport { bucketAggregationConfig, orderByOptions, orderOptions } from '../utils';\n\nconst hasValue = (value: string) => (object: { value?: string }) => object.value === value;\n\n// FIXME: We should apply the same defaults we have in bucketAggregationsConfig here instead of \"custom\" values\n// as they might get out of sync.\n// The reason we need them is that even though after the refactoring each setting is created with its default value,\n// queries created with the old version might not have them.\nexport const useDescription = (bucketAgg: BucketAggregation): string => {\n  const { metrics } = useQuery();\n\n  switch (bucketAgg.type) {\n    case 'terms': {\n      const order = bucketAgg.settings?.order || 'desc';\n      const size = bucketAgg.settings?.size || '10';\n      const minDocCount = parseInt(bucketAgg.settings?.min_doc_count || '0', 10);\n      const orderBy = bucketAgg.settings?.orderBy || '_term';\n      let description = '';\n\n      if (size !== '0') {\n        const orderLabel = orderOptions.find(hasValue(order))?.label!;\n        description = `${orderLabel} ${size}, `;\n      }\n\n      if (minDocCount > 0) {\n        description += `Min Doc Count: ${minDocCount}, `;\n      }\n\n      description += 'Order by: ';\n      const orderByOption = orderByOptions.find(hasValue(orderBy));\n      if (orderByOption) {\n        description += orderByOption.label;\n      } else {\n        const metric = metrics?.find((m) => m.id === convertOrderByToMetricId(orderBy));\n        if (metric) {\n          description += describeMetric(metric);\n        } else {\n          description += 'metric not found';\n        }\n      }\n\n      if (size === '0') {\n        description += ` (${order})`;\n      }\n      return description;\n    }\n\n    case 'histogram': {\n      const interval = bucketAgg.settings?.interval || 1000;\n      const minDocCount = bucketAgg.settings?.min_doc_count || 1;\n\n      return `Interval: ${interval}${minDocCount > 0 ? `, Min Doc Count: ${minDocCount}` : ''}`;\n    }\n\n    case 'filters': {\n      const filters = bucketAgg.settings?.filters || bucketAggregationConfig['filters'].defaultSettings?.filters;\n      return `Filter Queries (${filters!.length})`;\n    }\n\n    case 'geohash_grid': {\n      const precision = Math.max(Math.min(parseInt(bucketAgg.settings?.precision || '5', 10), 12), 1);\n      return `Precision: ${precision}`;\n    }\n\n    case 'date_histogram': {\n      const interval = bucketAgg.settings?.interval || 'auto';\n      const minDocCount = bucketAgg.settings?.min_doc_count || 0;\n      const trimEdges = bucketAgg.settings?.trimEdges || 0;\n\n      let description = `Interval: ${interval}`;\n\n      if (minDocCount > 0) {\n        description += `, Min Doc Count: ${minDocCount}`;\n      }\n\n      if (trimEdges > 0) {\n        description += `, Trim edges: ${trimEdges}`;\n      }\n\n      return description;\n    }\n\n    default:\n      return 'Settings';\n  }\n};\n","import { uniqueId } from 'lodash';\nimport React, { ComponentProps, useRef } from 'react';\n\nimport { InlineField, Input } from '@grafana/ui';\n\nimport { useDispatch } from '../../../../hooks/useStatelessReducer';\nimport { SettingsEditorContainer } from '../../SettingsEditorContainer';\nimport { BucketAggregation } from '../aggregations';\nimport { changeBucketAggregationSetting } from '../state/actions';\nimport { bucketAggregationConfig } from '../utils';\n\nimport { DateHistogramSettingsEditor } from './DateHistogramSettingsEditor';\nimport { FiltersSettingsEditor } from './FiltersSettingsEditor';\nimport { TermsSettingsEditor } from './TermsSettingsEditor';\nimport { useDescription } from './useDescription';\n\nexport const inlineFieldProps: Partial<ComponentProps<typeof InlineField>> = {\n  labelWidth: 16,\n};\n\ninterface Props {\n  bucketAgg: BucketAggregation;\n}\n\nexport const SettingsEditor = ({ bucketAgg }: Props) => {\n  const { current: baseId } = useRef(uniqueId('es-setting-'));\n\n  const dispatch = useDispatch();\n\n  const settingsDescription = useDescription(bucketAgg);\n\n  return (\n    <SettingsEditorContainer label={settingsDescription}>\n      {bucketAgg.type === 'terms' && <TermsSettingsEditor bucketAgg={bucketAgg} />}\n      {bucketAgg.type === 'date_histogram' && <DateHistogramSettingsEditor bucketAgg={bucketAgg} />}\n      {bucketAgg.type === 'filters' && <FiltersSettingsEditor bucketAgg={bucketAgg} />}\n\n      {bucketAgg.type === 'geohash_grid' && (\n        <InlineField label=\"Precision\" {...inlineFieldProps}>\n          <Input\n            id={`${baseId}-geohash_grid-precision`}\n            onBlur={(e) =>\n              dispatch(\n                changeBucketAggregationSetting({ bucketAgg, settingName: 'precision', newValue: e.target.value })\n              )\n            }\n            defaultValue={\n              bucketAgg.settings?.precision || bucketAggregationConfig[bucketAgg.type].defaultSettings?.precision\n            }\n          />\n        </InlineField>\n      )}\n\n      {bucketAgg.type === 'histogram' && (\n        <>\n          <InlineField label=\"Interval\" {...inlineFieldProps}>\n            <Input\n              id={`${baseId}-histogram-interval`}\n              onBlur={(e) =>\n                dispatch(\n                  changeBucketAggregationSetting({ bucketAgg, settingName: 'interval', newValue: e.target.value })\n                )\n              }\n              defaultValue={\n                bucketAgg.settings?.interval || bucketAggregationConfig[bucketAgg.type].defaultSettings?.interval\n              }\n            />\n          </InlineField>\n\n          <InlineField label=\"Min Doc Count\" {...inlineFieldProps}>\n            <Input\n              id={`${baseId}-histogram-min_doc_count`}\n              onBlur={(e) =>\n                dispatch(\n                  changeBucketAggregationSetting({ bucketAgg, settingName: 'min_doc_count', newValue: e.target.value })\n                )\n              }\n              defaultValue={\n                bucketAgg.settings?.min_doc_count ||\n                bucketAggregationConfig[bucketAgg.type].defaultSettings?.min_doc_count\n              }\n            />\n          </InlineField>\n        </>\n      )}\n    </SettingsEditorContainer>\n  );\n};\n","import React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { InlineSegmentGroup, Segment, SegmentAsync } from '@grafana/ui';\n\nimport { useFields } from '../../../hooks/useFields';\nimport { useDispatch } from '../../../hooks/useStatelessReducer';\nimport { segmentStyles } from '../styles';\n\nimport { SettingsEditor } from './SettingsEditor';\nimport { BucketAggregation, BucketAggregationType, isBucketAggregationWithField } from './aggregations';\nimport { changeBucketAggregationField, changeBucketAggregationType } from './state/actions';\nimport { bucketAggregationConfig } from './utils';\n\nconst bucketAggOptions: Array<SelectableValue<BucketAggregationType>> = Object.entries(bucketAggregationConfig).map(\n  ([key, { label }]) => ({\n    label,\n    value: key as BucketAggregationType,\n  })\n);\n\nconst toOption = (bucketAgg: BucketAggregation) => ({\n  label: bucketAggregationConfig[bucketAgg.type].label,\n  value: bucketAgg.type,\n});\n\ninterface QueryMetricEditorProps {\n  value: BucketAggregation;\n}\n\nexport const BucketAggregationEditor = ({ value }: QueryMetricEditorProps) => {\n  const dispatch = useDispatch();\n  const getFields = useFields(value.type);\n\n  return (\n    <>\n      <InlineSegmentGroup>\n        <Segment\n          className={segmentStyles}\n          options={bucketAggOptions}\n          onChange={(e) => dispatch(changeBucketAggregationType({ id: value.id, newType: e.value! }))}\n          value={toOption(value)}\n        />\n\n        {isBucketAggregationWithField(value) && (\n          <SegmentAsync\n            className={segmentStyles}\n            loadOptions={getFields}\n            onChange={(e) => dispatch(changeBucketAggregationField({ id: value.id, newField: e.value }))}\n            placeholder=\"Select Field\"\n            value={value.field}\n          />\n        )}\n      </InlineSegmentGroup>\n\n      <SettingsEditor bucketAgg={value} />\n    </>\n  );\n};\n","import React from 'react';\n\nimport { useDispatch } from '../../../hooks/useStatelessReducer';\nimport { IconButton } from '../../IconButton';\nimport { useQuery } from '../ElasticsearchQueryContext';\nimport { QueryEditorRow } from '../QueryEditorRow';\n\nimport { BucketAggregationEditor } from './BucketAggregationEditor';\nimport { BucketAggregation } from './aggregations';\nimport { addBucketAggregation, removeBucketAggregation } from './state/actions';\n\ninterface Props {\n  nextId: BucketAggregation['id'];\n}\n\nexport const BucketAggregationsEditor = ({ nextId }: Props) => {\n  const dispatch = useDispatch();\n  const { bucketAggs } = useQuery();\n  const totalBucketAggs = bucketAggs?.length || 0;\n\n  return (\n    <>\n      {bucketAggs!.map((bucketAgg, index) => (\n        <QueryEditorRow\n          key={`${bucketAgg.type}-${bucketAgg.id}`}\n          label={index === 0 ? 'Group By' : 'Then By'}\n          onRemoveClick={totalBucketAggs > 1 && (() => dispatch(removeBucketAggregation(bucketAgg.id)))}\n        >\n          <BucketAggregationEditor value={bucketAgg} />\n\n          {index === 0 && (\n            <IconButton iconName=\"plus\" onClick={() => dispatch(addBucketAggregation(nextId))} label=\"add\" />\n          )}\n        </QueryEditorRow>\n      ))}\n    </>\n  );\n};\n","import { css, cx } from '@emotion/css';\nimport React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Segment } from '@grafana/ui';\n\nimport { describeMetric } from '../utils';\n\nimport { MetricAggregation } from './QueryEditor/MetricAggregationsEditor/aggregations';\n\nconst noWrap = css`\n  white-space: nowrap;\n`;\n\nconst toOption = (metric: MetricAggregation) => ({\n  label: describeMetric(metric),\n  value: metric,\n});\n\nconst toOptions = (metrics: MetricAggregation[]): Array<SelectableValue<MetricAggregation>> => metrics.map(toOption);\n\ninterface Props {\n  options: MetricAggregation[];\n  onChange: (e: SelectableValue<MetricAggregation>) => void;\n  className?: string;\n  value?: string;\n}\n\nexport const MetricPicker = ({ options, onChange, className, value }: Props) => {\n  const selectedOption = options.find((option) => option.id === value);\n\n  return (\n    <Segment\n      className={cx(className, noWrap)}\n      options={toOptions(options)}\n      onChange={onChange}\n      placeholder=\"Select Metric\"\n      value={!!selectedOption ? toOption(selectedOption) : undefined}\n    />\n  );\n};\n","import { uniqueId } from 'lodash';\nimport React, { ComponentProps, useState } from 'react';\n\nimport { InlineField, Input } from '@grafana/ui';\nimport { getScriptValue } from 'app/plugins/datasource/elasticsearch/utils';\n\nimport { useDispatch } from '../../../../hooks/useStatelessReducer';\nimport { SettingKeyOf } from '../../../types';\nimport { MetricAggregationWithInlineScript, MetricAggregationWithSettings } from '../aggregations';\nimport { changeMetricSetting } from '../state/actions';\n\ninterface Props<T extends MetricAggregationWithSettings, K extends SettingKeyOf<T>> {\n  label: string;\n  settingName: K;\n  metric: T;\n  placeholder?: ComponentProps<typeof Input>['placeholder'];\n  tooltip?: ComponentProps<typeof InlineField>['tooltip'];\n}\n\nexport function SettingField<T extends MetricAggregationWithSettings, K extends SettingKeyOf<T>>({\n  label,\n  settingName,\n  metric,\n  placeholder,\n  tooltip,\n}: Props<T, K>) {\n  const dispatch = useDispatch();\n  const [id] = useState(uniqueId(`es-field-id-`));\n  const settings = metric.settings;\n\n  let defaultValue = settings?.[settingName as keyof typeof settings] || '';\n\n  if (settingName === 'script') {\n    defaultValue = getScriptValue(metric as MetricAggregationWithInlineScript);\n  }\n\n  return (\n    <InlineField label={label} labelWidth={16} tooltip={tooltip}>\n      <Input\n        id={id}\n        placeholder={placeholder}\n        onBlur={(e) => dispatch(changeMetricSetting({ metric, settingName, newValue: e.target.value }))}\n        defaultValue={defaultValue}\n      />\n    </InlineField>\n  );\n}\n","import { createAction } from '@reduxjs/toolkit';\n\nexport const addPipelineVariable = createAction('@pipelineVariables/add');\nexport const removePipelineVariable = createAction<number>('@pipelineVariables/remove');\n\nexport const renamePipelineVariable = createAction<{ index: number; newName: string }>('@pipelineVariables/rename');\n\nexport const changePipelineVariableMetric = createAction<{ index: number; newMetric: string }>(\n  '@pipelineVariables/change_metric'\n);\n","import { Action } from '@reduxjs/toolkit';\n\nimport { PipelineVariable } from '../../../aggregations';\nimport { defaultPipelineVariable, generatePipelineVariableName } from '../utils';\n\nimport {\n  addPipelineVariable,\n  changePipelineVariableMetric,\n  removePipelineVariable,\n  renamePipelineVariable,\n} from './actions';\n\nexport const reducer = (state: PipelineVariable[] = [], action: Action) => {\n  if (addPipelineVariable.match(action)) {\n    return [...state, defaultPipelineVariable(generatePipelineVariableName(state))];\n  }\n\n  if (removePipelineVariable.match(action)) {\n    return state.slice(0, action.payload).concat(state.slice(action.payload + 1));\n  }\n\n  if (renamePipelineVariable.match(action)) {\n    return state.map((pipelineVariable, index) => {\n      if (index !== action.payload.index) {\n        return pipelineVariable;\n      }\n\n      return {\n        ...pipelineVariable,\n        name: action.payload.newName,\n      };\n    });\n  }\n\n  if (changePipelineVariableMetric.match(action)) {\n    return state.map((pipelineVariable, index) => {\n      if (index !== action.payload.index) {\n        return pipelineVariable;\n      }\n\n      return {\n        ...pipelineVariable,\n        pipelineAgg: action.payload.newMetric,\n      };\n    });\n  }\n\n  return state;\n};\n","import { css } from '@emotion/css';\nimport { uniqueId } from 'lodash';\nimport React, { Fragment, useEffect } from 'react';\n\nimport { Input, InlineLabel } from '@grafana/ui';\n\nimport { useStatelessReducer, useDispatch } from '../../../../../hooks/useStatelessReducer';\nimport { AddRemove } from '../../../../AddRemove';\nimport { MetricPicker } from '../../../../MetricPicker';\nimport { BucketScript, MetricAggregation } from '../../aggregations';\nimport { changeMetricAttribute } from '../../state/actions';\nimport { SettingField } from '../SettingField';\n\nimport {\n  addPipelineVariable,\n  removePipelineVariable,\n  renamePipelineVariable,\n  changePipelineVariableMetric,\n} from './state/actions';\nimport { reducer } from './state/reducer';\n\ninterface Props {\n  value: BucketScript;\n  previousMetrics: MetricAggregation[];\n}\n\nexport const BucketScriptSettingsEditor = ({ value, previousMetrics }: Props) => {\n  const upperStateDispatch = useDispatch();\n\n  const dispatch = useStatelessReducer(\n    (newValue) =>\n      upperStateDispatch(changeMetricAttribute({ metric: value, attribute: 'pipelineVariables', newValue })),\n    value.pipelineVariables,\n    reducer\n  );\n\n  // The model might not have pipeline variables (or an empty array of pipeline vars) in it because of the way it was built in previous versions of the datasource.\n  // If this is the case we add a default one.\n  useEffect(() => {\n    if (!value.pipelineVariables?.length) {\n      dispatch(addPipelineVariable());\n    }\n  }, [dispatch, value.pipelineVariables?.length]);\n\n  return (\n    <>\n      <div\n        className={css`\n          display: flex;\n        `}\n      >\n        <InlineLabel width={16}>Variables</InlineLabel>\n        <div\n          className={css`\n            display: grid;\n            grid-template-columns: 1fr auto;\n            row-gap: 4px;\n            margin-bottom: 4px;\n          `}\n        >\n          {value.pipelineVariables!.map((pipelineVar, index) => (\n            // index as a key doesn't work here since removing an element\n            // in the middle of the list, will cause the next element to obtain the same key as the removed one.\n            // this will cause react to \"drop\" the last element of the list instead of the just removed one,\n            // and the default value for the input won't match the model as the DOM won't get updated.\n            // using pipelineVar.name is not an option since it might be duplicated by the user.\n            // generating a unique key on every render, while is probably not the best solution in terms of performance\n            // ensures the UI is in a correct state. We might want to optimize this if we see perf issue in the future.\n            <Fragment key={uniqueId('es-bs-')}>\n              <div\n                className={css`\n                  display: grid;\n                  column-gap: 4px;\n                  grid-template-columns: auto auto;\n                `}\n              >\n                <Input\n                  aria-label=\"Variable name\"\n                  defaultValue={pipelineVar.name}\n                  placeholder=\"Variable Name\"\n                  onBlur={(e) => dispatch(renamePipelineVariable({ newName: e.target.value, index }))}\n                />\n                <MetricPicker\n                  onChange={(e) => dispatch(changePipelineVariableMetric({ newMetric: e.value!.id, index }))}\n                  options={previousMetrics}\n                  value={pipelineVar.pipelineAgg}\n                />\n              </div>\n\n              <AddRemove\n                index={index}\n                elements={value.pipelineVariables || []}\n                onAdd={() => dispatch(addPipelineVariable())}\n                onRemove={() => dispatch(removePipelineVariable(index))}\n              />\n            </Fragment>\n          ))}\n        </div>\n      </div>\n\n      <SettingField\n        label=\"Script\"\n        metric={value}\n        settingName=\"script\"\n        tooltip=\"Elasticsearch v5.0 and above: Scripting language is Painless. Use params.<var> to reference a variable. Elasticsearch pre-v5.0: Scripting language is per default Groovy if not changed. For Groovy use <var> to reference a variable.\"\n        placeholder=\"params.var1 / params.var2\"\n      />\n    </>\n  );\n};\n","import { uniqueId } from 'lodash';\nimport React, { useRef } from 'react';\n\nimport { Input, InlineField, Select, InlineSwitch } from '@grafana/ui';\n\nimport { useDispatch } from '../../../../hooks/useStatelessReducer';\nimport { movingAvgModelOptions } from '../../../../queryDef';\nimport { isEWMAMovingAverage, isHoltMovingAverage, isHoltWintersMovingAverage, MovingAverage } from '../aggregations';\nimport { changeMetricSetting } from '../state/actions';\n\nimport { SettingField } from './SettingField';\n\ninterface Props {\n  metric: MovingAverage;\n}\n\n// The way we handle changes for those settings is not ideal compared to the other components in the editor\n// FIXME: using `changeMetricSetting` will cause an error when switching from models that have different options\n// as they might be incompatible. We should clear all other options on model change.\nexport const MovingAverageSettingsEditor = ({ metric }: Props) => {\n  const dispatch = useDispatch();\n  const { current: baseId } = useRef(uniqueId('es-moving-avg-'));\n\n  return (\n    <>\n      <InlineField label=\"Model\" labelWidth={16}>\n        <Select\n          inputId={`${baseId}-model`}\n          onChange={(value) => dispatch(changeMetricSetting({ metric, settingName: 'model', newValue: value.value }))}\n          options={movingAvgModelOptions}\n          value={metric.settings?.model}\n        />\n      </InlineField>\n\n      <SettingField label=\"Window\" settingName=\"window\" metric={metric} placeholder=\"5\" />\n\n      <SettingField label=\"Predict\" settingName=\"predict\" metric={metric} />\n\n      {(isEWMAMovingAverage(metric) || isHoltMovingAverage(metric) || isHoltWintersMovingAverage(metric)) && (\n        <InlineField label=\"Alpha\" labelWidth={16}>\n          <Input\n            id={`${baseId}-alpha`}\n            onBlur={(e) =>\n              dispatch(\n                changeMetricSetting({\n                  metric,\n                  settingName: 'settings',\n                  newValue: {\n                    ...metric.settings?.settings,\n                    alpha: e.target.value,\n                  },\n                })\n              )\n            }\n            defaultValue={metric.settings?.settings?.alpha}\n          />\n        </InlineField>\n      )}\n\n      {(isHoltMovingAverage(metric) || isHoltWintersMovingAverage(metric)) && (\n        <InlineField label=\"Beta\" labelWidth={16}>\n          <Input\n            id={`${baseId}-beta`}\n            onBlur={(e) =>\n              dispatch(\n                changeMetricSetting({\n                  metric,\n                  settingName: 'settings',\n                  newValue: {\n                    ...metric.settings?.settings,\n                    beta: e.target.value,\n                  },\n                })\n              )\n            }\n            defaultValue={metric.settings?.settings?.beta}\n          />\n        </InlineField>\n      )}\n\n      {isHoltWintersMovingAverage(metric) && (\n        <>\n          <InlineField label=\"Gamma\" labelWidth={16}>\n            <Input\n              id={`${baseId}-gamma`}\n              onBlur={(e) =>\n                dispatch(\n                  changeMetricSetting({\n                    metric,\n                    settingName: 'settings',\n                    newValue: {\n                      ...metric.settings?.settings,\n                      gamma: e.target.value,\n                    },\n                  })\n                )\n              }\n              defaultValue={metric.settings?.settings?.gamma}\n            />\n          </InlineField>\n          <InlineField label=\"Period\" labelWidth={16}>\n            <Input\n              id={`${baseId}-period`}\n              onBlur={(e) =>\n                dispatch(\n                  changeMetricSetting({\n                    metric,\n                    settingName: 'settings',\n                    newValue: {\n                      ...metric.settings?.settings,\n                      period: e.target.value!,\n                    },\n                  })\n                )\n              }\n              defaultValue={metric.settings?.settings?.period}\n            />\n          </InlineField>\n\n          <InlineField label=\"Pad\" labelWidth={16}>\n            <InlineSwitch\n              id={`${baseId}-pad`}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                dispatch(\n                  changeMetricSetting({\n                    metric,\n                    settingName: 'settings',\n                    newValue: { ...metric.settings?.settings, pad: e.target.checked },\n                  })\n                )\n              }\n              checked={!!metric.settings?.settings?.pad}\n            />\n          </InlineField>\n        </>\n      )}\n\n      {(isEWMAMovingAverage(metric) || isHoltMovingAverage(metric) || isHoltWintersMovingAverage(metric)) && (\n        <InlineField label=\"Minimize\" labelWidth={16}>\n          <InlineSwitch\n            id={`${baseId}-minimize`}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n              dispatch(changeMetricSetting({ metric, settingName: 'minimize', newValue: e.target.checked }))\n            }\n            checked={!!metric.settings?.minimize}\n          />\n        </InlineField>\n      )}\n    </>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { FunctionComponent } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { AsyncMultiSelect, InlineField, SegmentAsync, Select } from '@grafana/ui';\n\nimport { useFields } from '../../../../hooks/useFields';\nimport { useDispatch } from '../../../../hooks/useStatelessReducer';\nimport { orderOptions } from '../../BucketAggregationsEditor/utils';\nimport { TopMetrics } from '../aggregations';\nimport { changeMetricSetting } from '../state/actions';\n\ninterface Props {\n  metric: TopMetrics;\n}\n\nconst toMultiSelectValue = (value: string): SelectableValue<string> => ({ value, label: value });\n\nexport const TopMetricsSettingsEditor: FunctionComponent<Props> = ({ metric }) => {\n  const dispatch = useDispatch();\n  const getOrderByOptions = useFields(['number', 'date']);\n  const getMetricsOptions = useFields(metric.type);\n\n  return (\n    <>\n      <InlineField label=\"Metrics\" labelWidth={16}>\n        <AsyncMultiSelect\n          onChange={(e) =>\n            dispatch(\n              changeMetricSetting({\n                metric,\n                settingName: 'metrics',\n                newValue: e.map((v) => v.value!),\n              })\n            )\n          }\n          loadOptions={getMetricsOptions}\n          value={metric.settings?.metrics?.map(toMultiSelectValue)}\n          closeMenuOnSelect={false}\n          defaultOptions\n        />\n      </InlineField>\n      <InlineField label=\"Order\" labelWidth={16}>\n        <Select\n          onChange={(e) => dispatch(changeMetricSetting({ metric, settingName: 'order', newValue: e.value }))}\n          options={orderOptions}\n          value={metric.settings?.order}\n        />\n      </InlineField>\n      <InlineField\n        label=\"Order By\"\n        labelWidth={16}\n        className={css`\n          & > div {\n            width: 100%;\n          }\n        `}\n      >\n        <SegmentAsync\n          className={css`\n            margin-right: 0;\n          `}\n          loadOptions={getOrderByOptions}\n          onChange={(e) => dispatch(changeMetricSetting({ metric, settingName: 'orderBy', newValue: e.value }))}\n          placeholder=\"Select Field\"\n          value={metric.settings?.orderBy}\n        />\n      </InlineField>\n    </>\n  );\n};\n","import { uniqueId } from 'lodash';\nimport React, { ComponentProps, useRef, useState } from 'react';\n\nimport { InlineField, Input, InlineSwitch, Select } from '@grafana/ui';\n\nimport { useDispatch } from '../../../../hooks/useStatelessReducer';\nimport { extendedStats } from '../../../../queryDef';\nimport { useQuery } from '../../ElasticsearchQueryContext';\nimport { SettingsEditorContainer } from '../../SettingsEditorContainer';\nimport {\n  MetricAggregation,\n  isMetricAggregationWithInlineScript,\n  isMetricAggregationWithMissingSupport,\n  ExtendedStat,\n} from '../aggregations';\nimport { changeMetricMeta, changeMetricSetting } from '../state/actions';\nimport { metricAggregationConfig } from '../utils';\n\nimport { BucketScriptSettingsEditor } from './BucketScriptSettingsEditor';\nimport { MovingAverageSettingsEditor } from './MovingAverageSettingsEditor';\nimport { SettingField } from './SettingField';\nimport { TopMetricsSettingsEditor } from './TopMetricsSettingsEditor';\nimport { useDescription } from './useDescription';\n\n// TODO: Move this somewhere and share it with BucketsAggregation Editor\nconst inlineFieldProps: Partial<ComponentProps<typeof InlineField>> = {\n  labelWidth: 16,\n};\n\ninterface Props {\n  metric: MetricAggregation;\n  previousMetrics: MetricAggregation[];\n}\n\nexport const SettingsEditor = ({ metric, previousMetrics }: Props) => {\n  const { current: baseId } = useRef(uniqueId('es-setting-'));\n\n  const dispatch = useDispatch();\n  const description = useDescription(metric);\n  const query = useQuery();\n\n  const rateAggUnitOptions = [\n    { value: 'second', label: 'Second' },\n    { value: 'minute', label: 'Minute' },\n    { value: 'hour', label: 'Hour' },\n    { value: 'day', label: 'Day' },\n    { value: 'week', label: 'Week' },\n    { value: 'month', label: 'Month' },\n    { value: 'quarter', label: 'Quarter' },\n    { value: 'Year', label: 'Year' },\n  ];\n\n  const rateAggModeOptions = [\n    { value: 'sum', label: 'Sum' },\n    { value: 'value_count', label: 'Value count' },\n  ];\n\n  return (\n    <SettingsEditorContainer label={description} hidden={metric.hide}>\n      {metric.type === 'derivative' && <SettingField label=\"Unit\" metric={metric} settingName=\"unit\" />}\n\n      {metric.type === 'serial_diff' && <SettingField label=\"Lag\" metric={metric} settingName=\"lag\" placeholder=\"1\" />}\n\n      {metric.type === 'cumulative_sum' && <SettingField label=\"Format\" metric={metric} settingName=\"format\" />}\n\n      {metric.type === 'moving_avg' && <MovingAverageSettingsEditor metric={metric} />}\n\n      {metric.type === 'moving_fn' && (\n        <>\n          <SettingField label=\"Window\" metric={metric} settingName=\"window\" />\n          <SettingField label=\"Script\" metric={metric} settingName=\"script\" />\n          <SettingField label=\"Shift\" metric={metric} settingName=\"shift\" />\n        </>\n      )}\n\n      {metric.type === 'top_metrics' && <TopMetricsSettingsEditor metric={metric} />}\n\n      {metric.type === 'bucket_script' && (\n        <BucketScriptSettingsEditor value={metric} previousMetrics={previousMetrics} />\n      )}\n\n      {(metric.type === 'raw_data' || metric.type === 'raw_document') && (\n        <InlineField label=\"Size\" {...inlineFieldProps}>\n          <Input\n            id={`ES-query-${query.refId}_metric-${metric.id}-size`}\n            onBlur={(e) => dispatch(changeMetricSetting({ metric, settingName: 'size', newValue: e.target.value }))}\n            defaultValue={metric.settings?.size ?? metricAggregationConfig['raw_data'].defaults.settings?.size}\n          />\n        </InlineField>\n      )}\n\n      {metric.type === 'logs' && <SettingField label=\"Limit\" metric={metric} settingName=\"limit\" placeholder=\"500\" />}\n\n      {metric.type === 'cardinality' && (\n        <SettingField label=\"Precision Threshold\" metric={metric} settingName=\"precision_threshold\" />\n      )}\n\n      {metric.type === 'extended_stats' && (\n        <>\n          {extendedStats.map((stat) => (\n            <ExtendedStatSetting\n              key={stat.value}\n              stat={stat}\n              onChange={(newValue) => dispatch(changeMetricMeta({ metric, meta: stat.value, newValue }))}\n              value={\n                metric.meta?.[stat.value] !== undefined\n                  ? !!metric.meta?.[stat.value]\n                  : !!metricAggregationConfig['extended_stats'].defaults.meta?.[stat.value]\n              }\n            />\n          ))}\n\n          <SettingField label=\"Sigma\" metric={metric} settingName=\"sigma\" placeholder=\"3\" />\n        </>\n      )}\n\n      {metric.type === 'percentiles' && (\n        <InlineField label=\"Percentiles\" {...inlineFieldProps}>\n          <Input\n            id={`${baseId}-percentiles-percents`}\n            onBlur={(e) =>\n              dispatch(\n                changeMetricSetting({\n                  metric,\n                  settingName: 'percents',\n                  newValue: e.target.value.split(',').filter(Boolean),\n                })\n              )\n            }\n            defaultValue={\n              metric.settings?.percents || metricAggregationConfig['percentiles'].defaults.settings?.percents\n            }\n            placeholder=\"1,5,25,50,75,95,99\"\n          />\n        </InlineField>\n      )}\n\n      {metric.type === 'rate' && (\n        <>\n          <InlineField label=\"Unit\" {...inlineFieldProps} data-testid=\"unit-select\">\n            <Select\n              id={`ES-query-${query.refId}_metric-${metric.id}-unit`}\n              onChange={(e) => dispatch(changeMetricSetting({ metric, settingName: 'unit', newValue: e.value }))}\n              options={rateAggUnitOptions}\n              value={metric.settings?.unit}\n            />\n          </InlineField>\n\n          <InlineField label=\"Mode\" {...inlineFieldProps} data-testid=\"mode-select\">\n            <Select\n              id={`ES-query-${query.refId}_metric-${metric.id}-mode`}\n              onChange={(e) => dispatch(changeMetricSetting({ metric, settingName: 'mode', newValue: e.value }))}\n              options={rateAggModeOptions}\n              value={metric.settings?.unit}\n            />\n          </InlineField>\n        </>\n      )}\n\n      {isMetricAggregationWithInlineScript(metric) && (\n        <SettingField label=\"Script\" metric={metric} settingName=\"script\" placeholder=\"_value * 1\" />\n      )}\n\n      {isMetricAggregationWithMissingSupport(metric) && (\n        <SettingField\n          label=\"Missing\"\n          metric={metric}\n          settingName=\"missing\"\n          tooltip=\"The missing parameter defines how documents that are missing a value should be treated. By default\n            they will be ignored but it is also possible to treat them as if they had a value\"\n        />\n      )}\n    </SettingsEditorContainer>\n  );\n};\n\ninterface ExtendedStatSettingProps {\n  stat: ExtendedStat;\n  onChange: (checked: boolean) => void;\n  value: boolean;\n}\nconst ExtendedStatSetting = ({ stat, onChange, value }: ExtendedStatSettingProps) => {\n  // this is needed for the htmlFor prop in the label so that clicking the label will toggle the switch state.\n  const [id] = useState(uniqueId(`es-field-id-`));\n\n  return (\n    <InlineField label={stat.label} {...inlineFieldProps} key={stat.value}>\n      <InlineSwitch\n        id={id}\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => onChange(e.target.checked)}\n        value={value}\n      />\n    </InlineField>\n  );\n};\n","import { extendedStats } from '../../../../queryDef';\nimport { MetricAggregation } from '../aggregations';\n\nconst hasValue = (value: string) => (object: { value: string }) => object.value === value;\n\n// FIXME: All the defaults and validations down here should be defined somewhere else\n// as they are also the defaults that are gonna be applied to the query.\n// In the previous version, the same method was taking care of describing the settings and setting defaults.\nexport const useDescription = (metric: MetricAggregation): string => {\n  switch (metric.type) {\n    case 'cardinality': {\n      const precisionThreshold = metric.settings?.precision_threshold || '';\n      return `Precision threshold: ${precisionThreshold}`;\n    }\n\n    case 'percentiles':\n      if (metric.settings?.percents && metric.settings?.percents?.length >= 1) {\n        return `Values: ${metric.settings?.percents}`;\n      }\n\n      return 'Percents: Default';\n\n    case 'extended_stats': {\n      const selectedStats = Object.entries(metric.meta || {})\n        .map(([key, value]) => value && extendedStats.find(hasValue(key))?.label)\n        .filter(Boolean);\n\n      return `Stats: ${selectedStats.length > 0 ? selectedStats.join(', ') : 'None selected'}`;\n    }\n\n    case 'raw_document':\n    case 'raw_data': {\n      const size = metric.settings?.size || 500;\n      return `Size: ${size}`;\n    }\n\n    default:\n      return 'Options';\n  }\n};\n","import { cx } from '@emotion/css';\nimport React, { useCallback } from 'react';\nimport { satisfies } from 'semver';\n\nimport { SelectableValue } from '@grafana/data';\nimport { InlineSegmentGroup, Segment, SegmentAsync, useTheme2 } from '@grafana/ui';\n\nimport { useFields } from '../../../hooks/useFields';\nimport { useDispatch } from '../../../hooks/useStatelessReducer';\nimport { MetricPicker } from '../../MetricPicker';\nimport { useDatasource, useQuery } from '../ElasticsearchQueryContext';\nimport { segmentStyles } from '../styles';\n\nimport { SettingsEditor } from './SettingsEditor';\nimport {\n  isMetricAggregationWithField,\n  isMetricAggregationWithInlineScript,\n  isMetricAggregationWithSettings,\n  isPipelineAggregation,\n  isPipelineAggregationWithMultipleBucketPaths,\n  MetricAggregation,\n  MetricAggregationType,\n} from './aggregations';\nimport { changeMetricField, changeMetricType } from './state/actions';\nimport { getStyles } from './styles';\nimport { metricAggregationConfig } from './utils';\n\nconst toOption = (metric: MetricAggregation) => ({\n  label: metricAggregationConfig[metric.type].label,\n  value: metric.type,\n});\n\ninterface Props {\n  value: MetricAggregation;\n}\n\n// If a metric is a Pipeline Aggregation (https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-pipeline.html)\n// it doesn't make sense to show it in the type picker when there is no non-pipeline-aggregation previously selected\n// as they work on the outputs produced from other aggregations rather than from documents or fields.\n// This means we should filter them out from the type picker if there's no other \"basic\" aggregation before the current one.\nconst isBasicAggregation = (metric: MetricAggregation) => !metricAggregationConfig[metric.type].isPipelineAgg;\n\nconst getTypeOptions = (\n  previousMetrics: MetricAggregation[],\n  esVersion: string,\n  xpack = false\n): Array<SelectableValue<MetricAggregationType>> => {\n  // we'll include Pipeline Aggregations only if at least one previous metric is a \"Basic\" one\n  const includePipelineAggregations = previousMetrics.some(isBasicAggregation);\n\n  return (\n    Object.entries(metricAggregationConfig)\n      // Only showing metrics type supported by the configured version of ES\n      .filter(([_, { versionRange = '*' }]) => satisfies(esVersion, versionRange))\n      // Filtering out Pipeline Aggregations if there's no basic metric selected before\n      .filter(([_, config]) => includePipelineAggregations || !config.isPipelineAgg)\n      // Filtering out X-Pack plugins if X-Pack is disabled\n      .filter(([_, config]) => (config.xpack ? xpack : true))\n      .map(([key, { label }]) => ({\n        label,\n        value: key as MetricAggregationType,\n      }))\n  );\n};\n\nexport const MetricEditor = ({ value }: Props) => {\n  const styles = getStyles(useTheme2(), !!value.hide);\n  const datasource = useDatasource();\n  const query = useQuery();\n  const dispatch = useDispatch();\n  const getFields = useFields(value.type);\n\n  const loadOptions = useCallback(async () => {\n    const remoteFields = await getFields();\n\n    // Metric aggregations that have inline script support don't require a field to be set.\n    if (isMetricAggregationWithInlineScript(value)) {\n      return [{ label: 'None' }, ...remoteFields];\n    }\n\n    return remoteFields;\n  }, [getFields, value]);\n\n  const previousMetrics = query.metrics!.slice(\n    0,\n    query.metrics!.findIndex((m) => m.id === value.id)\n  );\n\n  return (\n    <>\n      <InlineSegmentGroup>\n        <Segment\n          className={cx(styles.color, segmentStyles)}\n          options={getTypeOptions(previousMetrics, datasource.esVersion, datasource.xpack)}\n          onChange={(e) => dispatch(changeMetricType({ id: value.id, type: e.value! }))}\n          value={toOption(value)}\n        />\n\n        {isMetricAggregationWithField(value) && !isPipelineAggregation(value) && (\n          <SegmentAsync\n            className={cx(styles.color, segmentStyles)}\n            loadOptions={loadOptions}\n            onChange={(e) => dispatch(changeMetricField({ id: value.id, field: e.value! }))}\n            placeholder=\"Select Field\"\n            value={value.field}\n          />\n        )}\n\n        {isPipelineAggregation(value) && !isPipelineAggregationWithMultipleBucketPaths(value) && (\n          <MetricPicker\n            className={cx(styles.color, segmentStyles)}\n            onChange={(e) => dispatch(changeMetricField({ id: value.id, field: e.value?.id! }))}\n            options={previousMetrics}\n            value={value.field}\n          />\n        )}\n      </InlineSegmentGroup>\n\n      {isMetricAggregationWithSettings(value) && <SettingsEditor metric={value} previousMetrics={previousMetrics} />}\n    </>\n  );\n};\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nexport const getStyles = (theme: GrafanaTheme2, hidden: boolean) => {\n  return {\n    color:\n      hidden &&\n      css`\n        &,\n        &:hover,\n        label,\n        a {\n          color: ${hidden ? theme.colors.text.disabled : theme.colors.text.primary};\n        }\n      `,\n  };\n};\n","import React from 'react';\n\nimport { useDispatch } from '../../../hooks/useStatelessReducer';\nimport { IconButton } from '../../IconButton';\nimport { useQuery } from '../ElasticsearchQueryContext';\nimport { QueryEditorRow } from '../QueryEditorRow';\n\nimport { MetricEditor } from './MetricEditor';\nimport { MetricAggregation } from './aggregations';\nimport { addMetric, removeMetric, toggleMetricVisibility } from './state/actions';\nimport { metricAggregationConfig } from './utils';\n\ninterface Props {\n  nextId: MetricAggregation['id'];\n}\n\nexport const MetricAggregationsEditor = ({ nextId }: Props) => {\n  const dispatch = useDispatch();\n  const { metrics } = useQuery();\n  const totalMetrics = metrics?.length || 0;\n\n  return (\n    <>\n      {metrics?.map((metric, index) => (\n        <QueryEditorRow\n          key={`${metric.type}-${metric.id}`}\n          label={`Metric (${metric.id})`}\n          hidden={metric.hide}\n          onHideClick={() => dispatch(toggleMetricVisibility(metric.id))}\n          onRemoveClick={totalMetrics > 1 && (() => dispatch(removeMetric(metric.id)))}\n        >\n          <MetricEditor value={metric} />\n\n          {!metricAggregationConfig[metric.type].isSingleMetric && index === 0 && (\n            <IconButton iconName=\"plus\" onClick={() => dispatch(addMetric(nextId))} label=\"add\" />\n          )}\n        </QueryEditorRow>\n      ))}\n    </>\n  );\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { getDefaultTimeRange, GrafanaTheme2, QueryEditorProps } from '@grafana/data';\nimport { Alert, InlineField, InlineLabel, Input, QueryField, useStyles2 } from '@grafana/ui';\n\nimport { ElasticDatasource } from '../../datasource';\nimport { useNextId } from '../../hooks/useNextId';\nimport { useDispatch } from '../../hooks/useStatelessReducer';\nimport { ElasticsearchOptions, ElasticsearchQuery } from '../../types';\nimport { isSupportedVersion } from '../../utils';\n\nimport { BucketAggregationsEditor } from './BucketAggregationsEditor';\nimport { ElasticsearchProvider } from './ElasticsearchQueryContext';\nimport { MetricAggregationsEditor } from './MetricAggregationsEditor';\nimport { metricAggregationConfig } from './MetricAggregationsEditor/utils';\nimport { changeAliasPattern, changeQuery } from './state';\n\nexport type ElasticQueryEditorProps = QueryEditorProps<ElasticDatasource, ElasticsearchQuery, ElasticsearchOptions>;\n\nexport const QueryEditor = ({ query, onChange, onRunQuery, datasource, range }: ElasticQueryEditorProps) => {\n  if (!isSupportedVersion(datasource.esVersion)) {\n    return (\n      <Alert\n        title={`Support for Elasticsearch versions after their end-of-life (currently versions < 7.10) was removed`}\n      ></Alert>\n    );\n  }\n  return (\n    <ElasticsearchProvider\n      datasource={datasource}\n      onChange={onChange}\n      onRunQuery={onRunQuery}\n      query={query}\n      range={range || getDefaultTimeRange()}\n    >\n      <QueryEditorForm value={query} />\n    </ElasticsearchProvider>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  root: css`\n    display: flex;\n  `,\n  queryFieldWrapper: css`\n    flex-grow: 1;\n    margin: 0 ${theme.spacing(0.5)} ${theme.spacing(0.5)} 0;\n  `,\n});\n\ninterface Props {\n  value: ElasticsearchQuery;\n}\n\nexport const ElasticSearchQueryField = ({ value, onChange }: { value?: string; onChange: (v: string) => void }) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.queryFieldWrapper}>\n      <QueryField\n        query={value}\n        // By default QueryField calls onChange if onBlur is not defined, this will trigger a rerender\n        // And slate will claim the focus, making it impossible to leave the field.\n        onBlur={() => {}}\n        onChange={onChange}\n        placeholder=\"Lucene Query\"\n        portalOrigin=\"elasticsearch\"\n      />\n    </div>\n  );\n};\n\nconst QueryEditorForm = ({ value }: Props) => {\n  const dispatch = useDispatch();\n  const nextId = useNextId();\n  const styles = useStyles2(getStyles);\n\n  // To be considered a time series query, the last bucked aggregation must be a Date Histogram\n  const isTimeSeriesQuery = value?.bucketAggs?.slice(-1)[0]?.type === 'date_histogram';\n\n  const showBucketAggregationsEditor = value.metrics?.every(\n    (metric) => !metricAggregationConfig[metric.type].isSingleMetric\n  );\n\n  return (\n    <>\n      <div className={styles.root}>\n        <InlineLabel width={17}>Query</InlineLabel>\n        <ElasticSearchQueryField onChange={(query) => dispatch(changeQuery(query))} value={value?.query} />\n\n        <InlineField\n          label=\"Alias\"\n          labelWidth={15}\n          disabled={!isTimeSeriesQuery}\n          tooltip=\"Aliasing only works for timeseries queries (when the last group is 'Date Histogram'). For all other query types this field is ignored.\"\n        >\n          <Input\n            id={`ES-query-${value.refId}_alias`}\n            placeholder=\"Alias Pattern\"\n            onBlur={(e) => dispatch(changeAliasPattern(e.currentTarget.value))}\n            defaultValue={value.alias}\n          />\n        </InlineField>\n      </div>\n\n      <MetricAggregationsEditor nextId={nextId} />\n      {showBucketAggregationsEditor && <BucketAggregationsEditor nextId={nextId} />}\n    </>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { Dispatch, SetStateAction, useEffect, useState } from 'react';\nimport { usePrevious } from 'react-use';\n\nimport { VariableSuggestion } from '@grafana/data';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { Button, LegacyForms, DataLinkInput, stylesFactory } from '@grafana/ui';\n\nimport { DataLinkConfig } from '../types';\n\nconst { FormField, Switch } = LegacyForms;\n\nconst getStyles = stylesFactory(() => ({\n  firstRow: css`\n    display: flex;\n  `,\n  nameField: css`\n    flex: 2;\n  `,\n  regexField: css`\n    flex: 3;\n  `,\n  row: css`\n    display: flex;\n    align-items: baseline;\n  `,\n  urlField: css`\n    flex: 1;\n  `,\n  urlDisplayLabelField: css`\n    flex: 1;\n  `,\n}));\n\ntype Props = {\n  value: DataLinkConfig;\n  onChange: (value: DataLinkConfig) => void;\n  onDelete: () => void;\n  suggestions: VariableSuggestion[];\n  className?: string;\n};\nexport const DataLink = (props: Props) => {\n  const { value, onChange, onDelete, suggestions, className } = props;\n  const styles = getStyles();\n  const [showInternalLink, setShowInternalLink] = useInternalLink(value.datasourceUid);\n\n  const handleChange = (field: keyof typeof value) => (event: React.ChangeEvent<HTMLInputElement>) => {\n    onChange({\n      ...value,\n      [field]: event.currentTarget.value,\n    });\n  };\n\n  return (\n    <div className={className}>\n      <div className={styles.firstRow + ' gf-form'}>\n        <FormField\n          className={styles.nameField}\n          labelWidth={6}\n          // A bit of a hack to prevent using default value for the width from FormField\n          inputWidth={null}\n          label=\"Field\"\n          type=\"text\"\n          value={value.field}\n          tooltip={'Can be exact field name or a regex pattern that will match on the field name.'}\n          onChange={handleChange('field')}\n        />\n        <Button\n          variant={'destructive'}\n          title=\"Remove field\"\n          icon=\"times\"\n          onClick={(event) => {\n            event.preventDefault();\n            onDelete();\n          }}\n        />\n      </div>\n      <div className=\"gf-form\">\n        <FormField\n          label={showInternalLink ? 'Query' : 'URL'}\n          labelWidth={6}\n          inputEl={\n            <DataLinkInput\n              placeholder={showInternalLink ? '${__value.raw}' : 'http://example.com/${__value.raw}'}\n              value={value.url || ''}\n              onChange={(newValue) =>\n                onChange({\n                  ...value,\n                  url: newValue,\n                })\n              }\n              suggestions={suggestions}\n            />\n          }\n          className={styles.urlField}\n        />\n        <FormField\n          className={styles.urlDisplayLabelField}\n          inputWidth={null}\n          label=\"URL Label\"\n          type=\"text\"\n          value={value.urlDisplayLabel}\n          onChange={handleChange('urlDisplayLabel')}\n          tooltip={'Use to override the button label.'}\n        />\n      </div>\n\n      <div className={styles.row}>\n        <Switch\n          labelClass={'width-6'}\n          label=\"Internal link\"\n          checked={showInternalLink}\n          onChange={() => {\n            if (showInternalLink) {\n              onChange({\n                ...value,\n                datasourceUid: undefined,\n              });\n            }\n            setShowInternalLink(!showInternalLink);\n          }}\n        />\n\n        {showInternalLink && (\n          <DataSourcePicker\n            tracing={true}\n            // Uid and value should be always set in the db and so in the items.\n            onChange={(ds) => {\n              onChange({\n                ...value,\n                datasourceUid: ds.uid,\n              });\n            }}\n            current={value.datasourceUid}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction useInternalLink(datasourceUid?: string): [boolean, Dispatch<SetStateAction<boolean>>] {\n  const [showInternalLink, setShowInternalLink] = useState<boolean>(!!datasourceUid);\n  const previousUid = usePrevious(datasourceUid);\n\n  // Force internal link visibility change if uid changed outside of this component.\n  useEffect(() => {\n    if (!previousUid && datasourceUid && !showInternalLink) {\n      setShowInternalLink(true);\n    }\n    if (previousUid && !datasourceUid && showInternalLink) {\n      setShowInternalLink(false);\n    }\n  }, [previousUid, datasourceUid, showInternalLink]);\n\n  return [showInternalLink, setShowInternalLink];\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2, VariableOrigin, DataLinkBuiltInVars } from '@grafana/data';\nimport { Button, useStyles2 } from '@grafana/ui';\n\nimport { DataLinkConfig } from '../types';\n\nimport { DataLink } from './DataLink';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    infoText: css`\n      padding-bottom: ${theme.spacing(2)};\n      color: ${theme.colors.text.secondary};\n    `,\n    dataLink: css`\n      margin-bottom: ${theme.spacing(1)};\n    `,\n  };\n};\n\nexport type Props = {\n  value?: DataLinkConfig[];\n  onChange: (value: DataLinkConfig[]) => void;\n};\nexport const DataLinks = (props: Props) => {\n  const { value, onChange } = props;\n  const styles = useStyles2(getStyles);\n\n  return (\n    <>\n      <h3 className=\"page-heading\">Data links</h3>\n\n      <div className={styles.infoText}>\n        Add links to existing fields. Links will be shown in log row details next to the field value.\n      </div>\n\n      {value && value.length > 0 && (\n        <div className=\"gf-form-group\">\n          {value.map((field, index) => {\n            return (\n              <DataLink\n                className={styles.dataLink}\n                key={index}\n                value={field}\n                onChange={(newField) => {\n                  const newDataLinks = [...value];\n                  newDataLinks.splice(index, 1, newField);\n                  onChange(newDataLinks);\n                }}\n                onDelete={() => {\n                  const newDataLinks = [...value];\n                  newDataLinks.splice(index, 1);\n                  onChange(newDataLinks);\n                }}\n                suggestions={[\n                  {\n                    value: DataLinkBuiltInVars.valueRaw,\n                    label: 'Raw value',\n                    documentation: 'Raw value of the field',\n                    origin: VariableOrigin.Value,\n                  },\n                ]}\n              />\n            );\n          })}\n        </div>\n      )}\n\n      <Button\n        type=\"button\"\n        variant={'secondary'}\n        className={css`\n          margin-right: 10px;\n        `}\n        icon=\"plus\"\n        onClick={(event) => {\n          event.preventDefault();\n          const newDataLinks = [...(value || []), { field: '', url: '' }];\n          onChange(newDataLinks);\n        }}\n      >\n        Add\n      </Button>\n    </>\n  );\n};\n","import React from 'react';\nimport { valid } from 'semver';\n\nimport { DataSourceSettings, SelectableValue } from '@grafana/data';\nimport { FieldSet, InlineField, Input, Select, InlineSwitch } from '@grafana/ui';\nimport { isTruthy } from 'app/core/utils/types';\n\nimport { ElasticsearchOptions, Interval } from '../types';\n\nconst indexPatternTypes: Array<SelectableValue<'none' | Interval>> = [\n  { label: 'No pattern', value: 'none' },\n  { label: 'Hourly', value: 'Hourly', example: '[logstash-]YYYY.MM.DD.HH' },\n  { label: 'Daily', value: 'Daily', example: '[logstash-]YYYY.MM.DD' },\n  { label: 'Weekly', value: 'Weekly', example: '[logstash-]GGGG.WW' },\n  { label: 'Monthly', value: 'Monthly', example: '[logstash-]YYYY.MM' },\n  { label: 'Yearly', value: 'Yearly', example: '[logstash-]YYYY' },\n];\n\nconst esVersions: SelectableValue[] = [\n  { label: '7.10+', value: '7.10.0' },\n  {\n    label: '8.0+',\n    value: '8.0.0',\n    description: 'support for Elasticsearch 8 is currently experimental',\n  },\n];\n\ntype Props = {\n  value: DataSourceSettings<ElasticsearchOptions>;\n  onChange: (value: DataSourceSettings<ElasticsearchOptions>) => void;\n};\nexport const ElasticDetails = ({ value, onChange }: Props) => {\n  const currentVersion = esVersions.find((version) => version.value === value.jsonData.esVersion);\n  const customOption =\n    !currentVersion && valid(value.jsonData.esVersion)\n      ? {\n          label: value.jsonData.esVersion,\n          value: value.jsonData.esVersion,\n        }\n      : undefined;\n  return (\n    <>\n      <FieldSet label=\"Elasticsearch details\">\n        <InlineField label=\"Index name\" labelWidth={26}>\n          <Input\n            id=\"es_config_indexName\"\n            value={value.database || ''}\n            onChange={changeHandler('database', value, onChange)}\n            width={24}\n            placeholder=\"es-index-name\"\n            required\n          />\n        </InlineField>\n\n        <InlineField label=\"Pattern\" labelWidth={26}>\n          <Select\n            inputId=\"es_config_indexPattern\"\n            value={indexPatternTypes.find(\n              (pattern) => pattern.value === (value.jsonData.interval === undefined ? 'none' : value.jsonData.interval)\n            )}\n            options={indexPatternTypes}\n            onChange={intervalHandler(value, onChange)}\n            width={24}\n          />\n        </InlineField>\n\n        <InlineField label=\"Time field name\" labelWidth={26}>\n          <Input\n            id=\"es_config_timeField\"\n            value={value.jsonData.timeField || ''}\n            onChange={jsonDataChangeHandler('timeField', value, onChange)}\n            width={24}\n            placeholder=\"@timestamp\"\n            required\n          />\n        </InlineField>\n\n        <InlineField label=\"ElasticSearch version\" labelWidth={26}>\n          <Select\n            inputId=\"es_config_version\"\n            options={[customOption, ...esVersions].filter(isTruthy)}\n            onChange={(option) => {\n              const maxConcurrentShardRequests = getMaxConcurrenShardRequestOrDefault(\n                value.jsonData.maxConcurrentShardRequests\n              );\n              onChange({\n                ...value,\n                jsonData: {\n                  ...value.jsonData,\n                  esVersion: option.value!,\n                  maxConcurrentShardRequests,\n                },\n              });\n            }}\n            value={currentVersion || customOption}\n            width={24}\n          />\n        </InlineField>\n\n        <InlineField label=\"Max concurrent Shard Requests\" labelWidth={26}>\n          <Input\n            id=\"es_config_shardRequests\"\n            value={value.jsonData.maxConcurrentShardRequests || ''}\n            onChange={jsonDataChangeHandler('maxConcurrentShardRequests', value, onChange)}\n            width={24}\n          />\n        </InlineField>\n\n        <InlineField\n          label=\"Min time interval\"\n          labelWidth={26}\n          tooltip={\n            <>\n              A lower limit for the auto group by time interval. Recommended to be set to write frequency, for example{' '}\n              <code>1m</code> if your data is written every minute.\n            </>\n          }\n          error=\"Value is not valid, you can use number with time unit specifier: y, M, w, d, h, m, s\"\n          invalid={!!value.jsonData.timeInterval && !/^\\d+(ms|[Mwdhmsy])$/.test(value.jsonData.timeInterval)}\n        >\n          <Input\n            id=\"es_config_minTimeInterval\"\n            value={value.jsonData.timeInterval || ''}\n            onChange={jsonDataChangeHandler('timeInterval', value, onChange)}\n            width={24}\n            placeholder=\"10s\"\n          />\n        </InlineField>\n\n        <InlineField label=\"X-Pack enabled\" labelWidth={26}>\n          <InlineSwitch\n            id=\"es_config_xpackEnabled\"\n            checked={value.jsonData.xpack || false}\n            onChange={jsonDataSwitchChangeHandler('xpack', value, onChange)}\n          />\n        </InlineField>\n\n        {value.jsonData.xpack && (\n          <InlineField label=\"Include Frozen Indices\" labelWidth={26}>\n            <InlineSwitch\n              id=\"es_config_frozenIndices\"\n              checked={value.jsonData.includeFrozen ?? false}\n              onChange={jsonDataSwitchChangeHandler('includeFrozen', value, onChange)}\n            />\n          </InlineField>\n        )}\n      </FieldSet>\n    </>\n  );\n};\n\n// TODO: Use change handlers from @grafana/data\nconst changeHandler =\n  (key: keyof DataSourceSettings<ElasticsearchOptions>, value: Props['value'], onChange: Props['onChange']) =>\n  (event: React.SyntheticEvent<HTMLInputElement | HTMLSelectElement>) => {\n    onChange({\n      ...value,\n      [key]: event.currentTarget.value,\n    });\n  };\n\n// TODO: Use change handlers from @grafana/data\nconst jsonDataChangeHandler =\n  (key: keyof ElasticsearchOptions, value: Props['value'], onChange: Props['onChange']) =>\n  (event: React.SyntheticEvent<HTMLInputElement | HTMLSelectElement>) => {\n    onChange({\n      ...value,\n      jsonData: {\n        ...value.jsonData,\n        [key]: event.currentTarget.value,\n      },\n    });\n  };\n\nconst jsonDataSwitchChangeHandler =\n  (key: keyof ElasticsearchOptions, value: Props['value'], onChange: Props['onChange']) =>\n  (event: React.SyntheticEvent<HTMLInputElement>) => {\n    onChange({\n      ...value,\n      jsonData: {\n        ...value.jsonData,\n        [key]: event.currentTarget.checked,\n      },\n    });\n  };\n\nconst intervalHandler =\n  (value: Props['value'], onChange: Props['onChange']) => (option: SelectableValue<Interval | 'none'>) => {\n    const { database } = value;\n    // If option value is undefined it will send its label instead so we have to convert made up value to undefined here.\n    const newInterval = option.value === 'none' ? undefined : option.value;\n\n    if (!database || database.length === 0 || database.startsWith('[logstash-]')) {\n      let newDatabase = '';\n\n      if (newInterval !== undefined) {\n        const pattern = indexPatternTypes.find((pattern) => pattern.value === newInterval);\n\n        if (pattern) {\n          newDatabase = pattern.example ?? '';\n        }\n      }\n\n      onChange({\n        ...value,\n        database: newDatabase,\n        jsonData: {\n          ...value.jsonData,\n          interval: newInterval,\n        },\n      });\n    } else {\n      onChange({\n        ...value,\n        jsonData: {\n          ...value.jsonData,\n          interval: newInterval,\n        },\n      });\n    }\n  };\n\nfunction getMaxConcurrenShardRequestOrDefault(maxConcurrentShardRequests: number | undefined): number {\n  if (maxConcurrentShardRequests === 256) {\n    return 5;\n  }\n\n  return maxConcurrentShardRequests || defaultMaxConcurrentShardRequests();\n}\n\nexport function defaultMaxConcurrentShardRequests() {\n  return 5;\n}\n","import React from 'react';\n\nimport { Input, InlineField, FieldSet } from '@grafana/ui';\n\nimport { ElasticsearchOptions } from '../types';\n\ntype Props = {\n  value: ElasticsearchOptions;\n  onChange: (value: ElasticsearchOptions) => void;\n};\nexport const LogsConfig = (props: Props) => {\n  const { value, onChange } = props;\n  const changeHandler =\n    (key: keyof ElasticsearchOptions) => (event: React.SyntheticEvent<HTMLInputElement | HTMLSelectElement>) => {\n      onChange({\n        ...value,\n        [key]: event.currentTarget.value,\n      });\n    };\n\n  return (\n    <FieldSet label=\"Logs\">\n      <InlineField label=\"Message field name\" labelWidth={22}>\n        <Input\n          id=\"es_logs-config_logMessageField\"\n          value={value.logMessageField}\n          onChange={changeHandler('logMessageField')}\n          placeholder=\"_source\"\n          width={24}\n        />\n      </InlineField>\n\n      <InlineField label=\"Level field name\" labelWidth={22}>\n        <Input\n          id=\"es_logs-config_logLevelField\"\n          value={value.logLevelField}\n          onChange={changeHandler('logLevelField')}\n          width={24}\n        />\n      </InlineField>\n    </FieldSet>\n  );\n};\n","import { valid } from 'semver';\n\nimport { DataSourceSettings } from '@grafana/data';\n\nimport { ElasticsearchOptions } from '../types';\nimport { coerceESVersion } from '../utils';\n\nimport { defaultMaxConcurrentShardRequests } from './ElasticDetails';\n\nexport const coerceOptions = (\n  options: DataSourceSettings<ElasticsearchOptions, {}>\n): DataSourceSettings<ElasticsearchOptions, {}> => {\n  const esVersion = coerceESVersion(options.jsonData.esVersion);\n\n  return {\n    ...options,\n    jsonData: {\n      ...options.jsonData,\n      timeField: options.jsonData.timeField || '@timestamp',\n      esVersion,\n      maxConcurrentShardRequests: options.jsonData.maxConcurrentShardRequests || defaultMaxConcurrentShardRequests(),\n      logMessageField: options.jsonData.logMessageField || '',\n      logLevelField: options.jsonData.logLevelField || '',\n      includeFrozen: options.jsonData.includeFrozen ?? false,\n    },\n  };\n};\n\nexport const isValidOptions = (options: DataSourceSettings<ElasticsearchOptions, {}>): boolean => {\n  return (\n    // esVersion should be a valid semver string\n    !!valid(options.jsonData.esVersion) &&\n    // timeField should not be empty or nullish\n    !!options.jsonData.timeField &&\n    // maxConcurrentShardRequests should be a number AND greater than 0\n    !!options.jsonData.maxConcurrentShardRequests &&\n    // message & level fields should be defined\n    options.jsonData.logMessageField !== undefined &&\n    options.jsonData.logLevelField !== undefined\n  );\n};\n","import { toUtc, dateTime, DateTime, DurationUnit } from '@grafana/data';\n\nimport { Interval } from './types';\n\ntype IntervalMap = Record<\n  Interval,\n  {\n    startOf: DurationUnit;\n    amount: DurationUnit;\n  }\n>;\n\nconst intervalMap: IntervalMap = {\n  Hourly: { startOf: 'hour', amount: 'hours' },\n  Daily: { startOf: 'day', amount: 'days' },\n  Weekly: { startOf: 'isoWeek', amount: 'weeks' },\n  Monthly: { startOf: 'month', amount: 'months' },\n  Yearly: { startOf: 'year', amount: 'years' },\n};\n\nexport class IndexPattern {\n  private dateLocale = 'en';\n\n  constructor(private pattern: string, private interval?: keyof typeof intervalMap) {}\n\n  getIndexForToday() {\n    if (this.interval) {\n      return toUtc().locale(this.dateLocale).format(this.pattern);\n    } else {\n      return this.pattern;\n    }\n  }\n\n  getIndexList(from?: DateTime, to?: DateTime) {\n    // When no `from` or `to` is provided, we request data from 7 subsequent/previous indices\n    // for the provided index pattern.\n    // This is useful when requesting log context where the only time data we have is the log\n    // timestamp.\n    const indexOffset = 7;\n    if (!this.interval) {\n      return this.pattern;\n    }\n\n    const intervalInfo = intervalMap[this.interval];\n    const start = dateTime(from || dateTime(to).add(-indexOffset, intervalInfo.amount))\n      .utc()\n      .startOf(intervalInfo.startOf);\n    const endEpoch = dateTime(to || dateTime(from).add(indexOffset, intervalInfo.amount))\n      .utc()\n      .startOf(intervalInfo.startOf)\n      .valueOf();\n    const indexList = [];\n\n    while (start.valueOf() <= endEpoch) {\n      indexList.push(start.locale(this.dateLocale).format(this.pattern));\n      start.add(1, intervalInfo.amount);\n    }\n\n    return indexList;\n  }\n}\n","import { AbstractLabelOperator, AbstractLabelMatcher, LanguageProvider, AbstractQuery } from '@grafana/data';\n\nimport { ElasticDatasource } from './datasource';\nimport { ElasticsearchQuery } from './types';\n\nexport default class ElasticsearchLanguageProvider extends LanguageProvider {\n  declare request: (url: string, params?: any) => Promise<any>;\n  declare start: () => Promise<any[]>;\n  datasource: ElasticDatasource;\n\n  constructor(datasource: ElasticDatasource, initialValues?: any) {\n    super();\n    this.datasource = datasource;\n\n    Object.assign(this, initialValues);\n  }\n\n  /**\n   * Queries are transformed to an ES Logs query since it's the behaviour most users expect.\n   **/\n  importFromAbstractQuery(abstractQuery: AbstractQuery): ElasticsearchQuery {\n    return {\n      metrics: [\n        {\n          id: '1',\n          type: 'logs',\n        },\n      ],\n      query: this.getElasticsearchQuery(abstractQuery.labelMatchers),\n      refId: abstractQuery.refId,\n    };\n  }\n\n  getElasticsearchQuery(labels: AbstractLabelMatcher[]): string {\n    return labels\n      .map((label) => {\n        switch (label.operator) {\n          case AbstractLabelOperator.Equal: {\n            return label.name + ':\"' + label.value + '\"';\n          }\n          case AbstractLabelOperator.NotEqual: {\n            return 'NOT ' + label.name + ':\"' + label.value + '\"';\n          }\n          case AbstractLabelOperator.EqualRegEx: {\n            return label.name + ':/' + label.value + '/';\n          }\n          case AbstractLabelOperator.NotEqualRegEx: {\n            return 'NOT ' + label.name + ':/' + label.value + '/';\n          }\n        }\n      })\n      .join(' AND ');\n  }\n}\n","import { AdHocVariableFilter, InternalTimeZones } from '@grafana/data';\n\nimport {\n  Filters,\n  Histogram,\n  DateHistogram,\n  Terms,\n} from './components/QueryEditor/BucketAggregationsEditor/aggregations';\nimport {\n  isMetricAggregationWithField,\n  isMetricAggregationWithSettings,\n  isMovingAverageWithModelSettings,\n  isPipelineAggregation,\n  isPipelineAggregationWithMultipleBucketPaths,\n  MetricAggregation,\n  MetricAggregationWithInlineScript,\n} from './components/QueryEditor/MetricAggregationsEditor/aggregations';\nimport { defaultBucketAgg, defaultMetricAgg, findMetricById, highlightTags } from './queryDef';\nimport { ElasticsearchQuery, TermsQuery } from './types';\nimport { convertOrderByToMetricId, getScriptValue } from './utils';\n\nexport class ElasticQueryBuilder {\n  timeField: string;\n\n  constructor(options: { timeField: string }) {\n    this.timeField = options.timeField;\n  }\n\n  getRangeFilter() {\n    const filter: any = {};\n    filter[this.timeField] = {\n      gte: '$timeFrom',\n      lte: '$timeTo',\n      format: 'epoch_millis',\n    };\n\n    return filter;\n  }\n\n  buildTermsAgg(aggDef: Terms, queryNode: { terms?: any; aggs?: any }, target: ElasticsearchQuery) {\n    queryNode.terms = { field: aggDef.field };\n\n    if (!aggDef.settings) {\n      return queryNode;\n    }\n\n    // TODO: This default should be somewhere else together with the one used in the UI\n    const size = aggDef.settings?.size ? parseInt(aggDef.settings.size, 10) : 500;\n    queryNode.terms.size = size === 0 ? 500 : size;\n\n    if (aggDef.settings.orderBy !== void 0) {\n      queryNode.terms.order = {};\n      if (aggDef.settings.orderBy === '_term') {\n        queryNode.terms.order['_key'] = aggDef.settings.order;\n      } else {\n        queryNode.terms.order[aggDef.settings.orderBy] = aggDef.settings.order;\n      }\n\n      // if metric ref, look it up and add it to this agg level\n      const metricId = convertOrderByToMetricId(aggDef.settings.orderBy);\n      if (metricId) {\n        for (let metric of target.metrics || []) {\n          if (metric.id === metricId) {\n            if (metric.type === 'count') {\n              queryNode.terms.order = { _count: aggDef.settings.order };\n            } else if (isMetricAggregationWithField(metric)) {\n              queryNode.aggs = {};\n              queryNode.aggs[metric.id] = {\n                [metric.type]: { field: metric.field },\n              };\n            }\n            break;\n          }\n        }\n      }\n    }\n\n    if (aggDef.settings.min_doc_count !== void 0) {\n      queryNode.terms.min_doc_count = parseInt(aggDef.settings.min_doc_count, 10);\n\n      if (isNaN(queryNode.terms.min_doc_count)) {\n        queryNode.terms.min_doc_count = aggDef.settings.min_doc_count;\n      }\n    }\n\n    if (aggDef.settings.missing) {\n      queryNode.terms.missing = aggDef.settings.missing;\n    }\n\n    return queryNode;\n  }\n\n  getDateHistogramAgg(aggDef: DateHistogram) {\n    const esAgg: any = {};\n    const settings = aggDef.settings || {};\n\n    esAgg.field = aggDef.field || this.timeField;\n    esAgg.min_doc_count = settings.min_doc_count || 0;\n    esAgg.extended_bounds = { min: '$timeFrom', max: '$timeTo' };\n    esAgg.format = 'epoch_millis';\n    if (settings.timeZone && settings.timeZone !== InternalTimeZones.utc) {\n      esAgg.time_zone = settings.timeZone;\n    }\n\n    if (settings.offset !== '') {\n      esAgg.offset = settings.offset;\n    }\n\n    const interval = settings.interval === 'auto' ? '${__interval_ms}ms' : settings.interval;\n\n    esAgg.fixed_interval = interval;\n\n    return esAgg;\n  }\n\n  getHistogramAgg(aggDef: Histogram) {\n    const esAgg: any = {};\n    const settings = aggDef.settings || {};\n    esAgg.interval = settings.interval;\n    esAgg.field = aggDef.field;\n    esAgg.min_doc_count = settings.min_doc_count || 0;\n\n    return esAgg;\n  }\n\n  getFiltersAgg(aggDef: Filters) {\n    const filterObj: Record<string, { query_string: { query: string; analyze_wildcard: boolean } }> = {};\n\n    for (let { query, label } of aggDef.settings?.filters || []) {\n      filterObj[label || query] = {\n        query_string: {\n          query: query,\n          analyze_wildcard: true,\n        },\n      };\n    }\n\n    return filterObj;\n  }\n\n  documentQuery(query: any, size: number) {\n    query.size = size;\n    query.sort = [\n      {\n        [this.timeField]: { order: 'desc', unmapped_type: 'boolean' },\n      },\n      {\n        _doc: { order: 'desc' },\n      },\n    ];\n\n    query.script_fields = {};\n    return query;\n  }\n\n  addAdhocFilters(query: any, adhocFilters: any) {\n    if (!adhocFilters) {\n      return;\n    }\n\n    let i, filter, condition: any, queryCondition: any;\n\n    for (i = 0; i < adhocFilters.length; i++) {\n      filter = adhocFilters[i];\n      condition = {};\n      condition[filter.key] = filter.value;\n      queryCondition = {};\n      queryCondition[filter.key] = { query: filter.value };\n\n      switch (filter.operator) {\n        case '=':\n          if (!query.query.bool.must) {\n            query.query.bool.must = [];\n          }\n          query.query.bool.must.push({ match_phrase: queryCondition });\n          break;\n        case '!=':\n          if (!query.query.bool.must_not) {\n            query.query.bool.must_not = [];\n          }\n          query.query.bool.must_not.push({ match_phrase: queryCondition });\n          break;\n        case '<':\n          condition[filter.key] = { lt: filter.value };\n          query.query.bool.filter.push({ range: condition });\n          break;\n        case '>':\n          condition[filter.key] = { gt: filter.value };\n          query.query.bool.filter.push({ range: condition });\n          break;\n        case '=~':\n          query.query.bool.filter.push({ regexp: condition });\n          break;\n        case '!~':\n          query.query.bool.filter.push({\n            bool: { must_not: { regexp: condition } },\n          });\n          break;\n      }\n    }\n  }\n\n  build(target: ElasticsearchQuery, adhocFilters?: AdHocVariableFilter[]) {\n    // make sure query has defaults;\n    target.metrics = target.metrics || [defaultMetricAgg()];\n    target.bucketAggs = target.bucketAggs || [defaultBucketAgg()];\n    target.timeField = this.timeField;\n    let metric: MetricAggregation;\n\n    let i, j, pv, nestedAggs;\n    const query: any = {\n      size: 0,\n      query: {\n        bool: {\n          filter: [{ range: this.getRangeFilter() }],\n        },\n      },\n    };\n\n    if (target.query && target.query !== '') {\n      query.query.bool.filter = [\n        ...query.query.bool.filter,\n        {\n          query_string: {\n            analyze_wildcard: true,\n            query: target.query,\n          },\n        },\n      ];\n    }\n\n    this.addAdhocFilters(query, adhocFilters);\n\n    // If target doesn't have bucketAggs and type is not raw_document, it is invalid query.\n    if (target.bucketAggs.length === 0) {\n      metric = target.metrics[0];\n\n      if (!metric || !(metric.type === 'raw_document' || metric.type === 'raw_data')) {\n        throw { message: 'Invalid query' };\n      }\n    }\n\n    /* Handle document query:\n     * Check if metric type is raw_document. If metric doesn't have size (or size is 0), update size to 500.\n     * Otherwise it will not be a valid query and error will be thrown.\n     */\n    if (target.metrics?.[0]?.type === 'raw_document' || target.metrics?.[0]?.type === 'raw_data') {\n      metric = target.metrics[0];\n\n      // TODO: This default should be somewhere else together with the one used in the UI\n      const size = metric.settings?.size ? parseInt(metric.settings.size, 10) : 500;\n\n      return this.documentQuery(query, size || 500);\n    }\n\n    nestedAggs = query;\n\n    for (i = 0; i < target.bucketAggs.length; i++) {\n      const aggDef = target.bucketAggs[i];\n      const esAgg: any = {};\n\n      switch (aggDef.type) {\n        case 'date_histogram': {\n          esAgg['date_histogram'] = this.getDateHistogramAgg(aggDef);\n          break;\n        }\n        case 'histogram': {\n          esAgg['histogram'] = this.getHistogramAgg(aggDef);\n          break;\n        }\n        case 'filters': {\n          esAgg['filters'] = { filters: this.getFiltersAgg(aggDef) };\n          break;\n        }\n        case 'terms': {\n          this.buildTermsAgg(aggDef, esAgg, target);\n          break;\n        }\n        case 'geohash_grid': {\n          esAgg['geohash_grid'] = {\n            field: aggDef.field,\n            precision: aggDef.settings?.precision,\n          };\n          break;\n        }\n      }\n\n      nestedAggs.aggs = nestedAggs.aggs || {};\n      nestedAggs.aggs[aggDef.id] = esAgg;\n      nestedAggs = esAgg;\n    }\n\n    nestedAggs.aggs = {};\n\n    for (i = 0; i < target.metrics.length; i++) {\n      metric = target.metrics[i];\n      if (metric.type === 'count') {\n        continue;\n      }\n\n      const aggField: any = {};\n      let metricAgg: any = {};\n\n      if (isPipelineAggregation(metric)) {\n        if (isPipelineAggregationWithMultipleBucketPaths(metric)) {\n          if (metric.pipelineVariables) {\n            metricAgg = {\n              buckets_path: {},\n            };\n\n            for (j = 0; j < metric.pipelineVariables.length; j++) {\n              pv = metric.pipelineVariables[j];\n\n              if (pv.name && pv.pipelineAgg && /^\\d*$/.test(pv.pipelineAgg)) {\n                const appliedAgg = findMetricById(target.metrics, pv.pipelineAgg);\n                if (appliedAgg) {\n                  if (appliedAgg.type === 'count') {\n                    metricAgg.buckets_path[pv.name] = '_count';\n                  } else {\n                    metricAgg.buckets_path[pv.name] = pv.pipelineAgg;\n                  }\n                }\n              }\n            }\n          } else {\n            continue;\n          }\n        } else {\n          if (metric.field && /^\\d*$/.test(metric.field)) {\n            const appliedAgg = findMetricById(target.metrics, metric.field);\n            if (appliedAgg) {\n              if (appliedAgg.type === 'count') {\n                metricAgg = { buckets_path: '_count' };\n              } else {\n                metricAgg = { buckets_path: metric.field };\n              }\n            }\n          } else {\n            continue;\n          }\n        }\n      } else if (isMetricAggregationWithField(metric)) {\n        metricAgg = { field: metric.field };\n      }\n\n      if (isMetricAggregationWithSettings(metric)) {\n        Object.entries(metric.settings || {})\n          .filter(([_, v]) => v !== null)\n          .forEach(([k, v]) => {\n            metricAgg[k] =\n              k === 'script' ? this.buildScript(getScriptValue(metric as MetricAggregationWithInlineScript)) : v;\n          });\n\n        // Elasticsearch isn't generally too picky about the data types in the request body,\n        // however some fields are required to be numeric.\n        // Users might have already created some of those with before, where the values were numbers.\n        switch (metric.type) {\n          case 'moving_avg':\n            metricAgg = {\n              ...metricAgg,\n              ...(metricAgg?.window !== undefined && { window: this.toNumber(metricAgg.window) }),\n              ...(metricAgg?.predict !== undefined && { predict: this.toNumber(metricAgg.predict) }),\n              ...(isMovingAverageWithModelSettings(metric) && {\n                settings: {\n                  ...metricAgg.settings,\n                  ...Object.fromEntries(\n                    Object.entries(metricAgg.settings || {})\n                      // Only format properties that are required to be numbers\n                      .filter(([settingName]) => ['alpha', 'beta', 'gamma', 'period'].includes(settingName))\n                      // omitting undefined\n                      .filter(([_, stringValue]) => stringValue !== undefined)\n                      .map(([_, stringValue]) => [_, this.toNumber(stringValue)])\n                  ),\n                },\n              }),\n            };\n            break;\n\n          case 'serial_diff':\n            metricAgg = {\n              ...metricAgg,\n              ...(metricAgg.lag !== undefined && {\n                lag: this.toNumber(metricAgg.lag),\n              }),\n            };\n            break;\n\n          case 'top_metrics':\n            metricAgg = {\n              metrics: metric.settings?.metrics?.map((field) => ({ field })),\n              size: 1,\n            };\n\n            if (metric.settings?.orderBy) {\n              metricAgg.sort = [{ [metric.settings?.orderBy]: metric.settings?.order }];\n            }\n            break;\n        }\n      }\n\n      aggField[metric.type] = metricAgg;\n      nestedAggs.aggs[metric.id] = aggField;\n    }\n\n    return query;\n  }\n\n  private buildScript(script: string) {\n    return script;\n  }\n\n  private toNumber(stringValue: unknown): unknown | number {\n    const parsedValue = parseFloat(`${stringValue}`);\n    if (isNaN(parsedValue)) {\n      return stringValue;\n    }\n\n    return parsedValue;\n  }\n\n  getTermsQuery(queryDef: TermsQuery) {\n    const query: any = {\n      size: 0,\n      query: {\n        bool: {\n          filter: [{ range: this.getRangeFilter() }],\n        },\n      },\n    };\n\n    if (queryDef.query) {\n      query.query.bool.filter.push({\n        query_string: {\n          analyze_wildcard: true,\n          query: queryDef.query,\n        },\n      });\n    }\n\n    let size = 500;\n    if (queryDef.size) {\n      size = queryDef.size;\n    }\n\n    query.aggs = {\n      '1': {\n        terms: {\n          field: queryDef.field,\n          size: size,\n          order: {},\n        },\n      },\n    };\n\n    // Default behaviour is to order results by { _key: asc }\n    // queryDef.order allows selection of asc/desc\n    // queryDef.orderBy allows selection of doc_count ordering (defaults desc)\n\n    const { orderBy = 'key', order = orderBy === 'doc_count' ? 'desc' : 'asc' } = queryDef;\n\n    if (['asc', 'desc'].indexOf(order) < 0) {\n      throw { message: `Invalid query sort order ${order}` };\n    }\n\n    switch (orderBy) {\n      case 'key':\n      case 'term':\n        const keyname = '_key';\n        query.aggs['1'].terms.order[keyname] = order;\n        break;\n      case 'doc_count':\n        query.aggs['1'].terms.order['_count'] = order;\n        break;\n      default:\n        throw { message: `Invalid query sort type ${orderBy}` };\n    }\n\n    return query;\n  }\n\n  getLogsQuery(target: ElasticsearchQuery, limit: number, adhocFilters?: AdHocVariableFilter[]) {\n    let query: any = {\n      size: 0,\n      query: {\n        bool: {\n          filter: [{ range: this.getRangeFilter() }],\n        },\n      },\n    };\n\n    this.addAdhocFilters(query, adhocFilters);\n\n    if (target.query) {\n      query.query.bool.filter.push({\n        query_string: {\n          analyze_wildcard: true,\n          query: target.query,\n        },\n      });\n    }\n\n    query = this.documentQuery(query, limit);\n\n    return {\n      ...query,\n      aggs: this.build(target).aggs,\n      highlight: {\n        fields: {\n          '*': {},\n        },\n        pre_tags: [highlightTags.pre],\n        post_tags: [highlightTags.post],\n        fragment_size: 2147483647,\n      },\n    };\n  }\n}\n","import React from 'react';\n\nimport { AnnotationQuery } from '@grafana/data';\nimport { EditorField, EditorRow } from '@grafana/experimental';\nimport { Input } from '@grafana/ui';\n\nimport { ElasticsearchQuery } from '../../types';\n\nimport { ElasticQueryEditorProps, ElasticSearchQueryField } from './index';\n\ntype Props = ElasticQueryEditorProps & {\n  annotation?: AnnotationQuery<ElasticsearchQuery>;\n  onAnnotationChange?: (annotation: AnnotationQuery<ElasticsearchQuery>) => void;\n};\n\nexport function ElasticsearchAnnotationsQueryEditor(props: Props) {\n  const annotation = props.annotation!;\n  const onAnnotationChange = props.onAnnotationChange!;\n\n  return (\n    <>\n      <div className=\"gf-form-group\">\n        <ElasticSearchQueryField\n          value={annotation.target?.query}\n          onChange={(query) => {\n            onAnnotationChange({\n              ...annotation,\n              query,\n            });\n          }}\n        />\n      </div>\n\n      <div className=\"gf-form-group\">\n        <h6>Field mappings</h6>\n        <EditorRow>\n          <EditorField label=\"Time\">\n            <Input\n              type=\"text\"\n              placeholder=\"@timestamp\"\n              value={annotation.timeField}\n              onChange={(e) => {\n                onAnnotationChange({\n                  ...annotation,\n                  timeField: e.currentTarget.value,\n                });\n              }}\n            />\n          </EditorField>\n          <EditorField label=\"Time End\">\n            <Input\n              type=\"text\"\n              value={annotation.timeEndField}\n              onChange={(e) => {\n                onAnnotationChange({\n                  ...annotation,\n                  timeEndField: e.currentTarget.value,\n                });\n              }}\n            />\n          </EditorField>\n          <EditorField label=\"Text\">\n            <Input\n              type=\"text\"\n              value={annotation.textField}\n              onChange={(e) => {\n                onAnnotationChange({\n                  ...annotation,\n                  textField: e.currentTarget.value,\n                });\n              }}\n            />\n          </EditorField>\n          <EditorField label=\"Tags\">\n            <Input\n              type=\"text\"\n              placeholder=\"tags\"\n              value={annotation.tagsField}\n              onChange={(e) => {\n                onAnnotationChange({\n                  ...annotation,\n                  tagsField: e.currentTarget.value,\n                });\n              }}\n            />\n          </EditorField>\n        </EditorRow>\n      </div>\n    </>\n  );\n}\n","import { clone, filter, find, identity, isArray, keys, map, uniq, values as _values } from 'lodash';\n\nimport {\n  DataQueryResponse,\n  DataFrame,\n  toDataFrame,\n  FieldType,\n  MutableDataFrame,\n  PreferredVisualisationType,\n} from '@grafana/data';\nimport TableModel from 'app/core/TableModel';\nimport flatten from 'app/core/utils/flatten';\n\nimport {\n  ExtendedStatMetaType,\n  isMetricAggregationWithField,\n  TopMetrics,\n} from './components/QueryEditor/MetricAggregationsEditor/aggregations';\nimport { metricAggregationConfig } from './components/QueryEditor/MetricAggregationsEditor/utils';\nimport * as queryDef from './queryDef';\nimport { ElasticsearchAggregation, ElasticsearchQuery } from './types';\nimport { describeMetric, getScriptValue } from './utils';\n\nconst HIGHLIGHT_TAGS_EXP = `${queryDef.highlightTags.pre}([^@]+)${queryDef.highlightTags.post}`;\ntype TopMetricMetric = Record<string, number>;\ninterface TopMetricBucket {\n  top: Array<{\n    metrics: TopMetricMetric;\n  }>;\n}\n\nexport class ElasticResponse {\n  constructor(private targets: ElasticsearchQuery[], private response: any) {\n    this.targets = targets;\n    this.response = response;\n  }\n\n  processMetrics(esAgg: any, target: ElasticsearchQuery, seriesList: any, props: any) {\n    let newSeries: any;\n\n    for (let y = 0; y < target.metrics!.length; y++) {\n      const metric = target.metrics![y];\n      if (metric.hide) {\n        continue;\n      }\n\n      switch (metric.type) {\n        case 'count': {\n          newSeries = { datapoints: [], metric: 'count', props, refId: target.refId };\n          for (let i = 0; i < esAgg.buckets.length; i++) {\n            const bucket = esAgg.buckets[i];\n            const value = bucket.doc_count;\n            newSeries.datapoints.push([value, bucket.key]);\n          }\n          seriesList.push(newSeries);\n          break;\n        }\n        case 'percentiles': {\n          if (esAgg.buckets.length === 0) {\n            break;\n          }\n\n          const firstBucket = esAgg.buckets[0];\n          const percentiles = firstBucket[metric.id].values;\n\n          for (const percentileName in percentiles) {\n            newSeries = {\n              datapoints: [],\n              metric: 'p' + percentileName,\n              props: props,\n              field: metric.field,\n              refId: target.refId,\n            };\n\n            for (let i = 0; i < esAgg.buckets.length; i++) {\n              const bucket = esAgg.buckets[i];\n              const values = bucket[metric.id].values;\n              newSeries.datapoints.push([values[percentileName], bucket.key]);\n            }\n            seriesList.push(newSeries);\n          }\n\n          break;\n        }\n        case 'extended_stats': {\n          for (const statName in metric.meta) {\n            if (!metric.meta[statName as ExtendedStatMetaType]) {\n              continue;\n            }\n\n            newSeries = {\n              datapoints: [],\n              metric: statName,\n              props: props,\n              field: metric.field,\n              refId: target.refId,\n            };\n\n            for (let i = 0; i < esAgg.buckets.length; i++) {\n              const bucket = esAgg.buckets[i];\n              const stats = bucket[metric.id];\n\n              // add stats that are in nested obj to top level obj\n              stats.std_deviation_bounds_upper = stats.std_deviation_bounds.upper;\n              stats.std_deviation_bounds_lower = stats.std_deviation_bounds.lower;\n\n              newSeries.datapoints.push([stats[statName], bucket.key]);\n            }\n\n            seriesList.push(newSeries);\n          }\n\n          break;\n        }\n        case 'top_metrics': {\n          if (metric.settings?.metrics?.length) {\n            for (const metricField of metric.settings?.metrics) {\n              newSeries = {\n                datapoints: [],\n                metric: metric.type,\n                props: props,\n                refId: target.refId,\n                field: metricField,\n              };\n              for (let i = 0; i < esAgg.buckets.length; i++) {\n                const bucket = esAgg.buckets[i];\n                const stats = bucket[metric.id] as TopMetricBucket;\n                const values = stats.top.map((hit) => {\n                  if (hit.metrics[metricField]) {\n                    return hit.metrics[metricField];\n                  }\n                  return null;\n                });\n                const point = [values[values.length - 1], bucket.key];\n                newSeries.datapoints.push(point);\n              }\n              seriesList.push(newSeries);\n            }\n          }\n          break;\n        }\n        default: {\n          newSeries = {\n            datapoints: [],\n            metric: metric.type,\n            metricId: metric.id,\n            props: props,\n            refId: target.refId,\n          };\n\n          if (isMetricAggregationWithField(metric)) {\n            newSeries.field = metric.field;\n          }\n\n          for (let i = 0; i < esAgg.buckets.length; i++) {\n            const bucket = esAgg.buckets[i];\n            const value = bucket[metric.id];\n\n            if (value !== undefined) {\n              if (value.normalized_value) {\n                newSeries.datapoints.push([value.normalized_value, bucket.key]);\n              } else {\n                newSeries.datapoints.push([value.value, bucket.key]);\n              }\n            }\n          }\n          seriesList.push(newSeries);\n          break;\n        }\n      }\n    }\n  }\n\n  processAggregationDocs(\n    esAgg: any,\n    aggDef: ElasticsearchAggregation,\n    target: ElasticsearchQuery,\n    table: any,\n    props: any\n  ) {\n    // add columns\n    if (table.columns.length === 0) {\n      for (const propKey of keys(props)) {\n        table.addColumn({ text: propKey, filterable: true });\n      }\n      table.addColumn({ text: aggDef.field, filterable: true });\n    }\n\n    // helper func to add values to value array\n    const addMetricValue = (values: any[], metricName: string, value: any) => {\n      table.addColumn({ text: metricName });\n      values.push(value);\n    };\n    const buckets = isArray(esAgg.buckets) ? esAgg.buckets : [esAgg.buckets];\n    for (const bucket of buckets) {\n      const values = [];\n\n      for (const propValues of _values(props)) {\n        values.push(propValues);\n      }\n\n      // add bucket key (value)\n      values.push(bucket.key);\n\n      for (const metric of target.metrics || []) {\n        switch (metric.type) {\n          case 'count': {\n            addMetricValue(values, this.getMetricName(metric.type), bucket.doc_count);\n            break;\n          }\n          case 'extended_stats': {\n            for (const statName in metric.meta) {\n              if (!metric.meta[statName as ExtendedStatMetaType]) {\n                continue;\n              }\n\n              const stats = bucket[metric.id];\n              // add stats that are in nested obj to top level obj\n              stats.std_deviation_bounds_upper = stats.std_deviation_bounds.upper;\n              stats.std_deviation_bounds_lower = stats.std_deviation_bounds.lower;\n\n              addMetricValue(values, this.getMetricName(statName as ExtendedStatMetaType), stats[statName]);\n            }\n            break;\n          }\n          case 'percentiles': {\n            const percentiles = bucket[metric.id].values;\n\n            for (const percentileName in percentiles) {\n              addMetricValue(values, `p${percentileName} ${metric.field}`, percentiles[percentileName]);\n            }\n            break;\n          }\n          case 'top_metrics': {\n            const baseName = this.getMetricName(metric.type);\n\n            if (metric.settings?.metrics) {\n              for (const metricField of metric.settings.metrics) {\n                // If we selected more than one metric we also add each metric name\n                const metricName = metric.settings.metrics.length > 1 ? `${baseName} ${metricField}` : baseName;\n\n                const stats = bucket[metric.id] as TopMetricBucket;\n\n                // Size of top_metrics is fixed to 1.\n                addMetricValue(values, metricName, stats.top[0].metrics[metricField]);\n              }\n            }\n\n            break;\n          }\n          default: {\n            let metricName = this.getMetricName(metric.type);\n            const otherMetrics = filter(target.metrics, { type: metric.type });\n\n            // if more of the same metric type include field field name in property\n            if (otherMetrics.length > 1) {\n              if (isMetricAggregationWithField(metric)) {\n                metricName += ' ' + metric.field;\n              }\n\n              if (metric.type === 'bucket_script') {\n                //Use the formula in the column name\n                metricName = getScriptValue(metric);\n              }\n            }\n\n            addMetricValue(values, metricName, bucket[metric.id].value);\n            break;\n          }\n        }\n      }\n\n      table.rows.push(values);\n    }\n  }\n\n  // This is quite complex\n  // need to recurse down the nested buckets to build series\n  processBuckets(aggs: any, target: ElasticsearchQuery, seriesList: any, table: TableModel, props: any, depth: number) {\n    let bucket, aggDef: any, esAgg, aggId;\n    const maxDepth = target.bucketAggs!.length - 1;\n\n    for (aggId in aggs) {\n      aggDef = find(target.bucketAggs, { id: aggId });\n      esAgg = aggs[aggId];\n\n      if (!aggDef) {\n        continue;\n      }\n\n      if (depth === maxDepth) {\n        if (aggDef.type === 'date_histogram') {\n          this.processMetrics(esAgg, target, seriesList, props);\n        } else {\n          this.processAggregationDocs(esAgg, aggDef, target, table, props);\n        }\n      } else {\n        for (const nameIndex in esAgg.buckets) {\n          bucket = esAgg.buckets[nameIndex];\n          props = clone(props);\n          if (bucket.key !== void 0) {\n            props[aggDef.field] = bucket.key;\n          } else {\n            props['filter'] = nameIndex;\n          }\n          if (bucket.key_as_string) {\n            props[aggDef.field] = bucket.key_as_string;\n          }\n          this.processBuckets(bucket, target, seriesList, table, props, depth + 1);\n        }\n      }\n    }\n  }\n\n  private getMetricName(metric: string): string {\n    const metricDef = Object.entries(metricAggregationConfig)\n      .filter(([key]) => key === metric)\n      .map(([_, value]) => value)[0];\n\n    if (metricDef) {\n      return metricDef.label;\n    }\n\n    const extendedStat = queryDef.extendedStats.find((e) => e.value === metric);\n    if (extendedStat) {\n      return extendedStat.label;\n    }\n\n    return metric;\n  }\n\n  private getSeriesName(series: any, target: ElasticsearchQuery, dedup: boolean) {\n    let metricName = this.getMetricName(series.metric);\n\n    if (target.alias) {\n      const regex = /\\{\\{([\\s\\S]+?)\\}\\}/g;\n\n      return target.alias.replace(regex, (match: any, g1: any, g2: any) => {\n        const group = g1 || g2;\n\n        if (group.indexOf('term ') === 0) {\n          return series.props[group.substring(5)];\n        }\n        if (series.props[group] !== void 0) {\n          return series.props[group];\n        }\n        if (group === 'metric') {\n          return metricName;\n        }\n        if (group === 'field') {\n          return series.field || '';\n        }\n\n        return match;\n      });\n    }\n\n    if (queryDef.isPipelineAgg(series.metric)) {\n      if (series.metric && queryDef.isPipelineAggWithMultipleBucketPaths(series.metric)) {\n        const agg: any = find(target.metrics, { id: series.metricId });\n        if (agg && agg.settings.script) {\n          metricName = getScriptValue(agg);\n\n          for (const pv of agg.pipelineVariables) {\n            const appliedAgg: any = find(target.metrics, { id: pv.pipelineAgg });\n            if (appliedAgg) {\n              metricName = metricName.replace('params.' + pv.name, describeMetric(appliedAgg));\n            }\n          }\n        } else {\n          metricName = 'Unset';\n        }\n      } else {\n        const appliedAgg: any = find(target.metrics, { id: series.field });\n        if (appliedAgg) {\n          metricName += ' ' + describeMetric(appliedAgg);\n        } else {\n          metricName = 'Unset';\n        }\n      }\n    } else if (series.field) {\n      metricName += ' ' + series.field;\n    }\n\n    const propKeys = keys(series.props);\n    if (propKeys.length === 0) {\n      return metricName;\n    }\n\n    let name = '';\n    for (const propName in series.props) {\n      name += series.props[propName] + ' ';\n    }\n\n    if (dedup) {\n      return name.trim() + ' ' + metricName;\n    }\n\n    return name.trim();\n  }\n\n  nameSeries(seriesList: any, target: ElasticsearchQuery) {\n    const metricTypeCount = uniq(map(seriesList, 'metric')).length;\n    const hasTopMetricWithMultipleMetrics = (\n      target.metrics?.filter((m) => m.type === 'top_metrics') as TopMetrics[]\n    ).some((m) => (m?.settings?.metrics?.length || 0) > 1);\n\n    for (let i = 0; i < seriesList.length; i++) {\n      const series = seriesList[i];\n      series.target = this.getSeriesName(series, target, metricTypeCount > 1 || hasTopMetricWithMultipleMetrics);\n    }\n  }\n\n  processHits(hits: { total: { value: any }; hits: any[] }, seriesList: any[], target: ElasticsearchQuery) {\n    const hitsTotal = typeof hits.total === 'number' ? hits.total : hits.total.value; // <- Works with Elasticsearch 7.0+\n\n    const series: any = {\n      target: target.refId,\n      type: 'docs',\n      refId: target.refId,\n      datapoints: [],\n      total: hitsTotal,\n      filterable: true,\n    };\n    let propName, hit, doc: any, i;\n\n    for (i = 0; i < hits.hits.length; i++) {\n      hit = hits.hits[i];\n      doc = {\n        _id: hit._id,\n        _type: hit._type,\n        _index: hit._index,\n        sort: hit.sort,\n        highlight: hit.highlight,\n      };\n\n      if (hit._source) {\n        for (propName in hit._source) {\n          doc[propName] = hit._source[propName];\n        }\n      }\n\n      for (propName in hit.fields) {\n        doc[propName] = hit.fields[propName];\n      }\n      series.datapoints.push(doc);\n    }\n\n    seriesList.push(series);\n  }\n\n  trimDatapoints(aggregations: any, target: ElasticsearchQuery) {\n    const histogram: any = find(target.bucketAggs, { type: 'date_histogram' });\n\n    const shouldDropFirstAndLast = histogram && histogram.settings && histogram.settings.trimEdges;\n    if (shouldDropFirstAndLast) {\n      const trim = histogram.settings.trimEdges;\n      for (const prop in aggregations) {\n        const points = aggregations[prop];\n        if (points.datapoints.length > trim * 2) {\n          points.datapoints = points.datapoints.slice(trim, points.datapoints.length - trim);\n        }\n      }\n    }\n  }\n\n  getErrorFromElasticResponse(response: any, err: any) {\n    const result: any = {};\n    result.data = JSON.stringify(err, null, 4);\n    if (err.root_cause && err.root_cause.length > 0 && err.root_cause[0].reason) {\n      result.message = err.root_cause[0].reason;\n    } else {\n      result.message = err.reason || 'Unknown elastic error response';\n    }\n\n    if (response.$$config) {\n      result.config = response.$$config;\n    }\n\n    return result;\n  }\n\n  getTimeSeries() {\n    if (this.targets.some((target) => queryDef.hasMetricOfType(target, 'raw_data'))) {\n      return this.processResponseToDataFrames(false);\n    }\n    return this.processResponseToSeries();\n  }\n\n  getLogs(logMessageField?: string, logLevelField?: string): DataQueryResponse {\n    return this.processResponseToDataFrames(true, logMessageField, logLevelField);\n  }\n\n  private processResponseToDataFrames(\n    isLogsRequest: boolean,\n    logMessageField?: string,\n    logLevelField?: string\n  ): DataQueryResponse {\n    const dataFrame: DataFrame[] = [];\n    for (let n = 0; n < this.response.responses.length; n++) {\n      const response = this.response.responses[n];\n      if (response.error) {\n        throw this.getErrorFromElasticResponse(this.response, response.error);\n      }\n\n      if (response.hits) {\n        const { propNames, docs } = flattenHits(response.hits.hits);\n\n        const series = docs.length\n          ? createEmptyDataFrame(\n              propNames.map(toNameTypePair(docs)),\n              isLogsRequest,\n              this.targets[0].timeField,\n              logMessageField,\n              logLevelField\n            )\n          : createEmptyDataFrame([], isLogsRequest);\n\n        if (isLogsRequest) {\n          addPreferredVisualisationType(series, 'logs');\n        }\n\n        // Add a row for each document\n        for (const doc of docs) {\n          if (logLevelField) {\n            // Remap level field based on the datasource config. This field is\n            // then used in explore to figure out the log level. We may rewrite\n            // some actual data in the level field if they are different.\n            doc['level'] = doc[logLevelField];\n          }\n          // When highlighting exists, we need to collect all the highlighted\n          // phrases and add them to the DataFrame's meta.searchWords array.\n          if (doc.highlight) {\n            // There might be multiple words so we need two versions of the\n            // regular expression. One to match gobally, when used with part.match,\n            // it returns and array of matches. The second one is used to capture the\n            // values between the tags.\n            const globalHighlightWordRegex = new RegExp(HIGHLIGHT_TAGS_EXP, 'g');\n            const highlightWordRegex = new RegExp(HIGHLIGHT_TAGS_EXP);\n            const newSearchWords = Object.keys(doc.highlight)\n              .flatMap((key) => {\n                return doc.highlight[key].flatMap((line: string) => {\n                  const matchedPhrases = line.match(globalHighlightWordRegex);\n                  if (!matchedPhrases) {\n                    return [];\n                  }\n                  return matchedPhrases.map((part) => {\n                    const matches = part.match(highlightWordRegex);\n                    return (matches && matches[1]) || null;\n                  });\n                });\n              })\n              .filter(identity);\n            // If meta and searchWords already exists, add the words and\n            // deduplicate otherwise create a new set of search words.\n            const searchWords = series.meta?.searchWords\n              ? uniq([...series.meta.searchWords, ...newSearchWords])\n              : [...newSearchWords];\n            series.meta = series.meta ? { ...series.meta, searchWords } : { searchWords };\n          }\n          series.add(doc);\n        }\n\n        const target = this.targets[n];\n        series.refId = target.refId;\n        dataFrame.push(series);\n      }\n\n      if (response.aggregations) {\n        const aggregations = response.aggregations;\n        const target = this.targets[n];\n        const tmpSeriesList: any[] = [];\n        const table = new TableModel();\n\n        this.processBuckets(aggregations, target, tmpSeriesList, table, {}, 0);\n        this.trimDatapoints(tmpSeriesList, target);\n        this.nameSeries(tmpSeriesList, target);\n\n        if (table.rows.length > 0) {\n          const series = toDataFrame(table);\n          series.refId = target.refId;\n          dataFrame.push(series);\n        }\n\n        for (let y = 0; y < tmpSeriesList.length; y++) {\n          let series = toDataFrame(tmpSeriesList[y]);\n\n          // When log results, show aggregations only in graph. Log fields are then going to be shown in table.\n          if (isLogsRequest) {\n            addPreferredVisualisationType(series, 'graph');\n          }\n\n          series.refId = target.refId;\n          dataFrame.push(series);\n        }\n      }\n    }\n\n    return { data: dataFrame };\n  }\n\n  processResponseToSeries = () => {\n    const seriesList = [];\n\n    for (let i = 0; i < this.response.responses.length; i++) {\n      const response = this.response.responses[i];\n      const target = this.targets[i];\n\n      if (response.error) {\n        throw this.getErrorFromElasticResponse(this.response, response.error);\n      }\n\n      if (response.hits && response.hits.hits.length > 0) {\n        this.processHits(response.hits, seriesList, target);\n      }\n\n      if (response.aggregations) {\n        const aggregations = response.aggregations;\n        const target = this.targets[i];\n        const tmpSeriesList: any[] = [];\n        const table = new TableModel();\n        table.refId = target.refId;\n\n        this.processBuckets(aggregations, target, tmpSeriesList, table, {}, 0);\n        this.trimDatapoints(tmpSeriesList, target);\n        this.nameSeries(tmpSeriesList, target);\n\n        for (let y = 0; y < tmpSeriesList.length; y++) {\n          seriesList.push(tmpSeriesList[y]);\n        }\n\n        if (table.rows.length > 0) {\n          seriesList.push(table);\n        }\n      }\n    }\n\n    return { data: seriesList };\n  };\n}\n\ntype Doc = {\n  _id: string;\n  _type: string;\n  _index: string;\n  _source?: any;\n  sort?: Array<string | number>;\n  highlight?: Record<string, string[]>;\n};\n\n/**\n * Flatten the docs from response mainly the _source part which can be nested. This flattens it so that it is one level\n * deep and the keys are: `level1Name.level2Name...`. Also returns list of all properties from all the docs (not all\n * docs have to have the same keys).\n * @param hits\n */\nconst flattenHits = (hits: Doc[]): { docs: Array<Record<string, any>>; propNames: string[] } => {\n  const docs: any[] = [];\n  // We keep a list of all props so that we can create all the fields in the dataFrame, this can lead\n  // to wide sparse dataframes in case the scheme is different per document.\n  let propNames: string[] = [];\n\n  for (const hit of hits) {\n    const flattened = hit._source ? flatten(hit._source) : {};\n    const doc = {\n      _id: hit._id,\n      _type: hit._type,\n      _index: hit._index,\n      sort: hit.sort,\n      highlight: hit.highlight,\n      _source: { ...flattened },\n      ...flattened,\n    };\n\n    for (const propName of Object.keys(doc)) {\n      if (propNames.indexOf(propName) === -1) {\n        propNames.push(propName);\n      }\n    }\n\n    docs.push(doc);\n  }\n\n  propNames.sort();\n  return { docs, propNames };\n};\n\n/**\n * Create empty dataframe but with created fields. Fields are based from propNames (should be from the response) and\n * also from configuration specified fields for message, time, and level.\n * @param propNames\n * @param timeField\n * @param logMessageField\n * @param logLevelField\n */\nconst createEmptyDataFrame = (\n  props: Array<[string, FieldType]>,\n  isLogsRequest: boolean,\n  timeField?: string,\n  logMessageField?: string,\n  logLevelField?: string\n): MutableDataFrame => {\n  const series = new MutableDataFrame({ fields: [] });\n\n  if (timeField) {\n    series.addField({\n      config: {\n        filterable: true,\n      },\n      name: timeField,\n      type: FieldType.time,\n    });\n  }\n\n  if (logMessageField) {\n    const f = series.addField({\n      name: logMessageField,\n      type: FieldType.string,\n    });\n    series.setParser(f, (v: any) => {\n      return v || '';\n    });\n  }\n\n  if (logLevelField) {\n    const f = series.addField({\n      name: 'level',\n      type: FieldType.string,\n    });\n    series.setParser(f, (v: any) => {\n      return v || '';\n    });\n  }\n\n  const fieldNames = series.fields.map((field) => field.name);\n\n  for (const [name, type] of props) {\n    // Do not duplicate fields. This can mean that we will shadow some fields.\n    if (fieldNames.includes(name)) {\n      continue;\n    }\n    // Do not add _source field (besides logs) as we are showing each _source field in table instead.\n    if (!isLogsRequest && name === '_source') {\n      continue;\n    }\n\n    const f = series.addField({\n      config: {\n        filterable: true,\n      },\n      name,\n      type,\n    });\n    series.setParser(f, (v: any) => {\n      return v || '';\n    });\n  }\n\n  return series;\n};\n\nconst addPreferredVisualisationType = (series: any, type: PreferredVisualisationType) => {\n  let s = series;\n  s.meta\n    ? (s.meta.preferredVisualisationType = type)\n    : (s.meta = {\n        preferredVisualisationType: type,\n      });\n};\n\nconst toNameTypePair =\n  (docs: Array<Record<string, any>>) =>\n  (propName: string): [string, FieldType] =>\n    [propName, guessType(docs.find((doc) => doc[propName] !== undefined)?.[propName])];\n\n/**\n * Trying to guess data type from its value. This is far from perfect, as in order to have accurate guess\n * we should have access to the elasticsearch mapping, but it covers the most common use cases for numbers, strings & arrays.\n */\nconst guessType = (value: unknown): FieldType => {\n  switch (typeof value) {\n    case 'number':\n      return FieldType.number;\n    case 'string':\n      return FieldType.string;\n    default:\n      return FieldType.other;\n  }\n};\n","import { cloneDeep, find, first as _first, isNumber, isObject, isString, map as _map } from 'lodash';\nimport { generate, lastValueFrom, Observable, of, throwError } from 'rxjs';\nimport { catchError, first, map, mergeMap, skipWhile, throwIfEmpty } from 'rxjs/operators';\n\nimport {\n  DataFrame,\n  DataLink,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  DataSourceWithLogsContextSupport,\n  DataSourceWithQueryImportSupport,\n  DataSourceWithLogsVolumeSupport,\n  DateTime,\n  dateTime,\n  Field,\n  getDefaultTimeRange,\n  AbstractQuery,\n  getLogLevelFromKey,\n  LogLevel,\n  LogRowModel,\n  MetricFindValue,\n  ScopedVars,\n  TimeRange,\n  toUtc,\n  QueryFixAction,\n} from '@grafana/data';\nimport { BackendSrvRequest, getBackendSrv, getDataSourceSrv } from '@grafana/runtime';\nimport { queryLogsVolume } from 'app/core/logsModel';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { getTemplateSrv, TemplateSrv } from 'app/features/templating/template_srv';\n\nimport { RowContextOptions } from '../../../features/logs/components/LogRowContextProvider';\n\nimport { IndexPattern } from './IndexPattern';\nimport LanguageProvider from './LanguageProvider';\nimport { ElasticQueryBuilder } from './QueryBuilder';\nimport { ElasticsearchAnnotationsQueryEditor } from './components/QueryEditor/AnnotationQueryEditor';\nimport {\n  BucketAggregation,\n  isBucketAggregationWithField,\n} from './components/QueryEditor/BucketAggregationsEditor/aggregations';\nimport { bucketAggregationConfig } from './components/QueryEditor/BucketAggregationsEditor/utils';\nimport {\n  isMetricAggregationWithField,\n  isPipelineAggregationWithMultipleBucketPaths,\n  Logs,\n} from './components/QueryEditor/MetricAggregationsEditor/aggregations';\nimport { metricAggregationConfig } from './components/QueryEditor/MetricAggregationsEditor/utils';\nimport { ElasticResponse } from './elastic_response';\nimport { defaultBucketAgg, hasMetricOfType } from './queryDef';\nimport { DataLinkConfig, ElasticsearchOptions, ElasticsearchQuery, TermsQuery } from './types';\nimport { coerceESVersion, getScriptValue, isSupportedVersion } from './utils';\n\n// Those are metadata fields as defined in https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-fields.html#_identity_metadata_fields.\n// custom fields can start with underscores, therefore is not safe to exclude anything that starts with one.\nconst ELASTIC_META_FIELDS = [\n  '_index',\n  '_type',\n  '_id',\n  '_source',\n  '_size',\n  '_field_names',\n  '_ignored',\n  '_routing',\n  '_meta',\n];\n\nexport class ElasticDatasource\n  extends DataSourceApi<ElasticsearchQuery, ElasticsearchOptions>\n  implements\n    DataSourceWithLogsContextSupport,\n    DataSourceWithQueryImportSupport<ElasticsearchQuery>,\n    DataSourceWithLogsVolumeSupport<ElasticsearchQuery>\n{\n  basicAuth?: string;\n  withCredentials?: boolean;\n  url: string;\n  name: string;\n  index: string;\n  timeField: string;\n  esVersion: string;\n  xpack: boolean;\n  interval: string;\n  maxConcurrentShardRequests?: number;\n  queryBuilder: ElasticQueryBuilder;\n  indexPattern: IndexPattern;\n  logMessageField?: string;\n  logLevelField?: string;\n  dataLinks: DataLinkConfig[];\n  languageProvider: LanguageProvider;\n  includeFrozen: boolean;\n  isProxyAccess: boolean;\n  timeSrv: TimeSrv;\n\n  constructor(\n    instanceSettings: DataSourceInstanceSettings<ElasticsearchOptions>,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv()\n  ) {\n    super(instanceSettings);\n    this.basicAuth = instanceSettings.basicAuth;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.url = instanceSettings.url!;\n    this.name = instanceSettings.name;\n    this.index = instanceSettings.database ?? '';\n    this.isProxyAccess = instanceSettings.access === 'proxy';\n    const settingsData = instanceSettings.jsonData || ({} as ElasticsearchOptions);\n\n    this.timeField = settingsData.timeField;\n    this.esVersion = coerceESVersion(settingsData.esVersion);\n    this.xpack = Boolean(settingsData.xpack);\n    this.indexPattern = new IndexPattern(this.index, settingsData.interval);\n    this.interval = settingsData.timeInterval;\n    this.maxConcurrentShardRequests = settingsData.maxConcurrentShardRequests;\n    this.queryBuilder = new ElasticQueryBuilder({\n      timeField: this.timeField,\n    });\n    this.logMessageField = settingsData.logMessageField || '';\n    this.logLevelField = settingsData.logLevelField || '';\n    this.dataLinks = settingsData.dataLinks || [];\n    this.includeFrozen = settingsData.includeFrozen ?? false;\n    this.annotations = {\n      QueryEditor: ElasticsearchAnnotationsQueryEditor,\n    };\n\n    if (this.logMessageField === '') {\n      this.logMessageField = undefined;\n    }\n\n    if (this.logLevelField === '') {\n      this.logLevelField = undefined;\n    }\n    this.languageProvider = new LanguageProvider(this);\n    this.timeSrv = getTimeSrv();\n  }\n\n  private request(\n    method: string,\n    url: string,\n    data?: undefined,\n    headers?: BackendSrvRequest['headers']\n  ): Observable<any> {\n    if (!this.isProxyAccess) {\n      const error = new Error(\n        'Browser access mode in the Elasticsearch datasource is no longer available. Switch to server access mode.'\n      );\n      return throwError(() => error);\n    }\n\n    if (!isSupportedVersion(this.esVersion)) {\n      const error = new Error(\n        'Support for Elasticsearch versions after their end-of-life (currently versions < 7.10) was removed.'\n      );\n      return throwError(() => error);\n    }\n\n    const options: BackendSrvRequest = {\n      url: this.url + '/' + url,\n      method,\n      data,\n      headers,\n    };\n\n    if (this.basicAuth || this.withCredentials) {\n      options.withCredentials = true;\n    }\n    if (this.basicAuth) {\n      options.headers = {\n        Authorization: this.basicAuth,\n      };\n    }\n\n    return getBackendSrv()\n      .fetch<any>(options)\n      .pipe(\n        map((results) => {\n          results.data.$$config = results.config;\n          return results.data;\n        }),\n        catchError((err) => {\n          if (err.data) {\n            const message = err.data.error?.reason ?? err.data.message ?? 'Unknown error';\n\n            return throwError({\n              message: 'Elasticsearch error: ' + message,\n              error: err.data.error,\n            });\n          }\n\n          return throwError(err);\n        })\n      );\n  }\n\n  async importFromAbstractQueries(abstractQueries: AbstractQuery[]): Promise<ElasticsearchQuery[]> {\n    return abstractQueries.map((abstractQuery) => this.languageProvider.importFromAbstractQuery(abstractQuery));\n  }\n\n  /**\n   * Sends a GET request to the specified url on the newest matching and available index.\n   *\n   * When multiple indices span the provided time range, the request is sent starting from the newest index,\n   * and then going backwards until an index is found.\n   *\n   * @param url the url to query the index on, for example `/_mapping`.\n   */\n  private get(url: string, range = getDefaultTimeRange()): Observable<any> {\n    let indexList = this.indexPattern.getIndexList(range.from, range.to);\n    if (!Array.isArray(indexList)) {\n      indexList = [this.indexPattern.getIndexForToday()];\n    }\n\n    const indexUrlList = indexList.map((index) => index + url);\n\n    return this.requestAllIndices(indexUrlList);\n  }\n\n  private requestAllIndices(indexList: string[]): Observable<any> {\n    const maxTraversals = 7; // do not go beyond one week (for a daily pattern)\n    const listLen = indexList.length;\n\n    return generate({\n      initialState: 0,\n      condition: (i) => i < Math.min(listLen, maxTraversals),\n      iterate: (i) => i + 1,\n    }).pipe(\n      mergeMap((index) => {\n        // catch all errors and emit an object with an err property to simplify checks later in the pipeline\n        return this.request('GET', indexList[listLen - index - 1]).pipe(catchError((err) => of({ err })));\n      }),\n      skipWhile((resp) => resp?.err?.status === 404), // skip all requests that fail because missing Elastic index\n      throwIfEmpty(() => 'Could not find an available index for this time range.'), // when i === Math.min(listLen, maxTraversals) generate will complete but without emitting any values which means we didn't find a valid index\n      first(), // take the first value that isn't skipped\n      map((resp) => {\n        if (resp.err) {\n          throw resp.err; // if there is some other error except 404 then we must throw it\n        }\n\n        return resp;\n      })\n    );\n  }\n\n  private post(url: string, data: any): Observable<any> {\n    return this.request('POST', url, data, { 'Content-Type': 'application/x-ndjson' });\n  }\n\n  annotationQuery(options: any): Promise<any> {\n    const annotation = options.annotation;\n    const timeField = annotation.timeField || '@timestamp';\n    const timeEndField = annotation.timeEndField || null;\n    const queryString = annotation.query;\n    const tagsField = annotation.tagsField || 'tags';\n    const textField = annotation.textField || null;\n\n    const dateRanges = [];\n    const rangeStart: any = {};\n    rangeStart[timeField] = {\n      from: options.range.from.valueOf(),\n      to: options.range.to.valueOf(),\n      format: 'epoch_millis',\n    };\n    dateRanges.push({ range: rangeStart });\n\n    if (timeEndField) {\n      const rangeEnd: any = {};\n      rangeEnd[timeEndField] = {\n        from: options.range.from.valueOf(),\n        to: options.range.to.valueOf(),\n        format: 'epoch_millis',\n      };\n      dateRanges.push({ range: rangeEnd });\n    }\n\n    const queryInterpolated = this.interpolateLuceneQuery(queryString);\n    const query: any = {\n      bool: {\n        filter: [\n          {\n            bool: {\n              should: dateRanges,\n              minimum_should_match: 1,\n            },\n          },\n        ],\n      },\n    };\n\n    if (queryInterpolated) {\n      query.bool.filter.push({\n        query_string: {\n          query: queryInterpolated,\n        },\n      });\n    }\n    const data: any = {\n      query,\n      size: 10000,\n    };\n\n    const header: any = {\n      search_type: 'query_then_fetch',\n      ignore_unavailable: true,\n    };\n\n    // old elastic annotations had index specified on them\n    if (annotation.index) {\n      header.index = annotation.index;\n    } else {\n      header.index = this.indexPattern.getIndexList(options.range.from, options.range.to);\n    }\n\n    const payload = JSON.stringify(header) + '\\n' + JSON.stringify(data) + '\\n';\n\n    return lastValueFrom(\n      this.post('_msearch', payload).pipe(\n        map((res) => {\n          const list = [];\n          const hits = res.responses[0].hits.hits;\n\n          const getFieldFromSource = (source: any, fieldName: any) => {\n            if (!fieldName) {\n              return;\n            }\n\n            const fieldNames = fieldName.split('.');\n            let fieldValue = source;\n\n            for (let i = 0; i < fieldNames.length; i++) {\n              fieldValue = fieldValue[fieldNames[i]];\n              if (!fieldValue) {\n                console.log('could not find field in annotation: ', fieldName);\n                return '';\n              }\n            }\n\n            return fieldValue;\n          };\n\n          for (let i = 0; i < hits.length; i++) {\n            const source = hits[i]._source;\n            let time = getFieldFromSource(source, timeField);\n            if (typeof hits[i].fields !== 'undefined') {\n              const fields = hits[i].fields;\n              if (isString(fields[timeField]) || isNumber(fields[timeField])) {\n                time = fields[timeField];\n              }\n            }\n\n            const event: {\n              annotation: any;\n              time: number;\n              timeEnd?: number;\n              text: string;\n              tags: string | string[];\n            } = {\n              annotation: annotation,\n              time: toUtc(time).valueOf(),\n              text: getFieldFromSource(source, textField),\n              tags: getFieldFromSource(source, tagsField),\n            };\n\n            if (timeEndField) {\n              const timeEnd = getFieldFromSource(source, timeEndField);\n              if (timeEnd) {\n                event.timeEnd = toUtc(timeEnd).valueOf();\n              }\n            }\n\n            // legacy support for title tield\n            if (annotation.titleField) {\n              const title = getFieldFromSource(source, annotation.titleField);\n              if (title) {\n                event.text = title + '\\n' + event.text;\n              }\n            }\n\n            if (typeof event.tags === 'string') {\n              event.tags = event.tags.split(',');\n            }\n\n            list.push(event);\n          }\n          return list;\n        })\n      )\n    );\n  }\n\n  private interpolateLuceneQuery(queryString: string, scopedVars?: ScopedVars) {\n    return this.templateSrv.replace(queryString, scopedVars, 'lucene');\n  }\n\n  interpolateVariablesInQueries(queries: ElasticsearchQuery[], scopedVars: ScopedVars): ElasticsearchQuery[] {\n    // We need a separate interpolation format for lucene queries, therefore we first interpolate any\n    // lucene query string and then everything else\n    const interpolateBucketAgg = (bucketAgg: BucketAggregation): BucketAggregation => {\n      if (bucketAgg.type === 'filters') {\n        return {\n          ...bucketAgg,\n          settings: {\n            ...bucketAgg.settings,\n            filters: bucketAgg.settings?.filters?.map((filter) => ({\n              ...filter,\n              query: this.interpolateLuceneQuery(filter.query, scopedVars) || '*',\n            })),\n          },\n        };\n      }\n\n      return bucketAgg;\n    };\n\n    const expandedQueries = queries.map(\n      (query): ElasticsearchQuery => ({\n        ...query,\n        datasource: this.getRef(),\n        query: this.interpolateLuceneQuery(query.query || '', scopedVars),\n        bucketAggs: query.bucketAggs?.map(interpolateBucketAgg),\n      })\n    );\n\n    const finalQueries: ElasticsearchQuery[] = JSON.parse(\n      this.templateSrv.replace(JSON.stringify(expandedQueries), scopedVars)\n    );\n\n    return finalQueries;\n  }\n\n  testDatasource() {\n    // validate that the index exist and has date field\n    return lastValueFrom(\n      this.getFields(['date']).pipe(\n        mergeMap((dateFields) => {\n          const timeField: any = find(dateFields, { text: this.timeField });\n          if (!timeField) {\n            return of({ status: 'error', message: 'No date field named ' + this.timeField + ' found' });\n          }\n          return of({ status: 'success', message: 'Index OK. Time field name OK.' });\n        }),\n        catchError((err) => {\n          console.error(err);\n          if (err.message) {\n            return of({ status: 'error', message: err.message });\n          } else {\n            return of({ status: 'error', message: err.status });\n          }\n        })\n      )\n    );\n  }\n\n  getQueryHeader(searchType: any, timeFrom?: DateTime, timeTo?: DateTime): string {\n    const queryHeader: any = {\n      search_type: searchType,\n      ignore_unavailable: true,\n      index: this.indexPattern.getIndexList(timeFrom, timeTo),\n    };\n\n    return JSON.stringify(queryHeader);\n  }\n\n  getQueryDisplayText(query: ElasticsearchQuery) {\n    // TODO: This might be refactored a bit.\n    const metricAggs = query.metrics;\n    const bucketAggs = query.bucketAggs;\n    let text = '';\n\n    if (query.query) {\n      text += 'Query: ' + query.query + ', ';\n    }\n\n    text += 'Metrics: ';\n\n    text += metricAggs?.reduce((acc, metric) => {\n      const metricConfig = metricAggregationConfig[metric.type];\n\n      let text = metricConfig.label + '(';\n\n      if (isMetricAggregationWithField(metric)) {\n        text += metric.field;\n      }\n      if (isPipelineAggregationWithMultipleBucketPaths(metric)) {\n        text += getScriptValue(metric).replace(new RegExp('params.', 'g'), '');\n      }\n      text += '), ';\n\n      return `${acc} ${text}`;\n    }, '');\n\n    text += bucketAggs?.reduce((acc, bucketAgg, index) => {\n      const bucketConfig = bucketAggregationConfig[bucketAgg.type];\n\n      let text = '';\n      if (index === 0) {\n        text += ' Group by: ';\n      }\n\n      text += bucketConfig.label + '(';\n      if (isBucketAggregationWithField(bucketAgg)) {\n        text += bucketAgg.field;\n      }\n\n      return `${acc} ${text}), `;\n    }, '');\n\n    if (query.alias) {\n      text += 'Alias: ' + query.alias;\n    }\n\n    return text;\n  }\n\n  showContextToggle(): boolean {\n    return true;\n  }\n\n  getLogRowContext = async (row: LogRowModel, options?: RowContextOptions): Promise<{ data: DataFrame[] }> => {\n    const sortField = row.dataFrame.fields.find((f) => f.name === 'sort');\n    const searchAfter = sortField?.values.get(row.rowIndex) || [row.timeEpochMs];\n    const sort = options?.direction === 'FORWARD' ? 'asc' : 'desc';\n\n    const header =\n      options?.direction === 'FORWARD'\n        ? this.getQueryHeader('query_then_fetch', dateTime(row.timeEpochMs))\n        : this.getQueryHeader('query_then_fetch', undefined, dateTime(row.timeEpochMs));\n\n    const limit = options?.limit ?? 10;\n    const esQuery = JSON.stringify({\n      size: limit,\n      query: {\n        bool: {\n          filter: [\n            {\n              range: {\n                [this.timeField]: {\n                  [options?.direction === 'FORWARD' ? 'gte' : 'lte']: row.timeEpochMs,\n                  format: 'epoch_millis',\n                },\n              },\n            },\n          ],\n        },\n      },\n      sort: [{ [this.timeField]: sort }, { _doc: sort }],\n      search_after: searchAfter,\n    });\n    const payload = [header, esQuery].join('\\n') + '\\n';\n    const url = this.getMultiSearchUrl();\n    const response = await lastValueFrom(this.post(url, payload));\n    const targets: ElasticsearchQuery[] = [{ refId: `${row.dataFrame.refId}`, metrics: [{ type: 'logs', id: '1' }] }];\n    const elasticResponse = new ElasticResponse(targets, transformHitsBasedOnDirection(response, sort));\n    const logResponse = elasticResponse.getLogs(this.logMessageField, this.logLevelField);\n    const dataFrame = _first(logResponse.data);\n    if (!dataFrame) {\n      return { data: [] };\n    }\n    /**\n     * The LogRowContextProvider requires there is a field in the dataFrame.fields\n     * named `ts` for timestamp and `line` for the actual log line to display.\n     * Unfortunatly these fields are hardcoded and are required for the lines to\n     * be properly displayed. This code just copies the fields based on this.timeField\n     * and this.logMessageField and recreates the dataFrame so it works.\n     */\n    const timestampField = dataFrame.fields.find((f: Field) => f.name === this.timeField);\n    const lineField = dataFrame.fields.find((f: Field) => f.name === this.logMessageField);\n    if (timestampField && lineField) {\n      return {\n        data: [\n          {\n            ...dataFrame,\n            fields: [...dataFrame.fields, { ...timestampField, name: 'ts' }, { ...lineField, name: 'line' }],\n          },\n        ],\n      };\n    }\n    return logResponse;\n  };\n\n  getLogsVolumeDataProvider(request: DataQueryRequest<ElasticsearchQuery>): Observable<DataQueryResponse> | undefined {\n    const isLogsVolumeAvailable = request.targets.some((target) => {\n      return target.metrics?.length === 1 && target.metrics[0].type === 'logs';\n    });\n    if (!isLogsVolumeAvailable) {\n      return undefined;\n    }\n    const logsVolumeRequest = cloneDeep(request);\n    logsVolumeRequest.targets = logsVolumeRequest.targets.map((target) => {\n      const bucketAggs: BucketAggregation[] = [];\n      const timeField = this.timeField ?? '@timestamp';\n\n      if (this.logLevelField) {\n        bucketAggs.push({\n          id: '2',\n          type: 'terms',\n          settings: {\n            min_doc_count: '0',\n            size: '0',\n            order: 'desc',\n            orderBy: '_count',\n            missing: LogLevel.unknown,\n          },\n          field: this.logLevelField,\n        });\n      }\n      bucketAggs.push({\n        id: '3',\n        type: 'date_histogram',\n        settings: {\n          interval: 'auto',\n          min_doc_count: '0',\n          trimEdges: '0',\n        },\n        field: timeField,\n      });\n\n      const logsVolumeQuery: ElasticsearchQuery = {\n        refId: target.refId,\n        query: target.query,\n        metrics: [{ type: 'count', id: '1' }],\n        timeField,\n        bucketAggs,\n      };\n      return logsVolumeQuery;\n    });\n\n    return queryLogsVolume(this, logsVolumeRequest, {\n      range: request.range,\n      targets: request.targets,\n      extractLevel: (dataFrame) => getLogLevelFromKey(dataFrame.name || ''),\n    });\n  }\n\n  query(options: DataQueryRequest<ElasticsearchQuery>): Observable<DataQueryResponse> {\n    let payload = '';\n    const targets = this.interpolateVariablesInQueries(cloneDeep(options.targets), options.scopedVars);\n    const sentTargets: ElasticsearchQuery[] = [];\n    let targetsContainsLogsQuery = targets.some((target) => hasMetricOfType(target, 'logs'));\n\n    // add global adhoc filters to timeFilter\n    const adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n\n    const logLimits: Array<number | undefined> = [];\n\n    for (const target of targets) {\n      if (target.hide) {\n        continue;\n      }\n\n      let queryObj;\n      if (hasMetricOfType(target, 'logs')) {\n        // FIXME: All this logic here should be in the query builder.\n        // When moving to the BE-only implementation we should remove this and let the BE\n        // Handle this.\n        // TODO: defaultBucketAgg creates a dete_histogram aggregation without a field, so it fallbacks to\n        // the configured timeField. we should allow people to use a different time field here.\n        target.bucketAggs = [defaultBucketAgg()];\n\n        const log = target.metrics?.find((m) => m.type === 'logs') as Logs;\n        const limit = log.settings?.limit ? parseInt(log.settings?.limit, 10) : 500;\n        logLimits.push(limit);\n\n        target.metrics = [];\n        // Setting this for metrics queries that are typed as logs\n        queryObj = this.queryBuilder.getLogsQuery(target, limit, adhocFilters);\n      } else {\n        logLimits.push();\n        if (target.alias) {\n          target.alias = this.interpolateLuceneQuery(target.alias, options.scopedVars);\n        }\n\n        queryObj = this.queryBuilder.build(target, adhocFilters);\n      }\n\n      const esQuery = JSON.stringify(queryObj);\n\n      const searchType = 'query_then_fetch';\n      const header = this.getQueryHeader(searchType, options.range.from, options.range.to);\n      payload += header + '\\n';\n\n      payload += esQuery + '\\n';\n\n      sentTargets.push(target);\n    }\n\n    if (sentTargets.length === 0) {\n      return of({ data: [] });\n    }\n\n    // We replace the range here for actual values. We need to replace it together with enclosing \"\" so that we replace\n    // it as an integer not as string with digits. This is because elastic will convert the string only if the time\n    // field is specified as type date (which probably should) but can also be specified as integer (millisecond epoch)\n    // and then sending string will error out.\n    payload = payload.replace(/\"\\$timeFrom\"/g, options.range.from.valueOf().toString());\n    payload = payload.replace(/\"\\$timeTo\"/g, options.range.to.valueOf().toString());\n    payload = this.templateSrv.replace(payload, options.scopedVars);\n\n    const url = this.getMultiSearchUrl();\n\n    return this.post(url, payload).pipe(\n      map((res) => {\n        const er = new ElasticResponse(sentTargets, res);\n\n        // TODO: This needs to be revisited, it seems wrong to process ALL the sent queries as logs if only one of them was a log query\n        if (targetsContainsLogsQuery) {\n          const response = er.getLogs(this.logMessageField, this.logLevelField);\n\n          response.data.forEach((dataFrame, index) => {\n            enhanceDataFrame(dataFrame, this.dataLinks, logLimits[index]);\n          });\n          return response;\n        }\n\n        return er.getTimeSeries();\n      })\n    );\n  }\n\n  isMetadataField(fieldName: string) {\n    return ELASTIC_META_FIELDS.includes(fieldName);\n  }\n\n  // TODO: instead of being a string, this could be a custom type representing all the elastic types\n  // FIXME: This doesn't seem to return actual MetricFindValues, we should either change the return type\n  // or fix the implementation.\n  getFields(type?: string[], range?: TimeRange): Observable<MetricFindValue[]> {\n    const typeMap: Record<string, string> = {\n      float: 'number',\n      double: 'number',\n      integer: 'number',\n      long: 'number',\n      date: 'date',\n      date_nanos: 'date',\n      string: 'string',\n      text: 'string',\n      scaled_float: 'number',\n      nested: 'nested',\n      histogram: 'number',\n    };\n    return this.get('/_mapping', range).pipe(\n      map((result) => {\n        const shouldAddField = (obj: any, key: string) => {\n          if (this.isMetadataField(key)) {\n            return false;\n          }\n\n          if (!type || type.length === 0) {\n            return true;\n          }\n\n          // equal query type filter, or via typemap translation\n          return type.includes(obj.type) || type.includes(typeMap[obj.type]);\n        };\n\n        // Store subfield names: [system, process, cpu, total] -> system.process.cpu.total\n        const fieldNameParts: any = [];\n        const fields: any = {};\n\n        function getFieldsRecursively(obj: any) {\n          for (const key in obj) {\n            const subObj = obj[key];\n\n            // Check mapping field for nested fields\n            if (isObject(subObj.properties)) {\n              fieldNameParts.push(key);\n              getFieldsRecursively(subObj.properties);\n            }\n\n            if (isObject(subObj.fields)) {\n              fieldNameParts.push(key);\n              getFieldsRecursively(subObj.fields);\n            }\n\n            if (isString(subObj.type)) {\n              const fieldName = fieldNameParts.concat(key).join('.');\n\n              // Hide meta-fields and check field type\n              if (shouldAddField(subObj, key)) {\n                fields[fieldName] = {\n                  text: fieldName,\n                  type: subObj.type,\n                };\n              }\n            }\n          }\n          fieldNameParts.pop();\n        }\n\n        for (const indexName in result) {\n          const index = result[indexName];\n          if (index && index.mappings) {\n            const mappings = index.mappings;\n\n            const properties = mappings.properties;\n            getFieldsRecursively(properties);\n          }\n        }\n\n        // transform to array\n        return _map(fields, (value) => {\n          return value;\n        });\n      })\n    );\n  }\n\n  getTerms(queryDef: TermsQuery, range = getDefaultTimeRange()): Observable<MetricFindValue[]> {\n    const searchType = 'query_then_fetch';\n    const header = this.getQueryHeader(searchType, range.from, range.to);\n    let esQuery = JSON.stringify(this.queryBuilder.getTermsQuery(queryDef));\n\n    esQuery = esQuery.replace(/\\$timeFrom/g, range.from.valueOf().toString());\n    esQuery = esQuery.replace(/\\$timeTo/g, range.to.valueOf().toString());\n    esQuery = header + '\\n' + esQuery + '\\n';\n\n    const url = this.getMultiSearchUrl();\n\n    return this.post(url, esQuery).pipe(\n      map((res) => {\n        if (!res.responses[0].aggregations) {\n          return [];\n        }\n\n        const buckets = res.responses[0].aggregations['1'].buckets;\n        return _map(buckets, (bucket) => {\n          return {\n            text: bucket.key_as_string || bucket.key,\n            value: bucket.key,\n          };\n        });\n      })\n    );\n  }\n\n  getMultiSearchUrl() {\n    const searchParams = new URLSearchParams();\n\n    if (this.maxConcurrentShardRequests) {\n      searchParams.append('max_concurrent_shard_requests', `${this.maxConcurrentShardRequests}`);\n    }\n\n    if (this.xpack && this.includeFrozen) {\n      searchParams.append('ignore_throttled', 'false');\n    }\n\n    return ('_msearch?' + searchParams.toString()).replace(/\\?$/, '');\n  }\n\n  metricFindQuery(query: string, options?: any): Promise<MetricFindValue[]> {\n    const range = options?.range;\n    const parsedQuery = JSON.parse(query);\n    if (query) {\n      if (parsedQuery.find === 'fields') {\n        parsedQuery.type = this.interpolateLuceneQuery(parsedQuery.type);\n        return lastValueFrom(this.getFields(parsedQuery.type, range));\n      }\n\n      if (parsedQuery.find === 'terms') {\n        parsedQuery.field = this.interpolateLuceneQuery(parsedQuery.field);\n        parsedQuery.query = this.interpolateLuceneQuery(parsedQuery.query);\n        return lastValueFrom(this.getTerms(parsedQuery, range));\n      }\n    }\n\n    return Promise.resolve([]);\n  }\n\n  getTagKeys() {\n    return lastValueFrom(this.getFields());\n  }\n\n  getTagValues(options: any) {\n    const range = this.timeSrv.timeRange();\n    return lastValueFrom(this.getTerms({ field: options.key }, range));\n  }\n\n  targetContainsTemplate(target: any) {\n    if (this.templateSrv.containsTemplate(target.query) || this.templateSrv.containsTemplate(target.alias)) {\n      return true;\n    }\n\n    for (const bucketAgg of target.bucketAggs) {\n      if (this.templateSrv.containsTemplate(bucketAgg.field) || this.objectContainsTemplate(bucketAgg.settings)) {\n        return true;\n      }\n    }\n\n    for (const metric of target.metrics) {\n      if (\n        this.templateSrv.containsTemplate(metric.field) ||\n        this.objectContainsTemplate(metric.settings) ||\n        this.objectContainsTemplate(metric.meta)\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private isPrimitive(obj: any) {\n    if (obj === null || obj === undefined) {\n      return true;\n    }\n    if (['string', 'number', 'boolean'].some((type) => type === typeof true)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  private objectContainsTemplate(obj: any) {\n    if (!obj) {\n      return false;\n    }\n\n    for (const key of Object.keys(obj)) {\n      if (this.isPrimitive(obj[key])) {\n        if (this.templateSrv.containsTemplate(obj[key])) {\n          return true;\n        }\n      } else if (Array.isArray(obj[key])) {\n        for (const item of obj[key]) {\n          if (this.objectContainsTemplate(item)) {\n            return true;\n          }\n        }\n      } else {\n        if (this.objectContainsTemplate(obj[key])) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  modifyQuery(query: ElasticsearchQuery, action: QueryFixAction): ElasticsearchQuery {\n    if (!action.options) {\n      return query;\n    }\n\n    let expression = query.query ?? '';\n    switch (action.type) {\n      case 'ADD_FILTER': {\n        if (expression.length > 0) {\n          expression += ' AND ';\n        }\n        expression += `${action.options.key}:\"${action.options.value}\"`;\n        break;\n      }\n      case 'ADD_FILTER_OUT': {\n        if (expression.length > 0) {\n          expression += ' AND ';\n        }\n        expression += `-${action.options.key}:\"${action.options.value}\"`;\n        break;\n      }\n    }\n    return { ...query, query: expression };\n  }\n}\n\n/**\n * Modifies dataframe and adds dataLinks from the config.\n * Exported for tests.\n */\nexport function enhanceDataFrame(dataFrame: DataFrame, dataLinks: DataLinkConfig[], limit?: number) {\n  if (limit) {\n    dataFrame.meta = {\n      ...dataFrame.meta,\n      limit,\n    };\n  }\n\n  if (!dataLinks.length) {\n    return;\n  }\n\n  for (const field of dataFrame.fields) {\n    const linksToApply = dataLinks.filter((dataLink) => new RegExp(dataLink.field).test(field.name));\n\n    if (linksToApply.length === 0) {\n      continue;\n    }\n\n    field.config = field.config || {};\n    field.config.links = [...(field.config.links || [], linksToApply.map(generateDataLink))];\n  }\n}\n\nfunction generateDataLink(linkConfig: DataLinkConfig): DataLink {\n  const dataSourceSrv = getDataSourceSrv();\n\n  if (linkConfig.datasourceUid) {\n    const dsSettings = dataSourceSrv.getInstanceSettings(linkConfig.datasourceUid);\n\n    return {\n      title: linkConfig.urlDisplayLabel || '',\n      url: '',\n      internal: {\n        query: { query: linkConfig.url },\n        datasourceUid: linkConfig.datasourceUid,\n        datasourceName: dsSettings?.name ?? 'Data source not found',\n      },\n    };\n  } else {\n    return {\n      title: linkConfig.urlDisplayLabel || '',\n      url: linkConfig.url,\n    };\n  }\n}\n\nfunction transformHitsBasedOnDirection(response: any, direction: 'asc' | 'desc') {\n  if (direction === 'desc') {\n    return response;\n  }\n  const actualResponse = response.responses[0];\n  return {\n    ...response,\n    responses: [\n      {\n        ...actualResponse,\n        hits: {\n          ...actualResponse.hits,\n          hits: actualResponse.hits.hits.reverse(),\n        },\n      },\n    ],\n  };\n}\n","import { DataSourcePlugin } from '@grafana/data';\n\nimport { QueryEditor } from './components/QueryEditor';\nimport { ConfigEditor } from './configuration/ConfigEditor';\nimport { ElasticDatasource } from './datasource';\n\nexport const plugin = new DataSourcePlugin(ElasticDatasource).setQueryEditor(QueryEditor).setConfigEditor(ConfigEditor);\n","import React, { useEffect, useRef } from 'react';\n\nimport { SIGV4ConnectionConfig } from '@grafana/aws-sdk';\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { Alert, DataSourceHttpSettings } from '@grafana/ui';\nimport { config } from 'app/core/config';\n\nimport { ElasticsearchOptions } from '../types';\nimport { isSupportedVersion } from '../utils';\n\nimport { DataLinks } from './DataLinks';\nimport { ElasticDetails } from './ElasticDetails';\nimport { LogsConfig } from './LogsConfig';\nimport { coerceOptions, isValidOptions } from './utils';\n\nexport type Props = DataSourcePluginOptionsEditorProps<ElasticsearchOptions>;\n\nexport const ConfigEditor = (props: Props) => {\n  // we decide on whether to show access options or not at the point when the config page opens.\n  // whatever happens while the page is open, this decision does not change.\n  // (we do this to avoid situations where you switch access-mode and suddenly\n  // the access-mode-select-box vanishes)\n  const showAccessOptions = useRef(props.options.access === 'direct');\n\n  const { options: originalOptions, onOptionsChange } = props;\n  const options = coerceOptions(originalOptions);\n\n  useEffect(() => {\n    if (!isValidOptions(originalOptions)) {\n      onOptionsChange(coerceOptions(originalOptions));\n    }\n\n    // We can't enforce the eslint rule here because we only want to run this once.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const supportedVersion = isSupportedVersion(options.jsonData.esVersion);\n\n  return (\n    <>\n      {options.access === 'direct' && (\n        <Alert title=\"Error\" severity=\"error\">\n          Browser access mode in the Elasticsearch datasource is no longer available. Switch to server access mode.\n        </Alert>\n      )}\n      {!supportedVersion && (\n        <Alert title=\"Deprecation notice\" severity=\"error\">\n          {`Support for Elasticsearch versions after their end-of-life (currently versions < 7.10) was removed`}\n        </Alert>\n      )}\n      <DataSourceHttpSettings\n        defaultUrl=\"http://localhost:9200\"\n        dataSourceConfig={options}\n        showAccessOptions={showAccessOptions.current}\n        onChange={onOptionsChange}\n        sigV4AuthToggleEnabled={config.sigV4AuthEnabled}\n        renderSigV4Editor={<SIGV4ConnectionConfig {...props}></SIGV4ConnectionConfig>}\n      />\n\n      <ElasticDetails value={options} onChange={onOptionsChange} />\n\n      <LogsConfig\n        value={options.jsonData}\n        onChange={(newValue) =>\n          onOptionsChange({\n            ...options,\n            jsonData: newValue,\n          })\n        }\n      />\n\n      <DataLinks\n        value={options.jsonData.dataLinks}\n        onChange={(newValue) => {\n          onOptionsChange({\n            ...options,\n            jsonData: {\n              ...options.jsonData,\n              dataLinks: newValue,\n            },\n          });\n        }}\n      />\n    </>\n  );\n};\n"],"names":["isTruthy","value","Boolean","useStatelessReducer","onChange","state","reducer","useCallback","action","DispatchContext","createContext","undefined","useDispatch","dispatch","useContext","Error","defaultPipelineVariable","name","pipelineAgg","generatePipelineVariableName","pipelineVars","Math","max","map","v","parseInt","match","isEWMAMovingAverage","metric","settings","model","isHoltMovingAverage","isHoltWintersMovingAverage","isMovingAverageWithModelSettings","includes","isMetricAggregationWithField","metricAggregationConfig","type","requiresField","isPipelineAggregation","isPipelineAgg","isPipelineAggregationWithMultipleBucketPaths","supportsMultipleBucketPaths","isMetricAggregationWithMissingSupport","supportsMissing","isMetricAggregationWithSettings","hasSettings","isMetricAggregationWithInlineScript","supportsInlineScript","METRIC_AGGREGATION_TYPES","count","label","hasMeta","defaults","avg","sum","min","extended_stats","meta","std_deviation_bounds_lower","std_deviation_bounds_upper","percentiles","percents","cardinality","moving_avg","versionRange","window","moving_fn","derivative","serial_diff","lag","cumulative_sum","bucket_script","pipelineVariables","raw_document","isSingleMetric","size","raw_data","logs","limit","top_metrics","xpack","order","rate","pipelineOptions","default","getChildren","metrics","children","filter","m","some","pv","id","field","flatMap","child","extendedStats","movingAvgModelOptions","highlightTags","defaultMetricAgg","defaultBucketAgg","interval","findMetricById","find","hasMetricOfType","target","describeMetric","removeEmpty","obj","Object","entries","reduce","acc","key","Array","isArray","length","cleanObj","keys","convertOrderByToMetricId","orderBy","metricIdMatches","getScriptValue","script","inline","coerceESVersion","version","valid","isSupportedVersion","gte","addMetric","createAction","removeMetric","toggleMetricVisibility","changeMetricField","changeMetricType","changeMetricAttribute","changeMetricSetting","changeMetricMeta","initQuery","changeQuery","changeAliasPattern","queryReducer","prevQuery","payload","aliasPatternReducer","prevAliasPattern","bucketAggregationConfig","terms","defaultSettings","min_doc_count","filters","query","geohash_grid","precision","date_histogram","trimEdges","timeZone","InternalTimeZones","histogram","orderByOptions","orderOptions","sizeOptions","addBucketAggregation","removeBucketAggregation","changeBucketAggregationType","changeBucketAggregationField","changeBucketAggregationSetting","metricToRemove","metricsToRemove","resultingMetrics","toRemove","newMetric","hide","newSettings","settingName","newValue","isMetricAggregationWithMeta","attribute","DatasourceContext","QueryContext","RangeContext","ElasticsearchProvider","onRunQuery","datasource","range","onStateChange","reducers","alias","metricsReducer","bucketAggs","defaultTimeField","timeField","newAgg","lastAgg","slice","bucketAgg","newType","newField","newState","isUninitialized","shouldRunInit","setShouldRunInit","useState","useEffect","Provider","getHook","c","contextValue","useQuery","useDatasource","useRange","toId","e","toInt","idString","SROnly","css","IconButton","iconName","onClick","className","buttonProps","cx","Icon","QueryEditorRow","onRemoveClick","onHideClick","hidden","styles","useStyles2","getStyles","InlineFieldRow","InlineSegmentGroup","InlineLabel","width","as","iconWrapper","icon","noop","disabled","theme","colors","text","secondary","spacing","isBucketAggregationWithField","BUCKET_AGGREGATION_TYPES","getFilter","s","isBucketAggregationType","toSelectableValue","useFields","rawFields","async","lastValueFrom","getFields","q","segmentStyles","SettingsEditorContainer","open","setOpen","wrapper","settingsWrapper","button","useTheme2","useCreatableSelectPersistedBehaviour","options","initialOptions","setOptions","initialValue","searchValue","getInitialState","onCreateOption","allowCustomValue","defaultIntervalOptions","isValidNewOption","inputValue","_","trim","optionStartsWithValue","option","startsWith","DateHistogramSettingsEditor","current","baseId","useRef","uniqueId","InlineField","inlineFieldProps","Select","inputId","filterOption","Input","I","onBlur","defaultValue","tooltip","offset","TimeZonePicker","includeInternal","AddRemove","index","onAdd","onRemove","elements","addFilter","removeFilter","changeFilter","concat","FiltersSettingsEditor","upperStateDispatch","filtersReducer","labelWidth","QueryField","placeholder","portalOrigin","TermsSettingsEditor","createOrderByOptions","missing","createOrderByOptionsForExtendedStats","method","createOrderByOptionsForPercentiles","percent","percentString","test","isValidOrderTarget","metricOptions","hasValue","object","SettingsEditor","settingsDescription","minDocCount","description","orderByOption","useDescription","bucketAggOptions","BucketAggregationEditor","Segment","SegmentAsync","loadOptions","BucketAggregationsEditor","nextId","totalBucketAggs","noWrap","toOption","MetricPicker","selectedOption","SettingField","addPipelineVariable","removePipelineVariable","renamePipelineVariable","changePipelineVariableMetric","pipelineVariable","newName","BucketScriptSettingsEditor","previousMetrics","pipelineVar","Fragment","MovingAverageSettingsEditor","alpha","beta","gamma","period","pad","checked","minimize","toMultiSelectValue","TopMetricsSettingsEditor","getOrderByOptions","getMetricsOptions","closeMenuOnSelect","defaultOptions","precision_threshold","selectedStats","join","refId","stat","ExtendedStatSetting","split","unit","isBasicAggregation","getTypeOptions","esVersion","includePipelineAggregations","satisfies","config","MetricEditor","color","primary","remoteFields","findIndex","MetricAggregationsEditor","totalMetrics","root","queryFieldWrapper","ElasticSearchQueryField","QueryEditorForm","useMemo","toString","useNextId","isTimeSeriesQuery","showBucketAggregationsEditor","every","currentTarget","FormField","Switch","LegacyForms","stylesFactory","firstRow","nameField","regexField","row","urlField","urlDisplayLabelField","DataLink","props","onDelete","suggestions","showInternalLink","setShowInternalLink","datasourceUid","previousUid","usePrevious","useInternalLink","handleChange","event","inputWidth","Button","variant","title","preventDefault","inputEl","DataLinkInput","url","urlDisplayLabel","labelClass","DataSourcePicker","tracing","ds","uid","infoText","dataLink","DataLinks","newDataLinks","splice","DataLinkBuiltInVars","documentation","origin","VariableOrigin","indexPatternTypes","example","esVersions","ElasticDetails","currentVersion","jsonData","customOption","FieldSet","database","changeHandler","required","pattern","intervalHandler","jsonDataChangeHandler","maxConcurrentShardRequests","getMaxConcurrenShardRequestOrDefault","error","invalid","timeInterval","jsonDataSwitchChangeHandler","includeFrozen","newInterval","newDatabase","LogsConfig","logMessageField","logLevelField","coerceOptions","intervalMap","Hourly","startOf","amount","Daily","Weekly","Monthly","Yearly","IndexPattern","constructor","getIndexForToday","this","toUtc","locale","dateLocale","format","getIndexList","from","to","intervalInfo","start","dateTime","add","utc","endEpoch","valueOf","indexList","push","ElasticsearchLanguageProvider","LanguageProvider","initialValues","super","assign","importFromAbstractQuery","abstractQuery","getElasticsearchQuery","labelMatchers","labels","operator","AbstractLabelOperator","ElasticQueryBuilder","getRangeFilter","lte","buildTermsAgg","aggDef","queryNode","metricId","_count","aggs","isNaN","getDateHistogramAgg","esAgg","extended_bounds","time_zone","fixed_interval","getHistogramAgg","getFiltersAgg","filterObj","query_string","analyze_wildcard","documentQuery","sort","unmapped_type","_doc","script_fields","addAdhocFilters","adhocFilters","i","condition","queryCondition","bool","must","match_phrase","must_not","lt","gt","regexp","build","j","nestedAggs","message","aggField","metricAgg","buckets_path","appliedAgg","forEach","k","buildScript","toNumber","predict","fromEntries","stringValue","parsedValue","parseFloat","getTermsQuery","queryDef","indexOf","keyname","getLogsQuery","highlight","fields","pre_tags","post_tags","fragment_size","ElasticsearchAnnotationsQueryEditor","annotation","onAnnotationChange","EditorRow","EditorField","timeEndField","textField","tagsField","HIGHLIGHT_TAGS_EXP","ElasticResponse","targets","response","seriesList","responses","getErrorFromElasticResponse","hits","processHits","aggregations","tmpSeriesList","table","TableModel","processBuckets","trimDatapoints","nameSeries","y","rows","data","processMetrics","newSeries","datapoints","buckets","bucket","doc_count","values","percentileName","statName","stats","std_deviation_bounds","upper","lower","metricField","top","hit","point","normalized_value","processAggregationDocs","columns","propKey","addColumn","filterable","addMetricValue","metricName","propValues","_values","getMetricName","baseName","depth","aggId","maxDepth","nameIndex","clone","key_as_string","metricDef","extendedStat","getSeriesName","series","dedup","regex","replace","g1","g2","group","substring","metricType","agg","propName","metricTypeCount","uniq","hasTopMetricWithMultipleMetrics","hitsTotal","total","doc","_id","_type","_index","_source","prop","points","err","result","JSON","stringify","root_cause","reason","$$config","getTimeSeries","processResponseToDataFrames","processResponseToSeries","getLogs","isLogsRequest","dataFrame","n","propNames","docs","flattenHits","createEmptyDataFrame","toNameTypePair","addPreferredVisualisationType","globalHighlightWordRegex","RegExp","highlightWordRegex","newSearchWords","line","matchedPhrases","part","matches","identity","searchWords","toDataFrame","flattened","flatten","MutableDataFrame","addField","FieldType","f","setParser","fieldNames","preferredVisualisationType","guessType","ELASTIC_META_FIELDS","ElasticDatasource","DataSourceApi","instanceSettings","templateSrv","getTemplateSrv","sortField","searchAfter","get","rowIndex","timeEpochMs","direction","header","getQueryHeader","search_after","getMultiSearchUrl","post","elasticResponse","actualResponse","reverse","transformHitsBasedOnDirection","logResponse","_first","timestampField","lineField","basicAuth","withCredentials","isProxyAccess","access","settingsData","indexPattern","queryBuilder","dataLinks","annotations","QueryEditor","languageProvider","timeSrv","getTimeSrv","request","headers","throwError","Authorization","getBackendSrv","fetch","pipe","results","catchError","abstractQueries","getDefaultTimeRange","indexUrlList","requestAllIndices","listLen","generate","initialState","iterate","mergeMap","of","skipWhile","resp","status","throwIfEmpty","first","annotationQuery","queryString","dateRanges","rangeStart","rangeEnd","queryInterpolated","interpolateLuceneQuery","should","minimum_should_match","search_type","ignore_unavailable","res","list","getFieldFromSource","source","fieldName","fieldValue","console","log","time","isString","isNumber","tags","timeEnd","titleField","scopedVars","interpolateVariablesInQueries","queries","interpolateBucketAgg","expandedQueries","getRef","parse","testDatasource","dateFields","searchType","timeFrom","timeTo","queryHeader","getQueryDisplayText","metricAggs","showContextToggle","getLogsVolumeDataProvider","logsVolumeRequest","cloneDeep","LogLevel","queryLogsVolume","extractLevel","getLogLevelFromKey","sentTargets","targetsContainsLogsQuery","getAdhocFilters","logLimits","queryObj","esQuery","er","linksToApply","links","generateDataLink","enhanceDataFrame","isMetadataField","typeMap","float","double","integer","long","date","date_nanos","string","scaled_float","nested","shouldAddField","fieldNameParts","getFieldsRecursively","subObj","isObject","properties","pop","indexName","mappings","_map","getTerms","searchParams","URLSearchParams","append","metricFindQuery","parsedQuery","Promise","resolve","getTagKeys","getTagValues","timeRange","targetContainsTemplate","containsTemplate","objectContainsTemplate","isPrimitive","item","modifyQuery","expression","linkConfig","dataSourceSrv","getDataSourceSrv","dsSettings","getInstanceSettings","internal","datasourceName","plugin","DataSourcePlugin","setQueryEditor","Alert","setConfigEditor","showAccessOptions","originalOptions","onOptionsChange","isValidOptions","supportedVersion","severity","DataSourceHttpSettings","defaultUrl","dataSourceConfig","sigV4AuthToggleEnabled","renderSigV4Editor","SIGV4ConnectionConfig"],"sourceRoot":""}