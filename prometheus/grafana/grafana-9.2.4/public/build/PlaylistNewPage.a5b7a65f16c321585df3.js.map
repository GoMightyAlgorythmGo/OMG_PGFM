{"version":3,"file":"PlaylistNewPage.a5b7a65f16c321585df3.js","mappings":"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","sources":["webpack://grafana/./public/app/features/playlist/PlaylistTableRows.tsx","webpack://grafana/./public/app/features/playlist/PlaylistTable.tsx","webpack://grafana/./public/app/features/playlist/PlaylistForm.tsx","webpack://grafana/./public/app/features/playlist/usePlaylistItems.tsx","webpack://grafana/./public/app/features/playlist/PlaylistNewPage.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport pluralize from 'pluralize';\nimport React, { ReactNode } from 'react';\nimport { Draggable } from 'react-beautiful-dnd';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Icon, IconButton, useStyles2, Spinner, IconName } from '@grafana/ui';\nimport { TagBadge } from 'app/core/components/TagFilter/TagBadge';\n\nimport { PlaylistItem } from './types';\n\ninterface Props {\n  items: PlaylistItem[];\n  onDelete: (idx: number) => void;\n}\n\nexport const PlaylistTableRows = ({ items, onDelete }: Props) => {\n  const styles = useStyles2(getStyles);\n  if (!items?.length) {\n    return (\n      <div>\n        <em>Playlist is empty. Add dashboards below.</em>\n      </div>\n    );\n  }\n\n  const renderItem = (item: PlaylistItem) => {\n    let icon: IconName = item.type === 'dashboard_by_tag' ? 'apps' : 'tag-alt';\n    const info: ReactNode[] = [];\n\n    const first = item.dashboards?.[0];\n    if (!item.dashboards) {\n      info.push(<Spinner key=\"spinner\" />);\n    } else if (item.type === 'dashboard_by_tag') {\n      info.push(<TagBadge key={item.value} label={item.value} removeIcon={false} count={0} />);\n      if (!first) {\n        icon = 'exclamation-triangle';\n        info.push(<span key=\"info\">&nbsp; No dashboards found</span>);\n      } else {\n        info.push(<span key=\"info\">&nbsp; {pluralize('dashboard', item.dashboards.length, true)}</span>);\n      }\n    } else if (first) {\n      info.push(\n        item.dashboards.length > 1 ? (\n          <span key=\"info\">Multiple items found: ${item.value}</span>\n        ) : (\n          <span key=\"info\">{first.name ?? item.value}</span>\n        )\n      );\n    } else {\n      icon = 'exclamation-triangle';\n      info.push(<span key=\"info\">&nbsp; Not found: {item.value}</span>);\n    }\n    return (\n      <>\n        <Icon name={icon} className={styles.rightMargin} key=\"icon\" />\n        {info}\n      </>\n    );\n  };\n\n  return (\n    <>\n      {items.map((item, index) => (\n        <Draggable key={`${index}/${item.value}`} draggableId={`${index}`} index={index}>\n          {(provided) => (\n            <div\n              className={styles.row}\n              ref={provided.innerRef}\n              {...provided.draggableProps}\n              {...provided.dragHandleProps}\n              role=\"row\"\n            >\n              <div className={styles.actions} role=\"cell\" aria-label={`Playlist item, ${item.type}, ${item.value}`}>\n                {renderItem(item)}\n              </div>\n              <div className={styles.actions}>\n                <IconButton\n                  name=\"times\"\n                  size=\"md\"\n                  onClick={() => onDelete(index)}\n                  aria-label={selectors.pages.PlaylistForm.itemDelete}\n                  type=\"button\"\n                />\n                <Icon title=\"Drag and drop to reorder\" name=\"draggabledots\" size=\"md\" />\n              </div>\n            </div>\n          )}\n        </Draggable>\n      ))}\n    </>\n  );\n};\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    row: css`\n      padding: 6px;\n      background: ${theme.colors.background.secondary};\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      margin-bottom: 3px;\n\n      border: 1px solid ${theme.colors.border.medium};\n      &:hover {\n        border: 1px solid ${theme.colors.border.strong};\n      }\n    `,\n    rightMargin: css`\n      margin-right: 5px;\n    `,\n    actions: css`\n      align-items: center;\n      justify-content: center;\n      display: flex;\n    `,\n    settings: css`\n      label: settings;\n      text-align: right;\n    `,\n  };\n}\n","import React from 'react';\nimport { DragDropContext, Droppable, DropResult } from 'react-beautiful-dnd';\n\nimport { PlaylistTableRows } from './PlaylistTableRows';\nimport { PlaylistItem } from './types';\n\ninterface Props {\n  items: PlaylistItem[];\n  deleteItem: (idx: number) => void;\n  moveItem: (src: number, dst: number) => void;\n}\n\nexport const PlaylistTable = ({ items, deleteItem, moveItem }: Props) => {\n  const onDragEnd = (d: DropResult) => {\n    if (d.destination) {\n      moveItem(d.source.index, d.destination?.index);\n    }\n  };\n\n  return (\n    <div className=\"gf-form-group\">\n      <h3 className=\"page-headering\">Dashboards</h3>\n\n      <DragDropContext onDragEnd={onDragEnd}>\n        <Droppable droppableId=\"playlist-list\" direction=\"vertical\">\n          {(provided) => {\n            return (\n              <div ref={provided.innerRef} {...provided.droppableProps}>\n                <PlaylistTableRows items={items} onDelete={deleteItem} />\n                {provided.placeholder}\n              </div>\n            );\n          }}\n        </Droppable>\n      </DragDropContext>\n    </div>\n  );\n};\n","import React, { useMemo } from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { config } from '@grafana/runtime';\nimport { Button, Field, Form, HorizontalGroup, Input, LinkButton } from '@grafana/ui';\nimport { DashboardPicker } from 'app/core/components/Select/DashboardPicker';\nimport { TagFilter } from 'app/core/components/TagFilter/TagFilter';\n\nimport { getGrafanaSearcher } from '../search/service';\n\nimport { PlaylistTable } from './PlaylistTable';\nimport { Playlist } from './types';\nimport { usePlaylistItems } from './usePlaylistItems';\n\ninterface Props {\n  onSubmit: (playlist: Playlist) => void;\n  playlist: Playlist;\n}\n\nexport const PlaylistForm = ({ onSubmit, playlist }: Props) => {\n  const { name, interval, items: propItems } = playlist;\n  const tagOptions = useMemo(() => {\n    return () => getGrafanaSearcher().tags({ kind: ['dashboard'] });\n  }, []);\n\n  const { items, addById, addByTag, deleteItem, moveItem } = usePlaylistItems(propItems);\n\n  return (\n    <div>\n      <Form onSubmit={(list: Playlist) => onSubmit({ ...list, items })} validateOn={'onBlur'}>\n        {({ register, errors }) => {\n          const isDisabled = items.length === 0 || Object.keys(errors).length > 0;\n          return (\n            <>\n              <Field label=\"Name\" invalid={!!errors.name} error={errors?.name?.message}>\n                <Input\n                  type=\"text\"\n                  {...register('name', { required: 'Name is required' })}\n                  placeholder=\"Name\"\n                  defaultValue={name}\n                  aria-label={selectors.pages.PlaylistForm.name}\n                />\n              </Field>\n              <Field label=\"Interval\" invalid={!!errors.interval} error={errors?.interval?.message}>\n                <Input\n                  type=\"text\"\n                  {...register('interval', { required: 'Interval is required' })}\n                  placeholder=\"5m\"\n                  defaultValue={interval ?? '5m'}\n                  aria-label={selectors.pages.PlaylistForm.interval}\n                />\n              </Field>\n\n              <PlaylistTable items={items} deleteItem={deleteItem} moveItem={moveItem} />\n\n              <div className=\"gf-form-group\">\n                <h3 className=\"page-headering\">Add dashboards</h3>\n\n                <Field label=\"Add by title\">\n                  <DashboardPicker id=\"dashboard-picker\" onChange={addById} key={items.length} />\n                </Field>\n\n                <Field label=\"Add by tag\">\n                  <TagFilter\n                    isClearable\n                    tags={[]}\n                    hideValues\n                    tagOptions={tagOptions}\n                    onChange={addByTag}\n                    placeholder=\"Select a tag\"\n                  />\n                </Field>\n              </div>\n\n              <HorizontalGroup>\n                <Button type=\"submit\" variant=\"primary\" disabled={isDisabled}>\n                  Save\n                </Button>\n                <LinkButton variant=\"secondary\" href={`${config.appSubUrl}/playlists`}>\n                  Cancel\n                </LinkButton>\n              </HorizontalGroup>\n            </>\n          );\n        }}\n      </Form>\n    </div>\n  );\n};\n","import { useCallback, useState } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { DashboardPickerDTO } from 'app/core/components/Select/DashboardPicker';\n\nimport { loadDashboards } from './api';\nimport { PlaylistItem } from './types';\n\nexport function usePlaylistItems(playlistItems?: PlaylistItem[]) {\n  const [items, setItems] = useState<PlaylistItem[]>(playlistItems ?? []);\n\n  // Attach dashboards if any were missing\n  useAsync(async () => {\n    for (const item of items) {\n      if (!item.dashboards) {\n        setItems(await loadDashboards(items));\n        return;\n      }\n    }\n  }, [items]);\n\n  const addById = useCallback(\n    (dashboard?: DashboardPickerDTO) => {\n      if (!dashboard) {\n        return;\n      }\n\n      setItems([\n        ...items,\n        {\n          type: 'dashboard_by_uid',\n          value: dashboard.uid,\n        },\n      ]);\n    },\n    [items]\n  );\n\n  const addByTag = useCallback(\n    (tags: string[]) => {\n      const tag = tags[0];\n      if (!tag || items.find((item) => item.value === tag)) {\n        return;\n      }\n\n      const newItem: PlaylistItem = {\n        type: 'dashboard_by_tag',\n        value: tag,\n      };\n      setItems([...items, newItem]);\n    },\n    [items]\n  );\n\n  const moveItem = useCallback(\n    (src: number, dst: number) => {\n      if (src === dst || !items[src]) {\n        return; // nothing to do\n      }\n      const update = Array.from(items);\n      const [removed] = update.splice(src, 1);\n      update.splice(dst, 0, removed);\n      setItems(update);\n    },\n    [items]\n  );\n\n  const deleteItem = useCallback(\n    (index: number) => {\n      const copy = items.slice();\n      copy.splice(index, 1);\n      setItems(copy);\n    },\n    [items]\n  );\n\n  return { items, addById, addByTag, deleteItem, moveItem };\n}\n","import React, { useState } from 'react';\n\nimport { NavModelItem } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { Page } from 'app/core/components/Page/Page';\n\nimport { PlaylistForm } from './PlaylistForm';\nimport { createPlaylist, getDefaultPlaylist } from './api';\nimport { Playlist } from './types';\n\nexport const PlaylistNewPage = () => {\n  const [playlist] = useState<Playlist>(getDefaultPlaylist());\n\n  const onSubmit = async (playlist: Playlist) => {\n    await createPlaylist(playlist);\n    locationService.push('/playlists');\n  };\n\n  const pageNav: NavModelItem = {\n    text: 'New playlist',\n    subTitle:\n      'A playlist rotates through a pre-selected list of dashboards. A playlist can be a great way to build situational awareness, or just show off your metrics to your team or visitors.',\n  };\n\n  return (\n    <Page navId=\"dashboards/playlists\" pageNav={pageNav}>\n      <Page.Contents>\n        <PlaylistForm onSubmit={onSubmit} playlist={playlist} />\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default PlaylistNewPage;\n"],"names":["PlaylistTableRows","items","onDelete","styles","useStyles2","getStyles","length","renderItem","item","icon","type","info","first","dashboards","push","TagBadge","label","value","removeIcon","count","pluralize","name","Spinner","Icon","className","rightMargin","map","index","draggableId","provided","row","ref","innerRef","draggableProps","dragHandleProps","role","actions","IconButton","size","onClick","selectors","title","theme","css","colors","background","secondary","border","medium","strong","settings","PlaylistTable","deleteItem","moveItem","onDragEnd","d","destination","source","droppableId","direction","droppableProps","placeholder","PlaylistForm","onSubmit","playlist","interval","propItems","tagOptions","useMemo","getGrafanaSearcher","tags","kind","addById","addByTag","playlistItems","setItems","useState","useAsync","async","loadDashboards","useCallback","dashboard","uid","tag","find","newItem","src","dst","update","Array","from","removed","splice","copy","slice","usePlaylistItems","Form","list","validateOn","register","errors","isDisabled","Object","keys","Field","invalid","error","message","Input","I","required","defaultValue","DashboardPicker","id","onChange","TagFilter","isClearable","hideValues","Button","variant","disabled","href","config","PlaylistNewPage","getDefaultPlaylist","navId","pageNav","text","subTitle","createPlaylist","locationService"],"sourceRoot":""}