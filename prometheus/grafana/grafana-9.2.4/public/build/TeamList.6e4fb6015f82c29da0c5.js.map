{"version":3,"file":"TeamList.6e4fb6015f82c29da0c5.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/RolePicker/TeamRolePicker.tsx","webpack://grafana/./public/app/core/components/connectWithCleanUp.tsx","webpack://grafana/./public/app/features/admin/utils.ts","webpack://grafana/./public/app/features/teams/TeamList.tsx","webpack://grafana/./public/app/features/teams/state/actions.ts","webpack://grafana/./public/app/features/teams/state/navModel.ts","webpack://grafana/./public/app/features/teams/state/selectors.ts"],"sourcesContent":["import React, { FC, useEffect } from 'react';\nimport { useAsyncFn } from 'react-use';\n\nimport { contextSrv } from 'app/core/core';\nimport { Role, AccessControlAction } from 'app/types';\n\nimport { RolePicker } from './RolePicker';\nimport { fetchTeamRoles, updateTeamRoles } from './api';\n\nexport interface Props {\n  teamId: number;\n  orgId?: number;\n  roleOptions: Role[];\n  disabled?: boolean;\n  onApplyRoles?: (newRoles: Role[]) => void;\n  pendingRoles?: Role[];\n  /**\n   * Set whether the component should send a request with the new roles to the\n   * backend in TeamRolePicker.onRolesChange (apply=false), or call {@link onApplyRoles}\n   * with the updated list of roles (apply=true).\n   *\n   * Besides it sets the RolePickerMenu's Button title to\n   *   * `Update` in case apply equals false\n   *   * `Apply` in case apply equals true\n   *\n   * @default false\n   */\n  apply?: boolean;\n  maxWidth?: string | number;\n}\n\nexport const TeamRolePicker: FC<Props> = ({\n  teamId,\n  roleOptions,\n  disabled,\n  onApplyRoles,\n  pendingRoles,\n  apply = false,\n  maxWidth,\n}) => {\n  const [{ loading, value: appliedRoles = [] }, getTeamRoles] = useAsyncFn(async () => {\n    try {\n      if (apply && Boolean(pendingRoles?.length)) {\n        return pendingRoles;\n      }\n\n      if (contextSrv.hasPermission(AccessControlAction.ActionTeamsRolesList)) {\n        return await fetchTeamRoles(teamId);\n      }\n    } catch (e) {\n      console.error('Error loading options', e);\n    }\n    return [];\n  }, [teamId, pendingRoles]);\n\n  useEffect(() => {\n    getTeamRoles();\n  }, [teamId, getTeamRoles, pendingRoles]);\n\n  const onRolesChange = async (roles: Role[]) => {\n    if (!apply) {\n      await updateTeamRoles(roles, teamId);\n      await getTeamRoles();\n    } else if (onApplyRoles) {\n      onApplyRoles(roles);\n    }\n  };\n\n  const canUpdateRoles =\n    contextSrv.hasPermission(AccessControlAction.ActionTeamsRolesAdd) &&\n    contextSrv.hasPermission(AccessControlAction.ActionTeamsRolesRemove);\n\n  return (\n    <RolePicker\n      apply={apply}\n      onRolesChange={onRolesChange}\n      roleOptions={roleOptions}\n      appliedRoles={appliedRoles}\n      isLoading={loading}\n      disabled={disabled}\n      basicRoleDisabled={true}\n      canUpdateRoles={canUpdateRoles}\n      maxWidth={maxWidth}\n    />\n  );\n};\n","import hoistNonReactStatics from 'hoist-non-react-statics';\nimport React, { ComponentType, FunctionComponent, useEffect } from 'react';\nimport { connect, MapDispatchToPropsParam, MapStateToPropsParam } from 'react-redux';\n\nimport { useDispatch } from 'app/types';\n\nimport { cleanUpAction, CleanUpAction } from '../actions/cleanUp';\n\nexport const connectWithCleanUp =\n  <TStateProps extends {} = {}, TDispatchProps = {}, TOwnProps = {}, State = {}, Statics = {}>(\n    mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\n    mapDispatchToProps: MapDispatchToPropsParam<TDispatchProps, TOwnProps>,\n    cleanupAction: CleanUpAction\n  ) =>\n  (Component: ComponentType<any>) => {\n    const ConnectedComponent = connect(\n      mapStateToProps,\n      mapDispatchToProps\n      // @ts-ignore\n    )(Component);\n\n    const ConnectedComponentWithCleanUp: FunctionComponent = (props) => {\n      const dispatch = useDispatch();\n      useEffect(() => {\n        return function cleanUp() {\n          dispatch(cleanUpAction({ cleanupAction: cleanupAction }));\n        };\n      }, [dispatch]);\n      // @ts-ignore\n      return <ConnectedComponent {...props} />;\n    };\n\n    ConnectedComponentWithCleanUp.displayName = `ConnectWithCleanUp(${ConnectedComponent.displayName})`;\n    hoistNonReactStatics(ConnectedComponentWithCleanUp, Component);\n    type Hoisted = typeof ConnectedComponentWithCleanUp & Statics;\n\n    return ConnectedComponentWithCleanUp as Hoisted;\n  };\n","import { config } from '@grafana/runtime/src';\n\n// https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address\nexport const w3cStandardEmailValidator =\n  /^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n\nexport function isTrial() {\n  const expiry = config.licenseInfo?.trialExpiry;\n  return !!(expiry && expiry > 0);\n}\n\nexport const highlightTrial = () => isTrial() && config.featureToggles.featureHighlights;\n","import React, { PureComponent } from 'react';\n\nimport { DeleteButton, LinkButton, FilterInput, VerticalGroup, HorizontalGroup, Pagination } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { Page } from 'app/core/components/Page/Page';\nimport { TeamRolePicker } from 'app/core/components/RolePicker/TeamRolePicker';\nimport { fetchRoleOptions } from 'app/core/components/RolePicker/api';\nimport { config } from 'app/core/config';\nimport { contextSrv, User } from 'app/core/services/context_srv';\nimport { AccessControlAction, Role, StoreState, Team } from 'app/types';\n\nimport { connectWithCleanUp } from '../../core/components/connectWithCleanUp';\n\nimport { deleteTeam, loadTeams } from './state/actions';\nimport { initialTeamsState, setSearchQuery, setTeamsSearchPage } from './state/reducers';\nimport { getSearchQuery, getTeams, getTeamsCount, getTeamsSearchPage, isPermissionTeamAdmin } from './state/selectors';\n\nconst pageLimit = 30;\n\nexport interface Props {\n  teams: Team[];\n  searchQuery: string;\n  searchPage: number;\n  teamsCount: number;\n  hasFetched: boolean;\n  loadTeams: typeof loadTeams;\n  deleteTeam: typeof deleteTeam;\n  setSearchQuery: typeof setSearchQuery;\n  setTeamsSearchPage: typeof setTeamsSearchPage;\n  editorsCanAdmin: boolean;\n  signedInUser: User;\n}\n\nexport interface State {\n  roleOptions: Role[];\n}\n\nexport class TeamList extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { roleOptions: [] };\n  }\n\n  componentDidMount() {\n    this.fetchTeams();\n    if (contextSrv.licensedAccessControlEnabled() && contextSrv.hasPermission(AccessControlAction.ActionRolesList)) {\n      this.fetchRoleOptions();\n    }\n  }\n\n  async fetchTeams() {\n    await this.props.loadTeams();\n  }\n\n  async fetchRoleOptions() {\n    const roleOptions = await fetchRoleOptions();\n    this.setState({ roleOptions });\n  }\n\n  deleteTeam = (team: Team) => {\n    this.props.deleteTeam(team.id);\n  };\n\n  onSearchQueryChange = (value: string) => {\n    this.props.setSearchQuery(value);\n  };\n\n  renderTeam(team: Team) {\n    const { editorsCanAdmin, signedInUser } = this.props;\n    const permission = team.permission;\n    const teamUrl = `org/teams/edit/${team.id}`;\n    const isTeamAdmin = isPermissionTeamAdmin({ permission, editorsCanAdmin, signedInUser });\n    const canDelete = contextSrv.hasAccessInMetadata(AccessControlAction.ActionTeamsDelete, team, isTeamAdmin);\n    const canReadTeam = contextSrv.hasAccessInMetadata(AccessControlAction.ActionTeamsRead, team, isTeamAdmin);\n    const canSeeTeamRoles = contextSrv.hasAccessInMetadata(AccessControlAction.ActionTeamsRolesList, team, false);\n    const displayRolePicker =\n      contextSrv.licensedAccessControlEnabled() && contextSrv.hasPermission(AccessControlAction.ActionRolesList);\n\n    return (\n      <tr key={team.id}>\n        <td className=\"width-4 text-center link-td\">\n          {canReadTeam ? (\n            <a href={teamUrl}>\n              <img className=\"filter-table__avatar\" src={team.avatarUrl} alt=\"Team avatar\" />\n            </a>\n          ) : (\n            <img className=\"filter-table__avatar\" src={team.avatarUrl} alt=\"Team avatar\" />\n          )}\n        </td>\n        <td className=\"link-td\">\n          {canReadTeam ? <a href={teamUrl}>{team.name}</a> : <div style={{ padding: '0px 8px' }}>{team.name}</div>}\n        </td>\n        <td className=\"link-td\">\n          {canReadTeam ? (\n            <a href={teamUrl} aria-label={team.email?.length > 0 ? undefined : 'Empty email cell'}>\n              {team.email}\n            </a>\n          ) : (\n            <div style={{ padding: '0px 8px' }} aria-label={team.email?.length > 0 ? undefined : 'Empty email cell'}>\n              {team.email}\n            </div>\n          )}\n        </td>\n        <td className=\"link-td\">\n          {canReadTeam ? (\n            <a href={teamUrl}>{team.memberCount}</a>\n          ) : (\n            <div style={{ padding: '0px 8px' }}>{team.memberCount}</div>\n          )}\n        </td>\n        {displayRolePicker && (\n          <td>{canSeeTeamRoles && <TeamRolePicker teamId={team.id} roleOptions={this.state.roleOptions} />}</td>\n        )}\n        <td className=\"text-right\">\n          <DeleteButton\n            aria-label={`Delete team ${team.name}`}\n            size=\"sm\"\n            disabled={!canDelete}\n            onConfirm={() => this.deleteTeam(team)}\n          />\n        </td>\n      </tr>\n    );\n  }\n\n  renderEmptyList() {\n    return (\n      <EmptyListCTA\n        title=\"You haven't created any teams yet.\"\n        buttonIcon=\"users-alt\"\n        buttonLink=\"org/teams/new\"\n        buttonTitle=\" New team\"\n        buttonDisabled={!contextSrv.hasPermission(AccessControlAction.ActionTeamsCreate)}\n        proTip=\"Assign folder and dashboard permissions to teams instead of users to ease administration.\"\n        proTipLink=\"\"\n        proTipLinkTitle=\"\"\n        proTipTarget=\"_blank\"\n      />\n    );\n  }\n\n  getPaginatedTeams = (teams: Team[]) => {\n    const offset = (this.props.searchPage - 1) * pageLimit;\n    return teams.slice(offset, offset + pageLimit);\n  };\n\n  renderTeamList() {\n    const { teams, searchQuery, editorsCanAdmin, searchPage, setTeamsSearchPage } = this.props;\n    const teamAdmin = contextSrv.hasRole('Admin') || (editorsCanAdmin && contextSrv.hasRole('Editor'));\n    const canCreate = contextSrv.hasAccess(AccessControlAction.ActionTeamsCreate, teamAdmin);\n    const displayRolePicker =\n      contextSrv.licensedAccessControlEnabled() &&\n      contextSrv.hasPermission(AccessControlAction.ActionTeamsRolesList) &&\n      contextSrv.hasPermission(AccessControlAction.ActionRolesList);\n    const newTeamHref = canCreate ? 'org/teams/new' : '#';\n    const paginatedTeams = this.getPaginatedTeams(teams);\n    const totalPages = Math.ceil(teams.length / pageLimit);\n\n    return (\n      <>\n        <div className=\"page-action-bar\">\n          <div className=\"gf-form gf-form--grow\">\n            <FilterInput placeholder=\"Search teams\" value={searchQuery} onChange={this.onSearchQueryChange} />\n          </div>\n\n          <LinkButton href={newTeamHref} disabled={!canCreate}>\n            New Team\n          </LinkButton>\n        </div>\n\n        <div className=\"admin-list-table\">\n          <VerticalGroup spacing=\"md\">\n            <table className=\"filter-table filter-table--hover form-inline\">\n              <thead>\n                <tr>\n                  <th />\n                  <th>Name</th>\n                  <th>Email</th>\n                  <th>Members</th>\n                  {displayRolePicker && <th>Roles</th>}\n                  <th style={{ width: '1%' }} />\n                </tr>\n              </thead>\n              <tbody>{paginatedTeams.map((team) => this.renderTeam(team))}</tbody>\n            </table>\n            <HorizontalGroup justify=\"flex-end\">\n              <Pagination\n                onNavigate={setTeamsSearchPage}\n                currentPage={searchPage}\n                numberOfPages={totalPages}\n                hideWhenSinglePage={true}\n              />\n            </HorizontalGroup>\n          </VerticalGroup>\n        </div>\n      </>\n    );\n  }\n\n  renderList() {\n    const { teamsCount, hasFetched } = this.props;\n\n    if (!hasFetched) {\n      return null;\n    }\n\n    if (teamsCount > 0) {\n      return this.renderTeamList();\n    } else {\n      return this.renderEmptyList();\n    }\n  }\n\n  render() {\n    const { hasFetched } = this.props;\n\n    return (\n      <Page navId=\"teams\">\n        <Page.Contents isLoading={!hasFetched}>{this.renderList()}</Page.Contents>\n      </Page>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    teams: getTeams(state.teams),\n    searchQuery: getSearchQuery(state.teams),\n    searchPage: getTeamsSearchPage(state.teams),\n    teamsCount: getTeamsCount(state.teams),\n    hasFetched: state.teams.hasFetched,\n    editorsCanAdmin: config.editorsCanAdmin, // this makes the feature toggle mockable/controllable from tests,\n    signedInUser: contextSrv.user, // this makes the feature toggle mockable/controllable from tests,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadTeams,\n  deleteTeam,\n  setSearchQuery,\n  setTeamsSearchPage,\n};\n\nexport default connectWithCleanUp(\n  mapStateToProps,\n  mapDispatchToProps,\n  (state) => (state.teams = initialTeamsState)\n)(TeamList);\n","import { getBackendSrv } from '@grafana/runtime';\nimport { updateNavIndex } from 'app/core/actions';\nimport { contextSrv } from 'app/core/core';\nimport { accessControlQueryParam } from 'app/core/utils/accessControl';\nimport { AccessControlAction, TeamMember, ThunkResult } from 'app/types';\n\nimport { buildNavModel } from './navModel';\nimport { teamGroupsLoaded, teamLoaded, teamMembersLoaded, teamsLoaded } from './reducers';\n\nexport function loadTeams(): ThunkResult<void> {\n  return async (dispatch) => {\n    // Early return if the user cannot list teams\n    if (!contextSrv.hasPermission(AccessControlAction.ActionTeamsRead)) {\n      dispatch(teamsLoaded([]));\n      return;\n    }\n\n    const response = await getBackendSrv().get(\n      '/api/teams/search',\n      accessControlQueryParam({ perpage: 1000, page: 1 })\n    );\n    dispatch(teamsLoaded(response.teams));\n  };\n}\n\nexport function loadTeam(id: number): ThunkResult<void> {\n  return async (dispatch) => {\n    const response = await getBackendSrv().get(`/api/teams/${id}`, accessControlQueryParam());\n    dispatch(teamLoaded(response));\n    dispatch(updateNavIndex(buildNavModel(response)));\n  };\n}\n\nexport function loadTeamMembers(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    const response = await getBackendSrv().get(`/api/teams/${team.id}/members`);\n    dispatch(teamMembersLoaded(response));\n  };\n}\n\nexport function addTeamMember(id: number): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().post(`/api/teams/${team.id}/members`, { userId: id });\n    dispatch(loadTeamMembers());\n  };\n}\n\nexport function removeTeamMember(id: number): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().delete(`/api/teams/${team.id}/members/${id}`);\n    dispatch(loadTeamMembers());\n  };\n}\n\nexport function updateTeam(name: string, email: string): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().put(`/api/teams/${team.id}`, { name, email });\n    dispatch(loadTeam(team.id));\n  };\n}\n\nexport function loadTeamGroups(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    const response = await getBackendSrv().get(`/api/teams/${team.id}/groups`);\n    dispatch(teamGroupsLoaded(response));\n  };\n}\n\nexport function addTeamGroup(groupId: string): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().post(`/api/teams/${team.id}/groups`, { groupId: groupId });\n    dispatch(loadTeamGroups());\n  };\n}\n\nexport function removeTeamGroup(groupId: string): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().delete(`/api/teams/${team.id}/groups/${encodeURIComponent(groupId)}`);\n    dispatch(loadTeamGroups());\n  };\n}\n\nexport function deleteTeam(id: number): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().delete(`/api/teams/${id}`);\n    // Update users permissions in case they lost teams.read with the deletion\n    await contextSrv.fetchUserPermissions();\n    dispatch(loadTeams());\n  };\n}\n\nexport function updateTeamMember(member: TeamMember): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().put(`/api/teams/${member.teamId}/members/${member.userId}`, {\n      permission: member.permission,\n    });\n    dispatch(loadTeamMembers());\n  };\n}\n","import { NavModelItem, NavModel } from '@grafana/data';\nimport { featureEnabled } from '@grafana/runtime';\nimport { ProBadge } from 'app/core/components/Upgrade/ProBadge';\nimport config from 'app/core/config';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { highlightTrial } from 'app/features/admin/utils';\nimport { AccessControlAction, Team, TeamPermissionLevel } from 'app/types';\n\nconst loadingTeam = {\n  avatarUrl: 'public/img/user_profile.png',\n  id: 1,\n  name: 'Loading',\n  email: 'loading',\n  memberCount: 0,\n  permission: TeamPermissionLevel.Member,\n};\n\nexport function buildNavModel(team: Team): NavModelItem {\n  const navModel: NavModelItem = {\n    img: team.avatarUrl,\n    id: 'team-' + team.id,\n    subTitle: 'Manage members and settings',\n    url: '',\n    text: team.name,\n    breadcrumbs: [{ title: 'Teams', url: 'org/teams' }],\n    children: [\n      // With RBAC this tab will always be available (but not always editable)\n      // With Legacy it will be hidden by hideTabsFromNonTeamAdmin should the user not be allowed to see it\n      {\n        active: false,\n        icon: 'sliders-v-alt',\n        id: `team-settings-${team.id}`,\n        text: 'Settings',\n        url: `org/teams/edit/${team.id}/settings`,\n      },\n    ],\n  };\n\n  // While team is loading we leave the members tab\n  // With RBAC the Members tab is available when user has ActionTeamsPermissionsRead for this team\n  // With Legacy it will always be present\n  if (\n    team === loadingTeam ||\n    contextSrv.hasPermissionInMetadata(AccessControlAction.ActionTeamsPermissionsRead, team)\n  ) {\n    navModel.children!.unshift({\n      active: false,\n      icon: 'users-alt',\n      id: `team-members-${team.id}`,\n      text: 'Members',\n      url: `org/teams/edit/${team.id}/members`,\n    });\n  }\n\n  const teamGroupSync: NavModelItem = {\n    active: false,\n    icon: 'sync',\n    id: `team-groupsync-${team.id}`,\n    text: 'External group sync',\n    url: `org/teams/edit/${team.id}/groupsync`,\n  };\n\n  const isLoadingTeam = team === loadingTeam;\n\n  if (highlightTrial()) {\n    teamGroupSync.tabSuffix = () =>\n      ProBadge({ experimentId: isLoadingTeam ? '' : 'feature-highlights-team-sync-badge', eventVariant: 'trial' });\n  }\n\n  // With both Legacy and RBAC the tab is protected being featureEnabled\n  // While team is loading we leave the teamsync tab\n  // With RBAC the External Group Sync tab is available when user has ActionTeamsPermissionsRead for this team\n  if (featureEnabled('teamsync')) {\n    if (isLoadingTeam || contextSrv.hasPermissionInMetadata(AccessControlAction.ActionTeamsPermissionsRead, team)) {\n      navModel.children!.push(teamGroupSync);\n    }\n  } else if (config.featureToggles.featureHighlights) {\n    navModel.children!.push({\n      ...teamGroupSync,\n      tabSuffix: () => ProBadge({ experimentId: isLoadingTeam ? '' : 'feature-highlights-team-sync-badge' }),\n    });\n  }\n\n  return navModel;\n}\n\nexport function getTeamLoadingNav(pageName: string): NavModel {\n  const main = buildNavModel(loadingTeam);\n\n  let node: NavModelItem;\n\n  // find active page\n  for (const child of main.children!) {\n    if (child.id!.indexOf(pageName) > 0) {\n      child.active = true;\n      node = child;\n      break;\n    }\n  }\n\n  return {\n    main: main,\n    node: node!,\n  };\n}\n","import { User } from 'app/core/services/context_srv';\nimport { Team, TeamsState, TeamState, TeamMember, OrgRole, TeamPermissionLevel } from 'app/types';\n\nexport const getSearchQuery = (state: TeamsState) => state.searchQuery;\nexport const getSearchMemberQuery = (state: TeamState) => state.searchMemberQuery;\nexport const getTeamGroups = (state: TeamState) => state.groups;\nexport const getTeamsCount = (state: TeamsState) => state.teams.length;\nexport const getTeamsSearchPage = (state: TeamsState) => state.searchPage;\n\nexport const getTeam = (state: TeamState, currentTeamId: any): Team | null => {\n  if (state.team.id === parseInt(currentTeamId, 10)) {\n    return state.team;\n  }\n\n  return null;\n};\n\nexport const getTeams = (state: TeamsState) => {\n  const regex = RegExp(state.searchQuery, 'i');\n\n  return state.teams.filter((team) => {\n    return regex.test(team.name);\n  });\n};\n\nexport const getTeamMembers = (state: TeamState) => {\n  const regex = RegExp(state.searchMemberQuery, 'i');\n\n  return state.members.filter((member) => {\n    return regex.test(member.login) || regex.test(member.email) || regex.test(member.name);\n  });\n};\n\nexport interface Config {\n  members: TeamMember[];\n  editorsCanAdmin: boolean;\n  signedInUser: User;\n}\n\nexport const isSignedInUserTeamAdmin = (config: Config): boolean => {\n  const { members, signedInUser, editorsCanAdmin } = config;\n  const userInMembers = members.find((m) => m.userId === signedInUser.id);\n  const permission = userInMembers ? userInMembers.permission : TeamPermissionLevel.Member;\n\n  return isPermissionTeamAdmin({ permission, signedInUser, editorsCanAdmin });\n};\n\nexport interface PermissionConfig {\n  permission: TeamPermissionLevel;\n  editorsCanAdmin: boolean;\n  signedInUser: User;\n}\n\nexport const isPermissionTeamAdmin = (config: PermissionConfig): boolean => {\n  const { permission, signedInUser, editorsCanAdmin } = config;\n  const isAdmin = signedInUser.isGrafanaAdmin || signedInUser.orgRole === OrgRole.Admin;\n  const userIsTeamAdmin = permission === TeamPermissionLevel.Admin;\n  const isSignedInUserTeamAdmin = isAdmin || userIsTeamAdmin;\n\n  return isSignedInUserTeamAdmin || !editorsCanAdmin;\n};\n"],"names":["TeamRolePicker","teamId","roleOptions","disabled","onApplyRoles","pendingRoles","apply","maxWidth","loading","value","appliedRoles","getTeamRoles","useAsyncFn","async","Boolean","length","contextSrv","AccessControlAction","fetchTeamRoles","e","console","error","useEffect","canUpdateRoles","onRolesChange","roles","updateTeamRoles","isLoading","basicRoleDisabled","connectWithCleanUp","mapStateToProps","mapDispatchToProps","cleanupAction","Component","ConnectedComponent","connect","ConnectedComponentWithCleanUp","props","dispatch","useDispatch","cleanUpAction","displayName","hoistNonReactStatics","w3cStandardEmailValidator","highlightTrial","expiry","config","trialExpiry","isTrial","TeamList","PureComponent","constructor","super","team","this","deleteTeam","id","setSearchQuery","teams","offset","searchPage","slice","state","componentDidMount","fetchTeams","fetchRoleOptions","loadTeams","setState","renderTeam","editorsCanAdmin","signedInUser","permission","teamUrl","isTeamAdmin","isPermissionTeamAdmin","canDelete","canReadTeam","canSeeTeamRoles","displayRolePicker","className","href","src","avatarUrl","alt","name","style","padding","email","undefined","memberCount","size","onConfirm","renderEmptyList","title","buttonIcon","buttonLink","buttonTitle","buttonDisabled","proTip","proTipLink","proTipLinkTitle","proTipTarget","renderTeamList","searchQuery","setTeamsSearchPage","teamAdmin","canCreate","newTeamHref","paginatedTeams","getPaginatedTeams","totalPages","Math","ceil","placeholder","onChange","onSearchQueryChange","spacing","width","map","justify","onNavigate","currentPage","numberOfPages","hideWhenSinglePage","renderList","teamsCount","hasFetched","render","navId","getTeams","getSearchQuery","getTeamsSearchPage","getTeamsCount","initialTeamsState","teamsLoaded","response","getBackendSrv","get","accessControlQueryParam","perpage","page","loadTeam","teamLoaded","updateNavIndex","buildNavModel","loadTeamMembers","getStore","teamMembersLoaded","addTeamMember","post","userId","removeTeamMember","delete","updateTeam","put","loadTeamGroups","teamGroupsLoaded","addTeamGroup","groupId","removeTeamGroup","encodeURIComponent","updateTeamMember","member","loadingTeam","TeamPermissionLevel","navModel","img","subTitle","url","text","breadcrumbs","children","active","icon","unshift","teamGroupSync","isLoadingTeam","tabSuffix","ProBadge","experimentId","eventVariant","featureEnabled","push","getTeamLoadingNav","pageName","main","node","child","indexOf","getSearchMemberQuery","searchMemberQuery","getTeamGroups","groups","getTeam","currentTeamId","parseInt","regex","RegExp","filter","test","getTeamMembers","members","login","isSignedInUserTeamAdmin","userInMembers","find","m","isAdmin","isGrafanaAdmin","orgRole","OrgRole","userIsTeamAdmin"],"sourceRoot":""}