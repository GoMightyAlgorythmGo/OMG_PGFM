{"version":3,"file":"testDataDSPlugin.438be5df8d3e89e6c05d.js","mappings":"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AAD,CAAUnD,MAAOmD,EAAG7C,MAAO6C,MAEpByI,GAAa,CACxB,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACApK,KAAK2B,IAAD,CAAUnD,MAAOmD,EAAG7C,MAAO6C,M,sFC/HjC,IAAIe,GAAQ,EAyBL,SAAS4H,KAEd,OADA5H,IAASA,GAAQ6H,KAAKC,MAAsB,EAAhBD,KAAKE,WAAiBC,GAAMxG,OACjDwG,GAAMhI,IAWf,MAAMgI,GAAQ,CACZ,KACA,OACA,MACA,KACA,YACA,KACA,QACA,OACA,cACA,UACA,MACA,aACA,cACA,aACA,WACA,QACA,WACA,OACA,UACA,KACA,OACA,YACA,YACA,OACA,YACA,aACA,MACA,YACA,YACA,OACA,KACA,QACA,MACA,UACA,WACA,WACA,QACA,KACA,MACA,UACA,KACA,UACA,OACA,KACA,QACA,SACA,QACA,UACA,MACA,KACA,WACA,aACA,MACA,SACA,UACA,MACA,SACA,QACA,MACA,WACA,QACA,SACA,QACA,UACA,MACA,QACA,KACA,OACA,SACA,UACA,SACA,WACA,QACA,WACA,YACA,MACA,QACA,QACA,cACA,aACA,QACA,YACA,KACA,MACA,WACA,UACA,MACA,QACA,iBACA,QACA,UACA,KACA,KACA,aACA,cACA,OACA,KACA,YACA,MACA,aACA,SACA,QACA,QACA,MACA,UACA,IACA,WACA,WACA,KACA,MACA,aACA,eACA,UACA,QACA,cACA,MACA,cACA,YACA,aACA,YC5IWC,GAAqC,CAChD5K,KAAM,SACN6K,MAAO,IACPC,OAAQ,IACRC,MAAO,IACPC,MAAO,GAGF,SAASC,GAAU3L,EAAuB4L,GAC/C,MAAMhM,GAAQiM,EAAA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","sources":["webpack://grafana/./public/app/plugins/datasource/testdata/ConfigEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/components/StreamingClientEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/components/RandomWalkEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/components/CSVContentEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/components/CSVFileEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/constants.ts","webpack://grafana/./public/app/plugins/datasource/testdata/components/CSVWaveEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/components/ErrorEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/components/GrafanaLiveEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/components/NodeGraphEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/components/PredictablePulseEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/components/RawFrameEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/components/SimulationSchemaForm.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/components/SimulationQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/components/USAQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/LogIpsum.ts","webpack://grafana/./public/app/plugins/datasource/testdata/runStreams.ts","webpack://grafana/./public/app/plugins/datasource/testdata/QueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/TestInfoTab.tsx","webpack://grafana/./public/app/plugins/datasource/testdata/metricTree.ts","webpack://grafana/./public/app/plugins/datasource/testdata/testData/serviceMapResponse.ts","webpack://grafana/./public/app/plugins/datasource/testdata/nodeGraphUtils.ts","webpack://grafana/./public/app/plugins/datasource/testdata/variables.ts","webpack://grafana/./public/app/plugins/datasource/testdata/datasource.ts","webpack://grafana/./public/app/plugins/datasource/testdata/module.tsx"],"sourcesContent":["// Libraries\nimport React, { PureComponent } from 'react';\n\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\n\ntype Props = DataSourcePluginOptionsEditorProps<any>;\n\n/**\n * Empty Config Editor -- settings to save\n */\nexport class ConfigEditor extends PureComponent<Props> {\n  render() {\n    return <div />;\n  }\n}\n","import React, { ChangeEvent } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { InlineField, InlineFieldRow, Input, Select } from '@grafana/ui';\n\nimport { EditorProps } from '../QueryEditor';\nimport { StreamingQuery } from '../types';\n\nconst streamingClientFields = [\n  { label: 'Speed (ms)', id: 'speed', placeholder: 'value', min: 10, step: 10 },\n  { label: 'Spread', id: 'spread', placeholder: 'value', min: 0.5, step: 0.1 },\n  { label: 'Noise', id: 'noise', placeholder: 'value', min: 0, step: 0.1 },\n  { label: 'Bands', id: 'bands', placeholder: 'bands', min: 0, step: 1 },\n];\n\nconst types = [\n  { value: 'signal', label: 'Signal' },\n  { value: 'logs', label: 'Logs' },\n  { value: 'fetch', label: 'Fetch' },\n];\n\nexport const StreamingClientEditor = ({ onChange, query }: EditorProps) => {\n  const onSelectChange = ({ value }: SelectableValue) => {\n    onChange({ target: { name: 'type', value } });\n  };\n\n  // Convert values to numbers before saving\n  const onInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    onChange({ target: { name, value: Number(value) } });\n  };\n\n  return (\n    <InlineFieldRow>\n      <InlineField label=\"Type\" labelWidth={14}>\n        <Select width={32} onChange={onSelectChange} defaultValue={types[0]} options={types} />\n      </InlineField>\n      {query?.stream?.type === 'signal' &&\n        streamingClientFields.map(({ label, id, min, step, placeholder }) => {\n          return (\n            <InlineField label={label} labelWidth={14} key={id}>\n              <Input\n                width={32}\n                type=\"number\"\n                id={`stream.${id}-${query.refId}`}\n                name={id}\n                min={min}\n                step={step}\n                value={query.stream?.[id as keyof StreamingQuery]}\n                placeholder={placeholder}\n                onChange={onInputChange}\n              />\n            </InlineField>\n          );\n        })}\n\n      {query?.stream?.type === 'fetch' && (\n        <InlineField label=\"URL\" labelWidth={14} grow>\n          <Input\n            type=\"text\"\n            name=\"url\"\n            id={`stream.url-${query.refId}`}\n            value={query?.stream?.url}\n            placeholder=\"Fetch URL\"\n            onChange={onChange}\n          />\n        </InlineField>\n      )}\n    </InlineFieldRow>\n  );\n};\n","import React from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { InlineField, InlineFieldRow, Input } from '@grafana/ui';\n\nimport { EditorProps } from '../QueryEditor';\nimport { TestDataQuery } from '../types';\n\nconst randomWalkFields = [\n  { label: 'Series count', id: 'seriesCount', placeholder: '1', min: 1, step: 1 },\n  { label: 'Start value', id: 'startValue', placeholder: 'auto', step: 1 },\n  { label: 'Min', id: 'min', placeholder: 'none', step: 0.1 },\n  { label: 'Max', id: 'max', placeholder: 'none', step: 0.1 },\n  { label: 'Spread', id: 'spread', placeholder: '1', min: 0.5, step: 0.1 },\n  { label: 'Noise', id: 'noise', placeholder: '0', min: 0, step: 0.1 },\n  {\n    label: 'Drop (%)',\n    id: 'drop',\n    placeholder: '0',\n    min: 0,\n    max: 100,\n    step: 1,\n    tooltip: 'Exclude some percent (chance) points',\n  },\n];\n\nconst testSelectors = selectors.components.DataSource.TestData.QueryTab;\ntype Selector = 'max' | 'min' | 'noise' | 'seriesCount' | 'spread' | 'startValue' | 'drop';\n\nexport const RandomWalkEditor = ({ onChange, query }: EditorProps) => {\n  return (\n    <InlineFieldRow>\n      {randomWalkFields.map(({ label, id, min, step, placeholder, tooltip }) => {\n        const selector = testSelectors?.[id as Selector];\n        return (\n          <InlineField label={label} labelWidth={14} key={id} aria-label={selector} tooltip={tooltip}>\n            <Input\n              width={32}\n              name={id}\n              type=\"number\"\n              id={`randomWalk-${id}-${query.refId}`}\n              min={min}\n              step={step}\n              value={(query as any)[id as keyof TestDataQuery] || placeholder}\n              placeholder={placeholder}\n              onChange={onChange}\n            />\n          </InlineField>\n        );\n      })}\n    </InlineFieldRow>\n  );\n};\n","import React from 'react';\n\nimport { CodeEditor } from '@grafana/ui';\n\nimport { EditorProps } from '../QueryEditor';\n\nexport const CSVContentEditor = ({ onChange, query }: EditorProps) => {\n  const onSaveCSV = (csvContent: string) => {\n    onChange({ ...query, csvContent });\n  };\n\n  return (\n    <CodeEditor\n      height={300}\n      language=\"csv\"\n      value={query.csvContent ?? ''}\n      onBlur={onSaveCSV}\n      onSave={onSaveCSV}\n      showMiniMap={false}\n      showLineNumbers={true}\n    />\n  );\n};\n","import React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { InlineField, InlineFieldRow, Select } from '@grafana/ui';\n\nimport { EditorProps } from '../QueryEditor';\n\nexport const CSVFileEditor = ({ onChange, query }: EditorProps) => {\n  const onChangeFileName = ({ value }: SelectableValue<string>) => {\n    onChange({ ...query, csvFileName: value });\n  };\n\n  const files = [\n    'flight_info_by_state.csv',\n    'population_by_state.csv',\n    'gdp_per_capita.csv',\n    'js_libraries.csv',\n    'ohlc_dogecoin.csv',\n    'weight_height.csv',\n    'browser_marketshare.csv',\n  ].map((name) => ({ label: name, value: name }));\n\n  return (\n    <InlineFieldRow>\n      <InlineField label=\"File\" labelWidth={14}>\n        <Select\n          width={32}\n          onChange={onChangeFileName}\n          placeholder=\"Select csv file\"\n          options={files}\n          value={files.find((f) => f.value === query.csvFileName)}\n        />\n      </InlineField>\n    </InlineFieldRow>\n  );\n};\n","import { CSVWave, TestDataQuery } from './types';\n\nexport const defaultPulseQuery: any = {\n  timeStep: 60,\n  onCount: 3,\n  onValue: 2,\n  offCount: 3,\n  offValue: 1,\n};\n\nexport const defaultCSVWaveQuery: CSVWave[] = [\n  {\n    timeStep: 60,\n    valuesCSV: '0,0,2,2,1,1',\n  },\n];\n\nexport const defaultQuery: TestDataQuery = {\n  scenarioId: 'random_walk',\n  refId: '',\n};\n","import React, { PureComponent, useState } from 'react';\n\nimport { Button, InlineField, InlineFieldRow, Input } from '@grafana/ui';\n\nimport { defaultCSVWaveQuery } from '../constants';\nimport type { CSVWave } from '../types';\n\ninterface WavesProps {\n  waves?: CSVWave[];\n  onChange: (waves: CSVWave[]) => void;\n}\n\ninterface WaveProps {\n  wave: CSVWave;\n  index: number;\n  last: boolean;\n  onChange: (index: number, wave?: CSVWave) => void;\n  onAdd: () => void;\n}\n\nconst CSVWaveEditor = (props: WaveProps) => {\n  const { wave, last, index, onAdd, onChange } = props;\n  const [valuesCSV, setValuesCSV] = useState(wave.valuesCSV || '');\n  const [labels, setLabels] = useState(wave.labels || '');\n  const [name, setName] = useState(wave.name || '');\n  const onAction = () => {\n    if (last) {\n      onAdd();\n    } else {\n      onChange(index, undefined);\n    }\n  };\n  const onValueChange = <K extends keyof CSVWave, V extends CSVWave[K]>(key: K, value: V) => {\n    onChange(index, { ...wave, [key]: value });\n  };\n  const onKeyDown = (evt: React.KeyboardEvent<HTMLInputElement>) => {\n    if (evt.key === 'Enter') {\n      onValueChange('valuesCSV', valuesCSV);\n    }\n  };\n\n  return (\n    <InlineFieldRow>\n      <InlineField\n        label={'Values'}\n        grow\n        tooltip=\"Comma separated values. Each value may be an int, float, or null and must not be empty. Whitespace and trailing commas are removed\"\n      >\n        <Input\n          value={valuesCSV}\n          placeholder={'CSV values'}\n          onChange={(e) => setValuesCSV(e.currentTarget.value)}\n          autoFocus={true}\n          onBlur={() => onValueChange('valuesCSV', valuesCSV)}\n          onKeyDown={onKeyDown}\n        />\n      </InlineField>\n      <InlineField label={'Step'} tooltip=\"The number of seconds between datapoints.\">\n        <Input\n          value={wave.timeStep}\n          type=\"number\"\n          placeholder={'60'}\n          width={10}\n          onChange={(e) => onValueChange('timeStep', e.currentTarget.valueAsNumber)}\n        />\n      </InlineField>\n      <InlineField label={'Name'}>\n        <Input\n          value={name}\n          placeholder={'name'}\n          width={10}\n          onChange={(e) => setName(e.currentTarget.value)}\n          onBlur={() => onValueChange('name', name)}\n        />\n      </InlineField>\n      <InlineField label={'Labels'}>\n        <Input\n          value={labels}\n          placeholder={'labels'}\n          width={12}\n          onChange={(e) => setLabels(e.currentTarget.value)}\n          onBlur={() => onValueChange('labels', labels)}\n        />\n      </InlineField>\n      <Button icon={last ? 'plus' : 'minus'} variant=\"secondary\" onClick={onAction} />\n    </InlineFieldRow>\n  );\n};\n\nexport class CSVWavesEditor extends PureComponent<WavesProps> {\n  onChange = (index: number, wave?: CSVWave) => {\n    let waves = [...(this.props.waves ?? defaultCSVWaveQuery)];\n    if (wave) {\n      waves[index] = { ...wave };\n    } else {\n      // remove the element\n      waves.splice(index, 1);\n    }\n    this.props.onChange(waves);\n  };\n\n  onAdd = () => {\n    const waves = [...(this.props.waves ?? defaultCSVWaveQuery)];\n    waves.push({ ...defaultCSVWaveQuery[0] });\n    this.props.onChange(waves);\n  };\n\n  render() {\n    let waves = this.props.waves ?? defaultCSVWaveQuery;\n    if (!waves.length) {\n      waves = defaultCSVWaveQuery;\n    }\n\n    return (\n      <>\n        {waves.map((wave, index) => (\n          <CSVWaveEditor\n            key={`${index}/${wave.valuesCSV}`}\n            wave={wave}\n            index={index}\n            onAdd={this.onAdd}\n            onChange={this.onChange}\n            last={index === waves.length - 1}\n          />\n        ))}\n      </>\n    );\n  }\n}\n","import React from 'react';\n\nimport { InlineField, InlineFieldRow, Select } from '@grafana/ui';\n\nimport { EditorProps } from '../QueryEditor';\n\nconst ERROR_OPTIONS = [\n  {\n    label: 'Server panic',\n    value: 'server_panic',\n  },\n  {\n    label: 'Frontend exception',\n    value: 'frontend_exception',\n  },\n  {\n    label: 'Frontend observable',\n    value: 'frontend_observable',\n  },\n];\n\nconst FrontendErrorQueryEditor: React.FC<EditorProps> = ({ query, onChange }) => {\n  return (\n    <InlineFieldRow>\n      <InlineField labelWidth={14} label=\"Error type\">\n        <Select\n          options={ERROR_OPTIONS}\n          value={query.errorType}\n          onChange={(v) => {\n            onChange({ ...query, errorType: v.value });\n          }}\n        />\n      </InlineField>\n    </InlineFieldRow>\n  );\n};\n\nexport default FrontendErrorQueryEditor;\n","import React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { InlineField, InlineFieldRow, Select } from '@grafana/ui';\n\nimport { EditorProps } from '../QueryEditor';\n\nconst liveTestDataChannels = [\n  {\n    label: 'random-2s-stream',\n    value: 'random-2s-stream',\n    description: 'Random stream with points every 2s',\n  },\n  {\n    label: 'random-flakey-stream',\n    value: 'random-flakey-stream',\n    description: 'Stream that returns data in random intervals',\n  },\n  {\n    label: 'random-labeled-stream',\n    value: 'random-labeled-stream',\n    description: 'Value with moving labels',\n  },\n  {\n    label: 'random-20Hz-stream',\n    value: 'random-20Hz-stream',\n    description: 'Random stream with points in 20Hz',\n  },\n];\n\nexport const GrafanaLiveEditor = ({ onChange, query }: EditorProps) => {\n  const onChannelChange = ({ value }: SelectableValue<string>) => {\n    onChange({ ...query, channel: value });\n  };\n\n  return (\n    <InlineFieldRow>\n      <InlineField label=\"Channel\" labelWidth={14}>\n        <Select\n          width={32}\n          onChange={onChannelChange}\n          placeholder=\"Select channel\"\n          options={liveTestDataChannels}\n          value={liveTestDataChannels.find((f) => f.value === query.channel)}\n        />\n      </InlineField>\n    </InlineFieldRow>\n  );\n};\n","import React from 'react';\n\nimport { Input, InlineFieldRow, InlineField, Select } from '@grafana/ui';\n\nimport { NodesQuery, TestDataQuery } from '../types';\n\nexport interface Props {\n  onChange: (value: NodesQuery) => void;\n  query: TestDataQuery;\n}\nexport function NodeGraphEditor({ query, onChange }: Props) {\n  const type = query.nodes?.type || 'random';\n  return (\n    <InlineFieldRow>\n      <InlineField label=\"Data type\" labelWidth={14}>\n        <Select<NodesQuery['type']>\n          options={options.map((o) => ({\n            label: o,\n            value: o,\n          }))}\n          value={options.find((item) => item === type)}\n          onChange={(value) => onChange({ ...query.nodes, type: value.value! })}\n          width={32}\n        />\n      </InlineField>\n      {type === 'random' && (\n        <InlineField label=\"Count\" labelWidth={14}>\n          <Input\n            type=\"number\"\n            name=\"count\"\n            value={query.nodes?.count}\n            width={32}\n            onChange={(e) =>\n              onChange({ ...query.nodes, count: e.currentTarget.value ? parseInt(e.currentTarget.value, 10) : 0 })\n            }\n            placeholder=\"10\"\n          />\n        </InlineField>\n      )}\n    </InlineFieldRow>\n  );\n}\n\nconst options: Array<NodesQuery['type']> = ['random', 'response'];\n","import React, { ChangeEvent } from 'react';\n\nimport { InlineField, InlineFieldRow, Input } from '@grafana/ui';\n\nimport { EditorProps } from '../QueryEditor';\nimport { PulseWaveQuery } from '../types';\n\nconst fields = [\n  { label: 'Step', id: 'timeStep', placeholder: '60', tooltip: 'The number of seconds between datapoints.' },\n  {\n    label: 'On Count',\n    id: 'onCount',\n    placeholder: '3',\n    tooltip: 'The number of values within a cycle, at the start of the cycle, that should have the onValue.',\n  },\n  { label: 'Off Count', id: 'offCount', placeholder: '6', tooltip: 'The number of offValues within the cycle.' },\n  {\n    label: 'On Value',\n    id: 'onValue',\n    placeholder: '1',\n    tooltip: 'The value for \"on values\", may be an int, float, or null.',\n  },\n  {\n    label: 'Off Value',\n    id: 'offValue',\n    placeholder: '1',\n    tooltip: 'The value for \"off values\", may be a int, float, or null.',\n  },\n];\n\nexport const PredictablePulseEditor = ({ onChange, query }: EditorProps) => {\n  // Convert values to numbers before saving\n  const onInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n\n    onChange({ target: { name, value: Number(value) } });\n  };\n\n  return (\n    <InlineFieldRow>\n      {fields.map(({ label, id, placeholder, tooltip }) => {\n        return (\n          <InlineField label={label} labelWidth={14} key={id} tooltip={tooltip}>\n            <Input\n              width={32}\n              type=\"number\"\n              name={id}\n              id={`pulseWave.${id}-${query.refId}`}\n              value={query.pulseWave?.[id as keyof PulseWaveQuery]}\n              placeholder={placeholder}\n              onChange={onInputChange}\n            />\n          </InlineField>\n        );\n      })}\n    </InlineFieldRow>\n  );\n};\n","import { isArray } from 'lodash';\nimport React, { useState } from 'react';\n\nimport { dataFrameToJSON, toDataFrame, toDataFrameDTO } from '@grafana/data';\nimport { toDataQueryResponse } from '@grafana/runtime';\nimport { Alert, CodeEditor } from '@grafana/ui';\n\nimport { EditorProps } from '../QueryEditor';\n\nexport const RawFrameEditor = ({ onChange, query }: EditorProps) => {\n  const [error, setError] = useState<string>();\n  const [warning, setWarning] = useState<string>();\n\n  const onSaveFrames = (rawFrameContent: string) => {\n    try {\n      const json = JSON.parse(rawFrameContent);\n      if (isArray(json)) {\n        setError(undefined);\n        setWarning(undefined);\n        onChange({ ...query, rawFrameContent });\n        return;\n      }\n\n      let data: any = undefined;\n\n      // Copy paste from panel json\n      if (isArray(json.series) && json.state) {\n        data = json.series.map((v: any) => toDataFrameDTO(toDataFrame(v)));\n      } else {\n        // Chek if it is a copy of the raw resuls\n        const v = toDataQueryResponse({ data: json });\n        if (v.data?.length && !v.error) {\n          data = v.data.map((f) => dataFrameToJSON(f));\n        }\n      }\n\n      if (data) {\n        console.log('Original', json);\n        console.log('Save', data);\n        setError(undefined);\n        setWarning('Converted to direct frame result');\n        onChange({ ...query, rawFrameContent: JSON.stringify(data, null, 2) });\n        return;\n      }\n\n      setError('Unable to read dataframes in text');\n    } catch (e) {\n      console.log('Error parsing json', e);\n      setError('Enter JSON array of data frames (or raw query results body)');\n      setWarning(undefined);\n    }\n  };\n\n  return (\n    <>\n      {error && <Alert title={error} severity=\"error\" />}\n      {warning && <Alert title={warning} severity=\"warning\" />}\n      <CodeEditor\n        height={300}\n        language=\"json\"\n        value={query.rawFrameContent ?? '[]'}\n        onBlur={onSaveFrames}\n        onSave={onSaveFrames}\n        showMiniMap={true}\n        showLineNumbers={true}\n      />\n    </>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { FormEvent, useState, ChangeEvent } from 'react';\n\nimport { DataFrameSchema, FieldSchema, GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2, TextArea, InlineField, Input, FieldSet, InlineSwitch } from '@grafana/ui';\n\ninterface SchemaFormProps {\n  config: Record<string, any>;\n  schema: DataFrameSchema;\n  onChange: (config: Record<string, any>) => void;\n}\n\nconst renderInput = (field: FieldSchema, onChange: SchemaFormProps['onChange'], config: SchemaFormProps['config']) => {\n  switch (field.type) {\n    case 'number':\n      return (\n        <Input\n          type=\"number\"\n          defaultValue={config?.[field.name]}\n          onChange={(e: FormEvent<HTMLInputElement>) => {\n            const newValue = e.currentTarget.valueAsNumber;\n            onChange({ ...config, [field.name]: newValue });\n          }}\n        />\n      );\n    case 'boolean':\n      return (\n        <InlineSwitch\n          value={config?.[field.name] ?? true}\n          onChange={() => {\n            onChange({ ...config, [field.name]: !config[field.name] });\n          }}\n        />\n      );\n    default:\n      return (\n        <Input\n          type=\"string\"\n          value={config?.[field.name]}\n          onChange={(e: ChangeEvent<HTMLInputElement>) => {\n            const newValue = e.target.value;\n            onChange({ ...config, [field.name]: newValue });\n          }}\n        />\n      );\n  }\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    jsonView: css`\n      margin-bottom: ${theme.spacing(1)};\n    `,\n  };\n};\n\nexport const SimulationSchemaForm = ({ config, schema, onChange }: SchemaFormProps) => {\n  const [jsonView, setJsonView] = useState<boolean>(false);\n\n  const styles = useStyles2(getStyles);\n\n  const onUpdateTextArea = (event: FormEvent<HTMLTextAreaElement>) => {\n    const element = event.target as HTMLInputElement;\n    onChange(JSON.parse(element.value));\n  };\n\n  return (\n    <FieldSet label=\"Config\">\n      <InlineSwitch\n        className={styles.jsonView}\n        label=\"JSON View\"\n        showLabel\n        value={jsonView}\n        onChange={() => setJsonView(!jsonView)}\n      />\n      {jsonView ? (\n        <TextArea defaultValue={JSON.stringify(config, null, 2)} rows={7} onChange={onUpdateTextArea} />\n      ) : (\n        <>\n          {schema.fields.map((field) => (\n            <InlineField label={field.name} key={field.name} labelWidth={14}>\n              {renderInput(field, onChange, config)}\n            </InlineField>\n          ))}\n        </>\n      )}\n    </FieldSet>\n  );\n};\n","import React, { FormEvent, useMemo, useState } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { DataFrameJSON, SelectableValue } from '@grafana/data';\nimport { InlineField, InlineFieldRow, InlineSwitch, Input, Label, Select } from '@grafana/ui';\n\nimport { EditorProps } from '../QueryEditor';\nimport { SimulationQuery } from '../types';\n\nimport { SimulationSchemaForm } from './SimulationSchemaForm';\n\n// Type         string      `json:\"type\"`\n// Name         string      `json:\"name\"`\n// Description  string      `json:\"description\"`\n// OnlyForward  bool        `json:\"forward\"`\n// ConfigFields *data.Frame `json:\"config\"`\n\ninterface SimInfo {\n  type: string;\n  name: string;\n  description: string;\n  forward: boolean;\n  config: DataFrameJSON;\n}\n\nexport const SimulationQueryEditor = ({ onChange, query, ds }: EditorProps) => {\n  const simQuery = query.sim ?? ({} as SimulationQuery);\n  const simKey = simQuery.key ?? ({} as typeof simQuery.key);\n  // keep track of updated config state to pass down to form\n  const [cfgValue, setCfgValue] = useState<Record<string, any>>({});\n\n  // This only changes once\n  const info = useAsync(async () => {\n    const v = (await ds.getResource('sims')) as SimInfo[];\n    return {\n      sims: v,\n      options: v.map((s) => ({ label: s.name, value: s.type, description: s.description })),\n    };\n  }, [ds]);\n\n  const current = useMemo(() => {\n    const type = simKey.type;\n    if (!type || !info.value) {\n      return {};\n    }\n    return {\n      details: info.value.sims.find((v) => v.type === type),\n      option: info.value.options.find((v) => v.value === type),\n    };\n  }, [info.value, simKey?.type]);\n\n  let config = useAsync(async () => {\n    let path = simKey.type + '/' + simKey.tick + 'hz';\n    if (simKey.uid) {\n      path += '/' + simKey.uid;\n    }\n    let config = (await ds.getResource('sim/' + path))?.config;\n    setCfgValue(config.value);\n    return config;\n  }, [simKey.type, simKey.tick, simKey.uid]);\n\n  const onUpdateKey = (key: typeof simQuery.key) => {\n    onChange({ ...query, sim: { ...simQuery, key } });\n  };\n\n  const onUIDChanged = (e: FormEvent<HTMLInputElement>) => {\n    const { value } = e.target as HTMLInputElement;\n    onUpdateKey({ ...simKey, uid: value ?? undefined });\n  };\n\n  const onTickChanged = (e: FormEvent<HTMLInputElement>) => {\n    const tick = e.currentTarget.valueAsNumber;\n    onUpdateKey({ ...simKey, tick });\n  };\n\n  const onTypeChange = (v: SelectableValue<string>) => {\n    onUpdateKey({ ...simKey, type: v.value! });\n  };\n\n  const onToggleStream = () => {\n    onChange({ ...query, sim: { ...simQuery, stream: !simQuery.stream } });\n  };\n\n  const onToggleLast = () => {\n    onChange({ ...query, sim: { ...simQuery, last: !simQuery.last } });\n  };\n\n  const onSchemaFormChange = (config: Record<string, any>) => {\n    let path = simKey.type + '/' + simKey.tick + 'hz';\n    if (simKey.uid) {\n      path += '/' + simKey.uid;\n    }\n    ds.postResource('sim/' + path, config).then((res) => {\n      setCfgValue(res.config);\n    });\n  };\n  return (\n    <>\n      <InlineFieldRow>\n        <InlineField labelWidth={14} label=\"Simulation\" tooltip=\"\">\n          <Select\n            isLoading={info.loading}\n            options={info.value?.options ?? []}\n            value={current.option}\n            onChange={onTypeChange}\n            width={32}\n          />\n        </InlineField>\n      </InlineFieldRow>\n      <InlineFieldRow>\n        <InlineField labelWidth={14} label=\"Stream\" tooltip=\"connect to the live channel\">\n          <InlineSwitch value={Boolean(simQuery.stream)} onChange={onToggleStream} />\n        </InlineField>\n\n        <InlineField label=\"Interval\" tooltip=\"the rate a simulation will spit out events\">\n          <Input\n            width={10}\n            type=\"number\"\n            value={simKey.tick}\n            onChange={onTickChanged}\n            min={1 / 10}\n            max={50}\n            suffix=\"hz\"\n          />\n        </InlineField>\n\n        <InlineField label=\"Last\" tooltip=\"Only return the last value\">\n          <Label>\n            <InlineSwitch value={Boolean(simQuery.last)} onChange={onToggleLast} />\n          </Label>\n        </InlineField>\n        <InlineField label=\"UID\" tooltip=\"A UID will allow multiple simulations to run at the same time\">\n          <Input type=\"text\" placeholder=\"optional\" value={simQuery.key.uid} onChange={onUIDChanged} />\n        </InlineField>\n      </InlineFieldRow>\n      <SimulationSchemaForm\n        onChange={onSchemaFormChange}\n        config={cfgValue ?? config.value}\n        schema={current.details?.config.schema ?? { fields: [] }}\n      />\n    </>\n  );\n};\n","import React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { InlineFieldRow, InlineField, Select, MultiSelect, Input } from '@grafana/ui';\n\nimport { USAQuery } from '../types';\n\nexport interface Props {\n  onChange: (value: USAQuery) => void;\n  query: USAQuery;\n}\n\nexport function USAQueryEditor({ query, onChange }: Props) {\n  return (\n    <>\n      <InlineFieldRow>\n        <InlineField labelWidth={14} label=\"Mode\">\n          <Select\n            options={usaQueryModes}\n            onChange={(v) => {\n              onChange({ ...query, mode: v.value });\n            }}\n            width={32}\n            value={usaQueryModes.find((ep) => ep.value === query.mode)}\n          />\n        </InlineField>\n        <InlineField label=\"Period\">\n          <Input\n            value={query.period}\n            placeholder={'30m'}\n            onChange={(v) => {\n              onChange({ ...query, period: v.currentTarget.value });\n            }}\n          />\n        </InlineField>\n      </InlineFieldRow>\n      <InlineFieldRow>\n        <InlineField labelWidth={14} label=\"Fields\">\n          <MultiSelect\n            options={fieldNames}\n            onChange={(vals: SelectableValue[]) => {\n              onChange({ ...query, fields: vals.map((v) => v.value) });\n            }}\n            width={32}\n            placeholder=\"all\"\n            value={query.fields}\n          />\n        </InlineField>\n        <InlineField label=\"States\" grow>\n          <MultiSelect\n            options={stateNames}\n            onChange={(vals: SelectableValue[]) => {\n              onChange({ ...query, states: vals.map((v) => v.value) });\n            }}\n            placeholder=\"all\"\n            value={query.states}\n          />\n        </InlineField>\n      </InlineFieldRow>\n    </>\n  );\n}\n\nexport const usaQueryModes = [\n  'values-as-rows',\n  'values-as-fields',\n  'values-as-labeled-fields',\n  'timeseries',\n  'timeseries-wide',\n].map((f) => ({ label: f, value: f }));\n\nexport const fieldNames = [\n  'foo',\n  'bar',\n  'baz', // all short\n].map((f) => ({ label: f, value: f }));\n\nexport const stateNames = [\n  'AL',\n  'AK',\n  'AZ',\n  'AR',\n  'CA',\n  'CO',\n  'CT',\n  'DE',\n  'DC',\n  'FL',\n  'GA',\n  'HI',\n  'ID',\n  'IL',\n  'IN',\n  'IA',\n  'KS',\n  'KY',\n  'LA',\n  'ME',\n  'MT',\n  'NE',\n  'NV',\n  'NH',\n  'NJ',\n  'NM',\n  'NY',\n  'NC',\n  'ND',\n  'OH',\n  'OK',\n  'OR',\n  'MD',\n  'MA',\n  'MI',\n  'MN',\n  'MS',\n  'MO',\n  'PA',\n  'RI',\n  'SC',\n  'SD',\n  'TN',\n  'TX',\n  'UT',\n  'VT',\n  'VA',\n  'WA',\n  'WV',\n  'WI',\n  'WY',\n].map((f) => ({ label: f, value: f }));\n","import { LogLevel } from '@grafana/data';\n\nlet index = 0;\n\nexport function getRandomLogLevel(): LogLevel {\n  const v = Math.random();\n  if (v > 0.9) {\n    return LogLevel.critical;\n  }\n  if (v > 0.8) {\n    return LogLevel.error;\n  }\n  if (v > 0.7) {\n    return LogLevel.warning;\n  }\n  if (v > 0.4) {\n    return LogLevel.info;\n  }\n  if (v > 0.3) {\n    return LogLevel.debug;\n  }\n  if (v > 0.1) {\n    return LogLevel.trace;\n  }\n  return LogLevel.unknown;\n}\n\nexport function getNextWord() {\n  index = (index + Math.floor(Math.random() * 5)) % words.length;\n  return words[index];\n}\n\nexport function getRandomLine(length = 60) {\n  let line = getNextWord();\n  while (line.length < length) {\n    line += ' ' + getNextWord();\n  }\n  return line;\n}\n\nconst words = [\n  'At',\n  'vero',\n  'eos',\n  'et',\n  'accusamus',\n  'et',\n  'iusto',\n  'odio',\n  'dignissimos',\n  'ducimus',\n  'qui',\n  'blanditiis',\n  'praesentium',\n  'voluptatum',\n  'deleniti',\n  'atque',\n  'corrupti',\n  'quos',\n  'dolores',\n  'et',\n  'quas',\n  'molestias',\n  'excepturi',\n  'sint',\n  'occaecati',\n  'cupiditate',\n  'non',\n  'provident',\n  'similique',\n  'sunt',\n  'in',\n  'culpa',\n  'qui',\n  'officia',\n  'deserunt',\n  'mollitia',\n  'animi',\n  'id',\n  'est',\n  'laborum',\n  'et',\n  'dolorum',\n  'fuga',\n  'Et',\n  'harum',\n  'quidem',\n  'rerum',\n  'facilis',\n  'est',\n  'et',\n  'expedita',\n  'distinctio',\n  'Nam',\n  'libero',\n  'tempore',\n  'cum',\n  'soluta',\n  'nobis',\n  'est',\n  'eligendi',\n  'optio',\n  'cumque',\n  'nihil',\n  'impedit',\n  'quo',\n  'minus',\n  'id',\n  'quod',\n  'maxime',\n  'placeat',\n  'facere',\n  'possimus',\n  'omnis',\n  'voluptas',\n  'assumenda',\n  'est',\n  'omnis',\n  'dolor',\n  'repellendus',\n  'Temporibus',\n  'autem',\n  'quibusdam',\n  'et',\n  'aut',\n  'officiis',\n  'debitis',\n  'aut',\n  'rerum',\n  'necessitatibus',\n  'saepe',\n  'eveniet',\n  'ut',\n  'et',\n  'voluptates',\n  'repudiandae',\n  'sint',\n  'et',\n  'molestiae',\n  'non',\n  'recusandae',\n  'Itaque',\n  'earum',\n  'rerum',\n  'hic',\n  'tenetur',\n  'a',\n  'sapiente',\n  'delectus',\n  'ut',\n  'aut',\n  'reiciendis',\n  'voluptatibus',\n  'maiores',\n  'alias',\n  'consequatur',\n  'aut',\n  'perferendis',\n  'doloribus',\n  'asperiores',\n  'repellat',\n];\n","import { defaults } from 'lodash';\nimport { Observable } from 'rxjs';\n\nimport {\n  DataQueryRequest,\n  DataQueryResponse,\n  FieldType,\n  CircularDataFrame,\n  CSVReader,\n  Field,\n  LoadingState,\n  DataFrameSchema,\n  DataFrameData,\n} from '@grafana/data';\nimport { liveTimer } from 'app/features/dashboard/dashgrid/liveTimer';\nimport { StreamingDataFrame } from 'app/features/live/data/StreamingDataFrame';\n\nimport { getRandomLine } from './LogIpsum';\nimport { TestDataQuery, StreamingQuery } from './types';\n\nexport const defaultStreamQuery: StreamingQuery = {\n  type: 'signal',\n  speed: 250, // ms\n  spread: 3.5,\n  noise: 2.2,\n  bands: 1,\n};\n\nexport function runStream(target: TestDataQuery, req: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n  const query = defaults(target.stream, defaultStreamQuery);\n  if ('signal' === query.type) {\n    return runSignalStream(target, query, req);\n  }\n  if ('logs' === query.type) {\n    return runLogsStream(target, query, req);\n  }\n  if ('fetch' === query.type) {\n    return runFetchStream(target, query, req);\n  }\n  throw new Error(`Unknown Stream Type: ${query.type}`);\n}\n\nexport function runSignalStream(\n  target: TestDataQuery,\n  query: StreamingQuery,\n  req: DataQueryRequest<TestDataQuery>\n): Observable<DataQueryResponse> {\n  return new Observable<DataQueryResponse>((subscriber) => {\n    const streamId = `signal-${req.panelId}-${target.refId}`;\n    const maxDataPoints = req.maxDataPoints || 1000;\n\n    const schema: DataFrameSchema = {\n      refId: target.refId,\n      fields: [\n        { name: 'time', type: FieldType.time },\n        { name: target.alias ?? 'value', type: FieldType.number },\n      ],\n    };\n\n    const { spread, speed, bands = 0, noise } = query;\n    for (let i = 0; i < bands; i++) {\n      const suffix = bands > 1 ? ` ${i + 1}` : '';\n      schema.fields.push({ name: 'Min' + suffix, type: FieldType.number });\n      schema.fields.push({ name: 'Max' + suffix, type: FieldType.number });\n    }\n\n    const frame = StreamingDataFrame.fromDataFrameJSON({ schema }, { maxLength: maxDataPoints });\n\n    let value = Math.random() * 100;\n    let timeoutId: any = null;\n    let lastSent = -1;\n\n    const addNextRow = (time: number) => {\n      value += (Math.random() - 0.5) * spread;\n\n      const data: DataFrameData = {\n        values: [[time], [value]],\n      };\n\n      let min = value;\n      let max = value;\n\n      for (let i = 0; i < bands; i++) {\n        min = min - Math.random() * noise;\n        max = max + Math.random() * noise;\n\n        data.values.push([min]);\n        data.values.push([max]);\n      }\n\n      const event = { data };\n      return frame.push(event);\n    };\n\n    // Fill the buffer on init\n    if (true) {\n      let time = Date.now() - maxDataPoints * speed;\n      for (let i = 0; i < maxDataPoints; i++) {\n        addNextRow(time);\n        time += speed;\n      }\n    }\n\n    const pushNextEvent = () => {\n      addNextRow(Date.now());\n\n      const elapsed = liveTimer.lastUpdate - lastSent;\n      if (elapsed > 1000 || liveTimer.ok) {\n        subscriber.next({\n          data: [frame],\n          key: streamId,\n          state: LoadingState.Streaming,\n        });\n        lastSent = liveTimer.lastUpdate;\n      }\n\n      timeoutId = setTimeout(pushNextEvent, speed);\n    };\n\n    // Send first event in 5ms\n    setTimeout(pushNextEvent, 5);\n\n    return () => {\n      console.log('unsubscribing to stream ' + streamId);\n      clearTimeout(timeoutId);\n    };\n  });\n}\n\nexport function runLogsStream(\n  target: TestDataQuery,\n  query: StreamingQuery,\n  req: DataQueryRequest<TestDataQuery>\n): Observable<DataQueryResponse> {\n  return new Observable<DataQueryResponse>((subscriber) => {\n    const streamId = `logs-${req.panelId}-${target.refId}`;\n    const maxDataPoints = req.maxDataPoints || 1000;\n\n    const data = new CircularDataFrame({\n      append: 'tail',\n      capacity: maxDataPoints,\n    });\n    data.refId = target.refId;\n    data.name = target.alias || 'Logs ' + target.refId;\n    data.addField({ name: 'line', type: FieldType.string });\n    data.addField({ name: 'time', type: FieldType.time });\n    data.meta = { preferredVisualisationType: 'logs' };\n\n    const { speed } = query;\n\n    let timeoutId: any = null;\n\n    const pushNextEvent = () => {\n      data.fields[0].values.add(Date.now());\n      data.fields[1].values.add(getRandomLine());\n\n      subscriber.next({\n        data: [data],\n        key: streamId,\n      });\n\n      timeoutId = setTimeout(pushNextEvent, speed);\n    };\n\n    // Send first event in 5ms\n    setTimeout(pushNextEvent, 5);\n\n    return () => {\n      console.log('unsubscribing to stream ' + streamId);\n      clearTimeout(timeoutId);\n    };\n  });\n}\n\nexport function runFetchStream(\n  target: TestDataQuery,\n  query: StreamingQuery,\n  req: DataQueryRequest<TestDataQuery>\n): Observable<DataQueryResponse> {\n  return new Observable<DataQueryResponse>((subscriber) => {\n    const streamId = `fetch-${req.panelId}-${target.refId}`;\n    const maxDataPoints = req.maxDataPoints || 1000;\n\n    let data = new CircularDataFrame({\n      append: 'tail',\n      capacity: maxDataPoints,\n    });\n    data.refId = target.refId;\n    data.name = target.alias || 'Fetch ' + target.refId;\n\n    let reader: ReadableStreamReader<Uint8Array>;\n    const csv = new CSVReader({\n      callback: {\n        onHeader: (fields: Field[]) => {\n          // Clear any existing fields\n          if (data.fields.length) {\n            data = new CircularDataFrame({\n              append: 'tail',\n              capacity: maxDataPoints,\n            });\n            data.refId = target.refId;\n            data.name = 'Fetch ' + target.refId;\n          }\n          for (const field of fields) {\n            data.addField(field);\n          }\n        },\n        onRow: (row: any[]) => {\n          data.add(row);\n        },\n      },\n    });\n\n    const processChunk = (value: ReadableStreamReadResult<Uint8Array>): any => {\n      if (value.value) {\n        const text = new TextDecoder().decode(value.value);\n        csv.readCSV(text);\n      }\n\n      subscriber.next({\n        data: [data],\n        key: streamId,\n        state: value.done ? LoadingState.Done : LoadingState.Streaming,\n      });\n\n      if (value.done) {\n        console.log('Finished stream');\n        subscriber.complete(); // necessary?\n        return;\n      }\n\n      return reader.read().then(processChunk);\n    };\n\n    if (!query.url) {\n      throw new Error('query.url is not defined');\n    }\n\n    fetch(new Request(query.url)).then((response) => {\n      if (response.body) {\n        reader = response.body.getReader();\n        reader.read().then(processChunk);\n      }\n    });\n\n    return () => {\n      // Cancel fetch?\n      console.log('unsubscribing to stream ' + streamId);\n    };\n  });\n}\n","import React, { ChangeEvent, FormEvent, useMemo } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { QueryEditorProps, SelectableValue } from '@grafana/data';\nimport { selectors as editorSelectors } from '@grafana/e2e-selectors';\nimport { InlineField, InlineFieldRow, InlineSwitch, Input, Select, TextArea } from '@grafana/ui';\n\nimport { RandomWalkEditor, StreamingClientEditor } from './components';\nimport { CSVContentEditor } from './components/CSVContentEditor';\nimport { CSVFileEditor } from './components/CSVFileEditor';\nimport { CSVWavesEditor } from './components/CSVWaveEditor';\nimport ErrorEditor from './components/ErrorEditor';\nimport { GrafanaLiveEditor } from './components/GrafanaLiveEditor';\nimport { NodeGraphEditor } from './components/NodeGraphEditor';\nimport { PredictablePulseEditor } from './components/PredictablePulseEditor';\nimport { RawFrameEditor } from './components/RawFrameEditor';\nimport { SimulationQueryEditor } from './components/SimulationQueryEditor';\nimport { USAQueryEditor, usaQueryModes } from './components/USAQueryEditor';\nimport { defaultCSVWaveQuery, defaultPulseQuery, defaultQuery } from './constants';\nimport { TestDataDataSource } from './datasource';\nimport { defaultStreamQuery } from './runStreams';\nimport { CSVWave, NodesQuery, TestDataQuery, USAQuery } from './types';\n\nconst showLabelsFor = ['random_walk', 'predictable_pulse'];\nconst endpoints = [\n  { value: 'datasources', label: 'Data Sources' },\n  { value: 'search', label: 'Search' },\n  { value: 'annotations', label: 'Annotations' },\n];\n\nconst selectors = editorSelectors.components.DataSource.TestData.QueryTab;\n\nexport interface EditorProps {\n  onChange: (value: any) => void;\n  query: TestDataQuery;\n  ds: TestDataDataSource;\n}\n\nexport type Props = QueryEditorProps<TestDataDataSource, TestDataQuery>;\n\nexport const QueryEditor = ({ query, datasource, onChange, onRunQuery }: Props) => {\n  query = { ...defaultQuery, ...query };\n\n  const { loading, value: scenarioList } = useAsync(async () => {\n    // migrate manual_entry (unusable since 7, removed in 8)\n    if (query.scenarioId === 'manual_entry' && (query as any).points) {\n      let csvContent = 'Time,Value\\n';\n      for (const point of (query as any).points) {\n        csvContent += `${point[1]},${point[0]}\\n`;\n      }\n      onChange({\n        refId: query.refId,\n        datasource: query.datasource,\n        scenarioId: 'csv_content',\n        csvContent,\n      });\n    }\n\n    const vals = await datasource.getScenarios();\n    const hideAlias = ['simulation'];\n    return vals.map((v) => ({\n      ...v,\n      hideAliasField: hideAlias.includes(v.id),\n    }));\n  }, []);\n\n  const onUpdate = (query: TestDataQuery) => {\n    onChange(query);\n    onRunQuery();\n  };\n\n  const currentScenario = useMemo(\n    () => scenarioList?.find((scenario) => scenario.id === query.scenarioId),\n    [scenarioList, query]\n  );\n  const scenarioId = currentScenario?.id;\n  const description = currentScenario?.description;\n\n  const onScenarioChange = (item: SelectableValue<string>) => {\n    const scenario = scenarioList?.find((sc) => sc.id === item.value);\n\n    if (!scenario) {\n      return;\n    }\n\n    // Clear model from existing props that belong to other scenarios\n    const update: TestDataQuery = {\n      scenarioId: item.value!,\n      refId: query.refId,\n      alias: query.alias,\n      datasource: query.datasource,\n    };\n\n    if (scenario.stringInput) {\n      update.stringInput = scenario.stringInput;\n    }\n\n    switch (scenario.id) {\n      case 'grafana_api':\n        update.stringInput = 'datasources';\n        break;\n      case 'streaming_client':\n        update.stream = defaultStreamQuery;\n        break;\n      case 'live':\n        update.channel = 'random-2s-stream'; // default stream\n        break;\n      case 'simulation':\n        update.sim = { key: { type: 'flight', tick: 10 } }; // default stream\n        break;\n      case 'predictable_pulse':\n        update.pulseWave = defaultPulseQuery;\n        break;\n      case 'predictable_csv_wave':\n        update.csvWave = defaultCSVWaveQuery;\n        break;\n      case 'usa':\n        update.usa = {\n          mode: usaQueryModes[0].value,\n        };\n    }\n\n    onUpdate(update);\n  };\n\n  const onInputChange = (e: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value, type } = e.target as HTMLInputElement | HTMLTextAreaElement;\n    let newValue: any = value;\n\n    if (type === 'number') {\n      newValue = Number(value);\n    }\n\n    if (name === 'levelColumn') {\n      newValue = (e.target as HTMLInputElement).checked;\n    }\n\n    onUpdate({ ...query, [name]: newValue });\n  };\n\n  const onFieldChange = (field: string) => (e: ChangeEvent<HTMLInputElement>) => {\n    const { name, value, type } = e.target as HTMLInputElement;\n    let newValue: any = value;\n\n    if (type === 'number') {\n      newValue = Number(value);\n    }\n\n    onUpdate({ ...query, [field]: { ...(query as any)[field], [name]: newValue } });\n  };\n\n  const onEndPointChange = ({ value }: SelectableValue) => {\n    onUpdate({ ...query, stringInput: value });\n  };\n\n  const onStreamClientChange = onFieldChange('stream');\n  const onPulseWaveChange = onFieldChange('pulseWave');\n  const onUSAStatsChange = (usa?: USAQuery) => {\n    onUpdate({ ...query, usa });\n  };\n\n  const onCSVWaveChange = (csvWave?: CSVWave[]) => {\n    onUpdate({ ...query, csvWave });\n  };\n\n  const options = useMemo(\n    () =>\n      (scenarioList || [])\n        .map((item) => ({ label: item.name, value: item.id }))\n        .sort((a, b) => a.label.localeCompare(b.label)),\n    [scenarioList]\n  );\n  const showLabels = useMemo(() => showLabelsFor.includes(query.scenarioId ?? ''), [query]);\n\n  if (loading) {\n    return null;\n  }\n\n  return (\n    <>\n      <InlineFieldRow aria-label={selectors.scenarioSelectContainer}>\n        <InlineField labelWidth={14} label=\"Scenario\">\n          <Select\n            inputId={`test-data-scenario-select-${query.refId}`}\n            options={options}\n            value={options.find((item) => item.value === query.scenarioId)}\n            onChange={onScenarioChange}\n            width={32}\n          />\n        </InlineField>\n        {currentScenario?.stringInput && (\n          <InlineField label=\"String Input\">\n            <Input\n              width={32}\n              id={`stringInput-${query.refId}`}\n              name=\"stringInput\"\n              placeholder={query.stringInput}\n              value={query.stringInput}\n              onChange={onInputChange}\n            />\n          </InlineField>\n        )}\n        {Boolean(!currentScenario?.hideAliasField) && (\n          <InlineField label=\"Alias\" labelWidth={14}>\n            <Input\n              width={32}\n              id={`alias-${query.refId}`}\n              type=\"text\"\n              placeholder=\"optional\"\n              pattern='[^<>&\\\\\"]+'\n              name=\"alias\"\n              value={query.alias}\n              onChange={onInputChange}\n            />\n          </InlineField>\n        )}\n        {showLabels && (\n          <InlineField\n            label=\"Labels\"\n            labelWidth={14}\n            tooltip={\n              <>\n                Set labels using a key=value syntax:\n                <br />\n                {`{ key = \"value\", key2 = \"value\" }`}\n                <br />\n                key=&quot;value&quot;, key2=&quot;value&quot;\n                <br />\n                key=value, key2=value\n                <br />\n              </>\n            }\n          >\n            <Input\n              width={32}\n              id={`labels-${query.refId}`}\n              name=\"labels\"\n              onChange={onInputChange}\n              value={query?.labels}\n              placeholder=\"key=value, key2=value2\"\n            />\n          </InlineField>\n        )}\n      </InlineFieldRow>\n\n      {scenarioId === 'random_walk' && <RandomWalkEditor onChange={onInputChange} query={query} ds={datasource} />}\n      {scenarioId === 'streaming_client' && (\n        <StreamingClientEditor onChange={onStreamClientChange} query={query} ds={datasource} />\n      )}\n      {scenarioId === 'live' && <GrafanaLiveEditor onChange={onUpdate} query={query} ds={datasource} />}\n      {scenarioId === 'simulation' && <SimulationQueryEditor onChange={onUpdate} query={query} ds={datasource} />}\n      {scenarioId === 'raw_frame' && <RawFrameEditor onChange={onUpdate} query={query} ds={datasource} />}\n      {scenarioId === 'csv_file' && <CSVFileEditor onChange={onUpdate} query={query} ds={datasource} />}\n      {scenarioId === 'csv_content' && <CSVContentEditor onChange={onUpdate} query={query} ds={datasource} />}\n      {scenarioId === 'logs' && (\n        <InlineFieldRow>\n          <InlineField label=\"Lines\" labelWidth={14}>\n            <Input\n              type=\"number\"\n              name=\"lines\"\n              value={query.lines}\n              width={32}\n              onChange={onInputChange}\n              placeholder=\"10\"\n            />\n          </InlineField>\n          <InlineField label=\"Level\" labelWidth={14}>\n            <InlineSwitch onChange={onInputChange} name=\"levelColumn\" value={!!query.levelColumn} />\n          </InlineField>\n        </InlineFieldRow>\n      )}\n\n      {scenarioId === 'usa' && <USAQueryEditor onChange={onUSAStatsChange} query={query.usa ?? {}} />}\n      {scenarioId === 'grafana_api' && (\n        <InlineField labelWidth={14} label=\"Endpoint\">\n          <Select\n            options={endpoints}\n            onChange={onEndPointChange}\n            width={32}\n            value={endpoints.find((ep) => ep.value === query.stringInput)}\n          />\n        </InlineField>\n      )}\n\n      {scenarioId === 'arrow' && (\n        <InlineField grow>\n          <TextArea\n            name=\"stringInput\"\n            value={query.stringInput}\n            rows={10}\n            placeholder=\"Copy base64 text data from query result\"\n            onChange={onInputChange}\n          />\n        </InlineField>\n      )}\n\n      {scenarioId === 'predictable_pulse' && (\n        <PredictablePulseEditor onChange={onPulseWaveChange} query={query} ds={datasource} />\n      )}\n      {scenarioId === 'predictable_csv_wave' && <CSVWavesEditor onChange={onCSVWaveChange} waves={query.csvWave} />}\n      {scenarioId === 'node_graph' && (\n        <NodeGraphEditor onChange={(val: NodesQuery) => onChange({ ...query, nodes: val })} query={query} />\n      )}\n      {scenarioId === 'server_error_500' && <ErrorEditor onChange={onUpdate} query={query} ds={datasource} />}\n\n      {description && <p>{description}</p>}\n    </>\n  );\n};\n","// Libraries\nimport React, { PureComponent } from 'react';\n\nimport { PluginConfigPageProps, DataSourcePluginMeta, DataSourceJsonData } from '@grafana/data';\nimport { LinkButton } from '@grafana/ui';\n\n// Types\n\ninterface Props extends PluginConfigPageProps<DataSourcePluginMeta<DataSourceJsonData>> {}\n\nexport class TestInfoTab extends PureComponent<Props> {\n  constructor(props: Props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div>\n        See github for more information about setting up a reproducible test environment.\n        <br />\n        <br />\n        <LinkButton\n          variant=\"secondary\"\n          href=\"https://github.com/grafana/grafana/tree/main/devenv\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          GitHub\n        </LinkButton>\n        <br />\n      </div>\n    );\n  }\n}\n","export interface TreeNode {\n  name: string;\n  children: TreeNode[];\n}\n\n/*\n *  Builds a nested tree like\n *  [\n *    {\n *      name: 'A',\n *      children: [\n *        { name: 'AA', children: [] },\n *        { name: 'AB', children: [] },\n *      ]\n *    }\n *  ]\n */\nfunction buildMetricTree(parent: string, depth: number): TreeNode[] {\n  const chars = ['A', 'B', 'C'];\n  const children: TreeNode[] = [];\n\n  if (depth > 5) {\n    return [];\n  }\n\n  for (const letter of chars) {\n    const nodeName = `${parent}${letter}`;\n    children.push({\n      name: nodeName,\n      children: buildMetricTree(nodeName, depth + 1),\n    });\n  }\n\n  return children;\n}\n\nfunction queryTree(children: TreeNode[], query: string[], queryIndex: number): TreeNode[] {\n  if (queryIndex >= query.length) {\n    return children;\n  }\n\n  if (query[queryIndex] === '*') {\n    return children;\n  }\n\n  const nodeQuery = query[queryIndex];\n  let result: TreeNode[] = [];\n  let namesToMatch = [nodeQuery];\n\n  // handle glob queries\n  if (nodeQuery.startsWith('{')) {\n    namesToMatch = nodeQuery.replace(/\\{|\\}/g, '').split(',');\n  }\n\n  for (const node of children) {\n    for (const nameToMatch of namesToMatch) {\n      if (nameToMatch.indexOf('*') !== -1) {\n        const pattern = nameToMatch.replace('*', '');\n        const regex = new RegExp(`^${pattern}.*`, 'gi');\n        if (regex.test(node.name)) {\n          result = result.concat(queryTree([node], query, queryIndex + 1));\n        }\n      } else if (node.name === nameToMatch) {\n        result = result.concat(queryTree(node.children, query, queryIndex + 1));\n      }\n    }\n  }\n\n  return result;\n}\n\nexport function queryMetricTree(query: string): TreeNode[] {\n  if (query.indexOf('value') === 0) {\n    return [{ name: query, children: [] }];\n  }\n\n  const children = buildMetricTree('', 0);\n  return queryTree(children, query.split('.'), 0);\n}\n","import { FieldColorModeId, FieldType, PreferredVisualisationType, NodeGraphDataFrameFieldNames } from '@grafana/data';\n\nexport const nodes = {\n  fields: [\n    {\n      name: NodeGraphDataFrameFieldNames.id,\n      type: FieldType.string,\n      config: {\n        links: [\n          {\n            title: 'Traces/All',\n            url: '',\n            internal: {\n              query: {\n                queryType: 'getTraceSummaries',\n                query: 'service(id(name: \"${__data.fields.name}\", type: \"${__data.fields.type}\"))',\n              },\n              datasourceUid: 'Ax4erxHGz',\n              datasourceName: 'Trace data source',\n            },\n          },\n          {\n            title: 'Traces/OK',\n            url: '',\n            internal: {\n              query: {\n                queryType: 'getTraceSummaries',\n                query: 'service(id(name: \"${__data.fields.name}\", type: \"${__data.fields.type}\")) { ok = true }',\n              },\n              datasourceUid: 'Ax4erxHGz',\n              datasourceName: 'Trace data source',\n            },\n          },\n          {\n            title: 'Traces/Errors',\n            url: '',\n            internal: {\n              query: {\n                queryType: 'getTraceSummaries',\n                query: 'service(id(name: \"${__data.fields.name}\", type: \"${__data.fields.type}\")) { error = true }',\n              },\n              datasourceUid: 'Ax4erxHGz',\n              datasourceName: 'Trace data source',\n            },\n          },\n          {\n            title: 'Traces/Faults',\n            url: '',\n            internal: {\n              query: {\n                queryType: 'getTraceSummaries',\n                query: 'service(id(name: \"${__data.fields.name}\", type: \"${__data.fields.type}\")) { fault = true }',\n              },\n              datasourceUid: 'Ax4erxHGz',\n              datasourceName: 'Trace data source',\n            },\n          },\n        ],\n      },\n      values: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.title,\n      type: FieldType.string,\n      config: { displayName: 'Name' },\n      values: [\n        'auth',\n        'products',\n        'customers',\n        'orders',\n        'products',\n        'orders',\n        'api',\n        'shipping',\n        'orders',\n        'execute-api',\n        'shipping',\n        'www',\n        'api',\n        'www',\n        'products',\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.subTitle,\n      type: FieldType.string,\n      config: { displayName: 'Type' },\n      values: [\n        'Compute',\n        'SQL',\n        'SQL',\n        'SQL',\n        'remote',\n        'Function',\n        'Compute',\n        'Function',\n        'Function',\n        'remote',\n        'Function',\n        'Compute',\n        'client',\n        'client',\n        'Compute',\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.mainStat,\n      type: FieldType.number,\n      config: { unit: 'ms/t', displayName: 'Average response time' },\n      values: [\n        3.5394042646735553, 15.906441318223264, 4.913011921591567, 7.4163203042094095, 1092, 22.85961441405067,\n        56.135855729084696, 4.45946191601527, 12.818300278280843, 4.25, 12.565442646791492, 77.63447512700567,\n        40.387096774193544, 77.63447512700567, 27.648950187374872,\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.secondaryStat,\n      type: FieldType.number,\n      config: { unit: 't/min', displayName: 'Transactions per minute' },\n      values: [\n        50.56317154501667, 682.4, 512.8416666666667, 125.64444444444445, 0.005585812037424941, 137.59722222222223,\n        300.0527777777778, 30.582348853370394, 125.77222222222223, 0.028706417080318163, 30.582348853370394, 165.675,\n        0.100021510002151, 165.675, 162.33055555555555,\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.arc + 'success',\n      type: FieldType.number,\n      config: { color: { mode: FieldColorModeId.Fixed, fixedColor: 'green' }, displayName: 'Sucesss' },\n      values: [\n        0.9338865684765882, 1, 1, 1, 0.5, 1, 0.9901128505170387, 0.9069260134520997, 1, 0, 0.9069260134520997,\n        0.9624432037288534, 0, 0.9624432037288534, 0.9824945669843769,\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.arc + 'faults',\n      type: FieldType.number,\n      config: { color: { mode: FieldColorModeId.Fixed, fixedColor: 'red' }, displayName: 'Faults' },\n      values: [\n        0, 0, 0, 0, 0.5, 0, 0.009479813736472288, 0, 0, 0, 0, 0.017168821152524185, 0, 0.017168821152524185,\n        0.01750543301562313,\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.arc + 'errors',\n      type: FieldType.number,\n      config: { color: { mode: FieldColorModeId.Fixed, fixedColor: 'semi-dark-yellow' }, displayName: 'Errors' },\n      values: [\n        0.06611343152341174, 0, 0, 0, 0, 0, 0.0004073357464890436, 0.09307398654790038, 0, 1, 0.09307398654790038,\n        0.02038797511862247, 1, 0.02038797511862247, 0,\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.arc + 'throttled',\n      type: FieldType.number,\n      config: { color: { mode: FieldColorModeId.Fixed, fixedColor: 'purple' }, displayName: 'Throttled' },\n      values: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    },\n  ],\n  meta: { preferredVisualisationType: 'nodeGraph' as PreferredVisualisationType },\n  name: 'nodes',\n};\n\nexport const edges = {\n  fields: [\n    {\n      name: NodeGraphDataFrameFieldNames.id,\n      type: FieldType.string,\n      config: {\n        links: [\n          {\n            title: 'Traces/All',\n            url: '',\n            internal: {\n              query: {\n                queryType: 'getTraceSummaries',\n                query: 'edge(\"${__data.fields.sourceName}\", \"${__data.fields.targetName}\")',\n              },\n              datasourceUid: 'Ax4erxHGz',\n              datasourceName: 'Trace data source',\n            },\n          },\n          {\n            title: 'Traces/OK',\n            url: '',\n            internal: {\n              query: {\n                queryType: 'getTraceSummaries',\n                query: 'edge(\"${__data.fields.sourceName}\", \"${__data.fields.targetName}\") { ok = true }',\n              },\n              datasourceUid: 'Ax4erxHGz',\n              datasourceName: 'Trace data source',\n            },\n          },\n          {\n            title: 'Traces/Errors',\n            url: '',\n            internal: {\n              query: {\n                queryType: 'getTraceSummaries',\n                query: 'edge(\"${__data.fields.sourceName}\", \"${__data.fields.targetName}\") { error = true }',\n              },\n              datasourceUid: 'Ax4erxHGz',\n              datasourceName: 'Trace data source',\n            },\n          },\n          {\n            title: 'Traces/Faults',\n            url: '',\n            internal: {\n              query: {\n                queryType: 'getTraceSummaries',\n                query: 'edge(\"${__data.fields.sourceName}\", \"${__data.fields.targetName}\") { fault = true }',\n              },\n              datasourceUid: 'Ax4erxHGz',\n              datasourceName: 'Trace data source',\n            },\n          },\n        ],\n      },\n      values: [\n        '0__2',\n        '5__8',\n        '6__0',\n        '6__5',\n        '6__9',\n        '6__2',\n        '6__14',\n        '6__4',\n        '8__3',\n        '10__7',\n        '11__0',\n        '11__6',\n        '12__6',\n        '13__11',\n        '14__1',\n        '14__2',\n        '14__10',\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.source,\n      type: FieldType.string,\n      config: {},\n      values: [0, 5, 6, 6, 6, 6, 6, 6, 8, 10, 11, 11, 12, 13, 14, 14, 14],\n    },\n    {\n      name: 'sourceName',\n      type: FieldType.string,\n      config: {},\n      values: [\n        'auth',\n        'orders',\n        'api',\n        'api',\n        'api',\n        'api',\n        'api',\n        'api',\n        'orders',\n        'shipping',\n        'www',\n        'www',\n        'api',\n        'www',\n        'products',\n        'products',\n        'products',\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.target,\n      type: FieldType.string,\n      config: {},\n      values: [2, 8, 0, 5, 9, 2, 14, 4, 3, 7, 0, 6, 6, 11, 1, 2, 10],\n    },\n    {\n      name: 'targetName',\n      type: FieldType.string,\n      config: {},\n      values: [\n        'customers',\n        'orders',\n        'auth',\n        'orders',\n        'execute-api',\n        'customers',\n        'products',\n        'products',\n        'orders',\n        'shipping',\n        'auth',\n        'api',\n        'api',\n        'www',\n        'products',\n        'customers',\n        'shipping',\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.mainStat,\n      type: FieldType.string,\n      config: { displayName: 'Response percentage' },\n      values: [\n        'Success 100.00%',\n        'Success 100.00%',\n        'Success 100.00%',\n        'Success 100.00%',\n        'Errors 100.00%',\n        'Success 100.00%',\n        'Faults 1.75%',\n        'Faults 50.00%',\n        'Success 100.00%',\n        'Errors 9.31%',\n        'Errors 6.62%',\n        'Faults 1.13%',\n        'Errors 100.00%',\n        'Faults 1.72%',\n        'Success 100.00%',\n        'Success 100.00%',\n        'Faults 9.30%',\n      ],\n    },\n    {\n      name: NodeGraphDataFrameFieldNames.secondaryStat,\n      type: FieldType.number,\n      config: { unit: 't/min', displayName: 'Transactions per minute' },\n      values: [\n        50.56317154501667, 125.77222222222223, 0.03333333333333333, 137.59722222222223, 0.022222222222222223,\n        299.96666666666664, 162.33055555555555, 0.005555555555555556, 125.64444444444445, 30.582348853370394,\n        50.51111111111111, 299.9166666666667, 0.100021510002151, 165.675, 682.4, 162.33055555555555, 30.558333333333334,\n      ],\n    },\n  ],\n  meta: { preferredVisualisationType: 'nodeGraph' as PreferredVisualisationType },\n  name: 'edges',\n};\n","import {\n  ArrayVector,\n  FieldColorModeId,\n  FieldDTO,\n  FieldType,\n  MutableDataFrame,\n  NodeGraphDataFrameFieldNames,\n} from '@grafana/data';\n\nimport { nodes, edges } from './testData/serviceMapResponse';\n\nexport function generateRandomNodes(count = 10) {\n  const nodes = [];\n\n  const root = {\n    id: '0',\n    title: 'root',\n    subTitle: 'client',\n    success: 1,\n    error: 0,\n    stat1: Math.random(),\n    stat2: Math.random(),\n    edges: [] as any[],\n  };\n  nodes.push(root);\n  const nodesWithoutMaxEdges = [root];\n\n  const maxEdges = 3;\n\n  for (let i = 1; i < count; i++) {\n    const node = makeRandomNode(i);\n    nodes.push(node);\n    const sourceIndex = Math.floor(Math.random() * Math.floor(nodesWithoutMaxEdges.length - 1));\n    const source = nodesWithoutMaxEdges[sourceIndex];\n    source.edges.push(node.id);\n    if (source.edges.length >= maxEdges) {\n      nodesWithoutMaxEdges.splice(sourceIndex, 1);\n    }\n    nodesWithoutMaxEdges.push(node);\n  }\n\n  // Add some random edges to create possible cycle\n  const additionalEdges = Math.floor(count / 2);\n  for (let i = 0; i <= additionalEdges; i++) {\n    const sourceIndex = Math.floor(Math.random() * Math.floor(nodes.length - 1));\n    const targetIndex = Math.floor(Math.random() * Math.floor(nodes.length - 1));\n    if (sourceIndex === targetIndex || nodes[sourceIndex].id === '0' || nodes[sourceIndex].id === '0') {\n      continue;\n    }\n\n    nodes[sourceIndex].edges.push(nodes[sourceIndex].id);\n  }\n\n  const nodeFields: Record<string, Omit<FieldDTO, 'name'> & { values: ArrayVector }> = {\n    [NodeGraphDataFrameFieldNames.id]: {\n      values: new ArrayVector(),\n      type: FieldType.string,\n      config: {\n        links: [\n          {\n            title: 'test data link',\n            url: '',\n            internal: {\n              query: { scenarioId: 'logs', alias: 'from service graph', stringInput: 'tes' },\n              datasourceUid: 'gdev-testdata',\n              datasourceName: 'gdev-testdata',\n            },\n          },\n        ],\n      },\n    },\n    [NodeGraphDataFrameFieldNames.title]: {\n      values: new ArrayVector(),\n      type: FieldType.string,\n    },\n    [NodeGraphDataFrameFieldNames.subTitle]: {\n      values: new ArrayVector(),\n      type: FieldType.string,\n    },\n    [NodeGraphDataFrameFieldNames.mainStat]: {\n      values: new ArrayVector(),\n      type: FieldType.number,\n      config: { displayName: 'Transactions per second' },\n    },\n    [NodeGraphDataFrameFieldNames.secondaryStat]: {\n      values: new ArrayVector(),\n      type: FieldType.number,\n      config: { displayName: 'Average duration' },\n    },\n    [NodeGraphDataFrameFieldNames.arc + 'success']: {\n      values: new ArrayVector(),\n      type: FieldType.number,\n      config: { color: { fixedColor: 'green', mode: FieldColorModeId.Fixed }, displayName: 'Success' },\n    },\n    [NodeGraphDataFrameFieldNames.arc + 'errors']: {\n      values: new ArrayVector(),\n      type: FieldType.number,\n      config: { color: { fixedColor: 'red', mode: FieldColorModeId.Fixed }, displayName: 'Errors' },\n    },\n  };\n\n  const nodeFrame = new MutableDataFrame({\n    name: 'nodes',\n    fields: Object.keys(nodeFields).map((key) => ({\n      ...nodeFields[key],\n      name: key,\n    })),\n    meta: { preferredVisualisationType: 'nodeGraph' },\n  });\n\n  const edgeFields: any = {\n    [NodeGraphDataFrameFieldNames.id]: {\n      values: new ArrayVector(),\n      type: FieldType.string,\n    },\n    [NodeGraphDataFrameFieldNames.source]: {\n      values: new ArrayVector(),\n      type: FieldType.string,\n    },\n    [NodeGraphDataFrameFieldNames.target]: {\n      values: new ArrayVector(),\n      type: FieldType.string,\n    },\n  };\n\n  const edgesFrame = new MutableDataFrame({\n    name: 'edges',\n    fields: Object.keys(edgeFields).map((key) => ({\n      ...edgeFields[key],\n      name: key,\n    })),\n    meta: { preferredVisualisationType: 'nodeGraph' },\n  });\n\n  const edgesSet = new Set();\n  for (const node of nodes) {\n    nodeFields.id.values.add(node.id);\n    nodeFields.title.values.add(node.title);\n    nodeFields[NodeGraphDataFrameFieldNames.subTitle].values.add(node.subTitle);\n    nodeFields[NodeGraphDataFrameFieldNames.mainStat].values.add(node.stat1);\n    nodeFields[NodeGraphDataFrameFieldNames.secondaryStat].values.add(node.stat2);\n    nodeFields.arc__success.values.add(node.success);\n    nodeFields.arc__errors.values.add(node.error);\n    for (const edge of node.edges) {\n      const id = `${node.id}--${edge}`;\n      // We can have duplicate edges when we added some more by random\n      if (edgesSet.has(id)) {\n        continue;\n      }\n      edgesSet.add(id);\n      edgeFields.id.values.add(`${node.id}--${edge}`);\n      edgeFields.source.values.add(node.id);\n      edgeFields.target.values.add(edge);\n    }\n  }\n\n  return [nodeFrame, edgesFrame];\n}\n\nfunction makeRandomNode(index: number) {\n  const success = Math.random();\n  const error = 1 - success;\n  return {\n    id: index.toString(),\n    title: `service:${index}`,\n    subTitle: 'service',\n    success,\n    error,\n    stat1: Math.random(),\n    stat2: Math.random(),\n    edges: [],\n  };\n}\n\nexport function savedNodesResponse(): any {\n  return [new MutableDataFrame(nodes), new MutableDataFrame(edges)];\n}\n","import { StandardVariableQuery, StandardVariableSupport } from '@grafana/data';\n\nimport { TestDataDataSource } from './datasource';\nimport { TestDataQuery } from './types';\n\nexport class TestDataVariableSupport extends StandardVariableSupport<TestDataDataSource> {\n  toDataQuery(query: StandardVariableQuery): TestDataQuery {\n    return {\n      refId: 'TestDataDataSource-QueryVariable',\n      stringInput: query.query,\n      scenarioId: 'variables-query',\n      csvWave: undefined,\n    };\n  }\n}\n","import { from, merge, Observable, of, throwError } from 'rxjs';\nimport { delay } from 'rxjs/operators';\n\nimport {\n  AnnotationEvent,\n  ArrayDataFrame,\n  DataFrame,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n  DataTopic,\n  LiveChannelScope,\n  LoadingState,\n  TimeRange,\n  ScopedVars,\n  toDataFrame,\n} from '@grafana/data';\nimport { DataSourceWithBackend, getBackendSrv, getGrafanaLiveSrv, getTemplateSrv, TemplateSrv } from '@grafana/runtime';\nimport { getSearchFilterScopedVar } from 'app/features/variables/utils';\n\nimport { queryMetricTree } from './metricTree';\nimport { generateRandomNodes, savedNodesResponse } from './nodeGraphUtils';\nimport { runStream } from './runStreams';\nimport { Scenario, TestDataQuery } from './types';\nimport { TestDataVariableSupport } from './variables';\n\nexport class TestDataDataSource extends DataSourceWithBackend<TestDataQuery> {\n  scenariosCache?: Promise<Scenario[]>;\n\n  constructor(\n    instanceSettings: DataSourceInstanceSettings,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv()\n  ) {\n    super(instanceSettings);\n    this.variables = new TestDataVariableSupport();\n  }\n\n  query(options: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n    const backendQueries: TestDataQuery[] = [];\n    const streams: Array<Observable<DataQueryResponse>> = [];\n\n    // Start streams and prepare queries\n    for (const target of options.targets) {\n      if (target.hide) {\n        continue;\n      }\n\n      this.resolveTemplateVariables(target, options.scopedVars);\n\n      switch (target.scenarioId) {\n        case 'live':\n          streams.push(runGrafanaLiveQuery(target, options));\n          break;\n        case 'streaming_client':\n          streams.push(runStream(target, options));\n          break;\n        case 'grafana_api':\n          streams.push(runGrafanaAPI(target, options));\n          break;\n        case 'annotations':\n          streams.push(this.annotationDataTopicTest(target, options));\n          break;\n        case 'variables-query':\n          streams.push(this.variablesQuery(target, options));\n          break;\n        case 'node_graph':\n          streams.push(this.nodesQuery(target, options));\n          break;\n        case 'raw_frame':\n          streams.push(this.rawFrameQuery(target, options));\n          break;\n        case 'server_error_500':\n          // this now has an option where it can return/throw an error from the frontend.\n          // if it doesn't, send it to the backend where it might panic there :)\n          const query = this.serverErrorQuery(target, options);\n          query ? streams.push(query) : backendQueries.push(target);\n          break;\n        // Unusable since 7, removed in 8\n        case 'manual_entry': {\n          let csvContent = 'Time,Value\\n';\n          if ((target as any).points) {\n            for (const point of (target as any).points) {\n              csvContent += `${point[1]},${point[0]}\\n`;\n            }\n          }\n          target.scenarioId = 'csv_content';\n          target.csvContent = csvContent;\n        }\n\n        default:\n          backendQueries.push(target);\n      }\n    }\n\n    if (backendQueries.length) {\n      const backendOpts = {\n        ...options,\n        targets: backendQueries,\n      };\n      streams.push(super.query(backendOpts));\n    }\n\n    if (streams.length === 0) {\n      return of({ data: [] });\n    }\n\n    return merge(...streams);\n  }\n\n  resolveTemplateVariables(query: TestDataQuery, scopedVars: ScopedVars) {\n    if (query.labels) {\n      query.labels = this.templateSrv.replace(query.labels, scopedVars);\n    }\n    if (query.alias) {\n      query.alias = this.templateSrv.replace(query.alias, scopedVars);\n    }\n    if (query.scenarioId) {\n      query.scenarioId = this.templateSrv.replace(query.scenarioId, scopedVars);\n    }\n    if (query.stringInput) {\n      query.stringInput = this.templateSrv.replace(query.stringInput, scopedVars);\n    }\n    if (query.csvContent) {\n      query.csvContent = this.templateSrv.replace(query.csvContent, scopedVars);\n    }\n    if (query.rawFrameContent) {\n      query.rawFrameContent = this.templateSrv.replace(query.rawFrameContent, scopedVars);\n    }\n  }\n\n  annotationDataTopicTest(target: TestDataQuery, req: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n    const events = this.buildFakeAnnotationEvents(req.range, 50);\n    const dataFrame = new ArrayDataFrame(events);\n    dataFrame.meta = { dataTopic: DataTopic.Annotations };\n\n    return of({ key: target.refId, data: [dataFrame] }).pipe(delay(100));\n  }\n\n  buildFakeAnnotationEvents(range: TimeRange, count: number): AnnotationEvent[] {\n    let timeWalker = range.from.valueOf();\n    const to = range.to.valueOf();\n    const events = [];\n    const step = (to - timeWalker) / count;\n\n    for (let i = 0; i < count; i++) {\n      events.push({\n        time: timeWalker,\n        text: 'This is the text, <a href=\"https://grafana.com\">Grafana.com</a>',\n        tags: ['text', 'server'],\n      });\n      timeWalker += step;\n    }\n\n    return events;\n  }\n\n  annotationQuery(options: any) {\n    return Promise.resolve(this.buildFakeAnnotationEvents(options.range, 10));\n  }\n\n  getQueryDisplayText(query: TestDataQuery) {\n    const scenario = query.scenarioId ?? 'Default scenario';\n\n    if (query.alias) {\n      return scenario + ' as ' + query.alias;\n    }\n\n    return scenario;\n  }\n\n  testDatasource() {\n    return Promise.resolve({\n      status: 'success',\n      message: 'Data source is working',\n    });\n  }\n\n  getScenarios(): Promise<Scenario[]> {\n    if (!this.scenariosCache) {\n      this.scenariosCache = this.getResource('scenarios');\n    }\n\n    return this.scenariosCache;\n  }\n\n  variablesQuery(target: TestDataQuery, options: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n    const query = target.stringInput ?? '';\n    const interpolatedQuery = this.templateSrv.replace(\n      query,\n      getSearchFilterScopedVar({ query, wildcardChar: '*', options: options.scopedVars })\n    );\n    const children = queryMetricTree(interpolatedQuery);\n    const items = children.map((item) => ({ value: item.name, text: item.name }));\n    const dataFrame = new ArrayDataFrame(items);\n\n    return of({ data: [dataFrame] }).pipe(delay(100));\n  }\n\n  nodesQuery(target: TestDataQuery, options: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n    const type = target.nodes?.type || 'random';\n    let frames: DataFrame[];\n    switch (type) {\n      case 'random':\n        frames = generateRandomNodes(target.nodes?.count);\n        break;\n      case 'response':\n        frames = savedNodesResponse();\n        break;\n      default:\n        throw new Error(`Unknown node_graph sub type ${type}`);\n    }\n\n    return of({ data: frames }).pipe(delay(100));\n  }\n\n  rawFrameQuery(target: TestDataQuery, options: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n    try {\n      const data = JSON.parse(target.rawFrameContent ?? '[]').map((v: any) => {\n        const f = toDataFrame(v);\n        f.refId = target.refId;\n        return f;\n      });\n      return of({ data, state: LoadingState.Done }).pipe(delay(100));\n    } catch (ex) {\n      return of({\n        data: [],\n        error: ex instanceof Error ? ex : new Error('Unkown error'),\n      }).pipe(delay(100));\n    }\n  }\n\n  serverErrorQuery(\n    target: TestDataQuery,\n    options: DataQueryRequest<TestDataQuery>\n  ): Observable<DataQueryResponse> | null {\n    const { errorType } = target;\n\n    if (errorType === 'server_panic') {\n      return null;\n    }\n\n    const stringInput = target.stringInput ?? '';\n    if (stringInput === '') {\n      if (errorType === 'frontend_exception') {\n        throw new Error('Scenario threw an exception in the frontend because the input was empty.');\n      } else {\n        return throwError(() => new Error('Scenario returned an error because the input was empty.'));\n      }\n    }\n\n    return null;\n  }\n}\n\nfunction runGrafanaAPI(target: TestDataQuery, req: DataQueryRequest<TestDataQuery>): Observable<DataQueryResponse> {\n  const url = `/api/${target.stringInput}`;\n  return from(\n    getBackendSrv()\n      .get(url)\n      .then((res) => {\n        const frame = new ArrayDataFrame(res);\n        return {\n          state: LoadingState.Done,\n          data: [frame],\n        };\n      })\n  );\n}\n\nlet liveQueryCounter = 1000;\n\nfunction runGrafanaLiveQuery(\n  target: TestDataQuery,\n  req: DataQueryRequest<TestDataQuery>\n): Observable<DataQueryResponse> {\n  if (!target.channel) {\n    throw new Error(`Missing channel config`);\n  }\n  return getGrafanaLiveSrv().getDataStream({\n    addr: {\n      scope: LiveChannelScope.Plugin,\n      namespace: 'testdata',\n      path: target.channel,\n    },\n    key: `testStream.${liveQueryCounter++}`,\n  });\n}\n","import { DataSourcePlugin } from '@grafana/data';\n\nimport { ConfigEditor } from './ConfigEditor';\nimport { QueryEditor } from './QueryEditor';\nimport { TestInfoTab } from './TestInfoTab';\nimport { TestDataDataSource } from './datasource';\n\nclass TestDataAnnotationsQueryCtrl {\n  annotation: any;\n  constructor() {}\n  static template = '<h2>Annotation scenario</h2>';\n}\n\nexport const plugin = new DataSourcePlugin(TestDataDataSource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor)\n  .setAnnotationQueryCtrl(TestDataAnnotationsQueryCtrl)\n  .addConfigPage({\n    title: 'Setup',\n    icon: 'list-ul',\n    body: TestInfoTab,\n    id: 'setup',\n  });\n"],"names":["ConfigEditor","PureComponent","render","streamingClientFields","label","id","placeholder","min","step","types","value","StreamingClientEditor","onChange","query","onInputChange","e","name","target","Number","InlineFieldRow","InlineField","labelWidth","Select","width","defaultValue","options","stream","type","map","Input","I","refId","grow","url","randomWalkFields","max","tooltip","testSelectors","selectors","RandomWalkEditor","selector","CSVContentEditor","onSaveCSV","csvContent","CodeEditor","height","language","onBlur","onSave","showMiniMap","showLineNumbers","CSVFileEditor","files","csvFileName","find","f","defaultPulseQuery","timeStep","onCount","onValue","offCount","offValue","defaultCSVWaveQuery","valuesCSV","defaultQuery","scenarioId","CSVWaveEditor","props","wave","last","index","onAdd","setValuesCSV","useState","labels","setLabels","setName","onValueChange","key","currentTarget","autoFocus","onKeyDown","evt","valueAsNumber","Button","icon","variant","onClick","undefined","CSVWavesEditor","waves","this","splice","push","length","ERROR_OPTIONS","errorType","v","liveTestDataChannels","description","GrafanaLiveEditor","channel","NodeGraphEditor","nodes","o","item","count","parseInt","fields","PredictablePulseEditor","pulseWave","RawFrameEditor","error","setError","warning","setWarning","onSaveFrames","rawFrameContent","json","JSON","parse","isArray","data","series","state","toDataFrameDTO","toDataFrame","toDataQueryResponse","dataFrameToJSON","console","log","stringify","Alert","title","severity","renderInput","field","config","newValue","getStyles","theme","jsonView","css","spacing","SimulationSchemaForm","schema","setJsonView","styles","useStyles2","FieldSet","className","showLabel","TextArea","rows","event","element","SimulationQueryEditor","ds","simQuery","sim","simKey","cfgValue","setCfgValue","info","useAsync","async","getResource","sims","s","current","useMemo","details","option","path","tick","uid","onUpdateKey","isLoading","loading","Boolean","suffix","Label","postResource","then","res","USAQueryEditor","usaQueryModes","mode","ep","period","fieldNames","vals","stateNames","states","getNextWord","Math","floor","random","words","defaultStreamQuery","speed","spread","noise","bands","runStream","req","defaults","Observable","subscriber","streamId","panelId","maxDataPoints","FieldType","alias","i","frame","StreamingDataFrame","maxLength","timeoutId","lastSent","addNextRow","time","values","Date","now","pushNextEvent","liveTimer","next","LoadingState","setTimeout","clearTimeout","runSignalStream","CircularDataFrame","append","capacity","addField","meta","preferredVisualisationType","add","line","getRandomLine","runLogsStream","reader","csv","CSVReader","callback","onHeader","onRow","row","processChunk","text","TextDecoder","decode","readCSV","done","complete","read","Error","fetch","Request","response","body","getReader","runFetchStream","showLabelsFor","endpoints","editorSelectors","TestInfoTab","constructor","super","href","rel","buildMetricTree","parent","depth","chars","children","letter","nodeName","queryTree","queryIndex","nodeQuery","result","namesToMatch","startsWith","replace","split","node","nameToMatch","indexOf","pattern","RegExp","test","concat","queryMetricTree","NodeGraphDataFrameFieldNames","links","internal","queryType","datasourceUid","datasourceName","displayName","unit","color","FieldColorModeId","fixedColor","edges","makeRandomNode","success","toString","subTitle","stat1","stat2","TestDataVariableSupport","StandardVariableSupport","toDataQuery","stringInput","csvWave","TestDataDataSource","DataSourceWithBackend","instanceSettings","templateSrv","getTemplateSrv","variables","backendQueries","streams","targets","hide","resolveTemplateVariables","scopedVars","runGrafanaLiveQuery","runGrafanaAPI","annotationDataTopicTest","variablesQuery","nodesQuery","rawFrameQuery","serverErrorQuery","points","point","backendOpts","of","merge","events","buildFakeAnnotationEvents","range","dataFrame","ArrayDataFrame","dataTopic","DataTopic","pipe","delay","timeWalker","from","valueOf","to","tags","annotationQuery","Promise","resolve","getQueryDisplayText","scenario","testDatasource","status","message","getScenarios","scenariosCache","items","getSearchFilterScopedVar","wildcardChar","frames","root","nodesWithoutMaxEdges","maxEdges","sourceIndex","source","additionalEdges","nodeFields","ArrayVector","nodeFrame","MutableDataFrame","Object","keys","edgeFields","edgesFrame","edgesSet","Set","arc__success","arc__errors","edge","has","generateRandomNodes","ex","throwError","getBackendSrv","get","liveQueryCounter","getGrafanaLiveSrv","getDataStream","addr","scope","LiveChannelScope","namespace","TestDataAnnotationsQueryCtrl","plugin","DataSourcePlugin","setConfigEditor","setQueryEditor","datasource","onRunQuery","scenarioList","hideAlias","hideAliasField","includes","onUpdate","currentScenario","checked","onFieldChange","onStreamClientChange","onPulseWaveChange","sort","a","b","localeCompare","showLabels","scenarioSelectContainer","inputId","sc","update","usa","lines","levelColumn","val","ErrorEditor","setAnnotationQueryCtrl","addConfigPage"],"sourceRoot":""}